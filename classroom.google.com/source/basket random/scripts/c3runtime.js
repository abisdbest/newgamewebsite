// Generated by Construct 3, the game and app creator :: https://www.construct.net
'use strict';
"use strict";
(function(e, b) {
    "object" === typeof exports && "undefined" !== typeof module ? b(exports) : "function" === typeof define && define.amd ? define(["exports"], b) : (e = e || self, b(e.glMatrix = {}))
})(this, function(e) {
    function b(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2];
        n = n[3];
        var I = w[0],
            L = w[1],
            M = w[2];
        w = w[3];
        l[0] = B * I + G * L;
        l[1] = D * I + n * L;
        l[2] = B * M + G * w;
        l[3] = D * M + n * w;
        return l
    }

    function a(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        l[3] = n[3] - w[3];
        return l
    }

    function d(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2],
            I = n[3],
            L = n[4];
        n = n[5];
        var M = w[0],
            P = w[1],
            R = w[2],
            T = w[3],
            Z = w[4];
        w = w[5];
        l[0] = B * M + G * P;
        l[1] = D * M + I * P;
        l[2] = B * R + G * T;
        l[3] = D * R + I * T;
        l[4] = B * Z + G * w + L;
        l[5] = D * Z + I * w + n;
        return l
    }

    function c(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        l[3] = n[3] - w[3];
        l[4] = n[4] - w[4];
        l[5] = n[5] - w[5];
        return l
    }

    function f() {
        var l = new na(9);
        na != Float32Array && (l[1] = 0, l[2] = 0, l[3] = 0, l[5] = 0, l[6] = 0, l[7] = 0);
        l[0] = 1;
        l[4] = 1;
        l[8] = 1;
        return l
    }

    function h(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2],
            I = n[3],
            L = n[4],
            M = n[5],
            P = n[6],
            R = n[7];
        n = n[8];
        var T = w[0],
            Z = w[1],
            W = w[2],
            da = w[3],
            ca = w[4],
            aa = w[5],
            ra = w[6],
            ma =
            w[7];
        w = w[8];
        l[0] = T * B + Z * I + W * P;
        l[1] = T * D + Z * L + W * R;
        l[2] = T * G + Z * M + W * n;
        l[3] = da * B + ca * I + aa * P;
        l[4] = da * D + ca * L + aa * R;
        l[5] = da * G + ca * M + aa * n;
        l[6] = ra * B + ma * I + w * P;
        l[7] = ra * D + ma * L + w * R;
        l[8] = ra * G + ma * M + w * n;
        return l
    }

    function g(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        l[3] = n[3] - w[3];
        l[4] = n[4] - w[4];
        l[5] = n[5] - w[5];
        l[6] = n[6] - w[6];
        l[7] = n[7] - w[7];
        l[8] = n[8] - w[8];
        return l
    }

    function k(l) {
        l[0] = 1;
        l[1] = 0;
        l[2] = 0;
        l[3] = 0;
        l[4] = 0;
        l[5] = 1;
        l[6] = 0;
        l[7] = 0;
        l[8] = 0;
        l[9] = 0;
        l[10] = 1;
        l[11] = 0;
        l[12] = 0;
        l[13] = 0;
        l[14] = 0;
        l[15] = 1;
        return l
    }

    function m(l,
        n, w) {
        var B = n[0],
            D = n[1],
            G = n[2],
            I = n[3],
            L = n[4],
            M = n[5],
            P = n[6],
            R = n[7],
            T = n[8],
            Z = n[9],
            W = n[10],
            da = n[11],
            ca = n[12],
            aa = n[13],
            ra = n[14];
        n = n[15];
        var ma = w[0],
            pa = w[1],
            qa = w[2],
            oa = w[3];
        l[0] = ma * B + pa * L + qa * T + oa * ca;
        l[1] = ma * D + pa * M + qa * Z + oa * aa;
        l[2] = ma * G + pa * P + qa * W + oa * ra;
        l[3] = ma * I + pa * R + qa * da + oa * n;
        ma = w[4];
        pa = w[5];
        qa = w[6];
        oa = w[7];
        l[4] = ma * B + pa * L + qa * T + oa * ca;
        l[5] = ma * D + pa * M + qa * Z + oa * aa;
        l[6] = ma * G + pa * P + qa * W + oa * ra;
        l[7] = ma * I + pa * R + qa * da + oa * n;
        ma = w[8];
        pa = w[9];
        qa = w[10];
        oa = w[11];
        l[8] = ma * B + pa * L + qa * T + oa * ca;
        l[9] = ma * D + pa * M + qa * Z + oa * aa;
        l[10] = ma *
            G + pa * P + qa * W + oa * ra;
        l[11] = ma * I + pa * R + qa * da + oa * n;
        ma = w[12];
        pa = w[13];
        qa = w[14];
        oa = w[15];
        l[12] = ma * B + pa * L + qa * T + oa * ca;
        l[13] = ma * D + pa * M + qa * Z + oa * aa;
        l[14] = ma * G + pa * P + qa * W + oa * ra;
        l[15] = ma * I + pa * R + qa * da + oa * n;
        return l
    }

    function p(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2],
            I = n[3],
            L = B + B,
            M = D + D,
            P = G + G;
        n = B * L;
        var R = B * M;
        B *= P;
        var T = D * M;
        D *= P;
        G *= P;
        L *= I;
        M *= I;
        I *= P;
        l[0] = 1 - (T + G);
        l[1] = R + I;
        l[2] = B - M;
        l[3] = 0;
        l[4] = R - I;
        l[5] = 1 - (n + G);
        l[6] = D + L;
        l[7] = 0;
        l[8] = B + M;
        l[9] = D - L;
        l[10] = 1 - (n + T);
        l[11] = 0;
        l[12] = w[0];
        l[13] = w[1];
        l[14] = w[2];
        l[15] = 1;
        return l
    }

    function x(l,
        n) {
        l[0] = n[12];
        l[1] = n[13];
        l[2] = n[14];
        return l
    }

    function t(l, n) {
        var w = n[4],
            B = n[5],
            D = n[6],
            G = n[8],
            I = n[9],
            L = n[10];
        l[0] = Math.hypot(n[0], n[1], n[2]);
        l[1] = Math.hypot(w, B, D);
        l[2] = Math.hypot(G, I, L);
        return l
    }

    function q(l, n) {
        var w = new na(3);
        t(w, n);
        var B = 1 / w[0],
            D = 1 / w[1],
            G = 1 / w[2],
            I = n[0] * B;
        w = n[1] * D;
        var L = n[2] * G,
            M = n[4] * B,
            P = n[5] * D,
            R = n[6] * G;
        B *= n[8];
        D *= n[9];
        n = n[10] * G;
        G = I + P + n;
        0 < G ? (I = 2 * Math.sqrt(G + 1), l[3] = .25 * I, l[0] = (R - D) / I, l[1] = (B - L) / I, l[2] = (w - M) / I) : I > P && I > n ? (I = 2 * Math.sqrt(1 + I - P - n), l[3] = (R - D) / I, l[0] = .25 * I, l[1] = (w + M) / I,
            l[2] = (B + L) / I) : P > n ? (I = 2 * Math.sqrt(1 + P - I - n), l[3] = (B - L) / I, l[0] = (w + M) / I, l[1] = .25 * I, l[2] = (R + D) / I) : (I = 2 * Math.sqrt(1 + n - I - P), l[3] = (w - M) / I, l[0] = (B + L) / I, l[1] = (R + D) / I, l[2] = .25 * I);
        return l
    }

    function r(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        l[3] = n[3] - w[3];
        l[4] = n[4] - w[4];
        l[5] = n[5] - w[5];
        l[6] = n[6] - w[6];
        l[7] = n[7] - w[7];
        l[8] = n[8] - w[8];
        l[9] = n[9] - w[9];
        l[10] = n[10] - w[10];
        l[11] = n[11] - w[11];
        l[12] = n[12] - w[12];
        l[13] = n[13] - w[13];
        l[14] = n[14] - w[14];
        l[15] = n[15] - w[15];
        return l
    }

    function y() {
        var l = new na(3);
        na != Float32Array &&
            (l[0] = 0, l[1] = 0, l[2] = 0);
        return l
    }

    function v(l) {
        return Math.hypot(l[0], l[1], l[2])
    }

    function u(l, n, w) {
        var B = new na(3);
        B[0] = l;
        B[1] = n;
        B[2] = w;
        return B
    }

    function A(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        return l
    }

    function z(l, n, w) {
        l[0] = n[0] * w[0];
        l[1] = n[1] * w[1];
        l[2] = n[2] * w[2];
        return l
    }

    function C(l, n, w) {
        l[0] = n[0] / w[0];
        l[1] = n[1] / w[1];
        l[2] = n[2] / w[2];
        return l
    }

    function E(l, n) {
        return Math.hypot(n[0] - l[0], n[1] - l[1], n[2] - l[2])
    }

    function J(l, n) {
        var w = n[0] - l[0],
            B = n[1] - l[1];
        l = n[2] - l[2];
        return w * w + B * B + l * l
    }

    function F(l) {
        var n =
            l[0],
            w = l[1];
        l = l[2];
        return n * n + w * w + l * l
    }

    function H(l, n) {
        var w = n[0],
            B = n[1],
            D = n[2];
        w = w * w + B * B + D * D;
        0 < w && (w = 1 / Math.sqrt(w));
        l[0] = n[0] * w;
        l[1] = n[1] * w;
        l[2] = n[2] * w;
        return l
    }

    function K(l, n) {
        return l[0] * n[0] + l[1] * n[1] + l[2] * n[2]
    }

    function N(l, n, w) {
        var B = n[0],
            D = n[1];
        n = n[2];
        var G = w[0],
            I = w[1];
        w = w[2];
        l[0] = D * w - n * I;
        l[1] = n * G - B * w;
        l[2] = B * I - D * G;
        return l
    }

    function S() {
        var l = new na(4);
        na != Float32Array && (l[0] = 0, l[1] = 0, l[2] = 0, l[3] = 0);
        return l
    }

    function V(l) {
        var n = new na(4);
        n[0] = l[0];
        n[1] = l[1];
        n[2] = l[2];
        n[3] = l[3];
        return n
    }

    function U(l,
        n, w, B) {
        var D = new na(4);
        D[0] = l;
        D[1] = n;
        D[2] = w;
        D[3] = B;
        return D
    }

    function X(l, n) {
        l[0] = n[0];
        l[1] = n[1];
        l[2] = n[2];
        l[3] = n[3];
        return l
    }

    function ia(l, n, w, B, D) {
        l[0] = n;
        l[1] = w;
        l[2] = B;
        l[3] = D;
        return l
    }

    function ka(l, n, w) {
        l[0] = n[0] + w[0];
        l[1] = n[1] + w[1];
        l[2] = n[2] + w[2];
        l[3] = n[3] + w[3];
        return l
    }

    function ya(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        l[2] = n[2] - w[2];
        l[3] = n[3] - w[3];
        return l
    }

    function ta(l, n, w) {
        l[0] = n[0] * w[0];
        l[1] = n[1] * w[1];
        l[2] = n[2] * w[2];
        l[3] = n[3] * w[3];
        return l
    }

    function Ba(l, n, w) {
        l[0] = n[0] / w[0];
        l[1] = n[1] / w[1];
        l[2] =
            n[2] / w[2];
        l[3] = n[3] / w[3];
        return l
    }

    function Ea(l, n, w) {
        l[0] = n[0] * w;
        l[1] = n[1] * w;
        l[2] = n[2] * w;
        l[3] = n[3] * w;
        return l
    }

    function Ca(l, n) {
        return Math.hypot(n[0] - l[0], n[1] - l[1], n[2] - l[2], n[3] - l[3])
    }

    function Aa(l, n) {
        var w = n[0] - l[0],
            B = n[1] - l[1],
            D = n[2] - l[2];
        l = n[3] - l[3];
        return w * w + B * B + D * D + l * l
    }

    function ja(l) {
        return Math.hypot(l[0], l[1], l[2], l[3])
    }

    function Fa(l) {
        var n = l[0],
            w = l[1],
            B = l[2];
        l = l[3];
        return n * n + w * w + B * B + l * l
    }

    function wa(l, n) {
        var w = n[0],
            B = n[1],
            D = n[2];
        n = n[3];
        var G = w * w + B * B + D * D + n * n;
        0 < G && (G = 1 / Math.sqrt(G));
        l[0] =
            w * G;
        l[1] = B * G;
        l[2] = D * G;
        l[3] = n * G;
        return l
    }

    function Da(l, n) {
        return l[0] * n[0] + l[1] * n[1] + l[2] * n[2] + l[3] * n[3]
    }

    function Pa(l, n, w, B) {
        var D = n[0],
            G = n[1],
            I = n[2];
        n = n[3];
        l[0] = D + B * (w[0] - D);
        l[1] = G + B * (w[1] - G);
        l[2] = I + B * (w[2] - I);
        l[3] = n + B * (w[3] - n);
        return l
    }

    function Qa(l, n) {
        return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3]
    }

    function Ra(l, n) {
        var w = l[0],
            B = l[1],
            D = l[2];
        l = l[3];
        var G = n[0],
            I = n[1],
            L = n[2];
        n = n[3];
        return Math.abs(w - G) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(G)) && Math.abs(B - I) <= 1E-6 * Math.max(1, Math.abs(B),
            Math.abs(I)) && Math.abs(D - L) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(L)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
    }

    function Ja() {
        var l = new na(4);
        na != Float32Array && (l[0] = 0, l[1] = 0, l[2] = 0);
        l[3] = 1;
        return l
    }

    function Sa(l, n, w) {
        w *= .5;
        var B = Math.sin(w);
        l[0] = B * n[0];
        l[1] = B * n[1];
        l[2] = B * n[2];
        l[3] = Math.cos(w);
        return l
    }

    function Ta(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2];
        n = n[3];
        var I = w[0],
            L = w[1],
            M = w[2];
        w = w[3];
        l[0] = B * w + n * I + D * M - G * L;
        l[1] = D * w + n * L + G * I - B * M;
        l[2] = G * w + n * M + B * L - D * I;
        l[3] = n * w - B * I - D * L - G * M;
        return l
    }

    function Ua(l,
        n, w) {
        w *= .5;
        var B = n[0],
            D = n[1],
            G = n[2];
        n = n[3];
        var I = Math.sin(w);
        w = Math.cos(w);
        l[0] = B * w + n * I;
        l[1] = D * w + G * I;
        l[2] = G * w - D * I;
        l[3] = n * w - B * I;
        return l
    }

    function Va(l, n, w) {
        w *= .5;
        var B = n[0],
            D = n[1],
            G = n[2];
        n = n[3];
        var I = Math.sin(w);
        w = Math.cos(w);
        l[0] = B * w - G * I;
        l[1] = D * w + n * I;
        l[2] = G * w + B * I;
        l[3] = n * w - D * I;
        return l
    }

    function Wa(l, n, w) {
        w *= .5;
        var B = n[0],
            D = n[1],
            G = n[2];
        n = n[3];
        var I = Math.sin(w);
        w = Math.cos(w);
        l[0] = B * w + D * I;
        l[1] = D * w - B * I;
        l[2] = G * w + n * I;
        l[3] = n * w - G * I;
        return l
    }

    function Xa(l, n) {
        var w = n[0],
            B = n[1],
            D = n[2],
            G = Math.sqrt(w * w + B * B + D * D);
        n = Math.exp(n[3]);
        var I = 0 < G ? n * Math.sin(G) / G : 0;
        l[0] = w * I;
        l[1] = B * I;
        l[2] = D * I;
        l[3] = n * Math.cos(G);
        return l
    }

    function Ya(l, n) {
        var w = n[0],
            B = n[1],
            D = n[2];
        n = n[3];
        var G = Math.sqrt(w * w + B * B + D * D);
        G = 0 < G ? Math.atan2(G, n) / G : 0;
        l[0] = w * G;
        l[1] = B * G;
        l[2] = D * G;
        l[3] = .5 * Math.log(w * w + B * B + D * D + n * n);
        return l
    }

    function Ka(l, n, w, B) {
        var D = n[0],
            G = n[1],
            I = n[2];
        n = n[3];
        var L = w[0],
            M = w[1],
            P = w[2];
        w = w[3];
        var R = D * L + G * M + I * P + n * w;
        0 > R && (R = -R, L = -L, M = -M, P = -P, w = -w);
        if(1E-6 < 1 - R) {
            var T = Math.acos(R);
            var Z = Math.sin(T);
            R = Math.sin((1 - B) * T) / Z;
            B = Math.sin(B * T) /
                Z
        } else R = 1 - B;
        l[0] = R * D + B * L;
        l[1] = R * G + B * M;
        l[2] = R * I + B * P;
        l[3] = R * n + B * w;
        return l
    }

    function Za(l, n) {
        var w = n[0] + n[4] + n[8];
        if(0 < w) w = Math.sqrt(w + 1), l[3] = .5 * w, w = .5 / w, l[0] = (n[5] - n[7]) * w, l[1] = (n[6] - n[2]) * w, l[2] = (n[1] - n[3]) * w;
        else {
            var B = 0;
            n[4] > n[0] && (B = 1);
            n[8] > n[3 * B + B] && (B = 2);
            var D = (B + 1) % 3,
                G = (B + 2) % 3;
            w = Math.sqrt(n[3 * B + B] - n[3 * D + D] - n[3 * G + G] + 1);
            l[B] = .5 * w;
            w = .5 / w;
            l[3] = (n[3 * D + G] - n[3 * G + D]) * w;
            l[D] = (n[3 * D + B] + n[3 * B + D]) * w;
            l[G] = (n[3 * G + B] + n[3 * B + G]) * w
        }
        return l
    }

    function $a(l, n, w) {
        var B = .5 * w[0],
            D = .5 * w[1];
        w = .5 * w[2];
        var G = n[0],
            I = n[1],
            L = n[2];
        n = n[3];
        l[0] = G;
        l[1] = I;
        l[2] = L;
        l[3] = n;
        l[4] = B * n + D * L - w * I;
        l[5] = D * n + w * G - B * L;
        l[6] = w * n + B * I - D * G;
        l[7] = -B * G - D * I - w * L;
        return l
    }

    function ab(l, n) {
        l[0] = n[0];
        l[1] = n[1];
        l[2] = n[2];
        l[3] = n[3];
        l[4] = n[4];
        l[5] = n[5];
        l[6] = n[6];
        l[7] = n[7];
        return l
    }

    function bb(l, n, w) {
        var B = n[0],
            D = n[1],
            G = n[2],
            I = n[3],
            L = w[4],
            M = w[5],
            P = w[6],
            R = w[7],
            T = n[4],
            Z = n[5],
            W = n[6];
        n = n[7];
        var da = w[0],
            ca = w[1],
            aa = w[2];
        w = w[3];
        l[0] = B * w + I * da + D * aa - G * ca;
        l[1] = D * w + I * ca + G * da - B * aa;
        l[2] = G * w + I * aa + B * ca - D * da;
        l[3] = I * w - B * da - D * ca - G * aa;
        l[4] = B * R + I * L + D * P - G * M + T * w + n * da + Z * aa - W *
            ca;
        l[5] = D * R + I * M + G * L - B * P + Z * w + n * ca + W * da - T * aa;
        l[6] = G * R + I * P + B * M - D * L + W * w + n * aa + T * ca - Z * da;
        l[7] = I * R - B * L - D * M - G * P + n * w - T * da - Z * ca - W * aa;
        return l
    }

    function cb() {
        var l = new na(2);
        na != Float32Array && (l[0] = 0, l[1] = 0);
        return l
    }

    function db(l, n, w) {
        l[0] = n[0] - w[0];
        l[1] = n[1] - w[1];
        return l
    }

    function eb(l, n, w) {
        l[0] = n[0] * w[0];
        l[1] = n[1] * w[1];
        return l
    }

    function fb(l, n, w) {
        l[0] = n[0] / w[0];
        l[1] = n[1] / w[1];
        return l
    }

    function gb(l, n) {
        return Math.hypot(n[0] - l[0], n[1] - l[1])
    }

    function hb(l, n) {
        var w = n[0] - l[0];
        l = n[1] - l[1];
        return w * w + l * l
    }

    function ib(l) {
        return Math.hypot(l[0],
            l[1])
    }

    function jb(l) {
        var n = l[0];
        l = l[1];
        return n * n + l * l
    }
    var na = "undefined" !== typeof Float32Array ? Float32Array : Array,
        Ga = Math.random,
        kb = Math.PI / 180;
    Math.hypot || (Math.hypot = function() {
        for(var l = 0, n = arguments.length; n--;) l += arguments[n] * arguments[n];
        return Math.sqrt(l)
    });
    var lb = Object.freeze({
            __proto__: null,
            EPSILON: 1E-6,
            get ARRAY_TYPE() {
                return na
            },
            RANDOM: Ga,
            setMatrixArrayType: function(l) {
                na = l
            },
            toRadian: function(l) {
                return l * kb
            },
            equals: function(l, n) {
                return Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
            }
        }),
        mb = Object.freeze({
            __proto__: null,
            create: function() {
                var l = new na(4);
                na != Float32Array && (l[1] = 0, l[2] = 0);
                l[0] = 1;
                l[3] = 1;
                return l
            },
            clone: function(l) {
                var n = new na(4);
                n[0] = l[0];
                n[1] = l[1];
                n[2] = l[2];
                n[3] = l[3];
                return n
            },
            copy: function(l, n) {
                l[0] = n[0];
                l[1] = n[1];
                l[2] = n[2];
                l[3] = n[3];
                return l
            },
            identity: function(l) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 1;
                return l
            },
            fromValues: function(l, n, w, B) {
                var D = new na(4);
                D[0] = l;
                D[1] = n;
                D[2] = w;
                D[3] = B;
                return D
            },
            set: function(l, n, w, B, D) {
                l[0] = n;
                l[1] = w;
                l[2] = B;
                l[3] = D;
                return l
            },
            transpose: function(l,
                n) {
                if(l === n) {
                    var w = n[1];
                    l[1] = n[2];
                    l[2] = w
                } else l[0] = n[0], l[1] = n[2], l[2] = n[1], l[3] = n[3];
                return l
            },
            invert: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2];
                n = n[3];
                var G = w * n - D * B;
                if(!G) return null;
                G = 1 / G;
                l[0] = n * G;
                l[1] = -B * G;
                l[2] = -D * G;
                l[3] = w * G;
                return l
            },
            adjoint: function(l, n) {
                var w = n[0];
                l[0] = n[3];
                l[1] = -n[1];
                l[2] = -n[2];
                l[3] = w;
                return l
            },
            determinant: function(l) {
                return l[0] * l[3] - l[2] * l[1]
            },
            multiply: b,
            rotate: function(l, n, w) {
                var B = n[0],
                    D = n[1],
                    G = n[2];
                n = n[3];
                var I = Math.sin(w);
                w = Math.cos(w);
                l[0] = B * w + G * I;
                l[1] = D * w + n * I;
                l[2] = B * -I +
                    G * w;
                l[3] = D * -I + n * w;
                return l
            },
            scale: function(l, n, w) {
                var B = n[1],
                    D = n[2],
                    G = n[3],
                    I = w[0];
                w = w[1];
                l[0] = n[0] * I;
                l[1] = B * I;
                l[2] = D * w;
                l[3] = G * w;
                return l
            },
            fromRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = n;
                l[1] = w;
                l[2] = -w;
                l[3] = n;
                return l
            },
            fromScaling: function(l, n) {
                l[0] = n[0];
                l[1] = 0;
                l[2] = 0;
                l[3] = n[1];
                return l
            },
            str: function(l) {
                return "mat2(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ")"
            },
            frob: function(l) {
                return Math.hypot(l[0], l[1], l[2], l[3])
            },
            LDU: function(l, n, w, B) {
                l[2] = B[2] / B[0];
                w[0] = B[0];
                w[1] = B[1];
                w[3] = B[3] - l[2] *
                    w[1];
                return [l, n, w]
            },
            add: function(l, n, w) {
                l[0] = n[0] + w[0];
                l[1] = n[1] + w[1];
                l[2] = n[2] + w[2];
                l[3] = n[3] + w[3];
                return l
            },
            subtract: a,
            exactEquals: function(l, n) {
                return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3]
            },
            equals: function(l, n) {
                var w = l[0],
                    B = l[1],
                    D = l[2];
                l = l[3];
                var G = n[0],
                    I = n[1],
                    L = n[2];
                n = n[3];
                return Math.abs(w - G) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(G)) && Math.abs(B - I) <= 1E-6 * Math.max(1, Math.abs(B), Math.abs(I)) && Math.abs(D - L) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(L)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l),
                    Math.abs(n))
            },
            multiplyScalar: function(l, n, w) {
                l[0] = n[0] * w;
                l[1] = n[1] * w;
                l[2] = n[2] * w;
                l[3] = n[3] * w;
                return l
            },
            multiplyScalarAndAdd: function(l, n, w, B) {
                l[0] = n[0] + w[0] * B;
                l[1] = n[1] + w[1] * B;
                l[2] = n[2] + w[2] * B;
                l[3] = n[3] + w[3] * B;
                return l
            },
            mul: b,
            sub: a
        }),
        nb = Object.freeze({
            __proto__: null,
            create: function() {
                var l = new na(6);
                na != Float32Array && (l[1] = 0, l[2] = 0, l[4] = 0, l[5] = 0);
                l[0] = 1;
                l[3] = 1;
                return l
            },
            clone: function(l) {
                var n = new na(6);
                n[0] = l[0];
                n[1] = l[1];
                n[2] = l[2];
                n[3] = l[3];
                n[4] = l[4];
                n[5] = l[5];
                return n
            },
            copy: function(l, n) {
                l[0] =
                    n[0];
                l[1] = n[1];
                l[2] = n[2];
                l[3] = n[3];
                l[4] = n[4];
                l[5] = n[5];
                return l
            },
            identity: function(l) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 1;
                l[4] = 0;
                l[5] = 0;
                return l
            },
            fromValues: function(l, n, w, B, D, G) {
                var I = new na(6);
                I[0] = l;
                I[1] = n;
                I[2] = w;
                I[3] = B;
                I[4] = D;
                I[5] = G;
                return I
            },
            set: function(l, n, w, B, D, G, I) {
                l[0] = n;
                l[1] = w;
                l[2] = B;
                l[3] = D;
                l[4] = G;
                l[5] = I;
                return l
            },
            invert: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4];
                n = n[5];
                var L = w * G - B * D;
                if(!L) return null;
                L = 1 / L;
                l[0] = G * L;
                l[1] = -B * L;
                l[2] = -D * L;
                l[3] = w * L;
                l[4] = (D * n - G * I) * L;
                l[5] = (B * I - w * n) * L;
                return l
            },
            determinant: function(l) {
                return l[0] * l[3] - l[1] * l[2]
            },
            multiply: d,
            rotate: function(l, n, w) {
                var B = n[0],
                    D = n[1],
                    G = n[2],
                    I = n[3],
                    L = n[4];
                n = n[5];
                var M = Math.sin(w);
                w = Math.cos(w);
                l[0] = B * w + G * M;
                l[1] = D * w + I * M;
                l[2] = B * -M + G * w;
                l[3] = D * -M + I * w;
                l[4] = L;
                l[5] = n;
                return l
            },
            scale: function(l, n, w) {
                var B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = w[0];
                w = w[1];
                l[0] = n[0] * M;
                l[1] = B * M;
                l[2] = D * w;
                l[3] = G * w;
                l[4] = I;
                l[5] = L;
                return l
            },
            translate: function(l, n, w) {
                var B = n[0],
                    D = n[1],
                    G = n[2],
                    I = n[3],
                    L = n[4];
                n = n[5];
                var M = w[0];
                w = w[1];
                l[0] = B;
                l[1] = D;
                l[2] = G;
                l[3] = I;
                l[4] =
                    B * M + G * w + L;
                l[5] = D * M + I * w + n;
                return l
            },
            fromRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = n;
                l[1] = w;
                l[2] = -w;
                l[3] = n;
                l[4] = 0;
                l[5] = 0;
                return l
            },
            fromScaling: function(l, n) {
                l[0] = n[0];
                l[1] = 0;
                l[2] = 0;
                l[3] = n[1];
                l[4] = 0;
                l[5] = 0;
                return l
            },
            fromTranslation: function(l, n) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 1;
                l[4] = n[0];
                l[5] = n[1];
                return l
            },
            str: function(l) {
                return "mat2d(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ", " + l[4] + ", " + l[5] + ")"
            },
            frob: function(l) {
                return Math.hypot(l[0], l[1], l[2], l[3], l[4], l[5], 1)
            },
            add: function(l, n, w) {
                l[0] =
                    n[0] + w[0];
                l[1] = n[1] + w[1];
                l[2] = n[2] + w[2];
                l[3] = n[3] + w[3];
                l[4] = n[4] + w[4];
                l[5] = n[5] + w[5];
                return l
            },
            subtract: c,
            multiplyScalar: function(l, n, w) {
                l[0] = n[0] * w;
                l[1] = n[1] * w;
                l[2] = n[2] * w;
                l[3] = n[3] * w;
                l[4] = n[4] * w;
                l[5] = n[5] * w;
                return l
            },
            multiplyScalarAndAdd: function(l, n, w, B) {
                l[0] = n[0] + w[0] * B;
                l[1] = n[1] + w[1] * B;
                l[2] = n[2] + w[2] * B;
                l[3] = n[3] + w[3] * B;
                l[4] = n[4] + w[4] * B;
                l[5] = n[5] + w[5] * B;
                return l
            },
            exactEquals: function(l, n) {
                return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3] && l[4] === n[4] && l[5] === n[5]
            },
            equals: function(l, n) {
                var w =
                    l[0],
                    B = l[1],
                    D = l[2],
                    G = l[3],
                    I = l[4];
                l = l[5];
                var L = n[0],
                    M = n[1],
                    P = n[2],
                    R = n[3],
                    T = n[4];
                n = n[5];
                return Math.abs(w - L) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(L)) && Math.abs(B - M) <= 1E-6 * Math.max(1, Math.abs(B), Math.abs(M)) && Math.abs(D - P) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(P)) && Math.abs(G - R) <= 1E-6 * Math.max(1, Math.abs(G), Math.abs(R)) && Math.abs(I - T) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(T)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
            },
            mul: d,
            sub: c
        }),
        ob = Object.freeze({
            __proto__: null,
            create: f,
            fromMat4: function(l,
                n) {
                l[0] = n[0];
                l[1] = n[1];
                l[2] = n[2];
                l[3] = n[4];
                l[4] = n[5];
                l[5] = n[6];
                l[6] = n[8];
                l[7] = n[9];
                l[8] = n[10];
                return l
            },
            clone: function(l) {
                var n = new na(9);
                n[0] = l[0];
                n[1] = l[1];
                n[2] = l[2];
                n[3] = l[3];
                n[4] = l[4];
                n[5] = l[5];
                n[6] = l[6];
                n[7] = l[7];
                n[8] = l[8];
                return n
            },
            copy: function(l, n) {
                l[0] = n[0];
                l[1] = n[1];
                l[2] = n[2];
                l[3] = n[3];
                l[4] = n[4];
                l[5] = n[5];
                l[6] = n[6];
                l[7] = n[7];
                l[8] = n[8];
                return l
            },
            fromValues: function(l, n, w, B, D, G, I, L, M) {
                var P = new na(9);
                P[0] = l;
                P[1] = n;
                P[2] = w;
                P[3] = B;
                P[4] = D;
                P[5] = G;
                P[6] = I;
                P[7] = L;
                P[8] = M;
                return P
            },
            set: function(l, n,
                w, B, D, G, I, L, M, P) {
                l[0] = n;
                l[1] = w;
                l[2] = B;
                l[3] = D;
                l[4] = G;
                l[5] = I;
                l[6] = L;
                l[7] = M;
                l[8] = P;
                return l
            },
            identity: function(l) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 1;
                l[5] = 0;
                l[6] = 0;
                l[7] = 0;
                l[8] = 1;
                return l
            },
            transpose: function(l, n) {
                if(l === n) {
                    var w = n[1],
                        B = n[2],
                        D = n[5];
                    l[1] = n[3];
                    l[2] = n[6];
                    l[3] = w;
                    l[5] = n[7];
                    l[6] = B;
                    l[7] = D
                } else l[0] = n[0], l[1] = n[3], l[2] = n[6], l[3] = n[1], l[4] = n[4], l[5] = n[7], l[6] = n[2], l[7] = n[5], l[8] = n[8];
                return l
            },
            invert: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = n[6],
                    P = n[7];
                n = n[8];
                var R = n * I - L * P,
                    T = -n * G + L * M,
                    Z = P * G - I * M,
                    W = w * R + B * T + D * Z;
                if(!W) return null;
                W = 1 / W;
                l[0] = R * W;
                l[1] = (-n * B + D * P) * W;
                l[2] = (L * B - D * I) * W;
                l[3] = T * W;
                l[4] = (n * w - D * M) * W;
                l[5] = (-L * w + D * G) * W;
                l[6] = Z * W;
                l[7] = (-P * w + B * M) * W;
                l[8] = (I * w - B * G) * W;
                return l
            },
            adjoint: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = n[6],
                    P = n[7];
                n = n[8];
                l[0] = I * n - L * P;
                l[1] = D * P - B * n;
                l[2] = B * L - D * I;
                l[3] = L * M - G * n;
                l[4] = w * n - D * M;
                l[5] = D * G - w * L;
                l[6] = G * P - I * M;
                l[7] = B * M - w * P;
                l[8] = w * I - B * G;
                return l
            },
            determinant: function(l) {
                var n = l[3],
                    w = l[4],
                    B = l[5],
                    D = l[6],
                    G = l[7],
                    I = l[8];
                return l[0] * (I *
                    w - B * G) + l[1] * (-I * n + B * D) + l[2] * (G * n - w * D)
            },
            multiply: h,
            translate: function(l, n, w) {
                var B = n[0],
                    D = n[1],
                    G = n[2],
                    I = n[3],
                    L = n[4],
                    M = n[5],
                    P = n[6],
                    R = n[7];
                n = n[8];
                var T = w[0];
                w = w[1];
                l[0] = B;
                l[1] = D;
                l[2] = G;
                l[3] = I;
                l[4] = L;
                l[5] = M;
                l[6] = T * B + w * I + P;
                l[7] = T * D + w * L + R;
                l[8] = T * G + w * M + n;
                return l
            },
            rotate: function(l, n, w) {
                var B = n[0],
                    D = n[1],
                    G = n[2],
                    I = n[3],
                    L = n[4],
                    M = n[5],
                    P = n[6],
                    R = n[7];
                n = n[8];
                var T = Math.sin(w);
                w = Math.cos(w);
                l[0] = w * B + T * I;
                l[1] = w * D + T * L;
                l[2] = w * G + T * M;
                l[3] = w * I - T * B;
                l[4] = w * L - T * D;
                l[5] = w * M - T * G;
                l[6] = P;
                l[7] = R;
                l[8] = n;
                return l
            },
            scale: function(l,
                n, w) {
                var B = w[0];
                w = w[1];
                l[0] = B * n[0];
                l[1] = B * n[1];
                l[2] = B * n[2];
                l[3] = w * n[3];
                l[4] = w * n[4];
                l[5] = w * n[5];
                l[6] = n[6];
                l[7] = n[7];
                l[8] = n[8];
                return l
            },
            fromTranslation: function(l, n) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 1;
                l[5] = 0;
                l[6] = n[0];
                l[7] = n[1];
                l[8] = 1;
                return l
            },
            fromRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = n;
                l[1] = w;
                l[2] = 0;
                l[3] = -w;
                l[4] = n;
                l[5] = 0;
                l[6] = 0;
                l[7] = 0;
                l[8] = 1;
                return l
            },
            fromScaling: function(l, n) {
                l[0] = n[0];
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = n[1];
                l[5] = 0;
                l[6] = 0;
                l[7] = 0;
                l[8] = 1;
                return l
            },
            fromMat2d: function(l,
                n) {
                l[0] = n[0];
                l[1] = n[1];
                l[2] = 0;
                l[3] = n[2];
                l[4] = n[3];
                l[5] = 0;
                l[6] = n[4];
                l[7] = n[5];
                l[8] = 1;
                return l
            },
            fromQuat: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2];
                n = n[3];
                var G = w + w,
                    I = B + B,
                    L = D + D;
                w *= G;
                var M = B * G;
                B *= I;
                var P = D * G,
                    R = D * I;
                D *= L;
                G *= n;
                I *= n;
                n *= L;
                l[0] = 1 - B - D;
                l[3] = M - n;
                l[6] = P + I;
                l[1] = M + n;
                l[4] = 1 - w - D;
                l[7] = R - G;
                l[2] = P - I;
                l[5] = R + G;
                l[8] = 1 - w - B;
                return l
            },
            normalFromMat4: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = n[6],
                    P = n[7],
                    R = n[8],
                    T = n[9],
                    Z = n[10],
                    W = n[11],
                    da = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                var ra = w * L - B * I,
                    ma = w * M - D *
                    I,
                    pa = w * P - G * I,
                    qa = B * M - D * L,
                    oa = B * P - G * L,
                    za = D * P - G * M,
                    O = R * ca - T * da,
                    Q = R * aa - Z * da;
                R = R * n - W * da;
                var Y = T * aa - Z * ca;
                T = T * n - W * ca;
                Z = Z * n - W * aa;
                W = ra * Z - ma * T + pa * Y + qa * R - oa * Q + za * O;
                if(!W) return null;
                W = 1 / W;
                l[0] = (L * Z - M * T + P * Y) * W;
                l[1] = (M * R - I * Z - P * Q) * W;
                l[2] = (I * T - L * R + P * O) * W;
                l[3] = (D * T - B * Z - G * Y) * W;
                l[4] = (w * Z - D * R + G * Q) * W;
                l[5] = (B * R - w * T - G * O) * W;
                l[6] = (ca * za - aa * oa + n * qa) * W;
                l[7] = (aa * pa - da * za - n * ma) * W;
                l[8] = (da * oa - ca * pa + n * ra) * W;
                return l
            },
            projection: function(l, n, w) {
                l[0] = 2 / n;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = -2 / w;
                l[5] = 0;
                l[6] = -1;
                l[7] = 1;
                l[8] = 1;
                return l
            },
            str: function(l) {
                return "mat3(" +
                    l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ", " + l[4] + ", " + l[5] + ", " + l[6] + ", " + l[7] + ", " + l[8] + ")"
            },
            frob: function(l) {
                return Math.hypot(l[0], l[1], l[2], l[3], l[4], l[5], l[6], l[7], l[8])
            },
            add: function(l, n, w) {
                l[0] = n[0] + w[0];
                l[1] = n[1] + w[1];
                l[2] = n[2] + w[2];
                l[3] = n[3] + w[3];
                l[4] = n[4] + w[4];
                l[5] = n[5] + w[5];
                l[6] = n[6] + w[6];
                l[7] = n[7] + w[7];
                l[8] = n[8] + w[8];
                return l
            },
            subtract: g,
            multiplyScalar: function(l, n, w) {
                l[0] = n[0] * w;
                l[1] = n[1] * w;
                l[2] = n[2] * w;
                l[3] = n[3] * w;
                l[4] = n[4] * w;
                l[5] = n[5] * w;
                l[6] = n[6] * w;
                l[7] = n[7] * w;
                l[8] = n[8] * w;
                return l
            },
            multiplyScalarAndAdd: function(l,
                n, w, B) {
                l[0] = n[0] + w[0] * B;
                l[1] = n[1] + w[1] * B;
                l[2] = n[2] + w[2] * B;
                l[3] = n[3] + w[3] * B;
                l[4] = n[4] + w[4] * B;
                l[5] = n[5] + w[5] * B;
                l[6] = n[6] + w[6] * B;
                l[7] = n[7] + w[7] * B;
                l[8] = n[8] + w[8] * B;
                return l
            },
            exactEquals: function(l, n) {
                return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3] && l[4] === n[4] && l[5] === n[5] && l[6] === n[6] && l[7] === n[7] && l[8] === n[8]
            },
            equals: function(l, n) {
                var w = l[0],
                    B = l[1],
                    D = l[2],
                    G = l[3],
                    I = l[4],
                    L = l[5],
                    M = l[6],
                    P = l[7];
                l = l[8];
                var R = n[0],
                    T = n[1],
                    Z = n[2],
                    W = n[3],
                    da = n[4],
                    ca = n[5],
                    aa = n[6],
                    ra = n[7];
                n = n[8];
                return Math.abs(w - R) <=
                    1E-6 * Math.max(1, Math.abs(w), Math.abs(R)) && Math.abs(B - T) <= 1E-6 * Math.max(1, Math.abs(B), Math.abs(T)) && Math.abs(D - Z) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(Z)) && Math.abs(G - W) <= 1E-6 * Math.max(1, Math.abs(G), Math.abs(W)) && Math.abs(I - da) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(da)) && Math.abs(L - ca) <= 1E-6 * Math.max(1, Math.abs(L), Math.abs(ca)) && Math.abs(M - aa) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(aa)) && Math.abs(P - ra) <= 1E-6 * Math.max(1, Math.abs(P), Math.abs(ra)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
            },
            mul: h,
            sub: g
        }),
        pb = Object.freeze({
            __proto__: null,
            create: function() {
                var l = new na(16);
                na != Float32Array && (l[1] = 0, l[2] = 0, l[3] = 0, l[4] = 0, l[6] = 0, l[7] = 0, l[8] = 0, l[9] = 0, l[11] = 0, l[12] = 0, l[13] = 0, l[14] = 0);
                l[0] = 1;
                l[5] = 1;
                l[10] = 1;
                l[15] = 1;
                return l
            },
            clone: function(l) {
                var n = new na(16);
                n[0] = l[0];
                n[1] = l[1];
                n[2] = l[2];
                n[3] = l[3];
                n[4] = l[4];
                n[5] = l[5];
                n[6] = l[6];
                n[7] = l[7];
                n[8] = l[8];
                n[9] = l[9];
                n[10] = l[10];
                n[11] = l[11];
                n[12] = l[12];
                n[13] = l[13];
                n[14] = l[14];
                n[15] = l[15];
                return n
            },
            copy: function(l, n) {
                l[0] = n[0];
                l[1] = n[1];
                l[2] = n[2];
                l[3] =
                    n[3];
                l[4] = n[4];
                l[5] = n[5];
                l[6] = n[6];
                l[7] = n[7];
                l[8] = n[8];
                l[9] = n[9];
                l[10] = n[10];
                l[11] = n[11];
                l[12] = n[12];
                l[13] = n[13];
                l[14] = n[14];
                l[15] = n[15];
                return l
            },
            fromValues: function(l, n, w, B, D, G, I, L, M, P, R, T, Z, W, da, ca) {
                var aa = new na(16);
                aa[0] = l;
                aa[1] = n;
                aa[2] = w;
                aa[3] = B;
                aa[4] = D;
                aa[5] = G;
                aa[6] = I;
                aa[7] = L;
                aa[8] = M;
                aa[9] = P;
                aa[10] = R;
                aa[11] = T;
                aa[12] = Z;
                aa[13] = W;
                aa[14] = da;
                aa[15] = ca;
                return aa
            },
            set: function(l, n, w, B, D, G, I, L, M, P, R, T, Z, W, da, ca, aa) {
                l[0] = n;
                l[1] = w;
                l[2] = B;
                l[3] = D;
                l[4] = G;
                l[5] = I;
                l[6] = L;
                l[7] = M;
                l[8] = P;
                l[9] = R;
                l[10] = T;
                l[11] =
                    Z;
                l[12] = W;
                l[13] = da;
                l[14] = ca;
                l[15] = aa;
                return l
            },
            identity: k,
            transpose: function(l, n) {
                if(l === n) {
                    var w = n[1],
                        B = n[2],
                        D = n[3],
                        G = n[6],
                        I = n[7],
                        L = n[11];
                    l[1] = n[4];
                    l[2] = n[8];
                    l[3] = n[12];
                    l[4] = w;
                    l[6] = n[9];
                    l[7] = n[13];
                    l[8] = B;
                    l[9] = G;
                    l[11] = n[14];
                    l[12] = D;
                    l[13] = I;
                    l[14] = L
                } else l[0] = n[0], l[1] = n[4], l[2] = n[8], l[3] = n[12], l[4] = n[1], l[5] = n[5], l[6] = n[9], l[7] = n[13], l[8] = n[2], l[9] = n[6], l[10] = n[10], l[11] = n[14], l[12] = n[3], l[13] = n[7], l[14] = n[11], l[15] = n[15];
                return l
            },
            invert: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = n[6],
                    P = n[7],
                    R = n[8],
                    T = n[9],
                    Z = n[10],
                    W = n[11],
                    da = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                var ra = w * L - B * I,
                    ma = w * M - D * I,
                    pa = w * P - G * I,
                    qa = B * M - D * L,
                    oa = B * P - G * L,
                    za = D * P - G * M,
                    O = R * ca - T * da,
                    Q = R * aa - Z * da,
                    Y = R * n - W * da,
                    ba = T * aa - Z * ca,
                    fa = T * n - W * ca,
                    ha = Z * n - W * aa,
                    ea = ra * ha - ma * fa + pa * ba + qa * Y - oa * Q + za * O;
                if(!ea) return null;
                ea = 1 / ea;
                l[0] = (L * ha - M * fa + P * ba) * ea;
                l[1] = (D * fa - B * ha - G * ba) * ea;
                l[2] = (ca * za - aa * oa + n * qa) * ea;
                l[3] = (Z * oa - T * za - W * qa) * ea;
                l[4] = (M * Y - I * ha - P * Q) * ea;
                l[5] = (w * ha - D * Y + G * Q) * ea;
                l[6] = (aa * pa - da * za - n * ma) * ea;
                l[7] = (R * za - Z * pa + W * ma) * ea;
                l[8] = (I * fa - L * Y + P *
                    O) * ea;
                l[9] = (B * Y - w * fa - G * O) * ea;
                l[10] = (da * oa - ca * pa + n * ra) * ea;
                l[11] = (T * pa - R * oa - W * ra) * ea;
                l[12] = (L * Q - I * ba - M * O) * ea;
                l[13] = (w * ba - B * Q + D * O) * ea;
                l[14] = (ca * ma - da * qa - aa * ra) * ea;
                l[15] = (R * qa - T * ma + Z * ra) * ea;
                return l
            },
            adjoint: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2],
                    G = n[3],
                    I = n[4],
                    L = n[5],
                    M = n[6],
                    P = n[7],
                    R = n[8],
                    T = n[9],
                    Z = n[10],
                    W = n[11],
                    da = n[12],
                    ca = n[13],
                    aa = n[14];
                n = n[15];
                l[0] = L * (Z * n - W * aa) - T * (M * n - P * aa) + ca * (M * W - P * Z);
                l[1] = -(B * (Z * n - W * aa) - T * (D * n - G * aa) + ca * (D * W - G * Z));
                l[2] = B * (M * n - P * aa) - L * (D * n - G * aa) + ca * (D * P - G * M);
                l[3] = -(B * (M * W - P * Z) - L * (D *
                    W - G * Z) + T * (D * P - G * M));
                l[4] = -(I * (Z * n - W * aa) - R * (M * n - P * aa) + da * (M * W - P * Z));
                l[5] = w * (Z * n - W * aa) - R * (D * n - G * aa) + da * (D * W - G * Z);
                l[6] = -(w * (M * n - P * aa) - I * (D * n - G * aa) + da * (D * P - G * M));
                l[7] = w * (M * W - P * Z) - I * (D * W - G * Z) + R * (D * P - G * M);
                l[8] = I * (T * n - W * ca) - R * (L * n - P * ca) + da * (L * W - P * T);
                l[9] = -(w * (T * n - W * ca) - R * (B * n - G * ca) + da * (B * W - G * T));
                l[10] = w * (L * n - P * ca) - I * (B * n - G * ca) + da * (B * P - G * L);
                l[11] = -(w * (L * W - P * T) - I * (B * W - G * T) + R * (B * P - G * L));
                l[12] = -(I * (T * aa - Z * ca) - R * (L * aa - M * ca) + da * (L * Z - M * T));
                l[13] = w * (T * aa - Z * ca) - R * (B * aa - D * ca) + da * (B * Z - D * T);
                l[14] = -(w * (L * aa - M * ca) - I *
                    (B * aa - D * ca) + da * (B * M - D * L));
                l[15] = w * (L * Z - M * T) - I * (B * Z - D * T) + R * (B * M - D * L);
                return l
            },
            determinant: function(l) {
                var n = l[0],
                    w = l[1],
                    B = l[2],
                    D = l[3],
                    G = l[4],
                    I = l[5],
                    L = l[6],
                    M = l[7],
                    P = l[8],
                    R = l[9],
                    T = l[10],
                    Z = l[11],
                    W = l[12],
                    da = l[13],
                    ca = l[14];
                l = l[15];
                return (n * I - w * G) * (T * l - Z * ca) - (n * L - B * G) * (R * l - Z * da) + (n * M - D * G) * (R * ca - T * da) + (w * L - B * I) * (P * l - Z * W) - (w * M - D * I) * (P * ca - T * W) + (B * M - D * L) * (P * da - R * W)
            },
            multiply: m,
            translate: function(l, n, w) {
                var B = w[0],
                    D = w[1];
                w = w[2];
                if(n === l) l[12] = n[0] * B + n[4] * D + n[8] * w + n[12], l[13] = n[1] * B + n[5] * D + n[9] * w + n[13], l[14] =
                    n[2] * B + n[6] * D + n[10] * w + n[14], l[15] = n[3] * B + n[7] * D + n[11] * w + n[15];
                else {
                    var G = n[0];
                    var I = n[1];
                    var L = n[2];
                    var M = n[3];
                    var P = n[4];
                    var R = n[5];
                    var T = n[6];
                    var Z = n[7];
                    var W = n[8];
                    var da = n[9];
                    var ca = n[10];
                    var aa = n[11];
                    l[0] = G;
                    l[1] = I;
                    l[2] = L;
                    l[3] = M;
                    l[4] = P;
                    l[5] = R;
                    l[6] = T;
                    l[7] = Z;
                    l[8] = W;
                    l[9] = da;
                    l[10] = ca;
                    l[11] = aa;
                    l[12] = G * B + P * D + W * w + n[12];
                    l[13] = I * B + R * D + da * w + n[13];
                    l[14] = L * B + T * D + ca * w + n[14];
                    l[15] = M * B + Z * D + aa * w + n[15]
                }
                return l
            },
            scale: function(l, n, w) {
                var B = w[0],
                    D = w[1];
                w = w[2];
                l[0] = n[0] * B;
                l[1] = n[1] * B;
                l[2] = n[2] * B;
                l[3] = n[3] * B;
                l[4] =
                    n[4] * D;
                l[5] = n[5] * D;
                l[6] = n[6] * D;
                l[7] = n[7] * D;
                l[8] = n[8] * w;
                l[9] = n[9] * w;
                l[10] = n[10] * w;
                l[11] = n[11] * w;
                l[12] = n[12];
                l[13] = n[13];
                l[14] = n[14];
                l[15] = n[15];
                return l
            },
            rotate: function(l, n, w, B) {
                var D = B[0],
                    G = B[1];
                B = B[2];
                var I = Math.hypot(D, G, B);
                if(1E-6 > I) return null;
                I = 1 / I;
                D *= I;
                G *= I;
                B *= I;
                var L = Math.sin(w);
                var M = Math.cos(w);
                var P = 1 - M;
                w = n[0];
                I = n[1];
                var R = n[2];
                var T = n[3];
                var Z = n[4];
                var W = n[5];
                var da = n[6];
                var ca = n[7];
                var aa = n[8];
                var ra = n[9];
                var ma = n[10];
                var pa = n[11];
                var qa = D * D * P + M;
                var oa = G * D * P + B * L;
                var za = B * D * P - G * L;
                var O =
                    D * G * P - B * L;
                var Q = G * G * P + M;
                var Y = B * G * P + D * L;
                var ba = D * B * P + G * L;
                D = G * B * P - D * L;
                G = B * B * P + M;
                l[0] = w * qa + Z * oa + aa * za;
                l[1] = I * qa + W * oa + ra * za;
                l[2] = R * qa + da * oa + ma * za;
                l[3] = T * qa + ca * oa + pa * za;
                l[4] = w * O + Z * Q + aa * Y;
                l[5] = I * O + W * Q + ra * Y;
                l[6] = R * O + da * Q + ma * Y;
                l[7] = T * O + ca * Q + pa * Y;
                l[8] = w * ba + Z * D + aa * G;
                l[9] = I * ba + W * D + ra * G;
                l[10] = R * ba + da * D + ma * G;
                l[11] = T * ba + ca * D + pa * G;
                n !== l && (l[12] = n[12], l[13] = n[13], l[14] = n[14], l[15] = n[15]);
                return l
            },
            rotateX: function(l, n, w) {
                var B = Math.sin(w);
                w = Math.cos(w);
                var D = n[4],
                    G = n[5],
                    I = n[6],
                    L = n[7],
                    M = n[8],
                    P = n[9],
                    R = n[10],
                    T = n[11];
                n !== l && (l[0] = n[0], l[1] = n[1], l[2] = n[2], l[3] = n[3], l[12] = n[12], l[13] = n[13], l[14] = n[14], l[15] = n[15]);
                l[4] = D * w + M * B;
                l[5] = G * w + P * B;
                l[6] = I * w + R * B;
                l[7] = L * w + T * B;
                l[8] = M * w - D * B;
                l[9] = P * w - G * B;
                l[10] = R * w - I * B;
                l[11] = T * w - L * B;
                return l
            },
            rotateY: function(l, n, w) {
                var B = Math.sin(w);
                w = Math.cos(w);
                var D = n[0],
                    G = n[1],
                    I = n[2],
                    L = n[3],
                    M = n[8],
                    P = n[9],
                    R = n[10],
                    T = n[11];
                n !== l && (l[4] = n[4], l[5] = n[5], l[6] = n[6], l[7] = n[7], l[12] = n[12], l[13] = n[13], l[14] = n[14], l[15] = n[15]);
                l[0] = D * w - M * B;
                l[1] = G * w - P * B;
                l[2] = I * w - R * B;
                l[3] = L * w - T * B;
                l[8] = D * B + M * w;
                l[9] = G * B +
                    P * w;
                l[10] = I * B + R * w;
                l[11] = L * B + T * w;
                return l
            },
            rotateZ: function(l, n, w) {
                var B = Math.sin(w);
                w = Math.cos(w);
                var D = n[0],
                    G = n[1],
                    I = n[2],
                    L = n[3],
                    M = n[4],
                    P = n[5],
                    R = n[6],
                    T = n[7];
                n !== l && (l[8] = n[8], l[9] = n[9], l[10] = n[10], l[11] = n[11], l[12] = n[12], l[13] = n[13], l[14] = n[14], l[15] = n[15]);
                l[0] = D * w + M * B;
                l[1] = G * w + P * B;
                l[2] = I * w + R * B;
                l[3] = L * w + T * B;
                l[4] = M * w - D * B;
                l[5] = P * w - G * B;
                l[6] = R * w - I * B;
                l[7] = T * w - L * B;
                return l
            },
            fromTranslation: function(l, n) {
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = 1;
                l[6] = 0;
                l[7] = 0;
                l[8] = 0;
                l[9] = 0;
                l[10] = 1;
                l[11] = 0;
                l[12] = n[0];
                l[13] =
                    n[1];
                l[14] = n[2];
                l[15] = 1;
                return l
            },
            fromScaling: function(l, n) {
                l[0] = n[0];
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = n[1];
                l[6] = 0;
                l[7] = 0;
                l[8] = 0;
                l[9] = 0;
                l[10] = n[2];
                l[11] = 0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            fromRotation: function(l, n, w) {
                var B = w[0],
                    D = w[1];
                w = w[2];
                var G = Math.hypot(B, D, w);
                if(1E-6 > G) return null;
                G = 1 / G;
                B *= G;
                D *= G;
                w *= G;
                G = Math.sin(n);
                n = Math.cos(n);
                var I = 1 - n;
                l[0] = B * B * I + n;
                l[1] = D * B * I + w * G;
                l[2] = w * B * I - D * G;
                l[3] = 0;
                l[4] = B * D * I - w * G;
                l[5] = D * D * I + n;
                l[6] = w * D * I + B * G;
                l[7] = 0;
                l[8] = B * w * I + D * G;
                l[9] = D * w * I - B * G;
                l[10] = w * w * I + n;
                l[11] =
                    0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            fromXRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = 1;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = n;
                l[6] = w;
                l[7] = 0;
                l[8] = 0;
                l[9] = -w;
                l[10] = n;
                l[11] = 0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            fromYRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = n;
                l[1] = 0;
                l[2] = -w;
                l[3] = 0;
                l[4] = 0;
                l[5] = 1;
                l[6] = 0;
                l[7] = 0;
                l[8] = w;
                l[9] = 0;
                l[10] = n;
                l[11] = 0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            fromZRotation: function(l, n) {
                var w = Math.sin(n);
                n = Math.cos(n);
                l[0] = n;
                l[1] = w;
                l[2] =
                    0;
                l[3] = 0;
                l[4] = -w;
                l[5] = n;
                l[6] = 0;
                l[7] = 0;
                l[8] = 0;
                l[9] = 0;
                l[10] = 1;
                l[11] = 0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            fromRotationTranslation: p,
            fromQuat2: function(l, n) {
                var w = new na(3),
                    B = -n[0],
                    D = -n[1],
                    G = -n[2],
                    I = n[3],
                    L = n[4],
                    M = n[5],
                    P = n[6],
                    R = n[7],
                    T = B * B + D * D + G * G + I * I;
                0 < T ? (w[0] = 2 * (L * I + R * B + M * G - P * D) / T, w[1] = 2 * (M * I + R * D + P * B - L * G) / T, w[2] = 2 * (P * I + R * G + L * D - M * B) / T) : (w[0] = 2 * (L * I + R * B + M * G - P * D), w[1] = 2 * (M * I + R * D + P * B - L * G), w[2] = 2 * (P * I + R * G + L * D - M * B));
                p(l, n, w);
                return l
            },
            getTranslation: x,
            getScaling: t,
            getRotation: q,
            fromRotationTranslationScale: function(l,
                n, w, B) {
                var D = n[0],
                    G = n[1],
                    I = n[2],
                    L = n[3],
                    M = D + D,
                    P = G + G,
                    R = I + I;
                n = D * M;
                var T = D * P;
                D *= R;
                var Z = G * P;
                G *= R;
                I *= R;
                M *= L;
                P *= L;
                L *= R;
                R = B[0];
                var W = B[1];
                B = B[2];
                l[0] = (1 - (Z + I)) * R;
                l[1] = (T + L) * R;
                l[2] = (D - P) * R;
                l[3] = 0;
                l[4] = (T - L) * W;
                l[5] = (1 - (n + I)) * W;
                l[6] = (G + M) * W;
                l[7] = 0;
                l[8] = (D + P) * B;
                l[9] = (G - M) * B;
                l[10] = (1 - (n + Z)) * B;
                l[11] = 0;
                l[12] = w[0];
                l[13] = w[1];
                l[14] = w[2];
                l[15] = 1;
                return l
            },
            fromRotationTranslationScaleOrigin: function(l, n, w, B, D) {
                var G = n[0],
                    I = n[1],
                    L = n[2],
                    M = n[3],
                    P = G + G,
                    R = I + I,
                    T = L + L;
                n = G * P;
                var Z = G * R,
                    W = G * T;
                G = I * R;
                I *= T;
                var da = L * T;
                L = M * P;
                R *= M;
                var ca = M * T,
                    aa = B[0],
                    ra = B[1];
                T = B[2];
                B = D[0];
                M = D[1];
                D = D[2];
                P = (1 - (G + da)) * aa;
                var ma = (Z + ca) * aa;
                aa *= W - R;
                Z = (Z - ca) * ra;
                da = (1 - (n + da)) * ra;
                ra *= I + L;
                W = (W + R) * T;
                I = (I - L) * T;
                n = (1 - (n + G)) * T;
                l[0] = P;
                l[1] = ma;
                l[2] = aa;
                l[3] = 0;
                l[4] = Z;
                l[5] = da;
                l[6] = ra;
                l[7] = 0;
                l[8] = W;
                l[9] = I;
                l[10] = n;
                l[11] = 0;
                l[12] = w[0] + B - (P * B + Z * M + W * D);
                l[13] = w[1] + M - (ma * B + da * M + I * D);
                l[14] = w[2] + D - (aa * B + ra * M + n * D);
                l[15] = 1;
                return l
            },
            fromQuat: function(l, n) {
                var w = n[0],
                    B = n[1],
                    D = n[2];
                n = n[3];
                var G = w + w,
                    I = B + B,
                    L = D + D;
                w *= G;
                var M = B * G;
                B *= I;
                var P = D * G,
                    R = D * I;
                D *= L;
                G *= n;
                I *= n;
                n *= L;
                l[0] = 1 - B -
                    D;
                l[1] = M + n;
                l[2] = P - I;
                l[3] = 0;
                l[4] = M - n;
                l[5] = 1 - w - D;
                l[6] = R + G;
                l[7] = 0;
                l[8] = P + I;
                l[9] = R - G;
                l[10] = 1 - w - B;
                l[11] = 0;
                l[12] = 0;
                l[13] = 0;
                l[14] = 0;
                l[15] = 1;
                return l
            },
            frustum: function(l, n, w, B, D, G, I) {
                var L = 1 / (w - n),
                    M = 1 / (D - B),
                    P = 1 / (G - I);
                l[0] = 2 * G * L;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = 2 * G * M;
                l[6] = 0;
                l[7] = 0;
                l[8] = (w + n) * L;
                l[9] = (D + B) * M;
                l[10] = (I + G) * P;
                l[11] = -1;
                l[12] = 0;
                l[13] = 0;
                l[14] = I * G * 2 * P;
                l[15] = 0;
                return l
            },
            perspective: function(l, n, w, B, D) {
                n = 1 / Math.tan(n / 2);
                l[0] = n / w;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = n;
                l[6] = 0;
                l[7] = 0;
                l[8] = 0;
                l[9] = 0;
                l[11] = -1;
                l[12] = 0;
                l[13] = 0;
                l[15] = 0;
                null != D && Infinity !== D ? (w = 1 / (B - D), l[10] = (D + B) * w, l[14] = 2 * D * B * w) : (l[10] = -1, l[14] = -2 * B);
                return l
            },
            perspectiveFromFieldOfView: function(l, n, w, B) {
                var D = Math.tan(n.upDegrees * Math.PI / 180),
                    G = Math.tan(n.downDegrees * Math.PI / 180),
                    I = Math.tan(n.leftDegrees * Math.PI / 180);
                n = Math.tan(n.rightDegrees * Math.PI / 180);
                var L = 2 / (I + n),
                    M = 2 / (D + G);
                l[0] = L;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = M;
                l[6] = 0;
                l[7] = 0;
                l[8] = -((I - n) * L * .5);
                l[9] = (D - G) * M * .5;
                l[10] = B / (w - B);
                l[11] = -1;
                l[12] = 0;
                l[13] = 0;
                l[14] = B * w / (w - B);
                l[15] = 0;
                return l
            },
            ortho: function(l, n, w, B, D, G, I) {
                var L = 1 / (n - w),
                    M = 1 / (B - D),
                    P = 1 / (G - I);
                l[0] = -2 * L;
                l[1] = 0;
                l[2] = 0;
                l[3] = 0;
                l[4] = 0;
                l[5] = -2 * M;
                l[6] = 0;
                l[7] = 0;
                l[8] = 0;
                l[9] = 0;
                l[10] = 2 * P;
                l[11] = 0;
                l[12] = (n + w) * L;
                l[13] = (D + B) * M;
                l[14] = (I + G) * P;
                l[15] = 1;
                return l
            },
            lookAt: function(l, n, w, B) {
                var D = n[0],
                    G = n[1];
                n = n[2];
                var I = B[0];
                var L = B[1];
                var M = B[2];
                var P = w[0];
                B = w[1];
                var R = w[2];
                if(1E-6 > Math.abs(D - P) && 1E-6 > Math.abs(G - B) && 1E-6 > Math.abs(n - R)) return k(l);
                w = D - P;
                B = G - B;
                P = n - R;
                var T = 1 / Math.hypot(w, B, P);
                w *= T;
                B *= T;
                P *= T;
                R = L * P - M * B;
                M = M * w - I * P;
                I = I * B - L * w;
                (T = Math.hypot(R,
                    M, I)) ? (T = 1 / T, R *= T, M *= T, I *= T) : I = M = R = 0;
                L = B * I - P * M;
                var Z = P * R - w * I;
                var W = w * M - B * R;
                (T = Math.hypot(L, Z, W)) ? (T = 1 / T, L *= T, Z *= T, W *= T) : W = Z = L = 0;
                l[0] = R;
                l[1] = L;
                l[2] = w;
                l[3] = 0;
                l[4] = M;
                l[5] = Z;
                l[6] = B;
                l[7] = 0;
                l[8] = I;
                l[9] = W;
                l[10] = P;
                l[11] = 0;
                l[12] = -(R * D + M * G + I * n);
                l[13] = -(L * D + Z * G + W * n);
                l[14] = -(w * D + B * G + P * n);
                l[15] = 1;
                return l
            },
            targetTo: function(l, n, w, B) {
                var D = n[0],
                    G = n[1];
                n = n[2];
                var I = B[0],
                    L = B[1],
                    M = B[2];
                B = D - w[0];
                var P = G - w[1];
                w = n - w[2];
                var R = B * B + P * P + w * w;
                0 < R && (R = 1 / Math.sqrt(R), B *= R, P *= R, w *= R);
                var T = L * w - M * P;
                M = M * B - I * w;
                I = I * P - L * B;
                R = T * T + M *
                    M + I * I;
                0 < R && (R = 1 / Math.sqrt(R), T *= R, M *= R, I *= R);
                l[0] = T;
                l[1] = M;
                l[2] = I;
                l[3] = 0;
                l[4] = P * I - w * M;
                l[5] = w * T - B * I;
                l[6] = B * M - P * T;
                l[7] = 0;
                l[8] = B;
                l[9] = P;
                l[10] = w;
                l[11] = 0;
                l[12] = D;
                l[13] = G;
                l[14] = n;
                l[15] = 1;
                return l
            },
            str: function(l) {
                return "mat4(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ", " + l[4] + ", " + l[5] + ", " + l[6] + ", " + l[7] + ", " + l[8] + ", " + l[9] + ", " + l[10] + ", " + l[11] + ", " + l[12] + ", " + l[13] + ", " + l[14] + ", " + l[15] + ")"
            },
            frob: function(l) {
                return Math.hypot(l[0], l[1], l[2], l[3], l[4], l[5], l[6], l[7], l[8], l[9], l[10], l[11], l[12], l[13], l[14],
                    l[15])
            },
            add: function(l, n, w) {
                l[0] = n[0] + w[0];
                l[1] = n[1] + w[1];
                l[2] = n[2] + w[2];
                l[3] = n[3] + w[3];
                l[4] = n[4] + w[4];
                l[5] = n[5] + w[5];
                l[6] = n[6] + w[6];
                l[7] = n[7] + w[7];
                l[8] = n[8] + w[8];
                l[9] = n[9] + w[9];
                l[10] = n[10] + w[10];
                l[11] = n[11] + w[11];
                l[12] = n[12] + w[12];
                l[13] = n[13] + w[13];
                l[14] = n[14] + w[14];
                l[15] = n[15] + w[15];
                return l
            },
            subtract: r,
            multiplyScalar: function(l, n, w) {
                l[0] = n[0] * w;
                l[1] = n[1] * w;
                l[2] = n[2] * w;
                l[3] = n[3] * w;
                l[4] = n[4] * w;
                l[5] = n[5] * w;
                l[6] = n[6] * w;
                l[7] = n[7] * w;
                l[8] = n[8] * w;
                l[9] = n[9] * w;
                l[10] = n[10] * w;
                l[11] = n[11] * w;
                l[12] = n[12] * w;
                l[13] =
                    n[13] * w;
                l[14] = n[14] * w;
                l[15] = n[15] * w;
                return l
            },
            multiplyScalarAndAdd: function(l, n, w, B) {
                l[0] = n[0] + w[0] * B;
                l[1] = n[1] + w[1] * B;
                l[2] = n[2] + w[2] * B;
                l[3] = n[3] + w[3] * B;
                l[4] = n[4] + w[4] * B;
                l[5] = n[5] + w[5] * B;
                l[6] = n[6] + w[6] * B;
                l[7] = n[7] + w[7] * B;
                l[8] = n[8] + w[8] * B;
                l[9] = n[9] + w[9] * B;
                l[10] = n[10] + w[10] * B;
                l[11] = n[11] + w[11] * B;
                l[12] = n[12] + w[12] * B;
                l[13] = n[13] + w[13] * B;
                l[14] = n[14] + w[14] * B;
                l[15] = n[15] + w[15] * B;
                return l
            },
            exactEquals: function(l, n) {
                return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3] && l[4] === n[4] && l[5] === n[5] && l[6] ===
                    n[6] && l[7] === n[7] && l[8] === n[8] && l[9] === n[9] && l[10] === n[10] && l[11] === n[11] && l[12] === n[12] && l[13] === n[13] && l[14] === n[14] && l[15] === n[15]
            },
            equals: function(l, n) {
                var w = l[0],
                    B = l[1],
                    D = l[2],
                    G = l[3],
                    I = l[4],
                    L = l[5],
                    M = l[6],
                    P = l[7],
                    R = l[8],
                    T = l[9],
                    Z = l[10],
                    W = l[11],
                    da = l[12],
                    ca = l[13],
                    aa = l[14];
                l = l[15];
                var ra = n[0],
                    ma = n[1],
                    pa = n[2],
                    qa = n[3],
                    oa = n[4],
                    za = n[5],
                    O = n[6],
                    Q = n[7],
                    Y = n[8],
                    ba = n[9],
                    fa = n[10],
                    ha = n[11],
                    ea = n[12],
                    ua = n[13],
                    sa = n[14];
                n = n[15];
                return Math.abs(w - ra) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(ra)) && Math.abs(B - ma) <= 1E-6 *
                    Math.max(1, Math.abs(B), Math.abs(ma)) && Math.abs(D - pa) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(pa)) && Math.abs(G - qa) <= 1E-6 * Math.max(1, Math.abs(G), Math.abs(qa)) && Math.abs(I - oa) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(oa)) && Math.abs(L - za) <= 1E-6 * Math.max(1, Math.abs(L), Math.abs(za)) && Math.abs(M - O) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(O)) && Math.abs(P - Q) <= 1E-6 * Math.max(1, Math.abs(P), Math.abs(Q)) && Math.abs(R - Y) <= 1E-6 * Math.max(1, Math.abs(R), Math.abs(Y)) && Math.abs(T - ba) <= 1E-6 * Math.max(1, Math.abs(T), Math.abs(ba)) &&
                    Math.abs(Z - fa) <= 1E-6 * Math.max(1, Math.abs(Z), Math.abs(fa)) && Math.abs(W - ha) <= 1E-6 * Math.max(1, Math.abs(W), Math.abs(ha)) && Math.abs(da - ea) <= 1E-6 * Math.max(1, Math.abs(da), Math.abs(ea)) && Math.abs(ca - ua) <= 1E-6 * Math.max(1, Math.abs(ca), Math.abs(ua)) && Math.abs(aa - sa) <= 1E-6 * Math.max(1, Math.abs(aa), Math.abs(sa)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
            },
            mul: m,
            sub: r
        }),
        La = function() {
            var l = y();
            return function(n, w, B, D, G, I) {
                w || (w = 3);
                B || (B = 0);
                for(D = D ? Math.min(D * w + B, n.length) : n.length; B < D; B += w) l[0] = n[B],
                    l[1] = n[B + 1], l[2] = n[B + 2], G(l, l, I), n[B] = l[0], n[B + 1] = l[1], n[B + 2] = l[2];
                return n
            }
        }();
    La = Object.freeze({
        __proto__: null,
        create: y,
        clone: function(l) {
            var n = new na(3);
            n[0] = l[0];
            n[1] = l[1];
            n[2] = l[2];
            return n
        },
        length: v,
        fromValues: u,
        copy: function(l, n) {
            l[0] = n[0];
            l[1] = n[1];
            l[2] = n[2];
            return l
        },
        set: function(l, n, w, B) {
            l[0] = n;
            l[1] = w;
            l[2] = B;
            return l
        },
        add: function(l, n, w) {
            l[0] = n[0] + w[0];
            l[1] = n[1] + w[1];
            l[2] = n[2] + w[2];
            return l
        },
        subtract: A,
        multiply: z,
        divide: C,
        ceil: function(l, n) {
            l[0] = Math.ceil(n[0]);
            l[1] = Math.ceil(n[1]);
            l[2] =
                Math.ceil(n[2]);
            return l
        },
        floor: function(l, n) {
            l[0] = Math.floor(n[0]);
            l[1] = Math.floor(n[1]);
            l[2] = Math.floor(n[2]);
            return l
        },
        min: function(l, n, w) {
            l[0] = Math.min(n[0], w[0]);
            l[1] = Math.min(n[1], w[1]);
            l[2] = Math.min(n[2], w[2]);
            return l
        },
        max: function(l, n, w) {
            l[0] = Math.max(n[0], w[0]);
            l[1] = Math.max(n[1], w[1]);
            l[2] = Math.max(n[2], w[2]);
            return l
        },
        round: function(l, n) {
            l[0] = Math.round(n[0]);
            l[1] = Math.round(n[1]);
            l[2] = Math.round(n[2]);
            return l
        },
        scale: function(l, n, w) {
            l[0] = n[0] * w;
            l[1] = n[1] * w;
            l[2] = n[2] * w;
            return l
        },
        scaleAndAdd: function(l,
            n, w, B) {
            l[0] = n[0] + w[0] * B;
            l[1] = n[1] + w[1] * B;
            l[2] = n[2] + w[2] * B;
            return l
        },
        distance: E,
        squaredDistance: J,
        squaredLength: F,
        negate: function(l, n) {
            l[0] = -n[0];
            l[1] = -n[1];
            l[2] = -n[2];
            return l
        },
        inverse: function(l, n) {
            l[0] = 1 / n[0];
            l[1] = 1 / n[1];
            l[2] = 1 / n[2];
            return l
        },
        normalize: H,
        dot: K,
        cross: N,
        lerp: function(l, n, w, B) {
            var D = n[0],
                G = n[1];
            n = n[2];
            l[0] = D + B * (w[0] - D);
            l[1] = G + B * (w[1] - G);
            l[2] = n + B * (w[2] - n);
            return l
        },
        hermite: function(l, n, w, B, D, G) {
            var I = G * G,
                L = I * (2 * G - 3) + 1,
                M = I * (G - 2) + G,
                P = I * (G - 1);
            G = I * (3 - 2 * G);
            l[0] = n[0] * L + w[0] * M + B[0] * P + D[0] *
                G;
            l[1] = n[1] * L + w[1] * M + B[1] * P + D[1] * G;
            l[2] = n[2] * L + w[2] * M + B[2] * P + D[2] * G;
            return l
        },
        bezier: function(l, n, w, B, D, G) {
            var I = 1 - G,
                L = I * I,
                M = G * G,
                P = L * I;
            L *= 3 * G;
            I *= 3 * M;
            G *= M;
            l[0] = n[0] * P + w[0] * L + B[0] * I + D[0] * G;
            l[1] = n[1] * P + w[1] * L + B[1] * I + D[1] * G;
            l[2] = n[2] * P + w[2] * L + B[2] * I + D[2] * G;
            return l
        },
        random: function(l, n) {
            n = n || 1;
            var w = 2 * Ga() * Math.PI,
                B = 2 * Ga() - 1,
                D = Math.sqrt(1 - B * B) * n;
            l[0] = Math.cos(w) * D;
            l[1] = Math.sin(w) * D;
            l[2] = B * n;
            return l
        },
        transformMat4: function(l, n, w) {
            var B = n[0],
                D = n[1];
            n = n[2];
            var G = w[3] * B + w[7] * D + w[11] * n + w[15];
            G = G || 1;
            l[0] =
                (w[0] * B + w[4] * D + w[8] * n + w[12]) / G;
            l[1] = (w[1] * B + w[5] * D + w[9] * n + w[13]) / G;
            l[2] = (w[2] * B + w[6] * D + w[10] * n + w[14]) / G;
            return l
        },
        transformMat3: function(l, n, w) {
            var B = n[0],
                D = n[1];
            n = n[2];
            l[0] = B * w[0] + D * w[3] + n * w[6];
            l[1] = B * w[1] + D * w[4] + n * w[7];
            l[2] = B * w[2] + D * w[5] + n * w[8];
            return l
        },
        transformQuat: function(l, n, w) {
            var B = w[0],
                D = w[1],
                G = w[2],
                I = n[0],
                L = n[1];
            n = n[2];
            var M = D * n - G * L,
                P = G * I - B * n,
                R = B * L - D * I;
            w = 2 * w[3];
            l[0] = I + M * w + 2 * (D * R - G * P);
            l[1] = L + P * w + 2 * (G * M - B * R);
            l[2] = n + R * w + 2 * (B * P - D * M);
            return l
        },
        rotateX: function(l, n, w, B) {
            var D = [],
                G = [];
            D[0] = n[0] -
                w[0];
            D[1] = n[1] - w[1];
            D[2] = n[2] - w[2];
            G[0] = D[0];
            G[1] = D[1] * Math.cos(B) - D[2] * Math.sin(B);
            G[2] = D[1] * Math.sin(B) + D[2] * Math.cos(B);
            l[0] = G[0] + w[0];
            l[1] = G[1] + w[1];
            l[2] = G[2] + w[2];
            return l
        },
        rotateY: function(l, n, w, B) {
            var D = [],
                G = [];
            D[0] = n[0] - w[0];
            D[1] = n[1] - w[1];
            D[2] = n[2] - w[2];
            G[0] = D[2] * Math.sin(B) + D[0] * Math.cos(B);
            G[1] = D[1];
            G[2] = D[2] * Math.cos(B) - D[0] * Math.sin(B);
            l[0] = G[0] + w[0];
            l[1] = G[1] + w[1];
            l[2] = G[2] + w[2];
            return l
        },
        rotateZ: function(l, n, w, B) {
            var D = [],
                G = [];
            D[0] = n[0] - w[0];
            D[1] = n[1] - w[1];
            D[2] = n[2] - w[2];
            G[0] = D[0] *
                Math.cos(B) - D[1] * Math.sin(B);
            G[1] = D[0] * Math.sin(B) + D[1] * Math.cos(B);
            G[2] = D[2];
            l[0] = G[0] + w[0];
            l[1] = G[1] + w[1];
            l[2] = G[2] + w[2];
            return l
        },
        angle: function(l, n) {
            var w = l[0],
                B = l[1],
                D = l[2],
                G = n[0],
                I = n[1],
                L = n[2];
            l = (w = Math.sqrt(w * w + B * B + D * D) * Math.sqrt(G * G + I * I + L * L)) && K(l, n) / w;
            return Math.acos(Math.min(Math.max(l, -1), 1))
        },
        zero: function(l) {
            l[0] = 0;
            l[1] = 0;
            l[2] = 0;
            return l
        },
        str: function(l) {
            return "vec3(" + l[0] + ", " + l[1] + ", " + l[2] + ")"
        },
        exactEquals: function(l, n) {
            return l[0] === n[0] && l[1] === n[1] && l[2] === n[2]
        },
        equals: function(l,
            n) {
            var w = l[0],
                B = l[1];
            l = l[2];
            var D = n[0],
                G = n[1];
            n = n[2];
            return Math.abs(w - D) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(D)) && Math.abs(B - G) <= 1E-6 * Math.max(1, Math.abs(B), Math.abs(G)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
        },
        sub: A,
        mul: z,
        div: C,
        dist: E,
        sqrDist: J,
        len: v,
        sqrLen: F,
        forEach: La
    });
    var Ma = function() {
        var l = S();
        return function(n, w, B, D, G, I) {
            w || (w = 4);
            B || (B = 0);
            for(D = D ? Math.min(D * w + B, n.length) : n.length; B < D; B += w) l[0] = n[B], l[1] = n[B + 1], l[2] = n[B + 2], l[3] = n[B + 3], G(l, l, I), n[B] = l[0], n[B + 1] = l[1], n[B +
                2] = l[2], n[B + 3] = l[3];
            return n
        }
    }();
    Ma = Object.freeze({
        __proto__: null,
        create: S,
        clone: V,
        fromValues: U,
        copy: X,
        set: ia,
        add: ka,
        subtract: ya,
        multiply: ta,
        divide: Ba,
        ceil: function(l, n) {
            l[0] = Math.ceil(n[0]);
            l[1] = Math.ceil(n[1]);
            l[2] = Math.ceil(n[2]);
            l[3] = Math.ceil(n[3]);
            return l
        },
        floor: function(l, n) {
            l[0] = Math.floor(n[0]);
            l[1] = Math.floor(n[1]);
            l[2] = Math.floor(n[2]);
            l[3] = Math.floor(n[3]);
            return l
        },
        min: function(l, n, w) {
            l[0] = Math.min(n[0], w[0]);
            l[1] = Math.min(n[1], w[1]);
            l[2] = Math.min(n[2], w[2]);
            l[3] = Math.min(n[3], w[3]);
            return l
        },
        max: function(l, n, w) {
            l[0] = Math.max(n[0], w[0]);
            l[1] = Math.max(n[1], w[1]);
            l[2] = Math.max(n[2], w[2]);
            l[3] = Math.max(n[3], w[3]);
            return l
        },
        round: function(l, n) {
            l[0] = Math.round(n[0]);
            l[1] = Math.round(n[1]);
            l[2] = Math.round(n[2]);
            l[3] = Math.round(n[3]);
            return l
        },
        scale: Ea,
        scaleAndAdd: function(l, n, w, B) {
            l[0] = n[0] + w[0] * B;
            l[1] = n[1] + w[1] * B;
            l[2] = n[2] + w[2] * B;
            l[3] = n[3] + w[3] * B;
            return l
        },
        distance: Ca,
        squaredDistance: Aa,
        length: ja,
        squaredLength: Fa,
        negate: function(l, n) {
            l[0] = -n[0];
            l[1] = -n[1];
            l[2] = -n[2];
            l[3] = -n[3];
            return l
        },
        inverse: function(l, n) {
            l[0] = 1 / n[0];
            l[1] = 1 / n[1];
            l[2] = 1 / n[2];
            l[3] = 1 / n[3];
            return l
        },
        normalize: wa,
        dot: Da,
        cross: function(l, n, w, B) {
            var D = w[0] * B[1] - w[1] * B[0],
                G = w[0] * B[2] - w[2] * B[0],
                I = w[0] * B[3] - w[3] * B[0],
                L = w[1] * B[2] - w[2] * B[1],
                M = w[1] * B[3] - w[3] * B[1];
            w = w[2] * B[3] - w[3] * B[2];
            B = n[0];
            var P = n[1],
                R = n[2];
            n = n[3];
            l[0] = P * w - R * M + n * L;
            l[1] = -(B * w) + R * I - n * G;
            l[2] = B * M - P * I + n * D;
            l[3] = -(B * L) + P * G - R * D;
            return l
        },
        lerp: Pa,
        random: function(l, n) {
            n = n || 1;
            do {
                var w = 2 * Ga() - 1;
                var B = 2 * Ga() - 1;
                var D = w * w + B * B
            } while(1 <= D);
            do {
                var G = 2 * Ga() - 1;
                var I = 2 * Ga() -
                    1;
                var L = G * G + I * I
            } while(1 <= L);
            D = Math.sqrt((1 - D) / L);
            l[0] = n * w;
            l[1] = n * B;
            l[2] = n * G * D;
            l[3] = n * I * D;
            return l
        },
        transformMat4: function(l, n, w) {
            var B = n[0],
                D = n[1],
                G = n[2];
            n = n[3];
            l[0] = w[0] * B + w[4] * D + w[8] * G + w[12] * n;
            l[1] = w[1] * B + w[5] * D + w[9] * G + w[13] * n;
            l[2] = w[2] * B + w[6] * D + w[10] * G + w[14] * n;
            l[3] = w[3] * B + w[7] * D + w[11] * G + w[15] * n;
            return l
        },
        transformQuat: function(l, n, w) {
            var B = n[0],
                D = n[1],
                G = n[2],
                I = w[0],
                L = w[1],
                M = w[2];
            w = w[3];
            var P = w * B + L * G - M * D,
                R = w * D + M * B - I * G,
                T = w * G + I * D - L * B;
            B = -I * B - L * D - M * G;
            l[0] = P * w + B * -I + R * -M - T * -L;
            l[1] = R * w + B * -L + T * -I - P * -M;
            l[2] = T * w + B * -M + P * -L - R * -I;
            l[3] = n[3];
            return l
        },
        zero: function(l) {
            l[0] = 0;
            l[1] = 0;
            l[2] = 0;
            l[3] = 0;
            return l
        },
        str: function(l) {
            return "vec4(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ")"
        },
        exactEquals: Qa,
        equals: Ra,
        sub: ya,
        mul: ta,
        div: Ba,
        dist: Ca,
        sqrDist: Aa,
        len: ja,
        sqrLen: Fa,
        forEach: Ma
    });
    var Na = function() {
            var l = y(),
                n = u(1, 0, 0),
                w = u(0, 1, 0);
            return function(B, D, G) {
                var I = K(D, G);
                if(-.999999 > I) return N(l, n, D), 1E-6 > v(l) && N(l, w, D), H(l, l), Sa(B, l, Math.PI), B;
                if(.999999 < I) return B[0] = 0, B[1] = 0, B[2] = 0, B[3] = 1, B;
                N(l, D, G);
                B[0] = l[0];
                B[1] = l[1];
                B[2] = l[2];
                B[3] = 1 + I;
                return wa(B, B)
            }
        }(),
        Oa = function() {
            var l = Ja(),
                n = Ja();
            return function(w, B, D, G, I, L) {
                Ka(l, B, I, L);
                Ka(n, D, G, L);
                Ka(w, l, n, 2 * L * (1 - L));
                return w
            }
        }(),
        Ia = function() {
            var l = f();
            return function(n, w, B, D) {
                l[0] = B[0];
                l[3] = B[1];
                l[6] = B[2];
                l[1] = D[0];
                l[4] = D[1];
                l[7] = D[2];
                l[2] = -w[0];
                l[5] = -w[1];
                l[8] = -w[2];
                return wa(n, Za(n, l))
            }
        }();
    Na = Object.freeze({
        __proto__: null,
        create: Ja,
        identity: function(l) {
            l[0] = 0;
            l[1] = 0;
            l[2] = 0;
            l[3] = 1;
            return l
        },
        setAxisAngle: Sa,
        getAxisAngle: function(l, n) {
            var w = 2 * Math.acos(n[3]),
                B = Math.sin(w /
                    2);
            1E-6 < B ? (l[0] = n[0] / B, l[1] = n[1] / B, l[2] = n[2] / B) : (l[0] = 1, l[1] = 0, l[2] = 0);
            return w
        },
        getAngle: function(l, n) {
            l = Da(l, n);
            return Math.acos(2 * l * l - 1)
        },
        multiply: Ta,
        rotateX: Ua,
        rotateY: Va,
        rotateZ: Wa,
        calculateW: function(l, n) {
            var w = n[0],
                B = n[1];
            n = n[2];
            l[0] = w;
            l[1] = B;
            l[2] = n;
            l[3] = Math.sqrt(Math.abs(1 - w * w - B * B - n * n));
            return l
        },
        exp: Xa,
        ln: Ya,
        pow: function(l, n, w) {
            Ya(l, n);
            Ea(l, l, w);
            Xa(l, l);
            return l
        },
        slerp: Ka,
        random: function(l) {
            var n = Ga(),
                w = Ga(),
                B = Ga(),
                D = Math.sqrt(1 - n);
            n = Math.sqrt(n);
            l[0] = D * Math.sin(2 * Math.PI * w);
            l[1] = D * Math.cos(2 *
                Math.PI * w);
            l[2] = n * Math.sin(2 * Math.PI * B);
            l[3] = n * Math.cos(2 * Math.PI * B);
            return l
        },
        invert: function(l, n) {
            var w = n[0],
                B = n[1],
                D = n[2];
            n = n[3];
            var G = w * w + B * B + D * D + n * n;
            G = G ? 1 / G : 0;
            l[0] = -w * G;
            l[1] = -B * G;
            l[2] = -D * G;
            l[3] = n * G;
            return l
        },
        conjugate: function(l, n) {
            l[0] = -n[0];
            l[1] = -n[1];
            l[2] = -n[2];
            l[3] = n[3];
            return l
        },
        fromMat3: Za,
        fromEuler: function(l, n, w, B) {
            var D = .5 * Math.PI / 180;
            n *= D;
            w *= D;
            B *= D;
            D = Math.sin(n);
            n = Math.cos(n);
            var G = Math.sin(w);
            w = Math.cos(w);
            var I = Math.sin(B);
            B = Math.cos(B);
            l[0] = D * w * B - n * G * I;
            l[1] = n * G * B + D * w * I;
            l[2] = n * w *
                I - D * G * B;
            l[3] = n * w * B + D * G * I;
            return l
        },
        str: function(l) {
            return "quat(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ")"
        },
        clone: V,
        fromValues: U,
        copy: X,
        set: ia,
        add: ka,
        mul: Ta,
        scale: Ea,
        dot: Da,
        lerp: Pa,
        length: ja,
        len: ja,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: wa,
        exactEquals: Qa,
        equals: Ra,
        rotationTo: Na,
        sqlerp: Oa,
        setAxes: Ia
    });
    Oa = Object.freeze({
        __proto__: null,
        create: function() {
            var l = new na(8);
            na != Float32Array && (l[0] = 0, l[1] = 0, l[2] = 0, l[4] = 0, l[5] = 0, l[6] = 0, l[7] = 0);
            l[3] = 1;
            return l
        },
        clone: function(l) {
            var n = new na(8);
            n[0] = l[0];
            n[1] = l[1];
            n[2] = l[2];
            n[3] = l[3];
            n[4] = l[4];
            n[5] = l[5];
            n[6] = l[6];
            n[7] = l[7];
            return n
        },
        fromValues: function(l, n, w, B, D, G, I, L) {
            var M = new na(8);
            M[0] = l;
            M[1] = n;
            M[2] = w;
            M[3] = B;
            M[4] = D;
            M[5] = G;
            M[6] = I;
            M[7] = L;
            return M
        },
        fromRotationTranslationValues: function(l, n, w, B, D, G, I) {
            var L = new na(8);
            L[0] = l;
            L[1] = n;
            L[2] = w;
            L[3] = B;
            D *= .5;
            G *= .5;
            I *= .5;
            L[4] = D * B + G * w - I * n;
            L[5] = G * B + I * l - D * w;
            L[6] = I * B + D * n - G * l;
            L[7] = -D * l - G * n - I * w;
            return L
        },
        fromRotationTranslation: $a,
        fromTranslation: function(l, n) {
            l[0] = 0;
            l[1] = 0;
            l[2] = 0;
            l[3] = 1;
            l[4] = .5 * n[0];
            l[5] = .5 * n[1];
            l[6] = .5 *
                n[2];
            l[7] = 0;
            return l
        },
        fromRotation: function(l, n) {
            l[0] = n[0];
            l[1] = n[1];
            l[2] = n[2];
            l[3] = n[3];
            l[4] = 0;
            l[5] = 0;
            l[6] = 0;
            l[7] = 0;
            return l
        },
        fromMat4: function(l, n) {
            var w = Ja();
            q(w, n);
            var B = new na(3);
            x(B, n);
            $a(l, w, B);
            return l
        },
        copy: ab,
        identity: function(l) {
            l[0] = 0;
            l[1] = 0;
            l[2] = 0;
            l[3] = 1;
            l[4] = 0;
            l[5] = 0;
            l[6] = 0;
            l[7] = 0;
            return l
        },
        set: function(l, n, w, B, D, G, I, L, M) {
            l[0] = n;
            l[1] = w;
            l[2] = B;
            l[3] = D;
            l[4] = G;
            l[5] = I;
            l[6] = L;
            l[7] = M;
            return l
        },
        getReal: X,
        getDual: function(l, n) {
            l[0] = n[4];
            l[1] = n[5];
            l[2] = n[6];
            l[3] = n[7];
            return l
        },
        setReal: X,
        setDual: function(l,
            n) {
            l[4] = n[0];
            l[5] = n[1];
            l[6] = n[2];
            l[7] = n[3];
            return l
        },
        getTranslation: function(l, n) {
            var w = n[4],
                B = n[5],
                D = n[6],
                G = n[7],
                I = -n[0],
                L = -n[1],
                M = -n[2];
            n = n[3];
            l[0] = 2 * (w * n + G * I + B * M - D * L);
            l[1] = 2 * (B * n + G * L + D * I - w * M);
            l[2] = 2 * (D * n + G * M + w * L - B * I);
            return l
        },
        translate: function(l, n, w) {
            var B = n[0],
                D = n[1],
                G = n[2],
                I = n[3],
                L = .5 * w[0],
                M = .5 * w[1];
            w = .5 * w[2];
            var P = n[4],
                R = n[5],
                T = n[6];
            n = n[7];
            l[0] = B;
            l[1] = D;
            l[2] = G;
            l[3] = I;
            l[4] = I * L + D * w - G * M + P;
            l[5] = I * M + G * L - B * w + R;
            l[6] = I * w + B * M - D * L + T;
            l[7] = -B * L - D * M - G * w + n;
            return l
        },
        rotateX: function(l, n, w) {
            var B = -n[0],
                D = -n[1],
                G = -n[2],
                I = n[3],
                L = n[4],
                M = n[5],
                P = n[6],
                R = n[7],
                T = L * I + R * B + M * G - P * D,
                Z = M * I + R * D + P * B - L * G,
                W = P * I + R * G + L * D - M * B;
            L = R * I - L * B - M * D - P * G;
            Ua(l, n, w);
            B = l[0];
            D = l[1];
            G = l[2];
            I = l[3];
            l[4] = T * I + L * B + Z * G - W * D;
            l[5] = Z * I + L * D + W * B - T * G;
            l[6] = W * I + L * G + T * D - Z * B;
            l[7] = L * I - T * B - Z * D - W * G;
            return l
        },
        rotateY: function(l, n, w) {
            var B = -n[0],
                D = -n[1],
                G = -n[2],
                I = n[3],
                L = n[4],
                M = n[5],
                P = n[6],
                R = n[7],
                T = L * I + R * B + M * G - P * D,
                Z = M * I + R * D + P * B - L * G,
                W = P * I + R * G + L * D - M * B;
            L = R * I - L * B - M * D - P * G;
            Va(l, n, w);
            B = l[0];
            D = l[1];
            G = l[2];
            I = l[3];
            l[4] = T * I + L * B + Z * G - W * D;
            l[5] = Z * I + L * D + W * B - T * G;
            l[6] = W *
                I + L * G + T * D - Z * B;
            l[7] = L * I - T * B - Z * D - W * G;
            return l
        },
        rotateZ: function(l, n, w) {
            var B = -n[0],
                D = -n[1],
                G = -n[2],
                I = n[3],
                L = n[4],
                M = n[5],
                P = n[6],
                R = n[7],
                T = L * I + R * B + M * G - P * D,
                Z = M * I + R * D + P * B - L * G,
                W = P * I + R * G + L * D - M * B;
            L = R * I - L * B - M * D - P * G;
            Wa(l, n, w);
            B = l[0];
            D = l[1];
            G = l[2];
            I = l[3];
            l[4] = T * I + L * B + Z * G - W * D;
            l[5] = Z * I + L * D + W * B - T * G;
            l[6] = W * I + L * G + T * D - Z * B;
            l[7] = L * I - T * B - Z * D - W * G;
            return l
        },
        rotateByQuatAppend: function(l, n, w) {
            var B = w[0],
                D = w[1],
                G = w[2];
            w = w[3];
            var I = n[0],
                L = n[1],
                M = n[2],
                P = n[3];
            l[0] = I * w + P * B + L * G - M * D;
            l[1] = L * w + P * D + M * B - I * G;
            l[2] = M * w + P * G + I * D - L * B;
            l[3] =
                P * w - I * B - L * D - M * G;
            I = n[4];
            L = n[5];
            M = n[6];
            P = n[7];
            l[4] = I * w + P * B + L * G - M * D;
            l[5] = L * w + P * D + M * B - I * G;
            l[6] = M * w + P * G + I * D - L * B;
            l[7] = P * w - I * B - L * D - M * G;
            return l
        },
        rotateByQuatPrepend: function(l, n, w) {
            var B = n[0],
                D = n[1],
                G = n[2];
            n = n[3];
            var I = w[0],
                L = w[1],
                M = w[2],
                P = w[3];
            l[0] = B * P + n * I + D * M - G * L;
            l[1] = D * P + n * L + G * I - B * M;
            l[2] = G * P + n * M + B * L - D * I;
            l[3] = n * P - B * I - D * L - G * M;
            I = w[4];
            L = w[5];
            M = w[6];
            P = w[7];
            l[4] = B * P + n * I + D * M - G * L;
            l[5] = D * P + n * L + G * I - B * M;
            l[6] = G * P + n * M + B * L - D * I;
            l[7] = n * P - B * I - D * L - G * M;
            return l
        },
        rotateAroundAxis: function(l, n, w, B) {
            if(1E-6 > Math.abs(B)) return ab(l,
                n);
            var D = Math.hypot(w[0], w[1], w[2]);
            B *= .5;
            var G = Math.sin(B),
                I = G * w[0] / D,
                L = G * w[1] / D;
            w = G * w[2] / D;
            B = Math.cos(B);
            D = n[0];
            G = n[1];
            var M = n[2],
                P = n[3];
            l[0] = D * B + P * I + G * w - M * L;
            l[1] = G * B + P * L + M * I - D * w;
            l[2] = M * B + P * w + D * L - G * I;
            l[3] = P * B - D * I - G * L - M * w;
            D = n[4];
            G = n[5];
            M = n[6];
            n = n[7];
            l[4] = D * B + n * I + G * w - M * L;
            l[5] = G * B + n * L + M * I - D * w;
            l[6] = M * B + n * w + D * L - G * I;
            l[7] = n * B - D * I - G * L - M * w;
            return l
        },
        add: function(l, n, w) {
            l[0] = n[0] + w[0];
            l[1] = n[1] + w[1];
            l[2] = n[2] + w[2];
            l[3] = n[3] + w[3];
            l[4] = n[4] + w[4];
            l[5] = n[5] + w[5];
            l[6] = n[6] + w[6];
            l[7] = n[7] + w[7];
            return l
        },
        multiply: bb,
        mul: bb,
        scale: function(l, n, w) {
            l[0] = n[0] * w;
            l[1] = n[1] * w;
            l[2] = n[2] * w;
            l[3] = n[3] * w;
            l[4] = n[4] * w;
            l[5] = n[5] * w;
            l[6] = n[6] * w;
            l[7] = n[7] * w;
            return l
        },
        dot: Da,
        lerp: function(l, n, w, B) {
            var D = 1 - B;
            0 > Da(n, w) && (B = -B);
            l[0] = n[0] * D + w[0] * B;
            l[1] = n[1] * D + w[1] * B;
            l[2] = n[2] * D + w[2] * B;
            l[3] = n[3] * D + w[3] * B;
            l[4] = n[4] * D + w[4] * B;
            l[5] = n[5] * D + w[5] * B;
            l[6] = n[6] * D + w[6] * B;
            l[7] = n[7] * D + w[7] * B;
            return l
        },
        invert: function(l, n) {
            var w = Fa(n);
            l[0] = -n[0] / w;
            l[1] = -n[1] / w;
            l[2] = -n[2] / w;
            l[3] = n[3] / w;
            l[4] = -n[4] / w;
            l[5] = -n[5] / w;
            l[6] = -n[6] / w;
            l[7] = n[7] / w;
            return l
        },
        conjugate: function(l,
            n) {
            l[0] = -n[0];
            l[1] = -n[1];
            l[2] = -n[2];
            l[3] = n[3];
            l[4] = -n[4];
            l[5] = -n[5];
            l[6] = -n[6];
            l[7] = n[7];
            return l
        },
        length: ja,
        len: ja,
        squaredLength: Fa,
        sqrLen: Fa,
        normalize: function(l, n) {
            var w = Fa(n);
            if(0 < w) {
                w = Math.sqrt(w);
                var B = n[0] / w,
                    D = n[1] / w,
                    G = n[2] / w,
                    I = n[3] / w,
                    L = n[4],
                    M = n[5],
                    P = n[6];
                n = n[7];
                var R = B * L + D * M + G * P + I * n;
                l[0] = B;
                l[1] = D;
                l[2] = G;
                l[3] = I;
                l[4] = (L - B * R) / w;
                l[5] = (M - D * R) / w;
                l[6] = (P - G * R) / w;
                l[7] = (n - I * R) / w
            }
            return l
        },
        str: function(l) {
            return "quat2(" + l[0] + ", " + l[1] + ", " + l[2] + ", " + l[3] + ", " + l[4] + ", " + l[5] + ", " + l[6] + ", " + l[7] + ")"
        },
        exactEquals: function(l, n) {
            return l[0] === n[0] && l[1] === n[1] && l[2] === n[2] && l[3] === n[3] && l[4] === n[4] && l[5] === n[5] && l[6] === n[6] && l[7] === n[7]
        },
        equals: function(l, n) {
            var w = l[0],
                B = l[1],
                D = l[2],
                G = l[3],
                I = l[4],
                L = l[5],
                M = l[6];
            l = l[7];
            var P = n[0],
                R = n[1],
                T = n[2],
                Z = n[3],
                W = n[4],
                da = n[5],
                ca = n[6];
            n = n[7];
            return Math.abs(w - P) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(P)) && Math.abs(B - R) <= 1E-6 * Math.max(1, Math.abs(B), Math.abs(R)) && Math.abs(D - T) <= 1E-6 * Math.max(1, Math.abs(D), Math.abs(T)) && Math.abs(G - Z) <= 1E-6 * Math.max(1, Math.abs(G),
                Math.abs(Z)) && Math.abs(I - W) <= 1E-6 * Math.max(1, Math.abs(I), Math.abs(W)) && Math.abs(L - da) <= 1E-6 * Math.max(1, Math.abs(L), Math.abs(da)) && Math.abs(M - ca) <= 1E-6 * Math.max(1, Math.abs(M), Math.abs(ca)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
        }
    });
    Ia = function() {
        var l = cb();
        return function(n, w, B, D, G, I) {
            w || (w = 2);
            B || (B = 0);
            for(D = D ? Math.min(D * w + B, n.length) : n.length; B < D; B += w) l[0] = n[B], l[1] = n[B + 1], G(l, l, I), n[B] = l[0], n[B + 1] = l[1];
            return n
        }
    }();
    Ia = Object.freeze({
        __proto__: null,
        create: cb,
        clone: function(l) {
            var n =
                new na(2);
            n[0] = l[0];
            n[1] = l[1];
            return n
        },
        fromValues: function(l, n) {
            var w = new na(2);
            w[0] = l;
            w[1] = n;
            return w
        },
        copy: function(l, n) {
            l[0] = n[0];
            l[1] = n[1];
            return l
        },
        set: function(l, n, w) {
            l[0] = n;
            l[1] = w;
            return l
        },
        add: function(l, n, w) {
            l[0] = n[0] + w[0];
            l[1] = n[1] + w[1];
            return l
        },
        subtract: db,
        multiply: eb,
        divide: fb,
        ceil: function(l, n) {
            l[0] = Math.ceil(n[0]);
            l[1] = Math.ceil(n[1]);
            return l
        },
        floor: function(l, n) {
            l[0] = Math.floor(n[0]);
            l[1] = Math.floor(n[1]);
            return l
        },
        min: function(l, n, w) {
            l[0] = Math.min(n[0], w[0]);
            l[1] = Math.min(n[1],
                w[1]);
            return l
        },
        max: function(l, n, w) {
            l[0] = Math.max(n[0], w[0]);
            l[1] = Math.max(n[1], w[1]);
            return l
        },
        round: function(l, n) {
            l[0] = Math.round(n[0]);
            l[1] = Math.round(n[1]);
            return l
        },
        scale: function(l, n, w) {
            l[0] = n[0] * w;
            l[1] = n[1] * w;
            return l
        },
        scaleAndAdd: function(l, n, w, B) {
            l[0] = n[0] + w[0] * B;
            l[1] = n[1] + w[1] * B;
            return l
        },
        distance: gb,
        squaredDistance: hb,
        length: ib,
        squaredLength: jb,
        negate: function(l, n) {
            l[0] = -n[0];
            l[1] = -n[1];
            return l
        },
        inverse: function(l, n) {
            l[0] = 1 / n[0];
            l[1] = 1 / n[1];
            return l
        },
        normalize: function(l, n) {
            var w = n[0],
                B = n[1];
            w = w * w + B * B;
            0 < w && (w = 1 / Math.sqrt(w));
            l[0] = n[0] * w;
            l[1] = n[1] * w;
            return l
        },
        dot: function(l, n) {
            return l[0] * n[0] + l[1] * n[1]
        },
        cross: function(l, n, w) {
            n = n[0] * w[1] - n[1] * w[0];
            l[0] = l[1] = 0;
            l[2] = n;
            return l
        },
        lerp: function(l, n, w, B) {
            var D = n[0];
            n = n[1];
            l[0] = D + B * (w[0] - D);
            l[1] = n + B * (w[1] - n);
            return l
        },
        random: function(l, n) {
            n = n || 1;
            var w = 2 * Ga() * Math.PI;
            l[0] = Math.cos(w) * n;
            l[1] = Math.sin(w) * n;
            return l
        },
        transformMat2: function(l, n, w) {
            var B = n[0];
            n = n[1];
            l[0] = w[0] * B + w[2] * n;
            l[1] = w[1] * B + w[3] * n;
            return l
        },
        transformMat2d: function(l, n,
            w) {
            var B = n[0];
            n = n[1];
            l[0] = w[0] * B + w[2] * n + w[4];
            l[1] = w[1] * B + w[3] * n + w[5];
            return l
        },
        transformMat3: function(l, n, w) {
            var B = n[0];
            n = n[1];
            l[0] = w[0] * B + w[3] * n + w[6];
            l[1] = w[1] * B + w[4] * n + w[7];
            return l
        },
        transformMat4: function(l, n, w) {
            var B = n[0];
            n = n[1];
            l[0] = w[0] * B + w[4] * n + w[12];
            l[1] = w[1] * B + w[5] * n + w[13];
            return l
        },
        rotate: function(l, n, w, B) {
            var D = n[0] - w[0];
            n = n[1] - w[1];
            var G = Math.sin(B);
            B = Math.cos(B);
            l[0] = D * B - n * G + w[0];
            l[1] = D * G + n * B + w[1];
            return l
        },
        angle: function(l, n) {
            var w = l[0];
            l = l[1];
            var B = n[0];
            n = n[1];
            var D = Math.sqrt(w * w + l *
                l) * Math.sqrt(B * B + n * n);
            return Math.acos(Math.min(Math.max(D && (w * B + l * n) / D, -1), 1))
        },
        zero: function(l) {
            l[0] = 0;
            l[1] = 0;
            return l
        },
        str: function(l) {
            return "vec2(" + l[0] + ", " + l[1] + ")"
        },
        exactEquals: function(l, n) {
            return l[0] === n[0] && l[1] === n[1]
        },
        equals: function(l, n) {
            var w = l[0];
            l = l[1];
            var B = n[0];
            n = n[1];
            return Math.abs(w - B) <= 1E-6 * Math.max(1, Math.abs(w), Math.abs(B)) && Math.abs(l - n) <= 1E-6 * Math.max(1, Math.abs(l), Math.abs(n))
        },
        len: ib,
        sub: db,
        mul: eb,
        div: fb,
        dist: gb,
        sqrDist: hb,
        sqrLen: jb,
        forEach: Ia
    });
    e.glMatrix = lb;
    e.mat2 = mb;
    e.mat2d = nb;
    e.mat3 = ob;
    e.mat4 = pb;
    e.quat = Na;
    e.quat2 = Oa;
    e.vec2 = Ia;
    e.vec3 = La;
    e.vec4 = Ma;
    Object.defineProperty(e, "__esModule", {
        value: !0
    })
}); {
    "use strict";

    function e(F, H, K) {
        var N = [0, 0];
        var S = F[1][1] - F[0][1];
        var V = F[0][0] - F[1][0];
        F = S * F[0][0] + V * F[0][1];
        var U = H[1][1] - H[0][1];
        var X = H[0][0] - H[1][0];
        H = U * H[0][0] + X * H[0][1];
        var ia = S * X - U * V;
        E(ia, 0, K || 0) || (N[0] = (X * F - V * H) / ia, N[1] = (S * H - U * F) / ia);
        return N
    }

    function b(F, H, K, N) {
        var S = H[0] - F[0];
        H = H[1] - F[1];
        var V = N[0] - K[0],
            U = N[1] - K[1];
        if(0 === V * H - U * S) return !1;
        N = (S * (K[1] - F[1]) + H * (F[0] - K[0])) / (V * H - U * S);
        F = (V * (F[1] - K[1]) + U * (K[0] - F[0])) / (U * S - V * H);
        return 0 <= N && 1 >= N && 0 <= F && 1 >= F
    }

    function a(F, H, K) {
        return (H[0] - F[0]) *
            (K[1] - F[1]) - (K[0] - F[0]) * (H[1] - F[1])
    }

    function d(F, H, K) {
        return 0 < a(F, H, K)
    }

    function c(F, H, K) {
        return 0 <= a(F, H, K)
    }

    function f(F, H, K) {
        return 0 > a(F, H, K)
    }

    function h(F, H, K) {
        return 0 >= a(F, H, K)
    }
    var tmpPoint1$$module$str$c3runtime = [],
        tmpPoint2$$module$str$c3runtime = [];

    function g(F, H, K, N) {
        if(N) {
            var S = tmpPoint1$$module$str$c3runtime,
                V = tmpPoint2$$module$str$c3runtime;
            S[0] = H[0] - F[0];
            S[1] = H[1] - F[1];
            V[0] = K[0] - H[0];
            V[1] = K[1] - H[1];
            return Math.acos((S[0] * V[0] + S[1] * V[1]) / (Math.sqrt(S[0] * S[0] + S[1] * S[1]) * Math.sqrt(V[0] * V[0] +
                V[1] * V[1]))) < N
        }
        return 0 === a(F, H, K)
    }

    function k(F, H) {
        var K = H[0] - F[0];
        F = H[1] - F[1];
        return K * K + F * F
    }

    function m(F, H) {
        var K = F.length;
        return F[0 > H ? H % K + K : H % K]
    }

    function p(F) {
        F.length = 0
    }

    function x(F, H, K, N) {
        for(; K < N; K++) F.push(H[K])
    }

    function t(F) {
        for(var H = [], K = F.length, N = 0; N !== K; N++) H.push(F.pop());
        for(N = 0; N !== K; N++) F[N] = H[N]
    }

    function q(F, H) {
        return f(m(F, H - 1), m(F, H), m(F, H + 1))
    }
    var tmpLine1$$module$str$c3runtime = [],
        tmpLine2$$module$str$c3runtime = [];

    function r(F, H, K) {
        var N = tmpLine1$$module$str$c3runtime,
            S = tmpLine2$$module$str$c3runtime;
        if(c(m(F, H + 1), m(F, H), m(F, K)) && h(m(F, H - 1), m(F, H), m(F, K))) return !1;
        var V = k(m(F, H), m(F, K));
        for(var U = 0; U !== F.length; ++U)
            if((U + 1) % F.length !== H && U !== H && c(m(F, H), m(F, K), m(F, U + 1)) && h(m(F, H), m(F, K), m(F, U))) {
                N[0] = m(F, H);
                N[1] = m(F, K);
                S[0] = m(F, U);
                S[1] = m(F, U + 1);
                var X = e(N, S);
                if(k(m(F, H), X) < V) return !1
            } return !0
    }

    function y(F, H, K) {
        for(var N = 0; N !== F.length; ++N)
            if(N !== H && N !== K && (N + 1) % F.length !== H && (N + 1) % F.length !== K && b(m(F, H), m(F, K), m(F, N), m(F, N + 1))) return !1;
        return !0
    }

    function v(F, H, K, N) {
        N = N || [];
        p(N);
        if(H < K)
            for(var S =
                    H; S <= K; S++) N.push(F[S]);
        else {
            for(S = 0; S <= K; S++) N.push(F[S]);
            for(S = H; S < F.length; S++) N.push(F[S])
        }
        return N
    }

    function u(F) {
        for(var H = [], K, N, S = [], V = Number.MAX_VALUE, U = 0; U < F.length; ++U)
            if(q(F, U))
                for(var X = 0; X < F.length; ++X)
                    if(r(F, U, X)) {
                        K = u(v(F, U, X, S));
                        N = u(v(F, X, U, S));
                        for(var ia = 0; ia < N.length; ia++) K.push(N[ia]);
                        K.length < V && (H = K, V = K.length, H.push([m(F, U), m(F, X)]))
                    } return H
    }

    function A(F, H) {
        if(0 === H.length) return [F];
        if(H instanceof Array && H.length && H[0] instanceof Array && 2 === H[0].length && H[0][0] instanceof Array) {
            F = [F];
            for(var K = 0; K < H.length; K++)
                for(var N = H[K], S = 0; S < F.length; S++) {
                    var V = A(F[S], N);
                    if(V) {
                        F.splice(S, 1);
                        F.push(V[0], V[1]);
                        break
                    }
                }
            return F
        }
        N = H;
        K = F.indexOf(N[0]);
        S = F.indexOf(N[1]);
        return -1 !== K && -1 !== S ? [v(F, K, S), v(F, S, K)] : !1
    }

    function z(F, H, K, N, S) {
        var V = H[1] - F[1];
        H = F[0] - H[0];
        F = V * F[0] + H * F[1];
        var U = N[1] - K[1];
        N = K[0] - N[0];
        K = U * K[0] + N * K[1];
        var X = V * N - U * H;
        return E(X, 0, S || 0) ? [0, 0] : [(N * F - H * K) / X, (V * K - U * F) / X]
    }

    function C(F, H, K, N, S, V, U) {
        V = V || 100;
        U = U || 0;
        S = S || 25;
        H = "undefined" !== typeof H ? H : [];
        K = K || [];
        N = N || [];
        var X = [0, 0],
            ia = [0, 0],
            ka = [0, 0],
            ya, ta = 0,
            Ba = 0,
            Ea = 0,
            Ca = [],
            Aa = [];
        if(3 > F.length) return H;
        U++;
        if(U > V) return console.warn("quickDecomp: max level (" + V + ") reached."), H;
        for(var ja = 0; ja < F.length; ++ja)
            if(q(F, ja)) {
                K.push(F[ja]);
                var Fa = ya = Number.MAX_VALUE;
                for(var wa = 0; wa < F.length; ++wa) {
                    if(d(m(F, ja - 1), m(F, ja), m(F, wa)) && h(m(F, ja - 1), m(F, ja), m(F, wa - 1)) && (ka = z(m(F, ja - 1), m(F, ja), m(F, wa), m(F, wa - 1)), f(m(F, ja + 1), m(F, ja), ka))) {
                        var Da = k(F[ja], ka);
                        Da < ya && (ya = Da, ia = ka, Ba = wa)
                    }
                    d(m(F, ja + 1), m(F, ja), m(F, wa + 1)) && h(m(F, ja + 1), m(F, ja), m(F, wa)) &&
                        (ka = z(m(F, ja + 1), m(F, ja), m(F, wa), m(F, wa + 1)), d(m(F, ja - 1), m(F, ja), ka) && (Da = k(F[ja], ka), Da < Fa && (Fa = Da, X = ka, ta = wa)))
                }
                if(Ba === (ta + 1) % F.length) ka[0] = (ia[0] + X[0]) / 2, ka[1] = (ia[1] + X[1]) / 2, N.push(ka), ja < ta ? (x(Ca, F, ja, ta + 1), Ca.push(ka), Aa.push(ka), 0 !== Ba && x(Aa, F, Ba, F.length), x(Aa, F, 0, ja + 1)) : (0 !== ja && x(Ca, F, ja, F.length), x(Ca, F, 0, ta + 1), Ca.push(ka), Aa.push(ka), x(Aa, F, Ba, ja + 1));
                else {
                    Ba > ta && (ta += F.length);
                    X = Number.MAX_VALUE;
                    if(ta < Ba) return H;
                    for(wa = Ba; wa <= ta; ++wa) c(m(F, ja - 1), m(F, ja), m(F, wa)) && h(m(F, ja + 1), m(F, ja),
                        m(F, wa)) && (Da = k(m(F, ja), m(F, wa)), Da < X && y(F, ja, wa) && (X = Da, Ea = wa % F.length));
                    ja < Ea ? (x(Ca, F, ja, Ea + 1), 0 !== Ea && x(Aa, F, Ea, F.length), x(Aa, F, 0, ja + 1)) : (0 !== ja && x(Ca, F, ja, F.length), x(Ca, F, 0, Ea + 1), x(Aa, F, Ea, ja + 1))
                }
                Ca.length < Aa.length ? (C(Ca, H, K, N, S, V, U), C(Aa, H, K, N, S, V, U)) : (C(Aa, H, K, N, S, V, U), C(Ca, H, K, N, S, V, U));
                return H
            } H.push(F);
        return H
    }

    function E(F, H, K) {
        return Math.abs(F - H) <= (K || 0)
    }

    function J(F, H, K) {
        return E(F[0], H[0], K) && E(F[1], H[1], K)
    }
    self.polyDecomp = {
        decomp: function(F) {
            var H = u(F);
            return 0 < H.length ? A(F, H) : [F]
        },
        quickDecomp: C,
        isSimple: function(F) {
            var H;
            for(H = 0; H < F.length - 1; H++)
                for(var K = 0; K < H - 1; K++)
                    if(b(F[H], F[H + 1], F[K], F[K + 1])) return !1;
            for(H = 1; H < F.length - 2; H++)
                if(b(F[0], F[F.length - 1], F[H], F[H + 1])) return !1;
            return !0
        },
        removeCollinearPoints: function(F, H) {
            for(var K = 0, N = F.length - 1; 3 < F.length && 0 <= N; --N) g(m(F, N - 1), m(F, N), m(F, N + 1), H) && (F.splice(N % F.length, 1), K++);
            return K
        },
        removeDuplicatePoints: function(F, H) {
            for(var K = F.length - 1; 1 <= K; --K)
                for(var N = F[K], S = K - 1; 0 <= S; --S) J(N, F[S], H) && F.splice(K, 1)
        },
        makeCCW: function(F) {
            for(var H =
                    0, K = 1; K < F.length; ++K)
                if(F[K][1] < F[H][1] || F[K][1] === F[H][1] && F[K][0] > F[H][0]) H = K;
            if(d(m(F, H - 1), m(F, H), m(F, H + 1))) return !1;
            t(F);
            return !0
        }
    }
} {
    "use strict";
    let e = !1,
        b = !1,
        a = "dev";
    const d = self.C3 = class {
        constructor() {
            throw TypeError("static class can't be instantiated");
        }
        static SetReady() {
            e = !0
        }
        static IsReady() {
            return e
        }
        static SetAppStarted() {
            b = !0
        }
        static HasAppStarted() {
            return b
        }
        static SetBuildMode(c) {
            a = c
        }
        static GetBuildMode() {
            return a
        }
        static IsReleaseBuild() {
            return "final" === a
        }
    };
    d.isDebug = !1;
    d.isDebugDefend = !1;
    d.hardwareConcurrency = navigator.hardwareConcurrency || 2;
    self.C3X = {}
} {
    "use strict";
    const e = self.C3;
    e.QueryParser = class {
        constructor(b) {
            this._queryString = b;
            this._parameters = new Map;
            this._Parse()
        }
        _Parse() {
            var b = this._queryString;
            if(b.startsWith("?") || b.startsWith("#")) b = b.substr(1);
            b = b.split("&");
            for(const a of b) this._ParseParameter(a)
        }
        _ParseParameter(b) {
            if(b)
                if(b.includes("=")) {
                    var a = b.indexOf("="),
                        d = decodeURIComponent(b.substring(0, a));
                    b = decodeURIComponent(b.substring(a + 1));
                    this._parameters.set(d, b)
                } else this._parameters.set(b, null)
        }
        LogAll() {
            for(const b of this._parameters) console.log("[QueryParser] Parameter '" +
                b[0] + "' = " + (null === b[1] ? "null" : "'" + b[1] + "'"))
        }
        Has(b) {
            return this._parameters.has(b)
        }
        Get(b) {
            b = this._parameters.get(b);
            return "undefined" === typeof b ? null : b
        }
        ClearHash() {
            history.replaceState("", document.title, location.pathname + location.search)
        }
        Reparse(b) {
            this._queryString = b;
            this._parameters.clear();
            this._Parse()
        }
    };
    e.QueryString = new e.QueryParser(location.search);
    e.LocationHashString = new e.QueryParser(location.hash);
    "dev" !== e.QueryString.Get("mode") && e.SetBuildMode("final")
} {
    "use strict";
    const e = self.C3,
        b = navigator.userAgent;
    let a = {
        linux: /linux|openbsd|freebsd|netbsd/i.test(b),
        chromeOS: /CrOS/.test(b),
        windowsTizen: /trident|iemobile|msie|tizen/i.test(b),
        genericMS: /trident|iemobile|msie|edge\//i.test(b),
        opera: /OPR\//.test(b),
        blackberry: /bb10/i.test(b),
        edge: /edge\//i.test(b),
        trident: /trident/i.test(b),
        webkit: /webkit/i.test(b),
        safari: /safari\//i.test(b),
        chrome: /chrome\//i.test(b),
        chromium: /chromium\//i.test(b),
        crosswalk: /crosswalk|xwalk/i.test(b),
        nwjs: /nwjs/i.test(b),
        amazonwebapp: /amazonwebappplatform/i.test(b),
        webview: /wv\)/.test(b),
        android: /android/i.test(b),
        nokia: /nokiabrowser\/[0-9.]+/i.test(b)
    };
    var JSCompiler_object_inline_windows_0 = /windows\s+nt\s+\d+\.\d+/i.exec(b),
        JSCompiler_object_inline_OSX_1 = /mac\s+os\s+x\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_android_2 = /android\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_opera_3 = /OPR\/[0-9.]+/.exec(b),
        JSCompiler_object_inline_tizen_4 = /tizen\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_iphone_5 = /iphone\s+os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_ipad_6 =
        /ipad[^)]*os\s+[0-9_]+/i.exec(b),
        JSCompiler_object_inline_winPhone_7 = /windows\s+phone\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_winPhoneOS_8 = /windows\s+phone\s+os\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chrome_9 = /chrome\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_chromium_10 = /chromium\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_nwjs_11 = /nwjs\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_firefox_12 = /firefox\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_ie_13 = /msie\s+[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edge_14 =
        /edge\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_edgeChromium_15 = /edg\/[0-9.]+/i.exec(b),
        JSCompiler_object_inline_silk_16 = /silk\/[0-9.]+/i.exec(b);
    let d = "(unknown)",
        c = "(unknown)",
        f = "(unknown)",
        h = "(unknown)",
        g = "(unknown)",
        k = "browser",
        m = !1,
        p = !1,
        x = new Map;

    function t(r, y, v) {
        !0 === y ? (v(), x.set(r, !0)) : y && y.length && (v(y[0]), x.set(r, !0))
    }
    t("isWindows", JSCompiler_object_inline_windows_0, r => {
        d = "Windows";
        if(r = r.split(" ")[2]) switch(r) {
            case "5.0":
                c = "2000";
                break;
            case "5.1":
                c = "XP";
                break;
            case "5.2":
                c = "XP";
                break;
            case "6.0":
                c = "Vista";
                break;
            case "6.1":
                c = "7";
                break;
            case "6.2":
                c = "8";
                break;
            case "6.3":
                c = "8.1";
                break;
            case "10.0":
                c = "10"
        }
    });
    t("isOSX", JSCompiler_object_inline_OSX_1, r => {
        d = "Mac OS X";
        (r = r.split(" ")[3]) && (c = r.replace("_", "."))
    });
    t("isLinux", a.linux, () => {
        d = "Linux"
    });
    t("isChromeOS", a.chromeOS, () => {
        d = "Chrome OS"
    });
    t("isAndroid", !a.windowsTizen && JSCompiler_object_inline_android_2, r => {
        d = "Android";
        (r = r.split(" ")[1]) && (c = r)
    });
    t("isTizen", JSCompiler_object_inline_tizen_4, r => {
        d = "Tizen";
        (r = r.split(" ")[1]) && (c =
            r)
    });
    t("isIPhone", !a.windowsTizen && JSCompiler_object_inline_iphone_5, r => {
        d = "iOS";
        (r = r.split(" ")[2]) && (c = r.replace("_", "."))
    });
    t("isIPad", !a.windowsTizen && JSCompiler_object_inline_ipad_6, r => {
        d = "iOS";
        (r = r.split(" ")[3]) && (c = r.replace("_", "."))
    });
    t("isWindowsPhone", JSCompiler_object_inline_winPhone_7, r => {
        d = "Windows Phone";
        (r = r.split(" ")[2]) && (c = r)
    });
    t("isWindowsPhoneOS", JSCompiler_object_inline_winPhoneOS_8, r => {
        d = "Windows Phone";
        (r = r.split(" ")[3]) && (c = r)
    });
    t("isBlackberry", a.blackberry, () => {
        d = "Blackberry";
        c = "10";
        f = "stock";
        g = "webkit"
    });
    t("isChrome", !a.edge && !a.opera && JSCompiler_object_inline_chrome_9, r => {
        f = "Chrome";
        g = "Chromium";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isOpera", JSCompiler_object_inline_opera_3, r => {
        f = "Opera";
        g = "Chromium";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isChromium", JSCompiler_object_inline_chromium_10, r => {
        g = f = "Chromium";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isFirefox", JSCompiler_object_inline_firefox_12, r => {
        f = "Firefox";
        g = "Gecko";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isInternetExplorer", JSCompiler_object_inline_ie_13,
        r => {
            f = "Internet Explorer";
            g = "Trident";
            (r = r.split(" ")[1]) && (h = r)
        });
    t("isTrident", "Internet Explorer" !== f && a.trident, () => {
        g = "Trident";
        var r = /rv:[0-9.]+/i.exec(b);
        r && r.length && (f = "Internet Explorer", (r = r[0].split(":")[1]) && (h = r))
    });
    t("isEdge", JSCompiler_object_inline_edge_14, r => {
        g = f = "Edge";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isEdgeChromium", JSCompiler_object_inline_edgeChromium_15, r => {
        f = "Edge";
        g = "Chromium";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isSafari", a.safari && !a.nokia && !a.chrome && !a.chromium && !a.genericIE &&
        !a.blackberry, () => {
            f = "Safari";
            g = "WebKit";
            var r = /version\/[0-9.]+/i.exec(b),
                y = /crios\/[0-9.]+/i.exec(b),
                v = /fxios\/[0-9.]+/i.exec(b);
            r && r.length && (r = r[0].split("/")[1]) && (h = r);
            y && y.length && (f = "Chrome for iOS", (y = y[0].split("/")[1]) && (h = y));
            v && v.length && (f = "Firefox for iOS", (v = v[0].split("/")[1]) && (h = v))
        });
    t("isSilk", JSCompiler_object_inline_silk_16, r => {
        f = "Silk";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isCrosswalk", a.crosswalk, () => k = "crosswalk");
    t("isCordova", self.device && (self.device.cordova || self.device.phonegap),
        () => k = "cordova");
    t("isNWJS", JSCompiler_object_inline_nwjs_11, r => {
        k = "nwjs";
        f = "NW.js";
        g = "Chromium";
        (r = r.split("/")[1]) && (h = r)
    });
    t("isAmazonWebApp", a.amazonwebapp, () => k = "webapp");
    t("isHomeScreenWebApp", "nwjs" !== k && "undefined" !== typeof window && (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches || navigator.standalone), () => k = "webapp");
    t("isFalseSafari", "Safari" === f && ("Android" === d || "Tizen" === d || "Blackberry" === d), () => f = "stock");
    t("isAndroidWebview", "Chrome" === f && "browser" === k && a.webview,
        () => k = "webview");
    t("isFirefoxOS", "Firefox" === f && "(unknown)" === d, () => d = "Firefox OS");
    t("isAndroidFallback", "(unknown)" === d && !a.windowsTizen && a.android, () => d = "Android");
    t("isTridentFallback", "(unknown)" === d && a.trident, () => g = "Trident");
    t("isWebkitFallback", "(unknown)" === d && a.webkit, () => g = "WebKit");
    t("isDesktop", (() => "Windows" === d || "Mac OS X" === d || "Linux" === d || "Chrome OS" === d || "nwjs" === k)(), () => m = !0);
    p = "nwjs" === k;
    const q = "Mac OS X" === d && navigator.maxTouchPoints && 2 < navigator.maxTouchPoints;
    q && (d = "iOS",
        c = h, p = m = !1);
    e.Platform = {
        OS: d,
        OSVersion: c,
        Browser: f,
        BrowserVersion: h,
        BrowserVersionNumber: parseFloat(h),
        BrowserEngine: g,
        Context: k,
        IsDesktop: m,
        IsMobile: !m,
        IsDesktopApp: p,
        IsChromeWebStore: !!(self.chrome && self.chrome.runtime && self.chrome.runtime.id),
        IsAppleOS: "Mac OS X" === d || "iOS" === d,
        IsIpadOS: q,
        IsLinux: "Linux" === d
    }
}
"use strict"; {
    const e = new Map,
        b = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAll,
        a = "undefined" !== typeof IDBObjectStore && "function" === typeof IDBObjectStore.prototype.getAllKeys;

    function d(q) {
        return new Promise((r, y) => {
            q.onsuccess = () => r(q.result);
            q.onerror = () => y(q.error)
        })
    }

    function c(q) {
        return new Promise((r, y) => {
            q.oncomplete = () => r();
            q.onerror = () => y(q.error);
            q.onabort = () => y(q.error)
        })
    }

    function f(q, r) {
        return g(q, r)
    }

    function h(q, r) {
        return g(q, r, !0)
    }
    async function g(q, r, y = !1,
        v = !0) {
        const u = await k(q);
        try {
            const A = u.transaction(["keyvaluepairs"], y ? "readwrite" : "readonly");
            return r(A)
        } catch (A) {
            if(v && "InvalidStateError" === A.name) return e.delete(q), g(q, r, y, !1);
            throw A;
        }
    }

    function k(q) {
        p(q);
        let r = e.get(q);
        r instanceof Promise || (r = m(q), e.set(q, r), r.catch(y => e.delete(q)));
        return r
    }
    async function m(q) {
        p(q);
        const r = indexedDB.open(q, 2);
        r.addEventListener("upgradeneeded", y => {
            try {
                y.target.result.createObjectStore("keyvaluepairs")
            } catch (v) {
                console.error(`Failed to create objectstore for database ${q}`,
                    v)
            }
        });
        return d(r)
    }

    function p(q) {
        if("string" !== typeof q) throw new TypeError("expected string");
    }

    function x(q, r) {
        const y = q.objectStore("keyvaluepairs").openCursor();
        return new Promise(v => {
            const u = [];
            y.onsuccess = A => {
                if(A = A.target.result) {
                    switch(r) {
                        case "entries":
                            u.push([A.key, A.value]);
                            break;
                        case "keys":
                            u.push(A.key);
                            break;
                        case "values":
                            u.push(A.value)
                    }
                    A.continue()
                } else v(u)
            }
        })
    }
    class t {
        constructor(q) {
            p(q);
            this.name = q
        }
        async ready() {
            await k(this.name)
        }
        set(q, r) {
            p(q);
            return h(this.name, async y => {
                var v = y.objectStore("keyvaluepairs").put(r,
                    q);
                v = d(v);
                y = c(y);
                await Promise.all([y, v])
            })
        }
        get(q) {
            p(q);
            return f(this.name, async r => {
                var y = r.objectStore("keyvaluepairs").get(q);
                y = d(y);
                r = c(r);
                [, r] = await Promise.all([r, y]);
                return r
            })
        }
        delete(q) {
            p(q);
            return h(this.name, async r => {
                var y = r.objectStore("keyvaluepairs").delete(q);
                y = d(y);
                r = c(r);
                await Promise.all([r, y])
            })
        }
        clear() {
            return h(this.name, async q => {
                var r = q.objectStore("keyvaluepairs").clear();
                r = d(r);
                q = c(q);
                await Promise.all([q, r])
            })
        }
        keys() {
            return f(this.name, async q => {
                if(a) {
                    var r = q.objectStore("keyvaluepairs").getAllKeys();
                    r = d(r)
                } else r = x(q, "keys");
                q = c(q);
                [, q] = await Promise.all([q, r]);
                return q
            })
        }
        values() {
            return f(this.name, async q => {
                if(b) {
                    var r = q.objectStore("keyvaluepairs").getAll();
                    r = d(r)
                } else r = x(q, "values");
                q = c(q);
                [, q] = await Promise.all([q, r]);
                return q
            })
        }
        entries() {
            return f(this.name, async q => {
                var r = x(q, "entries");
                q = c(q);
                [, r] = await Promise.all([q, r]);
                return r
            })
        }
    }
    self.KVStorageContainer = t
}
"use strict"; {
    const e = self.KVStorageContainer,
        b = [/no available storage method found/i, /an attempt was made to break through the security policy of the user agent/i, /the user denied permission to access the database/i, /a mutation operation was attempted on a database that did not allow mutations/i, /idbfactory\.open\(\) called in an invalid security context/i],
        a = new WeakMap;
    let d = !1;
    "undefined" === typeof indexedDB && (d = !0, console.warn("Unable to use local storage because indexedDB is not defined"));

    function c(k) {
        throw Error(`"${k}" is not implemented`);
    }

    function f(k) {
        if("function" === typeof k) throw Error("localforage callback API is not implemented; please use the promise API instead");
    }

    function h(k) {
        return "object" === typeof k ? new Promise(m => {
            const {
                port1: p,
                port2: x
            } = new MessageChannel;
            x.onmessage = t => m(t.data);
            p.postMessage(k)
        }) : Promise.resolve(k)
    }
    class g {
        constructor(k) {
            this._inst = k;
            a.set(this, new Map)
        }
        _MaybeSwitchToMemoryFallback(k) {
            if(!d)
                for(const m of b)
                    if(k && m.test(k.message)) {
                        console.error("Unable to use local storage, reverting to in-memory store: ",
                            k, k.message);
                        d = !0;
                        break
                    }
        }
        async _getItemFallback(k) {
            k = a.get(this).get(k);
            k = await h(k);
            return "undefined" === typeof k ? null : k
        }
        async _setItemFallback(k, m) {
            m = await h(m);
            a.get(this).set(k, m)
        }
        _removeItemFallback(k) {
            a.get(this).delete(k)
        }
        _clearFallback() {
            a.get(this).clear()
        }
        _keysFallback() {
            return Array.from(a.get(this).keys())
        }
        IsUsingFallback() {
            return d
        }
        async getItem(k, m) {
            f(m);
            if(d) return await this._getItemFallback(k);
            let p;
            try {
                p = await this._inst.get(k)
            } catch (x) {
                this._MaybeSwitchToMemoryFallback(x);
                if(d) return await this._getItemFallback(k);
                console.error(`Error reading '${k}' from storage, returning null: `, x);
                return null
            }
            return "undefined" === typeof p ? null : p
        }
        async setItem(k, m, p) {
            f(p);
            "undefined" === typeof m && (m = null);
            if(d) await this._setItemFallback(k, m);
            else try {
                await this._inst.set(k, m)
            } catch (x) {
                if(this._MaybeSwitchToMemoryFallback(x), d) await this._setItemFallback(k, m);
                else throw x;
            }
        }
        async removeItem(k, m) {
            f(m);
            if(d) this._removeItemFallback(k);
            else try {
                await this._inst.delete(k)
            } catch (p) {
                this._MaybeSwitchToMemoryFallback(p), d ? this._removeItemFallback(k) :
                    console.error(`Error removing '${k}' from storage: `, p)
            }
        }
        async clear(k) {
            f(k);
            if(d) this._clearFallback();
            else try {
                await this._inst.clear()
            } catch (m) {
                this._MaybeSwitchToMemoryFallback(m), d ? this._clearFallback() : console.error("Error clearing storage: ", m)
            }
        }
        async keys(k) {
            f(k);
            if(d) return this._keysFallback();
            k = [];
            try {
                k = await this._inst.keys()
            } catch (m) {
                this._MaybeSwitchToMemoryFallback(m);
                if(d) return this._keysFallback();
                console.error("Error getting storage keys: ", m)
            }
            return k
        }
        ready(k) {
            f(k);
            return d ? Promise.resolve(!0) :
                this._inst.ready()
        }
        createInstance(k) {
            if("object" !== typeof k) throw new TypeError("invalid options object");
            k = k.name;
            if("string" !== typeof k) throw new TypeError("invalid store name");
            k = new e(k);
            return new g(k)
        }
        length(k) {
            c("localforage.length()")
        }
        key(k, m) {
            c("localforage.key()")
        }
        iterate(k, m) {
            c("localforage.iterate()")
        }
        setDriver(k) {
            c("localforage.setDriver()")
        }
        config(k) {
            c("localforage.config()")
        }
        defineDriver(k) {
            c("localforage.defineDriver()")
        }
        driver() {
            c("localforage.driver()")
        }
        supports(k) {
            c("localforage.supports()")
        }
        dropInstance() {
            c("localforage.dropInstance()")
        }
        disableMemoryMode() {
            d = !1
        }
    }
    self.localforage = new g(new e("localforage"))
} {
    "use strict";
    const e = self.C3;
    e.Supports = {};
    e.Supports.WebAnimations = (() => {
        try {
            if("Safari" === e.Platform.Browser || "undefined" === typeof document) return !1;
            const b = document.createElement("div");
            return "undefined" === typeof b.animate ? !1 : "undefined" !== typeof b.animate([{
                opacity: "0"
            }, {
                opacity: "1"
            }], 1E3).reverse
        } catch (b) {
            return !1
        }
    })();
    e.Supports.DialogElement = "undefined" !== typeof HTMLDialogElement;
    e.Supports.RequestIdleCallback = !!self.requestIdleCallback;
    e.Supports.ImageBitmap = !!self.createImageBitmap;
    e.Supports.ImageBitmapOptions = !1;
    if(e.Supports.ImageBitmap) try {
        self.createImageBitmap(new ImageData(32, 32), {
            premultiplyAlpha: "none"
        }).then(b => {
            e.Supports.ImageBitmapOptions = !0
        }).catch(b => {
            e.Supports.ImageBitmapOptions = !1
        })
    } catch (b) {
        e.Supports.ImageBitmapOptions = !1
    }
    e.Supports.ClipboardReadText = !(!navigator.clipboard || !navigator.clipboard.readText || "Firefox" === e.Platform.Browser);
    e.Supports.PermissionsQuery = !(!navigator.permissions || !navigator.permissions.query);
    e.Supports.Proxies = "undefined" !== typeof Proxy;
    e.Supports.DownloadAttribute =
        (() => "undefined" === typeof document ? !1 : "undefined" !== typeof document.createElement("a").download)();
    e.Supports.CanvasToBlob = (() => "undefined" !== typeof HTMLCanvasElement && HTMLCanvasElement.prototype.toBlob)();
    e.Supports.Fetch = "function" === typeof fetch;
    e.Supports.PersistentStorage = !!(self.isSecureContext && "Opera" !== e.Platform.Browser && navigator.storage && navigator.storage.persist);
    e.Supports.StorageQuotaEstimate = !!(self.isSecureContext && navigator.storage && navigator.storage.estimate);
    e.Supports.Fullscreen =
        (() => {
            if("undefined" === typeof document || "iOS" === e.Platform.OS) return !1;
            const b = document.documentElement;
            return !!(b.requestFullscreen || b.msRequestFullscreen || b.mozRequestFullScreen || b.webkitRequestFullscreen)
        })();
    e.Supports.ImageDecoder = "undefined" !== typeof self.ImageDecoder;
    e.Supports.NativeFileSystemAPI = !!self.showOpenFilePicker;
    e.Supports.NavigatorFontsQuery = !(!navigator.fonts || !navigator.fonts.query)
} {
    "use strict";
    const e = self.C3;
    if(!String.prototype.trimStart) {
        const b = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*/;
        String.prototype.trimStart = function() {
            return this.replace(b, "")
        }
    }
    if(!String.prototype.trimEnd) {
        const b = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*$/;
        String.prototype.trimEnd = function() {
            return this.replace(b,
                "")
        }
    }
    String.prototype.replaceAll || (String.prototype.replaceAll = function(b, a) {
        return this.replace(new RegExp(e.EscapeRegex(b), "g"), a)
    });
    Array.prototype.values || (Array.prototype.values = function*() {
        for(const b of this) yield b
    });
    if(!Array.prototype.flat) {
        function b(a, d) {
            return a.reduce((c, f) => {
                0 < d && Array.isArray(f) ? Array.prototype.push.apply(c, b(f, d - 1)) : c.push(f);
                return c
            }, [])
        }
        Array.prototype.flat = function(a = 1) {
            return b(this, a)
        }
    }
    RegExp.escape || (RegExp.escape = function(b) {
        return String(b).replace(/[\\^$*+?.()|[\]{}]/g,
            "\\$&")
    });
    navigator.storage && !navigator.storage.estimate && navigator.webkitTemporaryStorage && navigator.webkitTemporaryStorage.queryUsageAndQuota && (navigator.storage.estimate = function() {
        return new Promise((b, a) => navigator.webkitTemporaryStorage.queryUsageAndQuota((d, c) => b({
            usage: d,
            quota: c
        }), a))
    });
    "undefined" === typeof HTMLCollection || HTMLCollection.prototype[Symbol.iterator] || (HTMLCollection.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof NodeList || NodeList.prototype[Symbol.iterator] || (NodeList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof DOMTokenList || DOMTokenList.prototype[Symbol.iterator] || (DOMTokenList.prototype[Symbol.iterator] = function() {
        let b = 0;
        return {
            next: () => b >= this.length ? {
                done: !0
            } : {
                value: this.item(b++),
                done: !1
            }
        }
    });
    "undefined" === typeof FileList || FileList.prototype[Symbol.iterator] || (FileList.prototype[Symbol.iterator] =
        function() {
            let b = 0;
            return {
                next: () => b >= this.length ? {
                    done: !0
                } : {
                    value: this.item(b++),
                    done: !1
                }
            }
        });
    "undefined" === typeof TextEncoder && (self.TextEncoder = class {
        constructor() {
            Object.defineProperty(this, "encoding", {
                value: "utf-8",
                writable: !1
            })
        }
        encode(b) {
            for(var a = b.length, d = -1, c = new Uint8Array(3 * a), f, h, g = 0; g !== a;) {
                f = b.charCodeAt(g);
                g += 1;
                if(55296 <= f && 56319 >= f) {
                    if(g === a) {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        break
                    }
                    h = b.charCodeAt(g);
                    if(56320 <= h && 57343 >= h) {
                        if(f = 1024 * (f - 55296) + h - 56320 + 65536, g += 1, 65535 < f) {
                            c[d += 1] = 240 |
                                f >>> 18;
                            c[d += 1] = 128 | f >>> 12 & 63;
                            c[d += 1] = 128 | f >>> 6 & 63;
                            c[d += 1] = 128 | f & 63;
                            continue
                        }
                    } else {
                        c[d += 1] = 239;
                        c[d += 1] = 191;
                        c[d += 1] = 189;
                        continue
                    }
                }
                127 >= f ? c[d += 1] = 0 | f : (2047 >= f ? c[d += 1] = 192 | f >>> 6 : (c[d += 1] = 224 | f >>> 12, c[d += 1] = 128 | f >>> 6 & 63), c[d += 1] = 128 | f & 63)
            }
            return new Uint8Array(c.buffer.slice(0, d + 1))
        }
        toString() {
            return "[object TextEncoder]"
        }
    }, TextEncoder[Symbol.toStringTag] = "TextEncoder");
    if("undefined" === typeof TextDecoder) {
        function b(c) {
            const f = c[Symbol.iterator]();
            return {
                next: h => f.next(),
                [Symbol.iterator]() {
                    return this
                }
            }
        }

        function a(c) {
            c = c.next();
            if(c.done) throw Error("unexpected end of input");
            if(0 != (c.value & 192 ^ 128)) throw Error("invalid byte");
            return c.value & 63
        }
        const d = new Map;
        d.set("utf-8", (c, f) => {
            if(c.buffer) var h = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
            else if(h instanceof ArrayBuffer) h = new Uint8Array(c);
            else throw Error("Invalid parameter");
            c = b(h);
            h = [];
            try {
                for(const g of c) {
                    let k;
                    if(127 > g) k = g & 127;
                    else if(223 > g) k = (g & 31) << 6 | a(c);
                    else if(239 > g) k = (g & 15) << 12 | a(c) << 6 | a(c);
                    else if(247 > g) k = (g & 7) << 18 | a(c) <<
                        12 | a(c) << 6 | a(c);
                    else throw Error("Invalid character");
                    h.push(String.fromCodePoint(k))
                }
            } catch (g) {
                if(f) throw g;
                h.push("\ufffd")
            }
            return h.join("")
        });
        d.set("utf8", d.get("utf-8"));
        d.set("utf-16le", (c, f) => {
            throw Error("utf-16le decoder not implemented");
        });
        self.TextDecoder = class {
            constructor(c = "utf-8", f = {}) {
                const h = d.get(c);
                if(!h) throw Error(`TextDecoder polyfill does not support "${c}"`);
                Object.defineProperty(this, "fatal", {
                    value: !0 === f.fatal,
                    writable: !1
                });
                Object.defineProperty(this, "_decoder", {
                    value: h,
                    writable: !1
                });
                Object.defineProperty(this, "encoding", {
                    value: c,
                    writable: !1
                })
            }
            decode(c) {
                return this._decoder(c, this.fatal)
            }
            toString() {
                return "[object TextDecoder]"
            }
        };
        TextDecoder[Symbol.toStringTag] = "TextDecoder"
    }
    "undefined" === typeof self.isSecureContext && (self.isSecureContext = "https:" === location.protocol);
    "undefined" === typeof self.globalThis && (self.globalThis = self)
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        let d = e.GetCallStack();
        console.error("Assertion failure: " + a + "\n\nStack trace:\n" + d)
    }
    self.assert = function(a, d) {
        a || b(d)
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    e.IsNumber = function(d) {
        return "number" === typeof d
    };
    e.IsFiniteNumber = function(d) {
        return e.IsNumber(d) && isFinite(d)
    };
    e.RequireNumber = function(d) {
        if(!e.IsNumber(d)) throw new TypeError("expected number");
    };
    e.RequireOptionalNumber = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireNumberInRange = function(d, c, f) {
        if(!e.IsNumber(d) || isNaN(d) || c > d || f < d) throw new RangeError("number outside of range");
    };
    e.RequireAllNumber = function(...d) {
        for(let c of d);
    };
    e.RequireFiniteNumber =
        function(d) {
            if(!e.IsFiniteNumber(d)) throw new TypeError("expected finite number");
        };
    e.RequireOptionalFiniteNumber = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllFiniteNumber = function(...d) {
        for(let c of d);
    };
    e.IsString = function(d) {
        return "string" === typeof d
    };
    e.RequireString = function(d) {
        if(!e.IsString(d)) throw new TypeError("expected string");
    };
    e.RequireOptionalString = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllString = function(...d) {
        for(let c of d);
    };
    e.IsSimpleObject = function(d) {
        return "object" !==
            typeof d || null === d ? !1 : (d = Object.getPrototypeOf(d)) ? d.constructor === Object : null === d
    };
    e.RequireSimpleObject = function(d) {
        if(!e.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    e.RequireOptionalSimpleObject = function(d) {
        if(!e.IsNullOrUndefined(d) && !e.IsSimpleObject(d)) throw new TypeError("expected simple object");
    };
    e.IsObject = function(d) {
        return "object" === typeof d && null !== d && !Array.isArray(d)
    };
    e.RequireObject = function(d) {
        if(!e.IsObject(d)) throw new TypeError("expected object");
    };
    e.RequireOptionalObject =
        function(d) {
            e.IsNullOrUndefined(d)
        };
    e.RequireAllObject = function(...d) {
        for(let c of d);
    };
    e.IsFileLike = function(d) {
        return e.IsInstanceOf(d, Blob) && "string" === typeof d.name
    };
    e.RequireFileLike = function(d) {
        if(!e.IsFileLike(d)) throw new TypeError("expected file");
    };
    e.RequireOptionalFileLike = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsArray = function(d) {
        return Array.isArray(d)
    };
    e.RequireArray = function(d) {
        if(!e.IsArray(d)) throw new TypeError("expected array");
    };
    e.RequireOptionalArray = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllArray = function(...d) {
        for(let c of d);
    };
    e.Is2DArray = function(d) {
        return e.IsArray(d) ? d.length ? e.IsArray(d[0]) ? !0 : !1 : !0 : !1
    };
    e.Require2DArray = function(d) {
        if(!e.Is2DArray(d)) throw new TypeError("expected 2d array");
        for(let c of d)
            if(!e.IsArray(c)) throw new TypeError("expected 2d array");
    };
    e.RequireOptional2DArray = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsFunction = function(d) {
        return "function" === typeof d
    };
    e.RequireFunction = function(d, c) {
        if(!e.IsFunction(d)) throw new TypeError("expected function");
        if(!e.IsNullOrUndefined(c) && d !== c) throw new TypeError("expected same function reference");
    };
    e.RequireOptionalFunction = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllFunction = function(...d) {
        for(let c of d);
    };
    e.RequireAnyFunction = function(d, ...c) {
        if(!e.IsFunction(d)) throw new TypeError("expected function");
        if(!c.length) throw Error("missing comparison functions");
        for(let f of c)
            if(!e.IsNullOrUndefined(f) && d === f) return;
        throw new TypeError("expected same function reference");
    };
    e.RequireOptionalAllFunction =
        function(...d) {
            if(!e.IsNullOrUndefined(d))
                for(let c of d);
        };
    e.IsInstanceOf = function(d, c) {
        return d instanceof c
    };
    e.IsInstanceOfAny = function(d, ...c) {
        for(let f of c)
            if(e.IsInstanceOf(d, f)) return !0;
        return !1
    };
    e.RequireInstanceOf = function(d, c) {
        if(!e.IsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    e.RequireOptionalInstanceOf = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllInstanceOf = function(d, ...c) {
        for(let f of c);
    };
    e.RequireAnyInstanceOf = function(d, ...c) {
        if(!e.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    e.RequireAnyOptionalInstanceOf = function(d, ...c) {
        if(!e.IsNullOrUndefined(d) && !e.IsInstanceOfAny(d, ...c)) throw new TypeError("unexpected type");
    };
    e.IsArrayOf = function(d, c) {
        for(let f of d)
            if(!e.IsInstanceOf(f, c)) return !1;
        return !0
    };
    e.IsArrayOfFiniteNumbers = function(d) {
        for(let c of d)
            if(!e.IsFiniteNumber(c)) return !1;
        return !0
    };
    e.RequireArrayOf = function(d, c) {
        for(let f of d);
    };
    e.RequireOptionalArrayOf = function(d, c) {
        if(!e.IsNullOrUndefined(d))
            for(let f of d);
    };
    e.RequireArrayOfAny = function(d, ...c) {
        for(let f of d);
    };
    e.RequireOptionalArrayOfAny = function(d, ...c) {
        if(!e.IsNullOrUndefined(d))
            for(let f of d);
    };
    e.IsDOMNode = function(d, c) {
        return e.IsNullOrUndefined(d) || !e.IsString(d.nodeName) ? !1 : !c || e.equalsNoCase(d.nodeName, c)
    };
    e.RequireDOMNode = function(d, c) {
        if(e.IsNullOrUndefined(d) || !e.IsString(d.nodeName)) throw new TypeError("expected DOM node");
        if(c && !e.equalsNoCase(d.nodeName, c)) throw new TypeError(`expected DOM '${c}' node`);
    };
    e.RequireOptionalDOMNode = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.IsHTMLElement = function(d,
        c) {
        return e.IsNullOrUndefined(d) || !e.IsString(d.tagName) ? !1 : !c || e.equalsNoCase(d.tagName, c)
    };
    e.RequireHTMLElement = function(d, c) {
        if(e.IsNullOrUndefined(d) || !e.IsString(d.tagName)) throw new TypeError("expected HTML element");
        if(c && !e.equalsNoCase(d.tagName, c)) throw new TypeError(`expected HTML '${c}' element`);
    };
    e.RequireOptionalHTMLElement = function(d, c) {
        e.IsNullOrUndefined(d)
    };
    e.IsDrawable = function(d) {
        return e.IsHTMLElement(d, "img") || e.IsHTMLElement(d, "canvas") || e.IsHTMLElement(d, "video") || "undefined" !==
            typeof OffscreenCanvas && d instanceof OffscreenCanvas || "undefined" !== typeof ImageBitmap && d instanceof ImageBitmap
    };
    e.RequireDrawable = function(d) {
        if(!e.IsDrawable(d)) throw new TypeError("expected drawable");
    };
    e.RequireOptionalDrawable = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.IsDrawableOrImageData = function(d) {
        return d instanceof ImageData ? !0 : e.IsDrawable(d)
    };
    e.RequireDrawableOrImageData = function(d) {
        if(!e.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    e.RequireOptionalDrawableOrImageData =
        function(d) {
            if(!e.IsNullOrUndefined(d) && !e.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
        };
    e.IsStringLike = function(d) {
        return "string" === typeof d || d instanceof e.HtmlString || d instanceof e.BBString
    };
    e.RequireStringLike = function(d) {
        if(!e.IsStringLike(d)) throw new TypeError("expected string-like");
    };
    e.RequireOptionalStringLike = function(d) {
        e.IsNullOrUndefined(d)
    };
    e.RequireAllStringLike = function(...d) {
        for(let c of d);
    };
    e.RequireOverride = function() {
        throw Error("must be overridden");
    };
    e.NotYetImplemented = function() {
        throw Error("not yet implemented");
    };
    e.IsDefined = function(d, ...c) {
        if("undefined" === typeof d) return !1;
        for(let f of c) {
            if("undefined" === typeof d[f]) return !1;
            d = d[f]
        }
        return !0
    };
    e.IsNullOrUndefined = function(d) {
        return "undefined" === typeof d || null === d
    };
    e.AreArrayElementsOfSameType = function(d) {
        let c = d[0].constructor;
        for(let f of d)
            if(f.constructor !== c) return !1;
        return c
    };
    e.AreArrayElementsOfType = function(d, c) {
        for(let f of d)
            if(!(f instanceof c)) return !1;
        return !0
    };
    const a = Object.getPrototypeOf(Uint8Array);
    e.IsTypedArray = function(d) {
        return e.IsInstanceOf(d, a)
    };
    e.RequireTypedArray = function(d) {};
    e.WeakRequireTypedArray = function(d) {
        e.WeakRequireInstanceOf(d, a)
    };
    e.WeakRequireAnyInstanceOf = function(d, ...c) {
        if(!e.WeakIsAnyInstanceOf(d, ...c)) throw new TypeError("unexpected type");
    };
    e.WeakIsAnyInstanceOf = function(d, ...c) {
        for(const f of c)
            if(e.WeakIsInstanceOf(d, f)) return !0;
        return !1
    };
    e.WeakRequireInstanceOf = function(d, c) {
        if(!e.WeakIsInstanceOf(d, c)) throw new TypeError("unexpected type");
    };
    e.WeakIsInstanceOf =
        function(d, c) {
            for(; d = Object.getPrototypeOf(d);)
                if(d.constructor.name === c.name) return !0;
            return !1
        };
    b.RequireNumber = e.RequireNumber;
    b.RequireOptionalNumber = e.RequireOptionalNumber;
    b.RequireFiniteNumber = e.RequireFiniteNumber;
    b.RequireOptionalFiniteNumber = e.RequireOptionalFiniteNumber;
    b.RequireString = e.RequireString;
    b.RequireOptionalString = e.RequireOptionalString;
    b.RequireObject = e.RequireObject;
    b.RequireOptionalObject = e.RequireOptionalObject;
    b.RequireArray = e.RequireArray;
    b.RequireOptionalArray = e.RequireOptionalArray;
    b.RequireFunction = e.RequireFunction;
    b.RequireOptionalFunction = e.RequireOptionalFunction;
    b.RequireInstanceOf = e.RequireInstanceOf;
    b.RequireOptionalInstanceOf = e.RequireOptionalInstanceOf;
    b.IsNullOrUndefined = e.IsNullOrUndefined
} {
    "use strict";
    const e = self.C3,
        b = new Map;
    e.RafLog = function(r, ...y) {
        b.has(r) || b.set(r, -1); - 1 === b.get(r) && b.set(r, requestAnimationFrame(() => {
            console.log(`%c${r}`, "font-weight: bold", ...y);
            b.set(r, -1)
        }))
    };
    e.GetCallStack = function() {
        return Error().stack
    };
    e.Debugger = function() {
        debugger
    };
    e.cast = function(r, y) {
        return r && r instanceof y ? r : null
    };
    e.getName = function(r) {
        return "undefined" === typeof r ? "undefined" : null === r ? "null" : "boolean" === typeof r ? "<boolean>" : e.IsNumber(r) ? "<number>" : e.IsString(r) ? "<string>" : e.IsArray(r) ?
            "<array>" : "symbol" === typeof r ? "<" + r.toString() + ">" : e.IsFunction(r) ? r.name && "Function" !== r.name ? r.name : "<anonymous function>" : "object" === typeof r ? r.constructor && r.constructor.name && "Object" !== r.constructor.name ? r.constructor.name : "<anonymous object>" : "<unknown>"
    };
    e.getType = function(r) {
        return null === r ? "null" : Array.isArray(r) ? "array" : typeof r
    };
    e.range = function*(r, y) {
        if(!isFinite(Math.abs(r - y))) throw Error("Invalid parameters");
        if(r > y)
            for(--r; r >= y; r--) yield r;
        else
            for(; r < y; r++) yield r
    };

    function a(r, y) {
        r =
            e.getType(r);
        y = e.getType(y);
        return "null" === r || "null" === y ? !0 : "undefined" === r || "undefined" === y ? !1 : r === y
    }
    let d = new Map,
        c = new Map,
        f = new WeakMap,
        h = new WeakMap;
    e.DefendHandler = {};
    const g = new Set(["then", "splice"]);

    function k(r) {
        console.warn("[Defence] " + r + " @", e.GetCallStack())
    }
    e.DefendHandler.get = function(r, y) {
        y in r || "symbol" === typeof y || g.has(y) || k(`Accessed missing property '${y}' from defended object '${e.getName(r)}', returning undefined`);
        h.has(r) && "symbol" !== typeof y && !g.has(y) && k(`Accessed property '${y}' on a released object '${e.getName(r)}'\nObject was originally released at: ${h.get(r)})\nCall stack at access: `);
        return r[y]
    };
    e.DefendHandler.set = function(r, y, v) {
        y in r || d.has(r) || k(`Set non-existent property '${y}' to '${v}' on defended object '${e.getName(r)}'`);
        a(r[y], v) || d.has(r) || k(`Set '${e.getType(r[y])}' property '${y}' to type '${e.getType(v)}' on defended object '${e.getName(r)}'`);
        h.has(r) && k(`Set property '${y}' on a released object '${e.getName(r)}'\nObject was originally released at: ${h.get(r)})\nCall stack at access: `);
        r[y] = v;
        return !0
    };
    e.DefendHandler.deleteProperty = function(r, y) {
        throw new ReferenceError(`Cannot delete property '${y}' from defended object '${e.getName(r)}'`);
    };
    e.DefendHandler.defineProperty = function(r, y, v) {
        throw new ReferenceError(`Cannot define property '${y}' on defended object '${e.getName(r)}'`);
    };
    e.DefendHandler.enumerate = function(r) {
        throw new ReferenceError(`Cannot enumerate defended object '${e.getName(r)}'`);
    };
    let m = -1;

    function p() {
        m = -1;
        if(0 < d.size || 0 < c.size) {
            let r = [...new Set([...d.keys()].map(y => e.getName(y)))].join();
            console.warn(`An object derived from DefendedBase was not protected with debugDefend(). This will disable some checks. See the coding guidelines! Possible affected class names: ${r}`);
            d.clear();
            c.clear()
        }
    }
    e.DefendedBase = class {
        constructor() {
            if(e.isDebugDefend && e.Supports.Proxies) {
                var r = new.target;
                r = Object.create(r.prototype);
                var y = new Proxy(r, e.DefendHandler);
                d.set(r, y);
                c.set(y, r);
                f.set(y, r); - 1 === m && (m = requestAnimationFrame(p));
                return y
            }
        }
    };
    e.debugDefend = function(r) {
        if(e.isDebugDefend && e.Supports.Proxies && r instanceof e.DefendedBase) {
            if(!c.has(r)) return r;
            let y = c.get(r);
            c.delete(r);
            d.delete(y);
            return r
        }
        return e.isDebug ? Object.seal(r) : r
    };
    e.New = function(r, ...y) {
        let v;
        try {
            v = new r(...y)
        } catch (u) {
            throw c.clear(),
                d.clear(), u;
        }
        e.isDebugDefend && q(r, v);
        return e.debugDefend(v)
    };
    e.Release = function(r) {
        (r = f.get(r)) && h.set(r, e.GetCallStack())
    };
    e.WasReleased = function(r) {
        return (r = f.get(r)) ? !!h.get(r) : !1
    };
    let x = new Map;

    function t(r) {
        let y = new Set;
        for(let v in r) y.add(v);
        return y
    }

    function q(r, y) {
        y = t(y);
        let v = x.get(r);
        if(v) {
            let u = [];
            for(let A of v.values()) y.has(A) ? y.delete(A) : u.push(A);
            e.appendArray(u, [...y]);
            u.length && console.warn(`[Defence] '${e.getName(r)}' constructor creates inconsistent properties: ${u.join(", ")}`)
        } else x.set(r,
            y)
    }
    e.PerfMark = class {
        constructor(r) {
            this._name = "";
            r && this.start(r)
        }
        start(r) {
            this._name = r;
            performance.mark(this._name + "-Start")
        }
        end() {
            performance.mark(this._name + "-End");
            performance.measure(this._name, this._name + "-Start", this._name + "-End")
        }
        next(r) {
            this.end();
            this._name = r;
            performance.mark(this._name + "-Start")
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = 2 * Math.PI,
        a = Math.PI / 180,
        d = 180 / Math.PI;
    e.wrap = function(h, g, k) {
        h = Math.floor(h);
        g = Math.floor(g);
        k = Math.floor(k);
        return h < g ? (h = k - (g - h) % (k - g), h === k ? 0 : h) : g + (h - g) % (k - g)
    };
    e.mapToRange = function(h, g, k, m, p) {
        return (h - g) * (p - m) / (k - g) + m
    };
    e.normalize = function(h, g, k) {
        return (h - g) / (k - g)
    };
    e.clamp = function(h, g, k) {
        return h < g ? g : h > k ? k : h
    };
    e.clampAngle = function(h) {
        h %= b;
        0 > h && (h += b);
        return h
    };
    e.toRadians = function(h) {
        return h * a
    };
    e.toDegrees = function(h) {
        return h * d
    };
    e.distanceTo = function(h, g, k, m) {
        return Math.hypot(k -
            h, m - g)
    };
    e.distanceSquared = function(h, g, k, m) {
        h = k - h;
        g = m - g;
        return h * h + g * g
    };
    e.angleTo = function(h, g, k, m) {
        return Math.atan2(m - g, k - h)
    };
    e.angleDiff = function(h, g) {
        if(h === g) return 0;
        h = Math.sin(h) * Math.sin(g) + Math.cos(h) * Math.cos(g);
        return 1 <= h ? 0 : -1 >= h ? Math.PI : Math.acos(h)
    };
    e.angleRotate = function(h, g, k) {
        let m = Math.sin(h),
            p = Math.cos(h),
            x = Math.sin(g),
            t = Math.cos(g);
        return Math.acos(m * x + p * t) > k ? 0 < p * x - m * t ? e.clampAngle(h + k) : e.clampAngle(h - k) : e.clampAngle(g)
    };
    e.angleClockwise = function(h, g) {
        return 0 >= Math.cos(h) * Math.sin(g) -
            Math.sin(h) * Math.cos(g)
    };
    e.angleLerp = function(h, g, k, m = 0) {
        let p = e.angleDiff(h, g);
        m *= b;
        return e.angleClockwise(g, h) ? e.clampAngle(h + (p + m) * k) : e.clampAngle(h - (p + m) * k)
    };
    e.angleLerpClockwise = function(h, g, k, m = 0) {
        const p = e.angleDiff(h, g);
        m *= b;
        return e.angleClockwise(g, h) ? e.clampAngle(h + (p + m) * k) : e.clampAngle((b - p + m) * k)
    };
    e.angleLerpAntiClockwise = function(h, g, k, m = 0) {
        const p = e.angleDiff(h, g);
        m *= b;
        return e.angleClockwise(g, h) ? e.clampAngle((-b + p - m) * k) : e.clampAngle(h - (p + m) * k)
    };
    e.lerp = function(h, g, k) {
        return h + k * (g -
            h)
    };
    e.unlerp = function(h, g, k) {
        return h === g ? 0 : (k - h) / (g - h)
    };
    e.relerp = function(h, g, k, m, p) {
        return e.lerp(m, p, e.unlerp(h, g, k))
    };
    e.qarp = function(h, g, k, m) {
        return e.lerp(e.lerp(h, g, m), e.lerp(g, k, m), m)
    };
    e.cubic = function(h, g, k, m, p) {
        return e.lerp(e.qarp(h, g, k, p), e.qarp(g, k, m, p), p)
    };
    e.cosp = function(h, g, k) {
        return (h + g + (h - g) * Math.cos(k * Math.PI)) / 2
    };
    e.isPOT = function(h) {
        return 0 < h && 0 === (h - 1 & h)
    };
    e.nextHighestPowerOfTwo = function(h) {
        --h;
        for(let g = 1; 32 > g; g <<= 1) h |= h >> g;
        return h + 1
    };
    e.roundToNearestFraction = function(h, g) {
        return Math.round(h *
            g) / g
    };
    e.floorToNearestFraction = function(h, g) {
        return Math.floor(h * g) / g
    };
    e.round6dp = function(h) {
        return Math.round(1E6 * h) / 1E6
    };
    e.toFixed = function(h, g) {
        h = h.toFixed(g);
        for(g = h.length - 1; 0 <= g && "0" === h.charAt(g); --g);
        0 <= g && "." === h.charAt(g) && --g;
        return 0 > g ? h : h.substr(0, g + 1)
    };
    e.PackRGB = function(h, g, k) {
        return e.clamp(h, 0, 255) | e.clamp(g, 0, 255) << 8 | e.clamp(k, 0, 255) << 16
    };
    e.PackRGBAEx = function(h, g, k, m) {
        h = e.clamp(Math.floor(1024 * h), -8192, 8191);
        g = e.clamp(Math.floor(1024 * g), -8192, 8191);
        k = e.clamp(Math.floor(1024 * k),
            -8192, 8191);
        m = e.clamp(Math.floor(1023 * m), 0, 1023);
        0 > h && (h += 16384);
        0 > g && (g += 16384);
        0 > k && (k += 16384);
        return -(274877906944 * h + 16777216 * g + 1024 * k + m)
    };
    e.PackRGBEx = function(h, g, k) {
        return e.PackRGBAEx(h, g, k, 1)
    };

    function c(h) {
        return 0 === h && 0 > 1 / h
    }
    e.GetRValue = function(h) {
        if(0 <= h) return (h & 255) / 255;
        h = Math.floor(-h / 274877906944);
        8191 < h && (h -= 16384);
        return h / 1024
    };
    e.GetGValue = function(h) {
        if(0 <= h) return ((h & 65280) >> 8) / 255;
        h = Math.floor(-h % 274877906944 / 16777216);
        8191 < h && (h -= 16384);
        return h / 1024
    };
    e.GetBValue = function(h) {
        if(0 <=
            h) return ((h & 16711680) >> 16) / 255;
        h = Math.floor(-h % 16777216 / 1024);
        8191 < h && (h -= 16384);
        return h / 1024
    };
    e.GetAValue = function(h) {
        return c(h) ? 0 : 0 <= h ? 1 : Math.floor(-h % 1024) / 1023
    };
    e.greatestCommonDivisor = function(h, g) {
        h = Math.floor(h);
        for(g = Math.floor(g); 0 !== g;) {
            let k = g;
            g = h % g;
            h = k
        }
        return h
    };
    const f = [
        [3, 2],
        [4, 3],
        [5, 4],
        [5, 3],
        [6, 5],
        [14, 9],
        [16, 9],
        [16, 10],
        [21, 9]
    ];
    e.getAspectRatio = function(h, g) {
        h = Math.floor(h);
        g = Math.floor(g);
        if(h === g) return [1, 1];
        for(var k of f) {
            let m = h / k[0] * k[1];
            if(1 > Math.abs(g - m)) return k.slice(0);
            m = h / k[1] * k[0];
            if(1 > Math.abs(g - m)) return [k[1], k[0]]
        }
        k = e.greatestCommonDivisor(h, g);
        return [h / k, g / k]
    };
    e.segmentsIntersect = function(h, g, k, m, p, x, t, q) {
        var r = Math.min(h, k),
            y = Math.max(p, t);
        if(Math.max(h, k) < Math.min(p, t) || r > y) return !1;
        r = Math.min(g, m);
        y = Math.max(x, q);
        if(Math.max(g, m) < Math.min(x, q) || r > y) return !1;
        r = p - h + t - k;
        y = x - g + q - m;
        h = k - h;
        g = m - g;
        p = t - p;
        x = q - x;
        q = Math.abs(g * p - x * h);
        return Math.abs(p * y - x * r) > q ? !1 : Math.abs(h * y - g * r) <= q
    };
    e.segmentsIntersectPreCalc = function(h, g, k, m, p, x, t, q, r, y, v, u) {
        const A = Math.max(r, v);
        if(x < Math.min(r, v) || p > A) return !1;
        p = Math.max(y, u);
        if(q < Math.min(y, u) || t > p) return !1;
        t = r - h + v - k;
        q = y - g + u - m;
        h = k - h;
        g = m - g;
        r = v - r;
        y = u - y;
        u = Math.abs(g * r - y * h);
        return Math.abs(r * q - y * t) > u ? !1 : Math.abs(h * q - g * t) <= u
    };
    e.segmentIntersectsQuad = function(h, g, k, m, p) {
        const x = Math.min(h, k),
            t = Math.max(h, k),
            q = Math.min(g, m),
            r = Math.max(g, m),
            y = p.getTlx(),
            v = p.getTly(),
            u = p.getTrx(),
            A = p.getTry(),
            z = p.getBrx(),
            C = p.getBry(),
            E = p.getBlx();
        p = p.getBly();
        return e.segmentsIntersectPreCalc(h, g, k, m, x, t, q, r, y, v, u, A) || e.segmentsIntersectPreCalc(h,
            g, k, m, x, t, q, r, u, A, z, C) || e.segmentsIntersectPreCalc(h, g, k, m, x, t, q, r, z, C, E, p) || e.segmentsIntersectPreCalc(h, g, k, m, x, t, q, r, E, p, y, v)
    };
    e.segmentIntersectsAnyN = function(h, g, k, m, p) {
        const x = Math.min(h, k),
            t = Math.max(h, k),
            q = Math.min(g, m),
            r = Math.max(g, m);
        let y = 0;
        for(let v = p.length - 4; y <= v; y += 2)
            if(e.segmentsIntersectPreCalc(h, g, k, m, x, t, q, r, p[y], p[y + 1], p[y + 2], p[y + 3])) return !0;
        return e.segmentsIntersectPreCalc(h, g, k, m, x, t, q, r, p[y], p[y + 1], p[0], p[1])
    };
    e.rayIntersect = function(h, g, k, m, p, x, t, q) {
        k -= h;
        x = q - x;
        const r = k *
            x - (m - g) * (t - p);
        if(0 === r) return 2;
        m = ((g - m) * (t - h) + k * (q - g)) / r;
        return 0 < m && 1.000001 > m ? (x * (t - h) + (p - t) * (q - g)) / r : 2
    };
    e.rayIntersectExtended = function(h, g, k, m, p, x, t, q, r) {
        const y = (t - p) * r;
        r *= q - x;
        return e.rayIntersect(h, g, k, m, p - y, x - r, t + y, q + r)
    };
    e.isPointInTriangleInclusive = function(h, g, k, m, p, x, t, q) {
        p -= k;
        x -= m;
        t -= k;
        q -= m;
        h -= k;
        k = g - m;
        g = p * p + x * x;
        m = p * t + x * q;
        p = p * h + x * k;
        x = t * t + q * q;
        t = t * h + q * k;
        q = 1 / (g * x - m * m);
        x = (x * p - m * t) * q;
        p = (g * t - m * p) * q;
        return 0 <= x && 0 <= p && 1 >= x + p
    };
    e.triangleCartesianToBarycentric = function(h, g, k, m, p, x, t, q) {
        p -= k;
        x -=
            m;
        t -= k;
        q -= m;
        h -= k;
        const r = g - m;
        g = p * p + x * x;
        m = p * t + x * q;
        k = t * t + q * q;
        p = h * p + r * x;
        x = h * t + r * q;
        t = g * k - m * m;
        q = (k * p - m * x) / t;
        p = (g * x - m * p) / t;
        return [1 - q - p, q, p]
    };
    e.triangleBarycentricToCartesian = function(h, g, k, m, p, x, t, q, r) {
        return [h * m + g * x + k * q, h * p + g * t + k * r]
    }
} {
    "use strict";
    const e = self.C3;
    let b = null,
        a = "";
    if("undefined" !== typeof document) {
        b = document;
        const k = document.querySelector("base");
        if(a = k && k.hasAttribute("href") ? k.getAttribute("href") : "") a.startsWith("/") && (a = a.substr(1)), a.endsWith("/") || (a += "/")
    }
    e.GetBaseHref = function() {
        return a
    };
    e.GetBaseURL = function() {
        if(!b) return "";
        const k = b.location;
        return e.GetPathFromURL(k.origin + k.pathname) + a
    };
    e.GetPathFromURL = function(k) {
        if(!k.length || k.endsWith("/") || k.endsWith("\\")) return k;
        const m = Math.max(k.lastIndexOf("/"),
            k.lastIndexOf("\\"));
        return -1 === m ? "" : k.substr(0, m + 1)
    };
    e.GetFilenameFromURL = function(k) {
        if(!k.length) return k;
        if(k.endsWith("/") || k.endsWith("\\")) return "";
        const m = Math.max(k.lastIndexOf("/"), k.lastIndexOf("\\"));
        return -1 === m ? k : k.substr(m + 1)
    };
    e.GetFileExtension = function(k) {
        let m = k.lastIndexOf(".");
        return 1 > m ? "" : k.substr(m)
    };
    e.GetFileNamePart = function(k) {
        let m = k.lastIndexOf(".");
        return 1 > m ? k : k.substr(0, m)
    };
    e.NormalizeFileSeparator = function(k) {
        return k.replace(/\\/g, "/")
    };
    e.IsFileExtension = function(k,
        m) {
        k = k ? e.GetFileExtension(k).slice(1) : "";
        return m === k
    };
    e.FileNameEquals = function(k, m) {
        let p, x;
        e.IsFileLike(k) && (p = e.GetFileNamePart(k.name));
        e.IsString(k) && (p = e.GetFileNamePart(k));
        e.IsFileLike(m) && (x = e.GetFileNamePart(m.name));
        e.IsString(m) && (x = e.GetFileNamePart(m));
        return p === x
    };
    e.ParseFilePath = function(k) {
        k = e.NormalizeFileSeparator(k);
        let m = /^\w:\//.exec(k);
        m ? (m = m[0], k = k.slice(3), "/" !== k[0] && (k = "/" + k)) : m = "";
        k = k.replace(/\/{2,}/g, "/");
        1 < k.length && "/" === k.slice(-1) && (k = k.slice(0, -1));
        var p = k.lastIndexOf("/") +
            1;
        let x = "",
            t = k,
            q = "";
        0 < p && (x = k.slice(0, p), t = k.slice(p));
        k = t;
        p = t.lastIndexOf(".");
        0 < p && (q = t.slice(p), k = t.slice(0, -q.length));
        return {
            dir: x,
            base: t,
            name: k,
            root: m,
            ext: q,
            full: m + x + t
        }
    };
    e.Wait = function(k, m) {
        return new Promise((p, x) => {
            self.setTimeout(p, k, m)
        })
    };
    e.swallowException = function(k) {
        try {
            k()
        } catch (m) {
            e.isDebug && console.warn("Swallowed exception: ", m)
        }
    };
    e.noop = function() {};
    e.equalsNoCase = function(k, m) {
        return "string" !== typeof k || "string" !== typeof m ? !1 : k === m || k.normalize().toLowerCase() === m.normalize().toLowerCase()
    };
    e.equalsCase = function(k, m) {
        return "string" !== typeof k || "string" !== typeof m ? !1 : k === m ? !0 : k.normalize() === m.normalize()
    };
    e.typedArraySet16 = function(k, m, p) {
        k[p++] = m[0];
        k[p++] = m[1];
        k[p++] = m[2];
        k[p++] = m[3];
        k[p++] = m[4];
        k[p++] = m[5];
        k[p++] = m[6];
        k[p++] = m[7];
        k[p++] = m[8];
        k[p++] = m[9];
        k[p++] = m[10];
        k[p++] = m[11];
        k[p++] = m[12];
        k[p++] = m[13];
        k[p++] = m[14];
        k[p] = m[15]
    };
    e.truncateArray = function(k, m) {
        k.length = m
    };
    e.clearArray = function(k) {
        k && 0 !== k.length && e.truncateArray(k, 0)
    };
    e.clear2DArray = function(k) {
        if(k) {
            for(let m = 0; m <
                k.length; m++) e.truncateArray(k[m], 0);
            e.truncateArray(k, 0)
        }
    };
    e.extendArray = function(k, m, p) {
        m |= 0;
        var x = k.length;
        if(!(m <= x))
            for(; x < m; ++x) k.push(p)
    };
    e.resizeArray = function(k, m, p) {
        m |= 0;
        const x = k.length;
        m < x ? e.truncateArray(k, m) : m > x && e.extendArray(k, m, p)
    };
    e.shallowAssignArray = function(k, m) {
        e.clearArray(k);
        e.appendArray(k, m)
    };
    e.appendArray = function(k, m) {
        if(1E4 > m.length) k.push(...m);
        else
            for(let p = 0, x = m.length; p < x; ++p) k.push(m[p])
    };
    e.arrayRemove = function(k, m) {
        m = Math.floor(m);
        if(!(0 > m || m >= k.length)) {
            for(var p =
                    k.length - 1; m < p; ++m) k[m] = k[m + 1];
            e.truncateArray(k, p)
        }
    };
    e.arrayFindRemove = function(k, m) {
        m = k.indexOf(m);
        0 <= m && k.splice(m, 1)
    };
    e.arraysEqual = function(k, m) {
        let p = k.length;
        if(m.length !== p) return !1;
        for(let x = 0; x < p; ++x)
            if(k[x] !== m[x]) return !1;
        return !0
    };
    e.arrayFilterOut = function(k, m) {
        let p = [],
            x = 0;
        for(let t = 0, q = k.length; t < q; ++t) {
            let r = k[t];
            m(r) ? p.push(r) : (k[x] = r, ++x)
        }
        e.truncateArray(k, x);
        return p
    };
    e.arrayRemoveAllInSet = function(k, m) {
        const p = k.length;
        let x = 0;
        for(let t = 0, q = k.length; t < q; ++t) {
            let r = k[t];
            m.has(r) ||
                (k[x++] = r)
        }
        e.truncateArray(k, x);
        return p - x
    };
    e.isArrayIndexInBounds = function(k, m) {
        return k !== Math.floor(k) ? !1 : 0 <= k && k < m.length
    };
    e.validateArrayIndex = function(k, m) {
        if(!e.isArrayIndexInBounds(k, m)) throw new RangeError("array index out of bounds");
    };
    e.cloneArray = function(k) {
        return k.slice()
    };
    e.deepCloneArray = function(k, m) {
        let p = [];
        for(let x of k)
            if(e.IsObject(x)) {
                k = m(x);
                if(!k) throw Error("missing clone");
                if(k.constructor !== x.constructor) throw Error("object is not a clone");
                p.push(k)
            } else e.IsArray(x) ?
                p.push(e.deepCloneArray(x, m)) : p.push(x);
        return p
    };
    e.clone2DArray = function(k) {
        let m = [];
        for(let p of k) m.push(p.slice());
        return m
    };
    e.mergeSets = function(k, m) {
        return new Set([...k, ...m])
    };
    e.mergeSetsInPlace = function(k, m) {
        for(const p of m) k.add(p);
        return k
    };
    e.first = function(k) {
        for(let m of k) return m;
        return null
    };
    e.xor = function(k, m) {
        return !k !== !m
    };
    e.compare = function(k, m, p) {
        switch(m) {
            case 0:
                return k === p;
            case 1:
                return k !== p;
            case 2:
                return k < p;
            case 3:
                return k <= p;
            case 4:
                return k > p;
            case 5:
                return k >= p;
            default:
                return !1
        }
    };
    e.hasAnyOwnProperty = function(k) {
        for(let m in k)
            if(k.hasOwnProperty(m)) return !0;
        return !1
    };
    e.PromiseAllWithProgress = function(k, m) {
        return k.length ? new Promise((p, x) => {
            const t = [];
            let q = 0,
                r = !1;
            for(let y = 0, v = k.length; y < v; ++y) t.push(void 0), k[y].then(u => {
                r || (t[y] = u, ++q, q === k.length ? p(t) : m(q, k.length))
            }).catch(u => {
                r = !0;
                x(u)
            })
        }) : Promise.resolve([])
    };
    let d = [];
    e.AddLibraryMemoryCallback = function(k) {
        d.push(k)
    };
    e.GetEstimatedLibraryMemoryUsage = function() {
        let k = 0;
        for(let m of d) {
            let p = m();
            k += p
        }
        return Math.floor(k)
    };
    let c = 1;
    const f = new Map,
        h = new MessageChannel;
    h.port2.onmessage = function(k) {
        k = k.data;
        const m = f.get(k);
        f.delete(k);
        m && m(performance.now())
    };
    e.RequestUnlimitedAnimationFrame = function(k) {
        const m = c++;
        f.set(m, k);
        h.port1.postMessage(m);
        return m
    };
    e.CancelUnlimitedAnimationFrame = function(k) {
        f.delete(k)
    };
    e.PostTask = e.RequestUnlimitedAnimationFrame;
    e.WaitForNextTask = function() {
        return new Promise(k => e.PostTask(k))
    };
    const g = new Set;
    e.RequestPostAnimationFrame = function(k) {
        const m = self.requestAnimationFrame(async p => {
            await e.WaitForNextTask();
            g.has(m) && (g.delete(m), k(p))
        });
        g.add(m);
        return m
    };
    e.CancelPostAnimationFrame = function(k) {
        g.has(k) && (self.cancelAnimationFrame(k), g.delete(k))
    }
} {
    "use strict";
    const e = self.C3;
    e.IsAbsoluteURL = function(b) {
        return /^(?:[a-z\-]+:)?\/\//.test(b) || "data:" === b.substr(0, 5) || "blob:" === b.substr(0, 5)
    };
    e.IsRelativeURL = function(b) {
        return !e.IsAbsoluteURL(b)
    };
    e.ThrowIfNotOk = function(b) {
        if(!b.ok) throw Error(`fetch '${b.url}' response returned ${b.status} ${b.statusText}`);
    };
    e.FetchOk = function(b, a) {
        return fetch(b, a).then(d => {
            e.ThrowIfNotOk(d);
            return d
        })
    };
    e.FetchText = function(b) {
        return e.FetchOk(b).then(a => a.text())
    };
    e.FetchJson = function(b) {
        return e.FetchOk(b).then(a =>
            a.json())
    };
    e.FetchBlob = function(b) {
        return e.FetchOk(b).then(a => a.blob())
    };
    e.FetchArrayBuffer = function(b) {
        return e.FetchOk(b).then(a => a.arrayBuffer())
    };
    e.FetchImage = function(b) {
        return new Promise((a, d) => {
            const c = new Image;
            c.onload = () => a(c);
            c.onerror = f => d(f);
            c.src = b
        })
    };
    e.BlobToArrayBuffer = function(b) {
        return "function" === typeof b.arrayBuffer ? b.arrayBuffer() : new Promise((a, d) => {
            const c = new FileReader;
            c.onload = () => a(c.result);
            c.onerror = () => d(c.error);
            c.readAsArrayBuffer(b)
        })
    };
    e.BlobToString = function(b) {
        return "function" ===
            typeof b.text ? b.text() : new Promise((a, d) => {
                const c = new FileReader;
                c.onload = () => a(c.result);
                c.onerror = () => d(c.error);
                c.readAsText(b)
            })
    };
    e.BlobToJson = function(b) {
        return e.BlobToString(b).then(a => JSON.parse(a))
    };
    e.BlobToImage = async function(b, a) {
        b = URL.createObjectURL(b);
        try {
            const d = await e.FetchImage(b);
            URL.revokeObjectURL(b);
            b = "";
            a && "function" === typeof d.decode && await d.decode();
            return d
        } finally {
            b && URL.revokeObjectURL(b)
        }
    };
    e.CreateCanvas = function(b, a) {
        if("undefined" !== typeof document && "function" ===
            typeof document.createElement) {
            const d = document.createElement("canvas");
            d.width = b;
            d.height = a;
            return d
        }
        return new OffscreenCanvas(b, a)
    };
    e.CanvasToBlob = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = e.clamp(d, 0, 1);
        return b.toBlob ? new Promise(c => b.toBlob(c, a, d)) : b.convertToBlob ? b.convertToBlob({
            type: a,
            quality: d
        }) : e.Asyncify(() => e.CanvasToBlobSync(b, a, d))
    };
    e.CanvasToBlobSync = function(b, a, d) {
        "number" !== typeof d && (d = 1);
        a = a || "image/png";
        d = e.clamp(d, 0, 1);
        return e.DataURIToBinaryBlobSync(b.toDataURL(a,
            d))
    };
    e.DataURIToBinaryBlobSync = function(b) {
        b = e.ParseDataURI(b);
        return e.BinaryStringToBlob(b.data, b.mime_type)
    };
    e.ParseDataURI = function(b) {
        if("data:" !== b.substr(0, 5)) throw new URIError("expected data: uri");
        var a = b.indexOf(",");
        if(0 > a) throw new URIError("expected comma in data: uri");
        var d = b.substring(5, a);
        b = b.substring(a + 1);
        a = d.split(";");
        d = a[0] || "";
        let c = a[2];
        b = "base64" === a[1] || "base64" === c ? atob(b) : decodeURIComponent(b);
        return {
            mime_type: d,
            data: b
        }
    };
    e.BinaryStringToBlob = function(b, a) {
        var d = b.length;
        let c = d >> 2,
            f = new Uint8Array(d),
            h = new Uint32Array(f.buffer, 0, c),
            g, k;
        for(k = g = 0; g < c; ++g) h[g] = b.charCodeAt(k++) | b.charCodeAt(k++) << 8 | b.charCodeAt(k++) << 16 | b.charCodeAt(k++) << 24;
        for(d &= 3; d--;) f[k] = b.charCodeAt(k), ++k;
        return a ? new Blob([f], {
            type: a
        }) : new Blob([f])
    };
    e.DrawableToBlob = function(b, a, d) {
        const c = e.CreateCanvas(b.width, b.height);
        c.getContext("2d").drawImage(b, 0, 0);
        return e.CanvasToBlob(c, a, d)
    };
    e.ImageDataToBlobSync = function(b, a, d) {
        const c = e.CreateCanvas(b.width, b.height);
        c.getContext("2d").putImageData(b,
            0, 0);
        return e.CanvasToBlobSync(c, a, d)
    };
    e.ImageDataToBlob = function(b, a, d) {
        if(e.Supports.ImageBitmapOptions) return createImageBitmap(b, {
            premultiplyAlpha: "none"
        }).then(c => e.DrawableToBlob(c, a, d));
        if(e.Supports.ImageBitmap) return createImageBitmap(b).then(c => e.DrawableToBlob(c, a, d)); {
            const c = e.CreateCanvas(b.width, b.height);
            c.getContext("2d").putImageData(b, 0, 0);
            return e.CanvasToBlob(c, a, d)
        }
    };
    e.CopySet = function(b, a) {
        b.clear();
        for(const d of a) b.add(d)
    };
    e.MapToObject = function(b) {
        const a = Object.create(null);
        for(const [d, c] of b.entries()) a[d] = c;
        return a
    };
    e.ObjectToMap = function(b, a) {
        a.clear();
        for(const [d, c] of Object.entries(b)) a.set(d, c)
    };
    e.ToSuperJSON = function d(a) {
        if("object" === typeof a && null !== a) {
            if(a instanceof Set) return {
                _c3type_: "set",
                data: [...a].map(c => d(c))
            };
            if(a instanceof Map) return {
                _c3type_: "map",
                data: [...a].map(c => [c[0], d(c[1])])
            }; {
                const c = Object.create(null);
                for(const [f, h] of Object.entries(a)) c[f] = d(h);
                return c
            }
        }
        return a
    };
    e.FromSuperJSON = function c(d) {
        if("object" === typeof d & null !== d) {
            if("set" ===
                d._c3type_) return new Set(d.data.map(f => c(f)));
            if("map" === d._c3type_) return new Map(d.data.map(f => [f[0], c(f[1])])); {
                const f = Object.create(null);
                for(const [h, g] of Object.entries(d)) f[h] = c(g);
                return f
            }
        }
        return d
    };
    e.CSSToCamelCase = function(d) {
        let c = "",
            f = !1;
        for(const h of d) "-" === h ? f = !0 : f ? (c += h.toUpperCase(), f = !1) : c += h;
        return c
    };
    e.IsIterator = function(d) {
        return "object" === typeof d && "function" === typeof d.next
    };
    e.MakeFilledArray = function(d, c) {
        const f = [];
        if("function" === typeof c)
            for(var h = 0; h < d; ++h) f.push(c());
        else
            for(h = 0; h < d; ++h) f.push(c);
        return f
    }
} {
    "use strict";
    const e = self.C3,
        b = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?/i,
        a = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?,([0-9.])/i;

    function d(f) {
        return 0 === f.length ? "00" : 1 === f.length ? "0" + f : f
    }

    function c(f, h, g) {
        0 > g && (g += 1);
        1 < g && --g;
        return g < 1 / 6 ? f + 6 * (h - f) * g : .5 > g ? h : g < 2 / 3 ? f + (h - f) * (2 / 3 - g) * 6 : f
    }
    e.Color = class {
        constructor(f, h, g, k) {
            this._a = this._b = this._g = this._r = 0;
            f instanceof e.Color ? this.set(f) : this.setRgba(f || 0, h || 0, g || 0, k || 0)
        }
        setRgb(f, h, g) {
            this._r = +f;
            this._g = +h;
            this._b = +g;
            this.clamp();
            return this
        }
        setRgba(f, h, g, k) {
            this._r = +f;
            this._g = +h;
            this._b = +g;
            this._a = +k;
            this.clamp();
            return this
        }
        set(f) {
            this._r = f._r;
            this._g = f._g;
            this._b = f._b;
            this._a = f._a;
            return this
        }
        copy(f) {
            return this.set(f)
        }
        add(f) {
            this._r += f._r;
            this._g += f._g;
            this._b += f._b;
            this._a += f._a;
            this.clamp()
        }
        addRgb(f, h, g, k = 0) {
            this._r += +f;
            this._g += +h;
            this._b += +g;
            this._a += +k;
            this.clamp()
        }
        diff(f) {
            this.setR(Math.max(this._r, f._r) - Math.min(this._r, f._r));
            this.setG(Math.max(this._g, f._g) - Math.min(this._g, f._g));
            this.setB(Math.max(this._b, f._b) - Math.min(this._b, f._b));
            this.setA(Math.max(this._a,
                f._a) - Math.min(this._a, f._a));
            this.clamp()
        }
        copyRgb(f) {
            this._r = f._r;
            this._g = f._g;
            this._b = f._b
        }
        setR(f) {
            this._r = e.clamp(+f, 0, 1)
        }
        getR() {
            return this._r
        }
        setG(f) {
            this._g = e.clamp(+f, 0, 1)
        }
        getG() {
            return this._g
        }
        setB(f) {
            this._b = e.clamp(+f, 0, 1)
        }
        getB() {
            return this._b
        }
        setA(f) {
            this._a = e.clamp(+f, 0, 1)
        }
        getA() {
            return this._a
        }
        clone() {
            return e.New(e.Color, this._r, this._g, this._b, this._a)
        }
        toArray() {
            return [this._r, this._g, this._b, this._a]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(f, h) {
            f[h++] =
                this._r;
            f[h++] = this._g;
            f[h++] = this._b;
            f[h] = this._a
        }
        equals(f) {
            return this._r === f._r && this._g === f._g && this._b === f._b && this._a === f._a
        }
        equalsIgnoringAlpha(f) {
            return this._r === f._r && this._g === f._g && this._b === f._b
        }
        equalsRgb(f, h, g) {
            return this._r === f && this._g === h && this._b === g
        }
        equalsRgba(f, h, g, k) {
            return this._r === f && this._g === h && this._b === g && this._a === k
        }
        multiply(f) {
            this._r *= f._r;
            this._g *= f._g;
            this._b *= f._b;
            this._a *= f._a
        }
        multiplyAlpha(f) {
            this._r *= f;
            this._g *= f;
            this._b *= f;
            this._a *= f
        }
        premultiply() {
            this._r *= this._a;
            this._g *= this._a;
            this._b *= this._a;
            return this
        }
        unpremultiply() {
            this._r /= this._a;
            this._g /= this._a;
            this._b /= this._a;
            return this
        }
        clamp() {
            this._r = e.clamp(this._r, 0, 1);
            this._g = e.clamp(this._g, 0, 1);
            this._b = e.clamp(this._b, 0, 1);
            this._a = e.clamp(this._a, 0, 1);
            return this
        }
        setFromRgbValue(f) {
            this._r = e.GetRValue(f);
            this._g = e.GetGValue(f);
            this._b = e.GetBValue(f);
            this._a = e.GetAValue(f)
        }
        getCssRgb(f, h, g) {
            f = e.IsFiniteNumber(f) ? f : this.getR();
            h = e.IsFiniteNumber(h) ? h : this.getG();
            g = e.IsFiniteNumber(g) ? g : this.getB();
            return `rgb(${100*
f}%, ${100*h}%, ${100*g}%)`
        }
        getCssRgba(f, h, g, k) {
            f = e.IsFiniteNumber(f) ? f : this.getR();
            h = e.IsFiniteNumber(h) ? h : this.getG();
            g = e.IsFiniteNumber(g) ? g : this.getB();
            k = e.IsFiniteNumber(k) ? k : this.getA();
            return `rgba(${100*f}%, ${100*h}%, ${100*g}%, ${k})`
        }
        toHexString() {
            const f = Math.round(255 * this.getR()),
                h = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return "#" + d(f.toString(16)) + d(h.toString(16)) + d(g.toString(16))
        }
        parseHexString(f) {
            if("string" !== typeof f) return !1;
            f = f.trim();
            "#" === f.charAt(0) && (f =
                f.substr(1));
            let h, g;
            if(3 === f.length) h = parseInt(f[0], 16) / 15, g = parseInt(f[1], 16) / 15, f = parseInt(f[2], 16) / 15;
            else if(6 === f.length) h = parseInt(f.substr(0, 2), 16) / 255, g = parseInt(f.substr(2, 2), 16) / 255, f = parseInt(f.substr(4, 2), 16) / 255;
            else return !1;
            isFinite(h) && this.setR(h);
            isFinite(g) && this.setG(g);
            isFinite(f) && this.setB(f);
            this.setA(1);
            return !0
        }
        toCommaSeparatedRgb() {
            const f = Math.round(255 * this.getR()),
                h = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return `${f}, ${h}, ${g}`
        }
        toRgbArray() {
            const f =
                Math.round(255 * this.getR()),
                h = Math.round(255 * this.getG()),
                g = Math.round(255 * this.getB());
            return [f, h, g]
        }
        parseCommaSeparatedRgb(f) {
            if("string" !== typeof f) return !1;
            f = f.replace(/^rgb\(|\)|%/, "");
            var h = f.split(",");
            if(3 > h.length) return !1;
            f = parseInt(h[0].trim(), 10) / 255;
            const g = parseInt(h[1].trim(), 10) / 255;
            h = parseInt(h[2].trim(), 10) / 255;
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(h) && this.setB(h);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedPercentageRgb(f) {
            if("string" !== typeof f) return !1;
            f =
                f.replace(/^rgb\(|\)|%/, "");
            var h = f.split(",");
            if(3 > h.length) return !1;
            f = parseInt(h[0].trim(), 10) / 100;
            const g = parseInt(h[1].trim(), 10) / 100;
            h = parseInt(h[2].trim(), 10) / 100;
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(h) && this.setB(h);
            this.setA(1);
            return !0
        }
        parseCommaSeparatedRgba(f) {
            if("string" !== typeof f) return !1;
            f = f.replace(/^rgba\(|\)|%/, "");
            var h = f.split(",");
            if(4 > h.length) return !1;
            f = parseInt(h[0].trim(), 10) / 255;
            const g = parseInt(h[1].trim(), 10) / 255,
                k = parseInt(h[2].trim(), 10) / 255;
            h =
                parseFloat(h[3].trim());
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(k) && this.setB(k);
            isFinite(h) && this.setA(h);
            return !0
        }
        parseCommaSeparatedPercentageRgba(f) {
            if("string" !== typeof f) return !1;
            f = f.replace(/^rgba\(|\)|%/, "");
            var h = f.split(",");
            if(4 > h.length) return !1;
            f = parseInt(h[0].trim(), 10) / 100;
            const g = parseInt(h[1].trim(), 10) / 100,
                k = parseInt(h[2].trim(), 10) / 100;
            h = parseFloat(h[3].trim());
            isFinite(f) && this.setR(f);
            isFinite(g) && this.setG(g);
            isFinite(k) && this.setB(k);
            isFinite(h) && this.setA(h);
            return !0
        }
        parseString(f) {
            if("string" !== typeof f) return !1;
            f = f.replace(/\s+/, "");
            if(f.includes(",")) {
                if(f.startsWith("rgb(")) return f.includes("%") ? this.parseCommaSeparatedPercentageRgb(f) : this.parseCommaSeparatedRgb(f);
                if(f.startsWith("rgba(")) return f.includes("%") ? this.parseCommaSeparatedPercentageRgba(f) : this.parseCommaSeparatedRgba(f);
                if(f.startsWith("hsl(") || f.startsWith("hsla(")) return this.parseHSLString(f); {
                    const h = f.split(",");
                    if(f.includes("%")) {
                        if(3 === h.length) return this.parseCommaSeparatedPercentageRgb(f);
                        if(4 === h.length) return this.parseCommaSeparatedPercentageRgba(f)
                    } else {
                        if(3 === h.length) return this.parseCommaSeparatedRgb(f);
                        if(4 === h.length) return this.parseCommaSeparatedRgba(f)
                    }
                    return !1
                }
            }
            return this.parseHexString(f)
        }
        toJSON() {
            return [this._r, this._g, this._b, this._a]
        }
        setFromHSLA(f, h, g, k) {
            f %= 360;
            h = e.clamp(h, 0, 100);
            g = e.clamp(g, 0, 100);
            k = e.clamp(k, 0, 1);
            f /= 360;
            h /= 100;
            g /= 100;
            if(0 === h) g = h = f = g;
            else {
                const m = .5 > g ? g * (1 + h) : g + h - g * h,
                    p = 2 * g - m;
                g = c(p, m, f + 1 / 3);
                h = c(p, m, f);
                f = c(p, m, f - 1 / 3)
            }
            this.setR(g);
            this.setG(h);
            this.setB(f);
            this.setA(k);
            return this
        }
        parseHSLString(f) {
            var h = f.replace(/ |hsl|hsla|\(|\)|;/gi, "");
            f = b.exec(h);
            h = a.exec(h);
            return f && 4 === f.length ? (this.setFromHSLA(+f[1], +f[2], +f[3], 1), !0) : h && 5 === h.length ? (this.setFromHSLA(+f[1], +f[2], +f[3], +f[4]), !0) : !1
        }
        toHSLAString() {
            var f = this._r;
            const h = this._g,
                g = this._b,
                k = this._a,
                m = e.Color.GetHue(f, h, g),
                p = e.Color.GetSaturation(f, h, g);
            f = e.Color.GetLuminosity(f, h, g);
            return `hsla(${m}, ${p}%, ${f}%, ${k})`
        }
        toHSLAArray() {
            const f = this._r,
                h = this._g,
                g = this._b;
            return [e.Color.GetHue(f,
                h, g), e.Color.GetSaturation(f, h, g), e.Color.GetLuminosity(f, h, g), this._a]
        }
        setFromJSON(f) {
            !Array.isArray(f) || 3 > f.length || (this._r = f[0], this._g = f[1], this._b = f[2], this._a = 4 <= f.length ? f[3] : 1)
        }
        set r(f) {
            this.setR(f)
        }
        get r() {
            return this.getR()
        }
        set g(f) {
            this.setG(f)
        }
        get g() {
            return this.getG()
        }
        set b(f) {
            this.setB(f)
        }
        get b() {
            return this.getB()
        }
        set a(f) {
            this.setA(f)
        }
        get a() {
            return this.getA()
        }
        setAtIndex(f, h) {
            switch(f) {
                case 0:
                    this.setR(h);
                    break;
                case 1:
                    this.setG(h);
                    break;
                case 2:
                    this.setB(h);
                    break;
                case 3:
                    this.setA(h);
                    break;
                default:
                    throw new RangeError("invalid color index");
            }
        }
        getAtIndex(f) {
            switch(f) {
                case 0:
                    return this.getR();
                case 1:
                    return this.getG();
                case 2:
                    return this.getB();
                case 3:
                    return this.getA();
                default:
                    throw new RangeError("invalid color index");
            }
        }
        static Equals(f, h) {
            let g;
            if(Array.isArray(f)) g = new e.Color, g.setFromJSON(f);
            else if(f instanceof e.Color) g = f;
            else throw Error("unexpected type");
            if(Array.isArray(h)) f = new e.Color, f.setFromJSON(h);
            else if(h instanceof e.Color) f = h;
            else throw Error("unexpected type");
            return g.equals(f)
        }
        static DiffChannel(f, h) {
            return e.clamp(Math.max(f, h) - Math.min(f, h), 0, 1)
        }
        static Diff(f, h) {
            const g = new e.Color;
            g.setR(Math.max(f._r, h._r) - Math.min(f._r, h._r));
            g.setG(Math.max(f._g, h._g) - Math.min(f._g, h._g));
            g.setB(Math.max(f._b, h._b) - Math.min(f._b, h._b));
            g.setA(Math.max(f._a, h._a) - Math.min(f._a, h._a));
            return g
        }
        static DiffNoAlpha(f, h) {
            const g = new e.Color(0, 0, 0, 1);
            g.setR(Math.max(f._r, h._r) - Math.min(f._r, h._r));
            g.setG(Math.max(f._g, h._g) - Math.min(f._g, h._g));
            g.setB(Math.max(f._b, h._b) -
                Math.min(f._b, h._b));
            return g
        }
        static GetHue(f, h, g) {
            const k = Math.max(f, h, g),
                m = Math.min(f, h, g);
            if(k === m) return 0;
            let p = 0;
            switch(k) {
                case f:
                    p = (h - g) / (k - m) + (h < g ? 6 : 0);
                    break;
                case h:
                    p = (g - f) / (k - m) + 2;
                    break;
                case g:
                    p = (f - h) / (k - m) + 4
            }
            return Math.round(p / 6 * 360)
        }
        static GetSaturation(f, h, g) {
            const k = Math.max(f, h, g);
            f = Math.min(f, h, g);
            if(k === f) return 0;
            h = k - f;
            return Math.round(100 * (.5 < (k + f) / 2 ? h / (2 - k - f) : h / (k + f)))
        }
        static GetLuminosity(f, h, g) {
            const k = Math.max(f, h, g);
            return k ? Math.round((k + Math.min(f, h, g)) / 2 * 100) : 0
        }
    };
    e.Color.White =
        Object.freeze(e.New(e.Color, 1, 1, 1, 1));
    e.Color.Black = Object.freeze(e.New(e.Color, 0, 0, 0, 1));
    e.Color.TransparentBlack = Object.freeze(e.New(e.Color, 0, 0, 0, 0))
} {
    "use strict";
    const e = self.C3;
    e.Vector2 = class {
        constructor(b, a) {
            this._y = this._x = 0;
            b instanceof e.Vector2 ? this.copy(b) : this.set(b || 0, a || 0)
        }
        set(b, a) {
            this._x = +b;
            this._y = +a
        }
        copy(b) {
            this._x = b._x;
            this._y = b._y
        }
        equals(b) {
            return this._x === b._x && this._y === b._y
        }
        equalsValues(b, a) {
            return this._x === b && this._y === a
        }
        setX(b) {
            this._x = +b
        }
        getX() {
            return this._x
        }
        setY(b) {
            this._y = +b
        }
        getY() {
            return this._y
        }
        toArray() {
            return [this._x, this._y]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] =
                this._x;
            b[a] = this._y
        }
        offset(b, a) {
            this._x += +b;
            this._y += +a
        }
        scale(b, a) {
            this._x *= b;
            this._y *= a
        }
        divide(b, a) {
            this._x /= b;
            this._y /= a
        }
        round() {
            this._x = Math.round(this._x);
            this._y = Math.round(this._y)
        }
        floor() {
            this._x = Math.floor(this._x);
            this._y = Math.floor(this._y)
        }
        ceil() {
            this._x = Math.ceil(this._x);
            this._y = Math.ceil(this._y)
        }
        angle() {
            return e.angleTo(0, 0, this._x, this._y)
        }
        lengthSquared() {
            return this._x * this._x + this._y * this._y
        }
        length() {
            return Math.sqrt(this.lengthSquared())
        }
        rotatePrecalc(b, a) {
            const d = this._x * a - this._y *
                b;
            this._y = this._y * a + this._x * b;
            this._x = d
        }
        rotate(b) {
            0 !== b && this.rotatePrecalc(Math.sin(b), Math.cos(b))
        }
        rotateAbout(b, a, d) {
            0 === b || a === this._x && d === this._y || (this._x -= a, this._y -= d, this.rotatePrecalc(Math.sin(b), Math.cos(b)), this._x += +a, this._y += +d)
        }
        move(b, a) {
            0 !== a && (this._x += Math.cos(b) * a, this._y += Math.sin(b) * a)
        }
        normalize() {
            const b = this.length();
            0 !== b && 1 !== b && (this._x /= b, this._y /= b)
        }
        clamp(b, a) {
            this._x = e.clamp(this._x, b, a);
            this._y = e.clamp(this._y, b, a)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Rect = class {
        constructor(b, a, d, c) {
            this._bottom = this._right = this._top = this._left = 0;
            b instanceof e.Rect ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0)
        }
        set(b, a, d, c) {
            this._left = +b;
            this._top = +a;
            this._right = +d;
            this._bottom = +c
        }
        setWH(b, a, d, c) {
            b = +b;
            a = +a;
            this._left = b;
            this._top = a;
            this._right = b + +d;
            this._bottom = a + +c
        }
        copy(b) {
            this._left = +b._left;
            this._top = +b._top;
            this._right = +b._right;
            this._bottom = +b._bottom
        }
        clone() {
            return new e.Rect(this._left, this._top, this._right, this._bottom)
        }
        static Merge(b,
            a) {
            const d = new e.Rect;
            d.setLeft(Math.min(b._left, a._left));
            d.setTop(Math.min(b._top, a._top));
            d.setRight(Math.max(b._right, a._right));
            d.setBottom(Math.max(b._bottom, a._bottom));
            return d
        }
        static FromObject(b) {
            return new e.Rect(b.left, b.top, b.right, b.bottom)
        }
        equals(b) {
            return this._left === b._left && this._top === b._top && this._right === b._right && this._bottom === b._bottom
        }
        equalsWH(b, a, d, c) {
            return this._left === b && this._top === a && this.width() === d && this.height() === c
        }
        setLeft(b) {
            this._left = +b
        }
        getLeft() {
            return this._left
        }
        setTop(b) {
            this._top = +b
        }
        getTop() {
            return this._top
        }
        setRight(b) {
            this._right = +b
        }
        getRight() {
            return this._right
        }
        setBottom(b) {
            this._bottom = +b
        }
        getBottom() {
            return this._bottom
        }
        toArray() {
            return [this._left, this._top, this._right, this._bottom]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        toDOMRect() {
            return new DOMRect(this._left, this._top, this.width(), this.height())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray(b, a) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = this._left;
            b[a] = this._bottom
        }
        writeAsQuadToTypedArray3D(b, a, d) {
            b[a++] = this._left;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._top;
            b[a++] = d;
            b[a++] = this._right;
            b[a++] = this._bottom;
            b[a++] = d;
            b[a++] = this._left;
            b[a++] = this._bottom;
            b[a] = d
        }
        width() {
            return this._right - this._left
        }
        height() {
            return this._bottom - this._top
        }
        midX() {
            return (this._left + this._right) / 2
        }
        midY() {
            return (this._top + this._bottom) / 2
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right += b;
            this._bottom += a
        }
        offsetLeft(b) {
            this._left += +b
        }
        offsetTop(b) {
            this._top += +b
        }
        offsetRight(b) {
            this._right += +b
        }
        offsetBottom(b) {
            this._bottom += +b
        }
        toSquare(b) {
            if("x" !== b) throw Error("invalid axis, only 'x' supported");
            this._bottom = this._top < this._bottom ? this._left < this._right ? this._top + this.width() : this._top - this.width() : this._left < this._right ? this._top - this.width() : this._top + this.width()
        }
        inflate(b, a) {
            b = +b;
            a = +a;
            this._left -= b;
            this._top -= a;
            this._right += b;
            this._bottom +=
                a
        }
        deflate(b, a) {
            b = +b;
            a = +a;
            this._left += b;
            this._top += a;
            this._right -= b;
            this._bottom -= a
        }
        multiply(b, a) {
            this._left *= b;
            this._top *= a;
            this._right *= b;
            this._bottom *= a
        }
        divide(b, a) {
            this._left /= b;
            this._top /= a;
            this._right /= b;
            this._bottom /= a
        }
        mirrorAround(b) {
            this._left = +b - this._left;
            this._right = +b - this._right
        }
        flipAround(b) {
            this._top = +b - this._top;
            this._bottom = +b - this._bottom
        }
        swapLeftRight() {
            const b = this._left;
            this._left = this._right;
            this._right = b
        }
        swapTopBottom() {
            const b = this._top;
            this._top = this._bottom;
            this._bottom =
                b
        }
        shuntY(b) {
            const a = this._top;
            this._top = +b - this._bottom;
            this._bottom = +b - a
        }
        round() {
            this._left = Math.round(this._left);
            this._top = Math.round(this._top);
            this._right = Math.round(this._right);
            this._bottom = Math.round(this._bottom)
        }
        roundInner() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        roundOuter() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        floor() {
            this._left =
                Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        ceil() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        clamp(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top < a && (this._top = +a);
            this._right > d && (this._right = +d);
            this._bottom > c && (this._bottom = +c)
        }
        clampFlipped(b, a, d, c) {
            this._left < b && (this._left = +b);
            this._top > a && (this._top = +a);
            this._right >
                d && (this._right = +d);
            this._bottom < c && (this._bottom = +c)
        }
        normalize() {
            this._left > this._right && this.swapLeftRight();
            this._top > this._bottom && this.swapTopBottom()
        }
        intersectsRect(b) {
            return !(b._right < this._left || b._bottom < this._top || b._left > this._right || b._top > this._bottom)
        }
        intersectsRectOffset(b, a, d) {
            return !(b._right + a < this._left || b._bottom + d < this._top || b._left + a > this._right || b._top + d > this._bottom)
        }
        containsPoint(b, a) {
            return b >= this._left && b <= this._right && a >= this._top && a <= this._bottom
        }
        containsRect(b) {
            return b._left >=
                this._left && b._top >= this._top && b._right <= this._right && b._bottom <= this._bottom
        }
        expandToContain(b) {
            b._left < this._left && (this._left = +b._left);
            b._top < this._top && (this._top = +b._top);
            b._right > this._right && (this._right = +b._right);
            b._bottom > this._bottom && (this._bottom = +b._bottom)
        }
        lerpInto(b) {
            this._left = e.lerp(b._left, b._right, this._left);
            this._top = e.lerp(b._top, b._bottom, this._top);
            this._right = e.lerp(b._left, b._right, this._right);
            this._bottom = e.lerp(b._top, b._bottom, this._bottom)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Quad = class {
        constructor(b, a, d, c, f, h, g, k) {
            this._bly = this._blx = this._bry = this._brx = this._try = this._trx = this._tly = this._tlx = 0;
            b instanceof e.Quad ? this.copy(b) : this.set(b || 0, a || 0, d || 0, c || 0, f || 0, h || 0, g || 0, k || 0)
        }
        set(b, a, d, c, f, h, g, k) {
            this._tlx = +b;
            this._tly = +a;
            this._trx = +d;
            this._try = +c;
            this._brx = +f;
            this._bry = +h;
            this._blx = +g;
            this._bly = +k
        }
        setRect(b, a, d, c) {
            this.set(b, a, d, a, d, c, b, c)
        }
        copy(b) {
            this._tlx = b._tlx;
            this._tly = b._tly;
            this._trx = b._trx;
            this._try = b._try;
            this._brx = b._brx;
            this._bry =
                b._bry;
            this._blx = b._blx;
            this._bly = b._bly
        }
        equals(b) {
            return this._tlx === b._tlx && this._tly === b._tly && this._trx === b._trx && this._try === b._try && this._brx === b._brx && this._bry === b._bry && this._blx === b._blx && this._bly === b._bly
        }
        setTlx(b) {
            this._tlx = +b
        }
        getTlx() {
            return this._tlx
        }
        setTly(b) {
            this._tly = +b
        }
        getTly() {
            return this._tly
        }
        setTrx(b) {
            this._trx = +b
        }
        getTrx() {
            return this._trx
        }
        setTry(b) {
            this._try = +b
        }
        getTry() {
            return this._try
        }
        setBrx(b) {
            this._brx = +b
        }
        getBrx() {
            return this._brx
        }
        setBry(b) {
            this._bry = +b
        }
        getBry() {
            return this._bry
        }
        setBlx(b) {
            this._blx = +b
        }
        getBlx() {
            return this._blx
        }
        setBly(b) {
            this._bly = +b
        }
        getBly() {
            return this._bly
        }
        toDOMQuad() {
            return new DOMQuad(new DOMPoint(this._tlx, this._tly), new DOMPoint(this._trx, this._try), new DOMPoint(this._brx, this._bry), new DOMPoint(this._blx, this._bly))
        }
        toArray() {
            return [this._tlx, this._tly, this._trx, this._try, this._brx, this._bry, this._blx, this._bly]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(b, a) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = this._blx;
            b[a] = this._bly
        }
        writeToTypedArray3D(b, a, d) {
            b[a++] = this._tlx;
            b[a++] = this._tly;
            b[a++] = d;
            b[a++] = this._trx;
            b[a++] = this._try;
            b[a++] = d;
            b[a++] = this._brx;
            b[a++] = this._bry;
            b[a++] = d;
            b[a++] = this._blx;
            b[a++] = this._bly;
            b[a] = d
        }
        offset(b, a) {
            b = +b;
            a = +a;
            this._tlx += b;
            this._tly += a;
            this._trx += b;
            this._try += a;
            this._brx += b;
            this._bry += a;
            this._blx += b;
            this._bly += a
        }
        round() {
            this._tlx = Math.round(this._tlx);
            this._tly = Math.round(this._tly);
            this._trx = Math.round(this._trx);
            this._try = Math.round(this._try);
            this._brx = Math.round(this._brx);
            this._bry = Math.round(this._bry);
            this._blx = Math.round(this._blx);
            this._bly = Math.round(this._bly)
        }
        floor() {
            this._tlx = Math.floor(this._tlx);
            this._tly = Math.floor(this._tly);
            this._trx = Math.floor(this._trx);
            this._try = Math.floor(this._try);
            this._brx = Math.floor(this._brx);
            this._bry = Math.floor(this._bry);
            this._blx = Math.floor(this._blx);
            this._bly = Math.floor(this._bly)
        }
        ceil() {
            this._tlx = Math.ceil(this._tlx);
            this._tly = Math.ceil(this._tly);
            this._trx = Math.ceil(this._trx);
            this._try =
                Math.ceil(this._try);
            this._brx = Math.ceil(this._brx);
            this._bry = Math.ceil(this._bry);
            this._blx = Math.ceil(this._blx);
            this._bly = Math.ceil(this._bly)
        }
        setFromRect(b) {
            this._tlx = b._left;
            this._tly = b._top;
            this._trx = b._right;
            this._try = b._top;
            this._brx = b._right;
            this._bry = b._bottom;
            this._blx = b._left;
            this._bly = b._bottom
        }
        setFromRotatedRect(b, a) {
            0 === a ? this.setFromRect(b) : this.setFromRotatedRectPrecalc(b, Math.sin(a), Math.cos(a))
        }
        setFromRotatedRectPrecalc(b, a, d) {
            const c = b._left * a,
                f = b._top * a,
                h = b._right * a;
            a *= b._bottom;
            const g = b._left * d,
                k = b._top * d,
                m = b._right * d;
            b = b._bottom * d;
            this._tlx = g - f;
            this._tly = k + c;
            this._trx = m - f;
            this._try = k + h;
            this._brx = m - a;
            this._bry = b + h;
            this._blx = g - a;
            this._bly = b + c
        }
        getBoundingBox(b) {
            b.set(Math.min(this._tlx, this._trx, this._brx, this._blx), Math.min(this._tly, this._try, this._bry, this._bly), Math.max(this._tlx, this._trx, this._brx, this._blx), Math.max(this._tly, this._try, this._bry, this._bly))
        }
        containsPoint(b, a) {
            var d = this._trx - this._tlx,
                c = this._try - this._tly;
            const f = this._brx - this._tlx,
                h = this._bry - this._tly;
            b -= this._tlx;
            a -= this._tly;
            var g = d * d + c * c;
            let k = d * f + c * h;
            c = d * b + c * a;
            const m = f * f + h * h,
                p = f * b + h * a;
            let x = 1 / (g * m - k * k);
            d = (m * c - k * p) * x;
            g = (g * p - k * c) * x;
            if(0 <= d && 0 < g && 1 > d + g) return !0;
            d = this._blx - this._tlx;
            c = this._bly - this._tly;
            g = d * d + c * c;
            k = d * f + c * h;
            c = d * b + c * a;
            x = 1 / (g * m - k * k);
            d = (m * c - k * p) * x;
            g = (g * p - k * c) * x;
            return 0 <= d && 0 < g && 1 > d + g
        }
        midX() {
            return (this._tlx + this._trx + this._brx + this._blx) / 4
        }
        midY() {
            return (this._tly + this._try + this._bry + this._bly) / 4
        }
        intersectsSegment(b, a, d, c) {
            return this.containsPoint(b, a) || this.containsPoint(d, c) ?
                !0 : e.segmentIntersectsQuad(b, a, d, c, this)
        }
        intersectsQuad(b) {
            var a = b.midX(),
                d = b.midY();
            if(this.containsPoint(a, d)) return !0;
            a = this.midX();
            d = this.midY();
            if(b.containsPoint(a, d)) return !0;
            a = this._tlx;
            d = this._tly;
            const c = this._trx,
                f = this._try,
                h = this._brx,
                g = this._bry,
                k = this._blx,
                m = this._bly;
            return e.segmentIntersectsQuad(a, d, c, f, b) || e.segmentIntersectsQuad(c, f, h, g, b) || e.segmentIntersectsQuad(h, g, k, m, b) || e.segmentIntersectsQuad(k, m, a, d, b)
        }
        mirror() {
            this._swap(0, 2);
            this._swap(1, 3);
            this._swap(6, 4);
            this._swap(7,
                5)
        }
        flip() {
            this._swap(0, 6);
            this._swap(1, 7);
            this._swap(2, 4);
            this._swap(3, 5)
        }
        diag() {
            this._swap(2, 6);
            this._swap(3, 7)
        }
        _swap(b, a) {
            const d = this._getAtIndex(b);
            this._setAtIndex(b, this._getAtIndex(a));
            this._setAtIndex(a, d)
        }
        _getAtIndex(b) {
            switch(b) {
                case 0:
                    return this._tlx;
                case 1:
                    return this._tly;
                case 2:
                    return this._trx;
                case 3:
                    return this._try;
                case 4:
                    return this._brx;
                case 5:
                    return this._bry;
                case 6:
                    return this._blx;
                case 7:
                    return this._bly;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
        _setAtIndex(b,
            a) {
            a = +a;
            switch(b) {
                case 0:
                    this._tlx = a;
                    break;
                case 1:
                    this._tly = a;
                    break;
                case 2:
                    this._trx = a;
                    break;
                case 3:
                    this._try = a;
                    break;
                case 4:
                    this._brx = a;
                    break;
                case 5:
                    this._bry = a;
                    break;
                case 6:
                    this._blx = a;
                    break;
                case 7:
                    this._bly = a;
                    break;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [0, 0, 1, 0, 1, 1, 0, 1],
        a = e.New(e.Quad);
    e.CollisionPoly = class extends e.DefendedBase {
        constructor(d, c = !0) {
            super();
            d || (d = b);
            this._ptsArr = Float64Array.from(d);
            this._bbox = new e.Rect;
            this._isBboxChanged = !0;
            this._enabled = c
        }
        Release() {}
        pointsArr() {
            return this._ptsArr
        }
        pointCount() {
            return this._ptsArr.length / 2
        }
        setPoints(d) {
            this._ptsArr.length === d.length ? this._ptsArr.set(d) : this._ptsArr = Float64Array.from(d);
            this._isBboxChanged = !0
        }
        setDefaultPoints() {
            this.setPoints(b)
        }
        copy(d) {
            this.setPoints(d._ptsArr)
        }
        setBboxChanged() {
            this._isBboxChanged = !0
        }
        _updateBbox() {
            if(this._isBboxChanged) {
                var d = this._ptsArr,
                    c = d[0],
                    f = d[1],
                    h = c,
                    g = f;
                for(let k = 0, m = d.length; k < m; k += 2) {
                    const p = d[k],
                        x = d[k + 1];
                    p < c && (c = p);
                    p > h && (h = p);
                    x < f && (f = x);
                    x > g && (g = x)
                }
                this._bbox.set(c, f, h, g);
                this._isBboxChanged = !1
            }
        }
        setFromRect(d, c, f) {
            let h = this._ptsArr;
            8 !== h.length && (this._ptsArr = h = new Float64Array(8));
            h[0] = d.getLeft() - c;
            h[1] = d.getTop() - f;
            h[2] = d.getRight() - c;
            h[3] = d.getTop() - f;
            h[4] = d.getRight() - c;
            h[5] = d.getBottom() - f;
            h[6] = d.getLeft() - c;
            h[7] = d.getBottom() - f;
            this._bbox.copy(d);
            0 === c && 0 ===
                f || this._bbox.offset(-c, -f);
            this._isBboxChanged = !1
        }
        setFromQuad(d, c, f) {
            a.copy(d);
            a.offset(c, f);
            this.setPoints(a.toArray());
            this._isBboxChanged = !0
        }
        transform(d, c, f) {
            let h = 0,
                g = 1;
            0 !== f && (h = Math.sin(f), g = Math.cos(f));
            this.transformPrecalc(d, c, h, g)
        }
        transformPrecalc(d, c, f, h) {
            const g = this._ptsArr;
            for(let k = 0, m = g.length; k < m; k += 2) {
                const p = k + 1,
                    x = g[k] * d,
                    t = g[p] * c;
                g[k] = x * h - t * f;
                g[p] = t * h + x * f
            }
            this._isBboxChanged = !0
        }
        offset(d, c) {
            const f = this._ptsArr;
            for(let h = 0, g = f.length; h < g; h += 2) f[h] += d, f[h + 1] += c
        }
        containsPoint(d, c) {
            const f =
                this._ptsArr;
            if(d === f[0] && c === f[1]) return !0;
            this._updateBbox();
            var h = this._bbox;
            const g = h.getLeft() - 110,
                k = h.getTop() - 101,
                m = h.getRight() + 131;
            h = h.getBottom() + 120;
            let p, x, t, q, r, y, v, u;
            g < d ? (p = g, t = d) : (p = d, t = g);
            k < c ? (x = k, q = c) : (x = c, q = k);
            m < d ? (r = m, v = d) : (r = d, v = m);
            h < c ? (y = h, u = c) : (y = c, u = h);
            let A = 0,
                z = 0;
            for(let E = 0, J = f.length; E < J; E += 2) {
                var C = (E + 2) % J;
                const F = f[E],
                    H = f[E + 1],
                    K = f[C];
                C = f[C + 1];
                e.segmentsIntersectPreCalc(g, k, d, c, p, t, x, q, F, H, K, C) && ++A;
                e.segmentsIntersectPreCalc(m, h, d, c, r, v, y, u, F, H, K, C) && ++z
            }
            return 1 === A % 2 ||
                1 === z % 2
        }
        intersectsPoly(d, c, f) {
            const h = d._ptsArr,
                g = this._ptsArr;
            if(this.containsPoint(h[0] + c, h[1] + f) || d.containsPoint(g[0] - c, g[1] - f)) return !0;
            for(let m = 0, p = g.length; m < p; m += 2) {
                var k = (m + 2) % p;
                d = g[m];
                const x = g[m + 1],
                    t = g[k];
                k = g[k + 1];
                let q, r, y, v;
                d < t ? (q = d, y = t) : (q = t, y = d);
                x < k ? (r = x, v = k) : (r = k, v = x);
                for(let u = 0, A = h.length; u < A; u += 2) {
                    const z = (u + 2) % A;
                    if(e.segmentsIntersectPreCalc(d, x, t, k, q, y, r, v, h[u] + c, h[u + 1] + f, h[z] + c, h[z + 1] + f)) return !0
                }
            }
            return !1
        }
        intersectsSegment(d, c, f, h, g, k) {
            if(this.containsPoint(f - d, h - c) || this.containsPoint(g -
                    d, k - c)) return !0;
            let m, p, x, t;
            f < g ? (m = f, x = g) : (m = g, x = f);
            h < k ? (p = h, t = k) : (p = k, t = h);
            const q = this._ptsArr;
            for(let r = 0, y = q.length; r < y; r += 2) {
                const v = (r + 2) % y;
                if(e.segmentsIntersectPreCalc(f, h, g, k, m, x, p, t, q[r] + d, q[r + 1] + c, q[v] + d, q[v + 1] + c)) return !0
            }
            return !1
        }
        mirror(d) {
            const c = this._ptsArr;
            for(let f = 0, h = c.length; f < h; f += 2) c[f] = 2 * d - c[f];
            this._isBboxChanged = !0
        }
        flip(d) {
            const c = this._ptsArr;
            for(let f = 0, h = c.length; f < h; f += 2) {
                const g = f + 1;
                c[g] = 2 * d - c[g]
            }
            this._isBboxChanged = !0
        }
        diag() {
            const d = this._ptsArr;
            for(let c = 0, f = d.length; c <
                f; c += 2) {
                const h = c + 1,
                    g = d[c];
                d[c] = d[h];
                d[h] = g
            }
            this._isBboxChanged = !0
        }
        GetMidX() {
            const d = this._ptsArr;
            let c = 0;
            for(let f = 0, h = d.length; f < h; f += 2) c += d[f];
            return c / this.pointCount()
        }
        GetMidY() {
            const d = this._ptsArr;
            let c = 0;
            for(let f = 0, h = d.length; f < h; f += 2) c += d[f + 1];
            return c / this.pointCount()
        }
        GetPointsArray() {
            return this._ptsArr
        }
        GetPointCount() {
            return this.pointCount()
        }
        IsEnabled() {
            return this._enabled
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PairMap = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._firstMap = new Map;
            if(b)
                for(const [a, d, c] of b) this.Set(a, d, c)
        }
        Release() {
            this.Clear();
            this._firstMap = null
        }
        Clear() {
            const b = this._firstMap;
            for(const a of b.values()) a.clear();
            b.clear()
        }
        Set(b, a, d) {
            const c = this._firstMap;
            let f = c.get(b);
            f || (f = new Map, c.set(b, f));
            f.set(a, d)
        }
        Get(b, a) {
            return (b = this._firstMap.get(b)) ? b.get(a) : b
        }
        Has(b, a) {
            return (b = this._firstMap.get(b)) ? b.has(a) : !1
        }
        Delete(b, a) {
            const d = this._firstMap,
                c = d.get(b);
            if(!c) return !1;
            (a = c.delete(a)) && 0 === c.size && d.delete(b);
            return a
        }
        DeleteEither(b) {
            const a = this._firstMap,
                d = a.get(b);
            d && (d.clear(), a.delete(b));
            for(const [c, f] of a.entries()) f.delete(b) && 0 === f.size && a.delete(c)
        }
        GetSize() {
            let b = 0;
            for(const a of this._firstMap.values()) b += a.size;
            return b
        }* values() {
            for(const b of this._firstMap.values()) yield* b.values()
        }* keyPairs() {
            for(const [b, a] of this._firstMap.entries())
                for(const d of a.keys()) yield [b, d]
        }* entries() {
            for(const [b, a] of this._firstMap.entries())
                for(const [d,
                        c
                    ] of a.entries()) yield [b, d, c]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ArraySet = class extends e.DefendedBase {
        constructor() {
            super();
            this._set = new Set;
            this._arr = [];
            this._needToRebuildArray = !1
        }
        Release() {
            this.Clear()
        }
        Clear() {
            this._set.clear();
            e.clearArray(this._arr);
            this._needToRebuildArray = !1
        }
        Add(b) {
            this._set.has(b) || (this._set.add(b), this._needToRebuildArray || this._arr.push(b))
        }
        Has(b) {
            return this._set.has(b)
        }
        Delete(b) {
            this._set.delete(b) && (this._needToRebuildArray = !0)
        }
        GetSize() {
            return this._set.size
        }
        IsEmpty() {
            return 0 === this._set.size
        }
        GetArray() {
            this._needToRebuildArray &&
                (this._RebuildArray(), this._needToRebuildArray = !1);
            return this._arr
        }
        _RebuildArray() {
            const b = this._arr;
            e.clearArray(b);
            for(const a of this._set) b.push(a)
        }
    }
} {
    "use strict";
    const e = new Map,
        b = new Map,
        a = new Map,
        d = new Map,
        c = new Map,
        f = new Map;
    f.set("linear", "noease");
    f.set("default", "noease");
    self.Ease = class t {
        constructor() {}
        static InheritEase() {
            return "default"
        }
        static DefaultEase() {
            return "noease"
        }
        static GetEditorEaseNames(q, ...r) {
            this._CreateEaseMap();
            a.has(q) || a.set(q, new Map);
            q = [...a.get(q).keys()];
            q.sort();
            return [...b.keys()].concat(q).filter(y => !r.includes(y))
        }
        static GetRuntimeEaseNames() {
            this._CreateEaseMap();
            const q = [...d.keys()];
            q.sort();
            return [...b.keys()].concat(q)
        }
        static IsNamePredefined(q) {
            this._CreateEaseMap();
            return [...b.keys()].includes(q)
        }
        static _GetEase(q) {
            const r = f.get(q);
            if(r) return e.get(r);
            if(t.IsNamePredefined(q)) return e.get(q);
            if(c.has(q)) return c.get(q)
        }
        static GetEditorEase(q, r) {
            this._CreateEaseMap();
            const y = t._GetEase(q);
            return y ? y : a.get(r).get(q)
        }
        static GetRuntimeEase(q) {
            this._CreateEaseMap();
            const r = t._GetEase(q);
            return r ? r : d.get(q)
        }
        static GetEaseFromIndex(q) {
            this._CreateEaseMap();
            return this.GetRuntimeEaseNames()[q]
        }
        static GetIndexForEase(q, r) {
            this._CreateEaseMap();
            return this.GetEditorEaseNames(r).indexOf(q)
        }
        static _CreateEaseMap() {
            0 ===
                e.size && (this._AddPredifinedEase("default", () => {}), this._AddPredifinedEase("noease", this.NoEase), this._AddPredifinedEase("easeinsine", this.EaseInSine), this._AddPredifinedEase("easeoutsine", this.EaseOutSine), this._AddPredifinedEase("easeinoutsine", this.EaseInOutSine), this._AddPredifinedEase("easeinelastic", this.EaseInElastic), this._AddPredifinedEase("easeoutelastic", this.EaseOutElastic), this._AddPredifinedEase("easeinoutelastic", this.EaseInOutElastic), this._AddPredifinedEase("easeinback", this.EaseInBack),
                    this._AddPredifinedEase("easeoutback", this.EaseOutBack), this._AddPredifinedEase("easeinoutback", this.EaseInOutBack), this._AddPredifinedEase("easeinbounce", this.EaseInBounce), this._AddPredifinedEase("easeoutbounce", this.EaseOutBounce), this._AddPredifinedEase("easeinoutbounce", this.EaseInOutBounce), this._AddPredifinedEase("easeincubic", this.EaseInCubic), this._AddPredifinedEase("easeoutcubic", this.EaseOutCubic), this._AddPredifinedEase("easeinoutcubic", this.EaseInOutCubic), this._AddPredifinedEase("easeinquad",
                        this.EaseInQuad), this._AddPredifinedEase("easeoutquad", this.EaseOutQuad), this._AddPredifinedEase("easeinoutquad", this.EaseInOutQuad), this._AddPredifinedEase("easeinquart", this.EaseInQuart), this._AddPredifinedEase("easeoutquart", this.EaseOutQuart), this._AddPredifinedEase("easeinoutquart", this.EaseInOutQuart), this._AddPredifinedEase("easeinquint", this.EaseInQuint), this._AddPredifinedEase("easeoutquint", this.EaseOutQuint), this._AddPredifinedEase("easeinoutquint", this.EaseInOutQuint), this._AddPredifinedEase("easeincirc",
                        this.EaseInCirc), this._AddPredifinedEase("easeoutcirc", this.EaseOutCirc), this._AddPredifinedEase("easeinoutcirc", this.EaseInOutCirc), this._AddPredifinedEase("easeinexpo", this.EaseInExpo), this._AddPredifinedEase("easeoutexpo", this.EaseOutExpo), this._AddPredifinedEase("easeinoutexpo", this.EaseInOutExpo), this._AddPrivateCustomEase("cubicbezier", this.EaseCubicBezier), this._AddPrivateCustomEase("spline", this.EaseSpline))
        }
        static _AddPredifinedEase(q, r) {
            t._AddEase(q, r, "predefined")
        }
        static _AddPrivateCustomEase(q,
            r) {
            t._AddEase(q, r, "private")
        }
        static AddCustomEase(q, r, y) {
            this._CreateEaseMap();
            t._AddEase(q, r, "custom", y)
        }
        static RemoveCustomEase(q, r) {
            this.IsNamePredefined(q) || [...c.keys()].includes(q) || (r = a.get(r)) && r.delete(q)
        }
        static _AddEase(q, r, y, v) {
            switch(y) {
                case "predefined":
                    e.set(q, r);
                    b.set(q, r);
                    break;
                case "custom":
                    v ? (a.has(v) || a.set(v, new Map), a.get(v).set(q, r)) : d.set(q, r);
                    break;
                case "private":
                    e.set(q, r);
                    c.set(q, r);
                    break;
                default:
                    throw Error("unexpected ease mode");
            }
        }
        static NoEase(q, r, y, v) {
            return y * q / v + r
        }
        static EaseInQuad(q,
            r, y, v) {
            return y * (q /= v) * q + r
        }
        static EaseOutQuad(q, r, y, v) {
            return -y * (q /= v) * (q - 2) + r
        }
        static EaseInOutQuad(q, r, y, v) {
            return 1 > (q /= v / 2) ? y / 2 * q * q + r : -y / 2 * (--q * (q - 2) - 1) + r
        }
        static EaseInCubic(q, r, y, v) {
            return y * (q /= v) * q * q + r
        }
        static EaseOutCubic(q, r, y, v) {
            return y * ((q = q / v - 1) * q * q + 1) + r
        }
        static EaseInOutCubic(q, r, y, v) {
            return 1 > (q /= v / 2) ? y / 2 * q * q * q + r : y / 2 * ((q -= 2) * q * q + 2) + r
        }
        static EaseInQuart(q, r, y, v) {
            return y * (q /= v) * q * q * q + r
        }
        static EaseOutQuart(q, r, y, v) {
            return -y * ((q = q / v - 1) * q * q * q - 1) + r
        }
        static EaseInOutQuart(q, r, y, v) {
            return 1 > (q /=
                v / 2) ? y / 2 * q * q * q * q + r : -y / 2 * ((q -= 2) * q * q * q - 2) + r
        }
        static EaseInQuint(q, r, y, v) {
            return y * (q /= v) * q * q * q * q + r
        }
        static EaseOutQuint(q, r, y, v) {
            return y * ((q = q / v - 1) * q * q * q * q + 1) + r
        }
        static EaseInOutQuint(q, r, y, v) {
            return 1 > (q /= v / 2) ? y / 2 * q * q * q * q * q + r : y / 2 * ((q -= 2) * q * q * q * q + 2) + r
        }
        static EaseInSine(q, r, y, v) {
            return -y * Math.cos(q / v * (Math.PI / 2)) + y + r
        }
        static EaseOutSine(q, r, y, v) {
            return y * Math.sin(q / v * (Math.PI / 2)) + r
        }
        static EaseInOutSine(q, r, y, v) {
            return -y / 2 * (Math.cos(Math.PI * q / v) - 1) + r
        }
        static EaseInExpo(q, r, y, v) {
            return 0 === q ? r : y * Math.pow(2,
                10 * (q / v - 1)) + r
        }
        static EaseOutExpo(q, r, y, v) {
            return q === v ? r + y : y * (-Math.pow(2, -10 * q / v) + 1) + r
        }
        static EaseInOutExpo(q, r, y, v) {
            return 0 === q ? r : q === v ? r + y : 1 > (q /= v / 2) ? y / 2 * Math.pow(2, 10 * (q - 1)) + r : y / 2 * (-Math.pow(2, -10 * --q) + 2) + r
        }
        static EaseInCirc(q, r, y, v) {
            return -y * (Math.sqrt(1 - (q /= v) * q) - 1) + r
        }
        static EaseOutCirc(q, r, y, v) {
            return y * Math.sqrt(1 - (q = q / v - 1) * q) + r
        }
        static EaseInOutCirc(q, r, y, v) {
            return 1 > (q /= v / 2) ? -y / 2 * (Math.sqrt(1 - q * q) - 1) + r : y / 2 * (Math.sqrt(1 - (q -= 2) * q) + 1) + r
        }
        static EaseInElastic(q, r, y, v) {
            let u = 0,
                A = y;
            if(0 === q) return r;
            if(1 === (q /= v)) return r + y;
            u || (u = .3 * v);
            A < Math.abs(y) ? (A = y, y = u / 4) : y = u / (2 * Math.PI) * Math.asin(y / A);
            return -(A * Math.pow(2, 10 * --q) * Math.sin(2 * (q * v - y) * Math.PI / u)) + r
        }
        static EaseOutElastic(q, r, y, v) {
            let u, A = 0,
                z = y;
            if(0 === q) return r;
            if(1 === (q /= v)) return r + y;
            A || (A = .3 * v);
            z < Math.abs(y) ? (z = y, u = A / 4) : u = A / (2 * Math.PI) * Math.asin(y / z);
            return z * Math.pow(2, -10 * q) * Math.sin(2 * (q * v - u) * Math.PI / A) + y + r
        }
        static EaseInOutElastic(q, r, y, v) {
            let u, A = 0,
                z = y;
            if(0 === q) return r;
            if(2 === (q /= v / 2)) return r + y;
            A || (A = .3 * v * 1.5);
            z < Math.abs(y) ? (z = y,
                u = A / 4) : u = A / (2 * Math.PI) * Math.asin(y / z);
            return 1 > q ? -.5 * z * Math.pow(2, 10 * --q) * Math.sin(2 * (q * v - u) * Math.PI / A) + r : z * Math.pow(2, -10 * --q) * Math.sin(2 * (q * v - u) * Math.PI / A) * .5 + y + r
        }
        static EaseInBack(q, r, y, v, u) {
            void 0 === u && (u = 1.70158);
            return y * (q /= v) * q * ((u + 1) * q - u) + r
        }
        static EaseOutBack(q, r, y, v, u) {
            void 0 === u && (u = 1.70158);
            return y * ((q = q / v - 1) * q * ((u + 1) * q + u) + 1) + r
        }
        static EaseInOutBack(q, r, y, v, u) {
            void 0 === u && (u = 1.70158);
            return 1 > (q /= v / 2) ? y / 2 * q * q * (((u *= 1.525) + 1) * q - u) + r : y / 2 * ((q -= 2) * q * (((u *= 1.525) + 1) * q + u) + 2) + r
        }
        static EaseInBounce(q,
            r, y, v) {
            return y - t.EaseOutBounce(v - q, 0, y, v) + r
        }
        static EaseOutBounce(q, r, y, v) {
            return (q /= v) < 1 / 2.75 ? 7.5625 * y * q * q + r : q < 2 / 2.75 ? y * (7.5625 * (q -= 1.5 / 2.75) * q + .75) + r : q < 2.5 / 2.75 ? y * (7.5625 * (q -= 2.25 / 2.75) * q + .9375) + r : y * (7.5625 * (q -= 2.625 / 2.75) * q + .984375) + r
        }
        static EaseInOutBounce(q, r, y, v) {
            return q < v / 2 ? .5 * t.EaseInBounce(2 * q, 0, y, v) + r : .5 * t.EaseOutBounce(2 * q - v, 0, y, v) + .5 * y + r
        }
        static EaseCubicBezier(q, r, y, v, u) {
            return r + 3 * q * (y - r) + 3 * q ** 2 * (r + v - 2 * y) + q ** 3 * (u - r + 3 * y - 3 * v)
        }
        static EaseSpline(q, r, y, v, u, A, z, C, E, J) {
            if(v === u && A === z) return q;
            q = x(q, r, v, A, C, J);
            r = h(y, u, z, E);
            v = g(y, u, z, E);
            y = k(y, u, z, E);
            return m(q, r, v, y)
        }
        static GetBezierSamples(q, r, y, v) {
            const u = [],
                A = h(q, r, y, v),
                z = g(q, r, y, v);
            q = k(q, r, y, v);
            for(r = 0; 11 > r; ++r) y = m(.1 * r, A, z, q), u.push(y);
            return u
        }
    };
    const h = (t, q, r, y) => y - 3 * r + 3 * q - t,
        g = (t, q, r, y) => 3 * r - 6 * q + 3 * t,
        k = (t, q, r, y) => 3 * (q - t),
        m = (t, q, r, y) => ((q * t + r) * t + y) * t,
        p = (t, q, r, y) => 3 * q * t * t + 2 * r * t + y,
        x = (t, q, r, y, v, u) => {
            if(1 == t) return 1;
            for(var A = 0, z = 1, C = u[z]; 10 != z && C <= t;) z++, C = u[z], A += .1;
            z--;
            C = u[z];
            u = A + (t - C) / (u[z + 1] - C) * .1;
            z = h(q, r, y, v);
            C = g(q, r, y, v);
            q = k(q,
                r, y, v);
            r = p(u, z, C, q);
            if(0 !== r)
                if(.02 <= r)
                    for(A = 0; 4 > A; ++A) r = m(u, z, C, q) - t, y = p(u, z, C, q), u -= r / y;
                else {
                    r = A;
                    A += .1;
                    y = 0;
                    let E;
                    do u = r + (A - r) / 2, v = m(u, z, C, q) - t, 0 < v ? A = u : r = u, v = 1E-7 < Math.abs(v), E = 10 > ++y; while(v && E)
                } return u
        }
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        e.IsString(a)
    }
    e.ProbabilityTable = class {
        constructor() {
            this._items = [];
            this._totalWeight = 0
        }
        Release() {
            this.Clear();
            this._items = null
        }
        Clear() {
            e.clear2DArray(this._items);
            this._totalWeight = 0
        }
        GetTotalWeight() {
            return this._totalWeight
        }
        Sample(a = Math.random() * this.GetTotalWeight()) {
            let d = 0;
            for(const [c, f] of this._items)
                if(d += c, a < d) return f;
            return 0
        }
        AddItem(a, d) {
            b(d);
            this._totalWeight += a;
            this._items.push([a, d])
        }
        RemoveItem(a, d) {
            b(d);
            const c = 0 === a;
            for(let f = 0; f < this._items.length; f++) {
                const h =
                    this._items[f],
                    g = h[1] === d;
                if((c || h[0] === a) && g) {
                    this._items.splice(f, 1);
                    this._totalWeight -= h[0];
                    break
                }
            }
        }
        asJSON() {
            return JSON.stringify(this._items)
        }
        static fromJSON(a) {
            const d = new e.ProbabilityTable;
            a = JSON.parse(a);
            for(const c of a) d.AddItem(c[0], c[1]);
            return d
        }
    }
}
"use strict";
self.C3.Event = class {
    constructor(e, b) {
        this.type = e;
        this.cancelable = !!b;
        this.isAsync = this.propagationStopped = this.defaultPrevented = !1
    }
    preventDefault() {
        if(!this.cancelable) throw Error(`event '${this.type}' is not cancelable`);
        this.defaultPrevented = !0
    }
    stopPropagation() {
        if(!this.cancelable) throw Error(`event '${this.type}' cannot be stopped`);
        if(this.isAsync) throw Error(`cannot stop async event '${this.type}' propagation`);
        this.propagationStopped = !0
    }
}; {
    "use strict";
    const e = self.C3;
    e.Event.Handler = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._type = b;
            this._captureListeners = [];
            this._captureListenersSet = new Set;
            this._listeners = [];
            this._listenersSet = new Set;
            this._fireDepth = 0;
            this._queueAddListeners = [];
            this._queueRemoveCaptureListeners = [];
            this._queueRemoveListeners = []
        }
        Release() {
            0 < this._fireDepth || (e.clearArray(this._captureListeners), this._captureListenersSet.clear(), e.clearArray(this._listeners), this._listenersSet.clear(), e.clearArray(this._queueAddListeners),
                e.clearArray(this._queueRemoveCaptureListeners), e.clearArray(this._queueRemoveListeners), e.Release(this))
        }
        _AddListener(b, a) {
            this._IsFiring() ? this._queueAddListeners.push([b, a]) : a ? this._captureListenersSet.has(b) || (this._captureListeners.push(b), this._captureListenersSet.add(b)) : this._listenersSet.has(b) || (this._listeners.push(b), this._listenersSet.add(b))
        }
        _RemoveListener(b, a) {
            this._IsFiring() ? a ? this._queueRemoveCaptureListeners.push(b) : this._queueRemoveListeners.push(b) : a ? this._captureListenersSet.has(b) &&
                (this._captureListenersSet.delete(b), e.arrayFindRemove(this._captureListeners, b)) : this._listenersSet.has(b) && (this._listenersSet.delete(b), e.arrayFindRemove(this._listeners, b))
        }
        _IsEmpty() {
            return !this._captureListeners.length && !this._listeners.length
        }
        _IsFiring() {
            return 0 < this._fireDepth
        }
        _ProcessQueuedListeners() {
            for(var b of this._queueAddListeners) this._AddListener(...b);
            e.clearArray(this._queueAddListeners);
            for(var a of this._queueRemoveListeners) this._listenersSet.delete(a);
            for(const d of this._queueRemoveCaptureListeners) this._captureListenersSet.delete(d);
            b = new Set(this._queueRemoveListeners);
            a = new Set(this._queueRemoveCaptureListeners);
            e.arrayRemoveAllInSet(this._listeners, b);
            e.arrayRemoveAllInSet(this._captureListeners, a);
            e.clearArray(this._queueRemoveCaptureListeners);
            e.clearArray(this._queueRemoveListeners)
        }
        _FireCancellable(b) {
            this._IncreaseFireDepth();
            let a = !1;
            for(let d = 0, c = this._captureListeners.length; d < c; ++d)
                if(this._captureListeners[d](b), b.propagationStopped) {
                    a = !0;
                    break
                } if(!a)
                for(let d = 0, c = this._listeners.length; d < c && (this._listeners[d](b),
                        !b.propagationStopped); ++d);
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }
        _FireNonCancellable(b) {
            this._IncreaseFireDepth();
            for(let a = 0, d = this._captureListeners.length; a < d; ++a) this._captureListeners[a](b);
            for(let a = 0, d = this._listeners.length; a < d; ++a) this._listeners[a](b);
            this._DecreaseFireDepth();
            return !0
        }
        _IncreaseFireDepth() {
            this._fireDepth++
        }
        _DecreaseFireDepth() {
            this._fireDepth--;
            0 === this._fireDepth && (this._queueAddListeners.length || this._queueRemoveCaptureListeners.length || this._queueRemoveListeners.length) &&
                this._ProcessQueuedListeners()
        }
        SetDelayRemoveEventsEnabled(b) {
            b ? this._IncreaseFireDepth() : this._DecreaseFireDepth()
        }
        _FireAsync(b) {
            let a = [];
            for(let d = 0, c = this._captureListeners.length; d < c; ++d) {
                let f = this._captureListeners[d];
                a.push(e.Asyncify(() => f(b)))
            }
            for(let d = 0, c = this._listeners.length; d < c; ++d) {
                let f = this._listeners[d];
                a.push(e.Asyncify(() => f(b)))
            }
            return Promise.all(a).then(() => !b.defaultPrevented)
        }
        _FireAndWait_AsyncOptional(b) {
            const a = [];
            this._IncreaseFireDepth();
            for(let c = 0, f = this._captureListeners.length; c <
                f; ++c) {
                var d = this._captureListeners[c](b);
                d instanceof Promise && a.push(d)
            }
            for(let c = 0, f = this._listeners.length; c < f; ++c) d = this._listeners[c](b), d instanceof Promise && a.push(d);
            this._DecreaseFireDepth();
            return a.length ? Promise.all(a).then(() => !b.defaultPrevented) : !b.defaultPrevented
        }
        async _FireAndWaitAsync(b) {
            return await this._FireAndWait_AsyncOptional(b)
        }
        async _FireAndWaitAsyncSequential(b) {
            this._IncreaseFireDepth();
            for(let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                a instanceof Promise && await a
            }
            for(let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), a instanceof Promise && await a;
            this._DecreaseFireDepth();
            return !b.defaultPrevented
        }* _FireAsGenerator(b) {
            this._IncreaseFireDepth();
            for(let d = 0, c = this._captureListeners.length; d < c; ++d) {
                var a = this._captureListeners[d](b);
                e.IsIterator(a) && (yield* a)
            }
            for(let d = 0, c = this._listeners.length; d < c; ++d) a = this._listeners[d](b), e.IsIterator(a) && (yield* a);
            this._DecreaseFireDepth()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Event.Dispatcher = class extends e.DefendedBase {
        constructor() {
            super();
            this._eventHandlers = new Map;
            this._dispatcherWasReleased = !1
        }
        Release() {
            if(this._dispatcherWasReleased) throw Error("already released");
            this.ClearEvents();
            this._dispatcherWasReleased = !0;
            e.Release(this)
        }
        WasReleased() {
            return this._dispatcherWasReleased
        }
        ClearEvents() {
            for(let b of this._eventHandlers.values()) b.Release();
            this._eventHandlers.clear()
        }
        _GetHandlerByType(b, a) {
            let d = this._eventHandlers.get(b);
            return d ?
                d : a ? (d = e.New(e.Event.Handler, b), this._eventHandlers.set(b, d), d) : null
        }
        HasAnyHandlerFor(b) {
            return this._eventHandlers.has(b)
        }
        addEventListener(b, a, d) {
            this._GetHandlerByType(b, !0)._AddListener(a, !!d)
        }
        removeEventListener(b, a, d) {
            let c = this._GetHandlerByType(b, !1);
            c && (c._RemoveListener(a, !!d), c._IsEmpty() && this._eventHandlers.delete(b))
        }
        dispatchEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? b.cancelable ? a._FireCancellable(b) : a._FireNonCancellable(b) : !0
        }
        dispatchEventAsync(b) {
            const a = this._GetHandlerByType(b.type,
                !1);
            if(!a) return Promise.resolve(!0);
            b.isAsync = !0;
            return a._FireAsync(b)
        }
        async dispatchEventAndClearAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if(!a) return !0;
            this._eventHandlers.delete(b.type);
            b.isAsync = !0;
            b = await a._FireAsync(b);
            a.Release();
            return b
        }
        async dispatchEventAndWaitAsync(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsync(b) : !0
        }
        dispatchEventAndWait_AsyncOptional(b) {
            const a = this._GetHandlerByType(b.type, !1);
            return a ? a._FireAndWait_AsyncOptional(b) : !0
        }
        async dispatchEventAndWaitAsyncSequential(b) {
            const a =
                this._GetHandlerByType(b.type, !1);
            return a ? await a._FireAndWaitAsyncSequential(b) : !0
        }
        dispatchGeneratorEvent(b) {
            const a = this._GetHandlerByType(b.type, !1);
            if(!a) return null;
            if(b.cancelable) throw Error("not supported");
            return a._FireAsGenerator(b)
        }
        SetDelayRemoveEventsEnabled(b) {
            for(const a of this._eventHandlers.values()) a.SetDelayRemoveEventsEnabled(b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = "undefined" !== typeof requestIdleCallback;
    let a = [],
        d = -1,
        c = 0;

    function f(m) {
        d = b && 0 === c ? requestIdleCallback(h, {
            timeout: 35
        }) : setTimeout(h, 0 < c ? 1 : m)
    }

    function h(m) {
        d = -1;
        if(a.length) {
            var p = performance.now(),
                x = 0;
            do {
                g(a.shift());
                var t = performance.now();
                ++x;
                var q = (t - p) / x * 1.1
            } while(a.length && (b && 0 === c && "undefined" !== typeof m ? q < m.timeRemaining() : 12 > t - p + q)); - 1 === d && a.length && f(Math.max(16 - (t - p), 4))
        }
    }

    function g(m) {
        let p;
        try {
            p = m.func()
        } catch (x) {
            m.reject(x);
            return
        }
        m.resolve(p)
    }
    let k =
        e.QueryString.Has("disable-asyncify");
    k && console.warn("[Asyncify] Asyncify has been disabled due to disable-asyncify in the query string. Some work will now be done synchronously.");
    e.Asyncify = function(m) {
        let p = null;
        e.isDebug && (p = e.GetCallStack());
        return new Promise((x, t) => {
            a.push({
                func: m,
                resolve: x,
                reject: t,
                stack: p
            });
            k ? g(a.pop()) : -1 === d && f(16)
        })
    };
    e.Asyncify.SetHighThroughputMode = function(m) {
        if(m) ++c;
        else if(--c, 0 > c) throw Error("already turned off high throughput mode");
    }
} {
    "use strict";
    const e = self.C3;
    let b = -1;

    function a() {
        b = -1
    }
    e.FastGetDateNow = function() {
        -1 === b && (b = Date.now(), self.setTimeout(a, 16));
        return b
    };
    let d = -1,
        c = -1,
        f = new Set;

    function h() {
        c = d = -1;
        let g = Date.now();
        for(let k of f)
            if(k._CheckTimeout(g)) {
                let m = k._GetDeadline();
                if(-1 === c || m < c) c = m
            } else f.delete(k); - 1 !== c && (d = self.setTimeout(h, Math.max(c - g + 100, 1E3)))
    }
    e.IdleTimeout = class {
        constructor(g, k) {
            this._callback = g;
            this._timeout = 1E3 * k;
            this._deadline = 0;
            this._isActive = !1
        }
        Reset() {
            let g = e.FastGetDateNow();
            this._deadline =
                g + this._timeout;
            this._isActive || (f.add(this), this._isActive = !0); - 1 === d ? (c = this._deadline, d = self.setTimeout(h, this._timeout + 100)) : this._deadline < c && c > g + 1E3 && (self.clearTimeout(d), c = this._deadline, d = self.setTimeout(h, this._timeout + 100))
        }
        _CheckTimeout(g) {
            return g >= this._deadline ? this._callback() ? (this._deadline = g + this._timeout, !0) : this._isActive = !1 : !0
        }
        _GetDeadline() {
            return this._deadline
        }
        Cancel() {
            this._isActive && (f.delete(this), this._isActive = !1, 0 === f.size && -1 !== d && (self.clearTimeout(d), c = d = -1))
        }
        Release() {
            this.Cancel();
            this._callback = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Disposable = class b {
        constructor(a) {
            this._disposed = !1;
            this._disposeAction = a
        }
        Dispose() {
            this._disposed || (this._disposed = !0, this._disposeAction && (this._disposeAction(), this._disposeAction = null))
        }
        IsDisposed() {
            return this._disposed
        }
        Release() {
            this.Dispose()
        }
        static Release(a) {
            return new b(() => a.Release())
        }
        static From(a, d, c, f, h) {
            if("undefined" === typeof f || null === f) f = !1;
            else if("boolean" !== typeof f && "object" !== typeof f) throw new TypeError("invalid event listener options");
            h &&
                (c = c.bind(h));
            if(d.includes(" ")) {
                d = d.split(" ");
                h = new e.CompositeDisposable;
                for(let g of d) a.addEventListener(g, c, f), h.Add(e.New(e.Disposable, () => a.removeEventListener(g, c, f)));
                return h
            }
            a.addEventListener(d, c, f);
            return e.New(e.Disposable, () => a.removeEventListener(d, c, f))
        }
    };
    e.StubDisposable = class extends e.Disposable {
        SetAction(b) {
            this._disposeAction = b
        }
    };
    e.CompositeDisposable = class extends e.Disposable {
        constructor(...b) {
            super();
            this._disposables = new Set;
            for(let a of b) this.Add(a)
        }
        Add(...b) {
            if(this._disposed) throw Error("already disposed");
            for(let a of b) this._disposables.add(a)
        }
        Remove(b) {
            if(this._disposed) throw Error("already disposed");
            this._disposables.delete(b)
        }
        RemoveAll() {
            if(this._disposed) throw Error("already disposed");
            if(this._disposables) {
                for(let b of this._disposables) b.Dispose();
                this._disposables.clear()
            }
        }
        IsDisposed() {
            return this._disposed
        }
        Dispose() {
            if(this._disposed) throw Error("already disposed");
            this._disposed = !0;
            for(let b of this._disposables) b.Dispose();
            this._disposables.clear();
            this._disposables = null
        }
        Release() {
            this.Dispose()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.KahanSum = class extends e.DefendedBase {
        constructor() {
            super();
            this._sum = this._t = this._y = this._c = 0
        }
        Add(b) {
            this._y = +b - this._c;
            this._t = this._sum + this._y;
            this._c = this._t - this._sum - this._y;
            this._sum = this._t
        }
        Subtract(b) {
            this._sum -= +b
        }
        Get() {
            return this._sum
        }
        Reset() {
            this._sum = this._t = this._y = this._c = 0
        }
        Set(b) {
            this._t = this._y = this._c = 0;
            this._sum = +b
        }
        Release() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = {
            RBnode: function(a) {
                this.tree = a;
                this.left = this.right = this.tree.sentinel;
                this.parent = null;
                this.color = !1;
                this.key = null
            },
            RedBlackSet: function(a) {
                this.size = 0;
                this.sentinel = new b.RBnode(this);
                this.sentinel.color = !1;
                this.root = this.sentinel;
                this.root.parent = this.sentinel;
                this.compare = a || this.default_compare
            }
        };
    b.RedBlackSet.prototype.default_compare = function(a, d) {
        return a < d ? -1 : d < a ? 1 : 0
    };
    b.RedBlackSet.prototype.clone = function() {
        var a = new b.RedBlackSet(this.compare);
        a.insertAll(this);
        return a
    };
    b.RedBlackSet.prototype.clear = function() {
        this.size = 0;
        this.sentinel = new b.RBnode(this);
        this.sentinel.color = !1;
        this.root = this.sentinel;
        this.root.parent = this.sentinel
    };
    b.RedBlackSet.prototype.leftRotate = function(a) {
        var d = a.right;
        a.right = d.left;
        d.left != this.sentinel && (d.left.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.left ? a.parent.left = d : a.parent.right = d;
        d.left = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.rightRotate = function(a) {
        var d = a.left;
        a.left = d.right;
        d.right !=
            this.sentinel && (d.right.parent = a);
        d.parent = a.parent;
        a.parent == this.sentinel ? this.root = d : a == a.parent.right ? a.parent.right = d : a.parent.left = d;
        d.right = a;
        a.parent = d
    };
    b.RedBlackSet.prototype.insert = function(a) {
        if(this.contains(a)) this.get_(a).key = a;
        else {
            var d = new b.RBnode(this);
            d.key = a;
            a = this.sentinel;
            for(var c = this.root; c != this.sentinel;) a = c, c = 0 > this.compare(d.key, c.key) ? c.left : c.right;
            d.parent = a;
            a == this.sentinel ? this.root = d : 0 > this.compare(d.key, a.key) ? a.left = d : a.right = d;
            d.left = this.sentinel;
            d.right = this.sentinel;
            d.color = !0;
            this.insertFixup(d);
            this.size++
        }
    };
    b.RedBlackSet.prototype.insertFixup = function(a) {
        for(; a != this.sentinel && a != this.root && 1 == a.parent.color;)
            if(a.parent == a.parent.parent.left) {
                var d = a.parent.parent.right;
                1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.right && (a = a.parent, this.leftRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.rightRotate(a.parent.parent))
            } else d = a.parent.parent.left, 1 == d.color ? (a.parent.color = !1, d.color = !1, a.parent.parent.color = !0, a = a.parent.parent) : (a == a.parent.left && (a = a.parent, this.rightRotate(a)), a.parent.color = !1, a.parent.parent.color = !0, a.parent.parent != this.sentinel && this.leftRotate(a.parent.parent));
        this.root.color = !1
    };
    b.RedBlackSet.prototype.delete_ = function(a) {
        var d = a.left == this.sentinel || a.right == this.sentinel ? a : this.successor_(a);
        var c = d.left != this.sentinel ? d.left : d.right;
        c.parent = d.parent;
        d.parent == this.sentinel ? this.root = c : d == d.parent.left ? d.parent.left = c : d.parent.right =
            c;
        d != a && (a.key = d.key);
        0 == d.color && this.deleteFixup(c);
        this.size--
    };
    b.RedBlackSet.prototype.deleteFixup = function(a) {
        for(; a != this.root && 0 == a.color;)
            if(a == a.parent.left) {
                var d = a.parent.right;
                1 == d.color && (d.color = !1, a.parent.color = !0, this.leftRotate(a.parent), d = a.parent.right);
                0 == d.left.color && 0 == d.right.color ? (d.color = !0, a = a.parent) : (0 == d.right.color && (d.left.color = !1, d.color = !0, this.rightRotate(d), d = a.parent.right), d.color = a.parent.color, a.parent.color = !1, d.right.color = !1, this.leftRotate(a.parent),
                    a = this.root)
            } else d = a.parent.left, 1 == d.color && (d.color = !1, a.parent.color = !0, this.rightRotate(a.parent), d = a.parent.left), 0 == d.right.color && 0 == d.left.color ? (d.color = !0, a = a.parent) : (0 == d.left.color && (d.right.color = !1, d.color = !0, this.leftRotate(d), d = a.parent.left), d.color = a.parent.color, a.parent.color = !1, d.left.color = !1, this.rightRotate(a.parent), a = this.root);
        a.color = !1
    };
    b.RedBlackSet.prototype.remove = function(a) {
        a = this.get_(a);
        if(a != this.sentinel) {
            var d = a.key;
            this.delete_(a);
            return d
        }
        return null
    };
    b.RedBlackSet.prototype.removeSwapped =
        function(a, d) {
            this.remove(d)
        };
    b.RedBlackSet.prototype.min = function(a) {
        for(; a.left != this.sentinel;) a = a.left;
        return a
    };
    b.RedBlackSet.prototype.max = function(a) {
        for(; a.right != this.sentinel;) a = a.right;
        return a
    };
    b.RedBlackSet.prototype.successor_ = function(a) {
        if(a.right != this.sentinel) return this.min(a.right);
        for(var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.predeccessor_ = function(a) {
        if(a.left != this.sentinel) return this.max(a.left);
        for(var d = a.parent; d != this.sentinel &&
            a == d.left;) a = d, d = d.parent;
        return d
    };
    b.RedBlackSet.prototype.successor = function(a) {
        if(0 < this.size) {
            a = this.get_(a);
            if(a == this.sentinel) return null;
            if(a.right != this.sentinel) return this.min(a.right).key;
            for(var d = a.parent; d != this.sentinel && a == d.right;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.predecessor = function(a) {
        if(0 < this.size) {
            a = this.get_(a);
            if(a == this.sentinel) return null;
            if(a.left != this.sentinel) return this.max(a.left).key;
            for(var d = a.parent; d != this.sentinel &&
                a == d.left;) a = d, d = d.parent;
            return d != this.sentinel ? d.key : null
        }
        return null
    };
    b.RedBlackSet.prototype.getMin = function() {
        return this.min(this.root).key
    };
    b.RedBlackSet.prototype.getMax = function() {
        return this.max(this.root).key
    };
    b.RedBlackSet.prototype.get_ = function(a) {
        for(var d = this.root; d != this.sentinel && 0 != this.compare(d.key, a);) d = 0 > this.compare(a, d.key) ? d.left : d.right;
        return d
    };
    b.RedBlackSet.prototype.contains = function(a) {
        return null != this.get_(a).key
    };
    b.RedBlackSet.prototype.getValues = function() {
        var a = [];
        this.forEach(function(d) {
            a.push(d)
        });
        return a
    };
    b.RedBlackSet.prototype.insertAll = function(a) {
        if("array" == b.typeOf(a))
            for(var d = 0; d < a.length; d++) this.insert(a[d]);
        else if("function" == b.typeOf(a.forEach)) a.forEach(this.insert, this);
        else if("function" == b.typeOf(a.getValues))
            for(a = a.getValues(), d = 0; d < a.length; d++) this.insert(a[d]);
        else if("object" == b.typeOf(a))
            for(d in a) this.insert(a[d])
    };
    b.RedBlackSet.prototype.removeAll = function(a) {
        if("array" == b.typeOf(a))
            for(var d = 0; d < a.length; d++) this.remove(a[d]);
        else if("function" == b.typeOf(a.forEach)) a.forEach(this.removeSwapped, this);
        else if("function" == b.typeOf(a.getValues))
            for(a = a.getValues(), d = 0; d < a.length; d++) this.remove(a[d]);
        else if("object" == b.typeOf(a))
            for(d in a) this.remove(a[d])
    };
    b.RedBlackSet.prototype.containsAll = function(a) {
        if("array" == b.typeOf(a)) {
            for(var d = 0; d < a.length; d++)
                if(!this.contains(a[d])) return !1;
            return !0
        }
        if("function" == b.typeOf(a.forEach)) return a.every(this.contains, this);
        if("function" == b.typeOf(a.getValues)) {
            a = a.getValues();
            for(d =
                0; d < a.length; d++)
                if(!this.contains(a[d])) return !1;
            return !0
        }
        if("object" == b.typeOf(a)) {
            for(d in a)
                if(!this.contains(a[d])) return !1;
            return !0
        }
    };
    b.RedBlackSet.prototype.range = function(a, d) {
        var c = [];
        this.traverseFromTo(function(f) {
            c.push(f)
        }, a, d);
        return c
    };
    b.RedBlackSet.prototype.traverse = function(a, d) {
        if(!this.isEmpty())
            for(var c = this.min(this.root); c != this.sentinel && !a.call(d, c.key, this);) c = this.successor_(c)
    };
    b.RedBlackSet.prototype.traverseFrom = function(a, d, c) {
        if(!this.isEmpty())
            for(d = this.get_(d); d !=
                this.sentinel && !a.call(c, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseTo = function(a, d, c) {
        if(!this.isEmpty()) {
            var f = this.min(this.root);
            for(d = this.get_(d); f != d && !a.call(c, f.key, this);) f = this.successor_(f)
        }
    };
    b.RedBlackSet.prototype.traverseFromTo = function(a, d, c, f) {
        if(!this.isEmpty())
            for(d = this.get_(d), c = this.get_(c); d != c && !a.call(f, d.key, this);) d = this.successor_(d)
    };
    b.RedBlackSet.prototype.traverseBackwards = function(a, d) {
        if(!this.isEmpty())
            for(var c = this.max(this.root); c != this.sentinel &&
                !a.call(d, c.key, this);) c = this.predeccessor_(c)
    };
    b.RedBlackSet.prototype.forEach = function(a, d) {
        if(!this.isEmpty())
            for(var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.call(d, c.key, c.key, this)
    };
    b.RedBlackSet.prototype.some = function(a, d) {
        if(this.isEmpty()) return !1;
        for(var c = this.min(this.root); c != this.sentinel; c = this.successor_(c))
            if(a.call(d, c.key, c.key, this)) return !0;
        return !1
    };
    b.RedBlackSet.prototype.every = function(a, d) {
        if(this.isEmpty()) return !1;
        for(var c = this.min(this.root); c != this.sentinel; c =
            this.successor_(c))
            if(!a.call(d, c.key, c.key, this)) return !1;
        return !0
    };
    b.RedBlackSet.prototype.map = function(a, d) {
        var c = [];
        if(this.isEmpty()) return c;
        for(var f = this.min(this.root); f != this.sentinel; f = this.successor_(f)) c.push(a.call(d, f.key, f.key, this));
        return c
    };
    b.RedBlackSet.prototype.filter = function(a, d) {
        var c = [];
        if(this.isEmpty()) return c;
        for(var f = this.min(this.root); f != this.sentinel; f = this.successor_(f)) a.call(d, f.key, f.key, this) && c.push(f.key);
        return c
    };
    b.RedBlackSet.prototype.getCount = function() {
        return this.size
    };
    b.RedBlackSet.prototype.isEmpty = function() {
        return 0 == this.size
    };
    b.RedBlackSet.prototype.isSubsetOf = function(a) {
        var d = b.getCount(a);
        if(this.getCount() > d) return !1;
        d = 0;
        if(this.isEmpty()) return !0;
        for(var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) b.contains.call(a, a, c.key) && d++;
        return d == this.getCount()
    };
    b.RedBlackSet.prototype.intersection = function(a) {
        var d = new b.RedBlackSet(this.compare);
        if(this.isEmpty()) return d;
        for(var c = this.min(this.root); c != this.sentinel; c = this.successor_(c)) a.contains.call(a,
            c.key, c.key, this) && d.insert(c.key);
        return d
    };
    e.RedBlackSet = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._rbSet = new b.RedBlackSet(a);
            this._enableQueue = !1;
            this._queueInsert = new Set;
            this._queueRemove = new Set
        }
        Add(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.delete(a) : this._queueInsert.add(a) : this._rbSet.insert(a)
        }
        Remove(a) {
            this._enableQueue ? this._rbSet.contains(a) ? this._queueRemove.add(a) : this._queueInsert.delete(a) : this._rbSet.remove(a)
        }
        Has(a) {
            return this._enableQueue ? this._queueInsert.has(a) ?
                !0 : !this._queueRemove.has(a) && this._rbSet.contains(a) : this._rbSet.contains(a)
        }
        Clear() {
            this._rbSet.clear();
            this._queueInsert.clear();
            this._queueRemove.clear()
        }
        toArray() {
            if(this._enableQueue) throw Error("cannot be used in queueing mode");
            return this._rbSet.getValues()
        }
        GetSize() {
            return this._rbSet.getCount() + this._queueInsert.size - this._queueRemove.size
        }
        IsEmpty() {
            return 0 === this.GetSize()
        }
        Front() {
            if(this.IsEmpty()) throw Error("empty set");
            if(this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this._rbSet;
            return a.min(a.root).key
        }
        Shift() {
            if(this.IsEmpty()) throw Error("empty set");
            if(this._enableQueue) throw Error("cannot be used in queueing mode");
            const a = this.Front();
            this.Remove(a);
            return a
        }
        SetQueueingEnabled(a) {
            a = !!a;
            if(this._enableQueue !== a && (this._enableQueue = a, !a)) {
                for(const d of this._queueRemove) this._rbSet.remove(d);
                this._queueRemove.clear();
                for(const d of this._queueInsert) this._rbSet.insert(d);
                this._queueInsert.clear()
            }
        }
        ForEach(a) {
            this._rbSet.forEach(a)
        }* values() {
            if(!this.IsEmpty()) {
                var a =
                    this._rbSet;
                for(let d = a.min(a.root); d != a.sentinel; d = a.successor_(d)) yield d.key
            }
        } [Symbol.iterator]() {
            return this.values()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PromiseThrottle = class {
        constructor(b = e.hardwareConcurrency) {
            this._maxParallel = b;
            this._queue = [];
            this._activeCount = 0
        }
        Add(b) {
            return new Promise((a, d) => {
                this._queue.push({
                    func: b,
                    resolve: a,
                    reject: d
                });
                this._MaybeStartNext()
            })
        }
        _FindInQueue(b) {
            for(let a = 0, d = this._queue.length; a < d; ++a)
                if(this._queue[a].func === b) return a;
            return -1
        }
        RemoveAndResolve(b, a) {
            b = this._FindInQueue(b);
            if(-1 === b) throw Error("cannot find promise to resolve");
            this._queue[b].resolve(a);
            this._queue.splice(b,
                1)
        }
        RemoveAndReject(b, a) {
            b = this._FindInQueue(b);
            if(-1 === b) throw Error("cannot find promise to reject");
            this._queue[b].reject(a);
            this._queue.splice(b, 1)
        }
        async _MaybeStartNext() {
            if(this._queue.length && !(this._activeCount >= this._maxParallel)) {
                this._activeCount++;
                var b = this._queue.shift();
                try {
                    const a = await b.func();
                    b.resolve(a)
                } catch (a) {
                    b.reject(a)
                }
                this._activeCount--;
                this._MaybeStartNext()
            }
        }
        static async Batch(b, a) {
            const d = [];
            let c = !1;
            const f = async g => {
                for(;
                    (g = a.pop()) && !c;) try {
                    d.push(await g())
                } catch (k) {
                    throw c = !0, k;
                }
            }, h = [];
            for(; b--;) h.push(f());
            await Promise.all(h);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.RateLimiter = class {
        constructor(b, a, d) {
            this._callback = b;
            this._interval = a;
            this._intervalOnBattery = d || 2 * a;
            this._timerId = -1;
            this._lastCallTime = -Infinity;
            this._timerCallFunc = () => this._OnTimer();
            this._canRunImmediate = this._ignoreReset = !1;
            this._callbackArguments = null
        }
        SetCanRunImmediate(b) {
            this._canRunImmediate = !!b
        }
        _GetInterval() {
            return "undefined" !== typeof e.Battery && e.Battery.IsOnBatteryPower() ? this._intervalOnBattery : this._interval
        }
        Call(...b) {
            if(-1 === this._timerId) {
                this._callbackArguments =
                    b;
                b = e.FastGetDateNow();
                var a = b - this._lastCallTime,
                    d = this._GetInterval();
                a >= d && this._canRunImmediate ? (this._lastCallTime = b, this._RunCallback()) : this._timerId = self.setTimeout(this._timerCallFunc, Math.max(d - a, 4))
            }
        }
        _RunCallback() {
            this._ignoreReset = !0;
            const b = this._callbackArguments;
            this._callbackArguments = null;
            b ? this._callback(...b) : this._callback();
            this._ignoreReset = !1
        }
        Reset() {
            this._ignoreReset || (this._CancelTimer(), this._callbackArguments = null, this._lastCallTime = e.FastGetDateNow())
        }
        _OnTimer() {
            this._timerId = -1;
            this._lastCallTime = e.FastGetDateNow();
            this._RunCallback()
        }
        _CancelTimer() {
            -1 !== this._timerId && (self.clearTimeout(this._timerId), this._timerId = -1)
        }
        Release() {
            this._CancelTimer();
            this._timerCallFunc = this._callbackArguments = this._callback = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SVGRasterManager = class {
        constructor() {
            this._images = new Map;
            this._allowNpotSurfaces = !1;
            this._redrawCallback = this._releaseResultCallback = this._rasterAtSizeCallback = this._getBaseSizeCallback = null
        }
        SetNpotSurfaceAllowed(b) {
            this._allowNpotSurfaces = !!b
        }
        IsNpotSurfaceAllowed() {
            return this._allowNpotSurfaces
        }
        SetGetBaseSizeCallback(b) {
            this._getBaseSizeCallback = b
        }
        GetBaseSize(b) {
            if(!this._getBaseSizeCallback) throw Error("no get base size callback set");
            return this._getBaseSizeCallback(b)
        }
        SetRasterAtSizeCallback(b) {
            this._rasterAtSizeCallback =
                b
        }
        RasterAtSize(b, a, d, c, f, h) {
            if(!this._rasterAtSizeCallback) throw Error("no raster at size callback set");
            return this._rasterAtSizeCallback(b, a, d, c, f, h)
        }
        SetReleaseResultCallback(b) {
            this._releaseResultCallback = b
        }
        ReleaseResult(b) {
            if(!this._releaseResultCallback) throw Error("no release result callback set");
            this._releaseResultCallback(b)
        }
        SetRedrawCallback(b) {
            this._redrawCallback = b
        }
        Redraw() {
            if(!this._redrawCallback) throw Error("no redraw callback set");
            this._redrawCallback()
        }
        AddImage(b) {
            let a = this._images.get(b);
            a || (a = e.New(e.SVGRasterImage, this, b), this._images.set(b, a));
            a.IncReference();
            return a
        }
        _RemoveImage(b) {
            this._images.delete(b.GetDataSource())
        }
        OnTexturesChanged() {
            for(const b of this._images.values()) b.ReleaseRasterizedResult(), b.ForceRasterAgain()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SVGRasterImage = class {
        constructor(b, a) {
            this._manager = b;
            this._dataSource = a;
            this._baseHeight = this._baseWidth = this._refCount = 0;
            this._getBaseSizePromise = this._manager.GetBaseSize(a).then(d => {
                this._baseWidth = d[0];
                this._baseHeight = d[1];
                this._manager.Redraw()
            }).catch(d => {
                console.error("[SVG] Error loading SVG: ", d);
                this._hadError = !0;
                this._manager.Redraw()
            });
            this._rasterImageHeight = this._rasterImageWidth = this._rasterSurfaceHeight = this._rasterSurfaceWidth = 0;
            this._isRasterizing = !1;
            this._rasterizedResult = null;
            this._hadError = this._forceRaster = !1
        }
        Release() {
            if(0 >= this._refCount) throw Error("already released");
            this._refCount--;
            0 === this._refCount && this._Release()
        }
        ReleaseRasterizedResult() {
            this._rasterizedResult && (this._manager.ReleaseResult(this._rasterizedResult), this._rasterizedResult = null)
        }
        _Release() {
            this.ReleaseRasterizedResult();
            this._manager._RemoveImage(this);
            this._manager = null
        }
        GetDataSource() {
            return this._dataSource
        }
        IncReference() {
            this._refCount++
        }
        HasReferences() {
            return 0 <
                this._refCount
        }
        GetRasterizedResult() {
            return this._rasterizedResult
        }
        ForceRasterAgain() {
            this._forceRaster = !0
        }
        async StartRasterForSize(b, a, d) {
            if(0 !== a && 0 !== d && !this._hadError && !this._isRasterizing) {
                var c = e.nextHighestPowerOfTwo(Math.ceil(a)),
                    f = e.nextHighestPowerOfTwo(Math.ceil(d)),
                    h = Math.max(c, f);
                2048 < h && (h = 2048 / h, a *= h, d *= h, c = Math.min(Math.ceil(c * h), 2048), f = Math.min(Math.ceil(f * h), 2048));
                a < c && d < f && (d = a / d, c / f > d ? (a = f * d, d = f) : (a = c, d = c / d));
                this._manager.IsNpotSurfaceAllowed() && (c = Math.ceil(a), f = Math.ceil(d));
                c <= this._rasterSurfaceWidth && f <= this._rasterSurfaceHeight && !this._forceRaster || (this._isRasterizing = !0, this._rasterSurfaceWidth = c, this._rasterSurfaceHeight = f, b = await this._manager.RasterAtSize(this._dataSource, b, this._rasterSurfaceWidth, this._rasterSurfaceHeight, a, d), this._manager && (this.ReleaseRasterizedResult(), this._rasterizedResult = b, this._rasterImageWidth = a, this._rasterImageHeight = d, this._forceRaster = this._isRasterizing = !1, this._manager.Redraw()))
            }
        }
        WhenBaseSizeReady() {
            return this._getBaseSizePromise
        }
        GetBaseWidth() {
            return this._baseWidth
        }
        GetBaseHeight() {
            return this._baseHeight
        }
        GetRasterWidth() {
            return this._rasterImageWidth
        }
        GetRasterHeight() {
            return this._rasterImageHeight
        }
        HadError() {
            return this._hadError
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.UTF8_BOM = "\ufeff";
    const b = new Set([..."0123456789"]);
    e.IsNumericChar = function(m) {
        return b.has(m)
    };
    const a = new Set([..." \t\n\r\u00a0\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000"]);
    e.IsWhitespaceChar = function(m) {
        return a.has(m)
    };
    e.FilterWhitespace = function(m) {
        return [...m].filter(p => !e.IsWhitespaceChar(p)).join("")
    };
    e.IsStringAllWhitespace = function(m) {
        for(const p of m)
            if(!e.IsWhitespaceChar(p)) return !1;
        return !0
    };
    e.IsUnprintableChar = function(m) {
        return 1 === m.length && 32 > m.charCodeAt(0)
    };
    e.FilterUnprintableChars = function(m) {
        return [...m].filter(p => !e.IsUnprintableChar(p)).join("")
    };
    const d = new Set([..."0123456789.+-e"]);
    e.IsStringNumber = function(m) {
        m = m.trim();
        if(!m.length) return !1;
        let p = m.charAt(0);
        if("-" !== p && !b.has(p)) return !1;
        for(let x of m)
            if(!d.has(x)) return !1;
        return !0
    };
    e.RemoveTrailingDigits = function(m) {
        let p = m.length;
        for(; 0 < p;) {
            let x = m.charAt(p - 1);
            if(!e.IsNumericChar(x)) break;
            --p
        }
        return m.substr(0, p)
    };
    e.IncrementNumberAtEndOf = function(m) {
        let p = e.RemoveTrailingDigits(m);
        m = (m = m.substr(p.length)) ? (parseInt(m, 10) + 1).toString() : "2";
        return p + m
    };
    const c = new Map([
        ["&", "&amp;"],
        ["<", "&lt;"],
        [">", "&gt;"],
        ['"', "&quot;"],
        ["'", "&#39;"]
    ]);

    function f(m) {
        return c.get(m)
    }
    const h = /[&<>"']/g;
    e.EscapeHTML = function(m) {
        return m.replace(h, f)
    };
    e.EscapeJS = function(m) {
        m = e.ReplaceAll(m, "\\", "\\\\");
        m = e.ReplaceAll(m, '"', '\\"');
        m = e.ReplaceAll(m, "\t", "\\t");
        m = e.ReplaceAll(m, "\r", "");
        return e.ReplaceAll(m, "\n", "\\n")
    };
    e.EscapeXML =
        function(m) {
            m = e.ReplaceAll(m, "&", "&amp;");
            m = e.ReplaceAll(m, "<", "&lt;");
            m = e.ReplaceAll(m, ">", "&gt;");
            return e.ReplaceAll(m, '"', "&quot;")
        };
    const g = /[-[\]{}()*+?.,\\^$|#\s]/g;
    e.EscapeRegex = function(m) {
        return m.replace(g, "\\$&")
    };
    e.FindAll = function(m, p, x = !1) {
        if(!p) return [];
        x || (m = m.toLowerCase(), p = p.toLowerCase());
        x = p.length;
        var t = 0;
        let q = [];
        for(; - 1 < (t = m.indexOf(p, t));) q.push(t), t += x;
        return q
    };
    e.ReplaceAll = function(m, p, x) {
        return m.replaceAll(p, () => x)
    };
    e.ReplaceAllCaseInsensitive = function(m, p, x) {
        return m.replace(new RegExp(e.EscapeRegex(p),
            "gi"), () => x)
    };
    e.SetElementContent = function(m, p) {
        "string" === typeof p ? m.textContent = p : p.isPlainText() ? m.textContent = p.toString() : (m.innerHTML = p.toHTML(), p instanceof e.BBString && p.attachLinkHandlers(m))
    };
    e.StringLikeEquals = function(m, p) {
        return m instanceof e.HtmlString || m instanceof e.BBString ? m.equals(p) : p instanceof e.HtmlString || p instanceof e.BBString ? p.equals(m) : m === p
    };
    e.StringSubstitute = function(m, ...p) {
        let x = m;
        for(let t = 0, q = p.length; t < q; ++t) {
            const r = `{${t}}`;
            if(!m.includes(r)) throw Error(`missing placeholder '${r}' in string substitution`);
            x = x.replace(r, p[t].toString())
        }
        return x
    };
    e.StringSubstituteAllowMissing = function(m, ...p) {
        let x = m,
            t = -1,
            q = -1;
        for(let r = 0, y = p.length; r < y; ++r) {
            const v = `{${r}}`;
            m.includes(v) ? (q = r, x = x.replace(v, p[r].toString())) : -1 === t && (t = r)
        }
        if(0 <= t && 0 <= q && t < q) throw Error(`missing placeholder '${t}' in string substitution`);
        return x
    };
    e.StringSubstituteMap = function(m, p) {
        for(let [x, t] of Object.entries(p)) m = m.replaceAll(x, t.toString());
        return m
    };
    e.SortAZCaseInsensitive = function(m, p) {
        m = m.toLowerCase();
        p = p.toLowerCase();
        return m >
            p ? 1 : m < p ? -1 : 0
    };
    e.FormatDataSize = function(m, p) {
        p = "common." + (p ? "dataRates" : "dataSizes") + ".";
        const x = self.langSub;
        if(1024 > m) return x(p + "bytes", m);
        if(1048576 > m) return m /= 1024, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(p + "kilobytes", m);
        if(1073741824 > m) return m /= 1048576, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(p + "megabytes", m);
        if(1099511627776 > m) return m /= 1073741824, m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m), x(p + "gigabytes", m);
        m /= 1099511627776;
        m = 10 > m ? Math.round(10 * m) / 10 : Math.round(m);
        return x(p + "terabytes",
            m)
    };
    const k = {
        approximate: !1,
        days: !0,
        hours: !0,
        minutes: !0,
        seconds: !0
    };
    e.FormatTime = function(m, p) {
        p = Object.assign({}, k, p);
        e.Lang.PushContext("common.time");
        const x = [],
            t = self.lang,
            q = self.langPluralSub;
        if(p.days) {
            var r = Math.floor(m / 86400);
            0 < r && (m -= 86400 * r, x.push(q(".days", null, r)))
        }
        p.hours && (r = Math.floor(m / 3600), 0 < r || x.length) && (m -= 3600 * r, x.push(q(".hours", null, r)));
        p.minutes && (r = Math.floor(m / 60), 0 < r || x.length || !p.seconds) && (m -= 60 * r, x.push(q(".minutes", null, r)));
        p.seconds && x.push(q(".seconds", null, Math.floor(m %
            60)));
        m = (p.approximate ? t(".approx-prefix") : "") + x.join(t(".separator"));
        e.Lang.PopContext();
        return m
    };
    e.ZeroPad = function(m, p) {
        let x = 0 > m ? "-" : "";
        m = Math.abs(m);
        m = m.toString();
        p -= m.length;
        for(let t = 0; t < p; ++t) x += "0";
        return x + m
    };
    e.StringToTitleCase = function(m) {
        return m.toLowerCase().replace(/\b\w/g, p => p.toUpperCase())
    };
    e.CompareVersionStrings = function(m, p) {
        m = m.split(".").map(x => x.trim());
        p = p.split(".").map(x => x.trim());
        e.resizeArray(m, 4, "0");
        e.resizeArray(p, 4, "0");
        m = m.map(x => parseInt(x, 10));
        p = p.map(x => parseInt(x,
            10));
        for(let x = 0; 4 > x; ++x) {
            const t = m[x] - p[x];
            if(0 !== t) return 0 > t ? -1 : 1
        }
        return 0
    };
    e.CreateGUID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, m => {
            const p = Math.floor(16 * Math.random());
            return ("x" === m ? p : p & 3 | 8).toString(16)
        })
    };
    e.StringHammingDistance = function(m, p) {
        if(m.length !== p.length) throw Error("strings must be same length");
        let x = 0;
        for(let t = 0, q = m.length; t < q; ++t) m.charAt(t) !== p.charAt(t) && ++x;
        return x
    };
    e.StringLevenshteinDistance = function(m, p) {
        if(0 === m.length) return p.length;
        if(0 === p.length) return m.length;
        let x, t, q, r;
        if(m.length > p.length) {
            var y = m;
            m = p;
            p = y
        }
        r = Array(m.length + 1);
        for(y = 0; y <= m.length; y++) r[y] = y;
        for(y = 1; y <= p.length; y++) {
            t = y;
            for(x = 1; x <= m.length; x++) q = p[y - 1] === m[x - 1] ? r[x - 1] : Math.min(r[x - 1] + 1, Math.min(t + 1, r[x] + 1)), r[x - 1] = t, t = q;
            r[m.length] = t
        }
        return r[m.length]
    }
} {
    "use strict";
    const e = self.C3,
        b = new Map([
            ["b", "strong"],
            ["i", "em"],
            ["s", "s"],
            ["u", "u"],
            ["sub", "sub"],
            ["sup", "sup"],
            ["small", "small"],
            ["mark", "mark"],
            ["a1", "a"],
            ["a2", "a"],
            ["a3", "a"],
            ["a4", "a"],
            ["a5", "a"],
            ["a6", "a"],
            ["a7", "a"],
            ["a8", "a"],
            ["a9", "a"],
            ["bad", ["span", "bbCodeBad"]],
            ["good", ["span", "bbCodeGood"]],
            ["info", ["span", "bbCodeInfo"]],
            ["h1", ["span", "bbCodeH1"]],
            ["h2", ["span", "bbCodeH2"]],
            ["h3", ["span", "bbCodeH3"]],
            ["h4", ["span", "bbCodeH4"]],
            ["item", ["span", "bbCodeItem"]]
        ]),
        a = /\[(\/?)([a-zA-Z0-9]+)\]/g,
        d = /\[(\/?)([^\[]*?)\]/g;
    let c = null,
        f = 0;

    function h(k, m, p) {
        var x = b.get(p);
        if(x) {
            if("string" === typeof x) {
                if("a" !== x || m) return "<" + m + x + ">";
                m = parseInt(p.substring(1), 10) - 1;
                if(0 > m || m >= c.length) throw Error("invalid bbcode link substitution");
                x = c[m];
                if("string" === typeof x) return `<a href="${c[m]}">`;
                if("function" === typeof x) return `<a class="bblink${m}">`;
                throw new TypeError("invalid bbcode link action");
            }
            if(Array.isArray(x)) return k = x[0], x = x[1], m ? "</" + k + ">" : `<${k} class="${x}">`
        } else return "class" === p ? m ? "</span>" :
            `<span class="bbclass${f++}">` : k
    }
    const g = /\n/g;
    e.BBString = class {
        constructor(k, m) {
            this._bbstr = m && m.noEscape ? k : e.EscapeHTML(k);
            this._htmlstr = "";
            this._convertLineBreaks = !1;
            this._linkActions = [];
            if(m && (this._convertLineBreaks = !!m.convertLineBreaks, m.links)) {
                if(9 < m.links.length) throw Error("too many links");
                this._linkActions = m.links
            }
            this._hasAnyBBtags = this._bbstr.includes("[");
            this._needsLineBreakConversion = this._convertLineBreaks && this._bbstr.includes("\n");
            this._isPlain = !this._hasAnyBBtags && !this._needsLineBreakConversion &&
                !this._bbstr.includes("&");
            this._hasParsedFragments = !1;
            this._fragments = []
        }
        toString() {
            return this._bbstr
        }
        valueOf() {
            return this._bbstr
        }
        isPlainText() {
            return this._isPlain
        }
        toPlainText() {
            return this._hasAnyBBtags ? this._bbstr.replace(a, "") : this._bbstr
        }
        toHTML() {
            if(this._isPlain) return this._bbstr;
            if(!this._htmlstr && this._bbstr) {
                let k = this._bbstr;
                this._hasAnyBBtags && (f = 0, c = this._linkActions, k = k.replace(a, h), c = null);
                this._needsLineBreakConversion && (k = k.replace(g, "<br>"));
                this._htmlstr = k
            }
            return this._htmlstr
        }
        attachLinkHandlers(k) {
            if(this._linkActions.length)
                for(let m =
                        0, p = this._linkActions.length; m < p; ++m) {
                    const x = this._linkActions[m];
                    if("function" !== typeof x) continue;
                    const t = k.querySelector(".bblink" + m);
                    if(!t) throw Error("unable to attach BBString link handler");
                    t.onclick = x
                }
        }
        equals(k) {
            return k instanceof e.HtmlString ? this.toHTML() === k.toHTML() : k instanceof e.BBString ? this._bbstr === k._bbstr : this._bbstr === k
        }
        toFragmentList() {
            if(this._hasParsedFragments) return this._fragments;
            const k = this._bbstr,
                m = [];
            let p = d.lastIndex = 0;
            for(var x; null !== (x = d.exec(k));) {
                var t = x.index;
                if(0 < t && "\\" === k.charAt(t - 1)) continue;
                var q = x[0],
                    r = x[1];
                x = x[2];
                const y = k.substring(p, t);
                p = t + q.length;
                y && this._fragments.push({
                    text: y,
                    styles: m.slice(0)
                });
                if(x)
                    if(r)
                        for(x = x.toLowerCase(), t = m.length - 1; 0 <= t; --t) {
                            if(m[t].tag === x) {
                                m.splice(t, 1);
                                break
                            }
                        } else t = x, q = null, r = x.indexOf("="), -1 !== r ? (t = x.substring(0, r).toLowerCase(), q = x.substring(r + 1)) : t = t.toLowerCase(), m.push({
                            tag: t,
                            param: q
                        })
            }
            p < k.length && this._fragments.push({
                text: k.substring(p),
                styles: m.slice(0)
            });
            for(const y of this._fragments) y.text = this._ProcessBBCodeEscapeSequences(y.text);
            this._hasParsedFragments = !0;
            return this._fragments
        }
        _ProcessBBCodeEscapeSequences(k) {
            k = e.ReplaceAll(k, "\\[", "[");
            return e.ReplaceAll(k, "\\\\", "\\")
        }
        static StripTags(k) {
            return e.New(e.BBString, k, {
                noEscape: !0
            }).toPlainText()
        }
        static StripAnyTags(k) {
            return k.replace(d, "")
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.WordWrap = class {
        constructor() {
            this._lines = []
        }
        GetLines() {
            return this._lines
        }
        GetLineCount() {
            return this._lines.length
        }
        _MeasureLine(b, a) {
            let d = 0,
                c = 0,
                f = 0,
                h = 0,
                g = 0;
            for(const k of b) - 1 === k.width && (b = a(k.text, k.styles), k.width = b.width, k.height = b.height, k.fontBoundingBoxAscent = b.fontBoundingBoxAscent || 0, k.fontBoundingBoxDescent = b.fontBoundingBoxDescent || 0, k.topToAlphabeticDistance = b.topToAlphabeticDistance || 0), d += k.width, c = Math.max(c, k.height), f = Math.max(f, k.fontBoundingBoxAscent),
                h = Math.max(h, k.fontBoundingBoxDescent), g = Math.max(g, k.topToAlphabeticDistance);
            return {
                width: d,
                height: c,
                fontBoundingBoxAscent: f,
                fontBoundingBoxDescent: h,
                topToAlphabeticDistance: g
            }
        }
        _AddLine(b, a, d, c, f, h) {
            this._lines.push({
                fragments: b,
                width: a,
                height: d,
                fontBoundingBoxAscent: c,
                fontBoundingBoxDescent: f,
                topToAlphabeticDistance: h
            })
        }
        WordWrap(b, a, d, c, f) {
            "string" === typeof b && (b = [{
                text: b,
                styles: []
            }]);
            e.clearArray(this._lines);
            if(!(!b.length || 1 === b.length && !b[0].text.length || 2 > d)) {
                if(1 === b.length) {
                    var h = b[0];
                    const g =
                        h.text;
                    h = h.styles;
                    if(100 >= g.length && !g.includes("\n")) {
                        let {
                            width: k,
                            height: m,
                            fontBoundingBoxAscent: p,
                            fontBoundingBoxDescent: x,
                            topToAlphabeticDistance: t
                        } = a(g, h);
                        k += f;
                        p = p || 0;
                        x = x || 0;
                        t = t || 0;
                        if(k <= d) {
                            this._AddLine([{
                                text: g,
                                styles: h,
                                width: k,
                                height: m,
                                fontBoundingBoxAscent: p,
                                fontBoundingBoxDescent: x,
                                topToAlphabeticDistance: t
                            }], k, m, p, x, t);
                            return
                        }
                    }
                }
                if("word" === c) c = this._TokeniseWords(b);
                else {
                    c = [];
                    for(const g of b) e.appendArray(c, [...g.text].map(k => [{
                        text: k,
                        styles: g.styles
                    }]))
                }
                this._WrapText(c, a, d, f)
            }
        }
        _TokeniseWords(b) {
            const a = [];
            let d = [],
                c = !1;
            for(const h of b) {
                var f = h.text;
                b = h.styles;
                for(const g of f) "\n" === g ? (0 < d.length && a.push(d), a.push([{
                    text: "\n",
                    styles: b
                }]), d = []) : 0 === d.length ? (d.push({
                    text: g,
                    styles: b
                }), c = e.IsWhitespaceChar(g)) : (f = e.IsWhitespaceChar(g), f === c ? (f = d[d.length - 1], f.styles === b ? f.text += g : d.push({
                    text: g,
                    styles: b
                })) : (a.push(d), d = [], d.push({
                    text: g,
                    styles: b
                }), c = f))
            }
            0 < d.length && a.push(d);
            return a
        }
        _CopyLine(b) {
            return b.map(a => ({
                text: a.text,
                styles: a.styles,
                width: a.width,
                height: a.height,
                fontBoundingBoxAscent: a.fontBoundingBoxAscent,
                fontBoundingBoxDescent: a.fontBoundingBoxDescent,
                topToAlphabeticDistance: a.topToAlphabeticDistance
            }))
        }
        _AddWordToLine(b, a) {
            var d = b.length ? b[b.length - 1] : null;
            let c = 0;
            d && a[0].styles === d.styles && (d.text += a[0].text, d.width = -1, d.height = -1, d.fontBoundingBoxAscent = -1, d.fontBoundingBoxDescent = -1, d.topToAlphabeticDistance = -1, c = 1);
            for(d = a.length; c < d; ++c) {
                const f = a[c];
                b.push({
                    text: f.text,
                    styles: f.styles,
                    width: -1,
                    height: -1,
                    fontBoundingBoxAscent: -1,
                    fontBoundingBoxDescent: -1,
                    topToAlphabeticDistance: -1
                })
            }
        }
        _WrapText(b,
            a, d, c) {
            let f = [],
                h = 0,
                g = 0,
                k = 0,
                m = 0;
            var p = 0;
            for(const x of b) {
                if(1 === x.length && "\n" === x[0].text) {
                    0 === g && (p = a(" ", x[0].styles), g = p.height, k = p.fontBoundingBoxAscent || 0, m = p.fontBoundingBoxDescent || 0, p = p.topToAlphabeticDistance || 0);
                    this._AddLine(f, h, g, k, m, p);
                    f = [];
                    p = m = k = g = h = 0;
                    continue
                }
                b = this._CopyLine(f);
                this._AddWordToLine(b, x);
                const t = this._MeasureLine(b, a),
                    q = t.width;
                q >= d ? (0 < f.length && this._AddLine(f, h, g, k, m, p), f = [], e.IsStringAllWhitespace(x[0].text) ? p = m = k = g = h = 0 : (this._AddWordToLine(f, x), p = this._MeasureLine(f,
                    a), h = p.width, g = p.height, k = p.fontBoundingBoxAscent, m = p.fontBoundingBoxDescent, p = p.topToAlphabeticDistance)) : (f = b, h = q, g = t.height, k = t.fontBoundingBoxAscent, m = t.fontBoundingBoxDescent, p = t.topToAlphabeticDistance)
            }
            0 < f.length && this._AddLine(f, h, g, k, m, p);
            this._TrimLinesTrailingWhitespace(a, c)
        }
        _TrimLinesTrailingWhitespace(b, a) {
            for(const c of this._lines) {
                const f = c.fragments;
                if(!f.length) continue;
                let h = f[f.length - 1];
                var d = h.text;
                const g = d.trimEnd();
                if(!g) c.width -= h.width, f.pop();
                else if(g.length < d.length) {
                    d =
                        b(g, h.styles).width;
                    const k = h.width - d;
                    h.width = d;
                    h.text = g;
                    c.width -= k
                }
                0 !== a && 0 < f.length && (h = f[f.length - 1], h.width += a, c.width += a)
            }
        }
        Clear() {
            e.clearArray(this._lines)
        }
        GetMaxLineWidth() {
            return this._lines.reduce((b, a) => Math.max(b, a.width), 0)
        }
        GetTotalLineHeight() {
            return this._lines.reduce((b, a) => b + a.height, 0)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        f = a.create(),
        h = a.create(),
        g = a.create(),
        k = d.create(),
        m = c.create(),
        p = a.create(),
        x = a.create(),
        t = a.create(),
        q = a.create(),
        r = a.create(),
        y = a.create(),
        v = a.create(),
        u = a.create(),
        A = d.fromValues(0, 0, 1, 1);
    e.Gfx = {
        Project(E, J, F, H, K, N, S) {
            const V = H[0] * E + H[4] * J + H[8] * F + H[12],
                U = H[1] * E + H[5] * J + H[9] * F + H[13];
            var X = H[2] * E + H[6] * J + H[10] * F + H[14];
            F = H[3] * E + H[7] * J + H[11] * F + H[15];
            E = K[0] * V + K[4] * U + K[8] * X + K[12] * F;
            J = K[1] * V + K[5] * U + K[9] * X + K[13] * F;
            K = K[2] * V + K[6] * U +
                K[10] * X + K[14] * F;
            X = -X;
            if(0 === X) return !1;
            X = 1 / X;
            S[0] = (E * X * .5 + .5) * N[2] + N[0];
            S[1] = (J * X * .5 + .5) * N[3] + N[1];
            S[2] = .5 * (1 + K * X);
            return !0
        },
        Unproject(E, J, F, H, K, N, S) {
            c.multiply(m, K, H);
            if(null === c.invert(m, m)) return !1;
            k[0] = (E - N[0]) / N[2] * 2 - 1;
            k[1] = (J - N[1]) / N[3] * 2 - 1;
            k[2] = 2 * F - 1;
            k[3] = 1;
            d.transformMat4(k, k, m);
            if(0 === k[3]) return !1;
            k[3] = 1 / k[3];
            S[0] = k[0] * k[3];
            S[1] = k[1] * k[3];
            S[2] = k[2] * k[3];
            return !0
        },
        UnprojectScreenToWorldZ(E, J, F, H, K, N, S) {
            if(!e.Gfx.Unproject(E, J, 0, H, K, N, f) || !e.Gfx.Unproject(E, J, 1, H, K, N, h)) return !1;
            a.subtract(h,
                h, f);
            a.set(g, 0, 0, 1);
            E = -F;
            J = a.dot(g, h);
            F = 0;
            if(0 === J) {
                if(0 !== a.dot(g, f) + E) return !1
            } else if(F = -(a.dot(f, g) + E) / J, 0 > F) return !1;
            a.scaleAndAdd(S, f, h, F);
            return !0
        }
    };

    function z(E, J, F, H) {
        a.subtract(f, F, J);
        a.subtract(h, E, J);
        a.cross(g, f, h);
        a.normalize(g, g);
        H[0] = g[0];
        H[1] = g[1];
        H[2] = g[2];
        H[3] = a.dot(E, g)
    }

    function C(E, J, F, H, K, N, S) {
        const V = S[0],
            U = S[1],
            X = S[2];
        S = S[3];
        let ia;
        0 < V ? (ia = V * E, E = V * H) : (ia = V * H, E *= V);
        0 < U ? (ia += U * J, E += U * K) : (ia += U * K, E += U * J);
        0 < X ? (ia += X * F, E += X * N) : (ia += X * N, E += X * F);
        return ia >= S || E > S
    }
    e.Gfx.ViewFrustum =
        class {
            constructor() {
                this._leftP = d.create();
                this._topP = d.create();
                this._rightP = d.create();
                this._bottomP = d.create();
                this._nearP = d.create();
                this._farP = d.create()
            }
            CalculatePlanes(E, J) {
                e.Gfx.Unproject(0, 1, 0, E, J, A, p);
                e.Gfx.Unproject(1, 1, 0, E, J, A, x);
                e.Gfx.Unproject(0, 0, 0, E, J, A, t);
                e.Gfx.Unproject(1, 0, 0, E, J, A, q);
                e.Gfx.Unproject(0, 1, 1, E, J, A, r);
                e.Gfx.Unproject(1, 1, 1, E, J, A, y);
                e.Gfx.Unproject(0, 0, 1, E, J, A, v);
                e.Gfx.Unproject(1, 0, 1, E, J, A, u);
                z(t, p, r, this._leftP);
                z(p, x, y, this._topP);
                z(x, q, u, this._rightP);
                z(q, t, v, this._bottomP);
                z(v, r, y, this._farP);
                z(q, x, p, this._nearP)
            }
            ContainsAABB(E, J, F, H, K, N) {
                return C(E, J, F, H, K, N, this._leftP) && C(E, J, F, H, K, N, this._topP) && C(E, J, F, H, K, N, this._rightP) && C(E, J, F, H, K, N, this._bottomP) && C(E, J, F, H, K, N, this._nearP) && C(E, J, F, H, K, N, this._farP)
            }
        }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = b.mat4,
        f = c.create(),
        h = a.fromValues(0, 0, 0),
        g = a.fromValues(0, 0, 0),
        k = a.fromValues(0, 0, 0),
        m = a.fromValues(0, 1, 0);
    d.fromValues(0, 0, 0, 0);
    const p = new e.Quad,
        x = new e.Rect,
        t = new e.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    e.Gfx.RendererBase = class {
        constructor() {
            this._height = this._width = 0;
            this._fovY = e.toRadians(45);
            this._tan_fovY_2 = Math.tan(this._fovY / 2);
            this._matP = c.create();
            this._matMV = c.create();
            this._allShaderPrograms = [];
            this._shaderProgramsByName = new Map;
            this._spSmoothLineFill =
                this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._stateGroups = new Map;
            this._currentStateGroup = null;
            this._blendModeTable = [];
            this._namedBlendModeMap = new Map;
            this._currentZ = this._baseZ = 0;
            this._lineWidth = 1;
            this._lineWidthStack = [this._lineWidth];
            this._lineCap = 1;
            this._lineCapStack = [this._lineCap];
            this._lineOffset = .5;
            this._lineOffsetStack = [this._lineOffset];
            this._frameNumber = 0;
            this._enableMipmaps = !0
        }
        FillIndexBufferData(q) {
            let r = 0,
                y = q.length,
                v = 0;
            for(; r < y;) q[r++] = v, q[r++] = v + 1, q[r++] = v + 2, q[r++] = v, q[r++] = v + 2, q[r++] = v + 3, v += 4
        }
        _ClearState() {
            this._currentZ = this._baseZ = 0;
            this._spSmoothLineFill = this._spSmoothEllipseOutline = this._spSmoothEllipseFill = this._spHardEllipseOutline = this._spHardEllipseFill = this._spLinearGradientFill = this._spColorFill = this._spTilemapFill = this._spPoints = this._spTextureFill = null;
            this._ClearAllShaderPrograms()
        }
        InitState() {
            this._ClearState();
            this._currentStateGroup = null
        }
        OnDeviceOrContextLost() {
            for(const q of this._allShaderPrograms) q.Release();
            this._ClearState()
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetDefaultCameraZ() {
            return 100
        }
        GetNearZ() {
            return 1
        }
        GetFarZ() {
            return 1E4
        }
        GetFovY() {
            return this._fovY
        }
        _GetTanFovYDiv2() {
            return this._tan_fovY_2
        }
        CalculatePerspectiveMatrix(q, r, y = .5, v = .5) {
            const u = this.GetNearZ(),
                A = this.GetFarZ();
            y = 1 - y;
            const z = 2 * y - 2;
            y *= 2;
            const C = 2 * v - 2;
            v *= 2;
            const E = this._GetTanFovYDiv2() * u;
            r *= E;
            c.frustum(q,
                z * r, y * r, C * E, v * E, u, A)
        }
        CalculateLookAtModelView(q, r, y, v, u = this.GetScissoredViewportHeight()) {
            u = 2 * this.GetDefaultCameraZ() * self.devicePixelRatio * this._GetTanFovYDiv2() / u;
            a.set(k, u, -u, 1);
            a.multiply(h, r, k);
            a.multiply(g, y, k);
            c.lookAt(q, h, g, v || m);
            c.scale(q, q, k)
        }
        CalculateLookAtModelView2(q, r, y, v, u, A, z) {
            a.set(h, q, r, y);
            a.set(g, v, u, A);
            this.CalculateLookAtModelView(f, h, g, m, z);
            return f
        }
        _AddShaderProgram(q) {
            this._allShaderPrograms.push(q);
            this._shaderProgramsByName.set(q.GetName(), q)
        }
        _RemoveShaderProgram(q) {
            const r =
                this._allShaderPrograms.indexOf(q); - 1 !== r && this._allShaderPrograms.splice(r, 1);
            this._shaderProgramsByName.delete(q.GetName())
        }
        _ClearAllShaderPrograms() {
            e.clearArray(this._allShaderPrograms);
            this._shaderProgramsByName.clear()
        }
        GetShaderProgramByName(q) {
            return this._shaderProgramsByName.get(q) || null
        }
        GetTextureFillShaderProgram() {
            return this._spTextureFill
        }
        SetTextureFillMode() {
            this.SetProgram(this._spTextureFill)
        }
        GetPointsRenderingProgram() {
            return this._spPoints
        }
        SetPointsRenderingProgram() {
            this.SetProgram(this._spPoints)
        }
        SetTilemapFillMode() {
            this.SetProgram(this._spTilemapFill)
        }
        SetColorFillMode() {
            this.SetProgram(this._spColorFill)
        }
        SetLinearGradientFillMode() {
            this.SetProgram(this._spLinearGradientFill)
        }
        SetHardEllipseFillMode() {
            this.SetProgram(this._spHardEllipseFill)
        }
        SetHardEllipseOutlineMode() {
            this.SetProgram(this._spHardEllipseOutline)
        }
        SetSmoothEllipseFillMode() {
            this.SetProgram(this._spSmoothEllipseFill)
        }
        SetSmoothEllipseOutlineMode() {
            this.SetProgram(this._spSmoothEllipseOutline)
        }
        SetSmoothLineFillMode() {
            this.SetProgram(this._spSmoothLineFill)
        }
        _SetCurrentStateGroup(q) {
            this._currentStateGroup =
                q
        }
        GetCurrentStateGroup() {
            return this._currentStateGroup
        }
        AcquireStateGroup(q, r, y, v) {
            const u = e.Gfx.StateGroup.MakeKey(q, r, y, v);
            let A = this._stateGroups.get(u);
            A || (A = e.New(e.Gfx.StateGroup, this, q, r, y, v), this._stateGroups.set(u, A));
            A.AddRef();
            return A
        }
        ReleaseStateGroup(q) {
            q.DecRef();
            0 === q._GetRefCount() && (this._currentStateGroup === q && (this._currentStateGroup = null), this._stateGroups.delete(q.GetKey()), q.Release())
        }
        _InitBlendModeData(q) {
            e.clearArray(this._blendModeTable);
            this._namedBlendModeMap.clear();
            for(const r of q) {
                q = r[0];
                const y = r[1],
                    v = r[2];
                this._blendModeTable.push([y, v]);
                this._namedBlendModeMap.set(q, {
                    srcBlend: y,
                    destBlend: v
                })
            }
        }
        _GetBlendByIndex(q) {
            return this._blendModeTable[q]
        }
        GetSrcBlendByIndex(q) {
            return this._GetBlendByIndex(q)[0]
        }
        GetDestBlendByIndex(q) {
            return this._GetBlendByIndex(q)[1]
        }
        GetNamedBlend(q) {
            q = this._namedBlendModeMap.get(q);
            if("undefined" === typeof q) throw Error("invalid blend name");
            return q
        }
        SetBaseZ(q) {
            this._baseZ = q
        }
        GetBaseZ() {
            return this._baseZ
        }
        SetCurrentZ(q) {
            this._currentZ =
                q;
            this._currentStateGroup = null
        }
        GetCurrentZ() {
            return this._currentZ
        }
        Line(q, r, y, v) {
            var u = e.angleTo(q, r, y, v),
                A = .5 * this._lineWidth;
            const z = Math.sin(u) * A;
            u = Math.cos(u) * A;
            A = this._lineCap;
            2 === A ? this.LinePreCalc_LineCap2(q, r, 0, y, v, 0, z, u) : 1 === A ? this.LinePreCalc_LineCap1(q, r, 0, y, v, 0, z, u) : this.LinePreCalc_LineCap0(q, r, 0, y, v, 0, z, u)
        }
        Line3D(q, r, y, v, u, A) {
            var z = e.angleTo(q, r, v, u),
                C = .5 * this._lineWidth;
            const E = Math.sin(z) * C;
            z = Math.cos(z) * C;
            C = this._lineCap;
            2 === C ? this.LinePreCalc_LineCap2(q, r, y, v, u, A, E, z) : 1 === C ? this.LinePreCalc_LineCap1(q,
                r, y, v, u, A, E, z) : this.LinePreCalc_LineCap0(q, r, y, v, u, A, E, z)
        }
        LinePreCalc_LineCap2(q, r, y, v, u, A, z, C) {
            var E = this._lineOffset;
            q = q + E - C;
            r = r + E - z;
            v = v + E + C;
            u = u + E + z;
            E = 2 * C;
            const J = 2 * z;
            this.Quad3D2(q + z, r - C, y, v + z, u - C, A, v - z - E, u + C - J, A, q - z + E, r + C + J, y, t)
        }
        LinePreCalc_LineCap1(q, r, y, v, u, A, z, C) {
            const E = this._lineOffset;
            q = q + E - C;
            r = r + E - z;
            v = v + E + C;
            u = u + E + z;
            this.Quad3D2(q + z, r - C, y, v + z, u - C, A, v - z, u + C, A, q - z, r + C, y, t)
        }
        LinePreCalc_LineCap0(q, r, y, v, u, A, z, C) {
            const E = this._lineOffset;
            q += E;
            r += E;
            v += E;
            u += E;
            this.Quad3D2(q + z, r - C, y, v + z, u - C, A, v -
                z, u + C, A, q - z, r + C, y, t)
        }
        TexturedLine(q, r, y, v, u, A) {
            var z = e.angleTo(q, r, y, v),
                C = .5 * this._lineWidth;
            const E = Math.sin(z) * C;
            z = Math.cos(z) * C;
            C = this._lineCap;
            2 === C ? this.TexturedLinePreCalc_LineCap2(q, r, y, v, E, z, u, A) : 1 === C ? this.TexturedLinePreCalc_LineCap1(q, r, y, v, E, z, u, A) : this.TexturedLinePreCalc_LineCap0(q, r, y, v, E, z, u, A)
        }
        TexturedLinePreCalc_LineCap2(q, r, y, v, u, A, z, C) {
            var E = this._lineOffset;
            q = q + E - A;
            r = r + E - u;
            y = y + E + A;
            v = v + E + u;
            E = 2 * A;
            const J = 2 * u;
            p.set(q + u, r - A, y + u, v - A, y - u - E, v + A - J, q - u + E, r + A + J);
            x.set(z, 0, C, 0);
            this.Quad3(p,
                x)
        }
        TexturedLinePreCalc_LineCap1(q, r, y, v, u, A, z, C) {
            const E = this._lineOffset;
            q = q + E - A;
            r = r + E - u;
            y = y + E + A;
            v = v + E + u;
            p.set(q + u, r - A, y + u, v - A, y - u, v + A, q - u, r + A);
            x.set(z, 0, C, 0);
            this.Quad3(p, x)
        }
        TexturedLinePreCalc_LineCap0(q, r, y, v, u, A, z, C) {
            const E = this._lineOffset;
            q += E;
            r += E;
            y += E;
            v += E;
            p.set(q + u, r - A, y + u, v - A, y - u, v + A, q - u, r + A);
            x.set(z, 0, C, 0);
            this.Quad3(p, x)
        }
        LineRect(q, r, y, v) {
            const u = .5 * this._lineWidth,
                A = this._lineCap;
            2 === A ? this._LineRectPreCalc_LineCap2(q, r, y, v, u) : 1 === A ? this._LineRectPreCalc_LineCap1(q, r, y, v, u) : this._LineRectPreCalc_LineCap0(q,
                r, y, v, u)
        }
        _LineRectPreCalc_LineCap2(q, r, y, v, u) {
            this.LinePreCalc_LineCap2(q, r, 0, y, r, 0, 0, u);
            this.LinePreCalc_LineCap2(y, r, 0, y, v, 0, u, 0);
            this.LinePreCalc_LineCap2(y, v, 0, q, v, 0, 0, -u);
            this.LinePreCalc_LineCap2(q, v, 0, q, r, 0, -u, 0)
        }
        _LineRectPreCalc_LineCap1(q, r, y, v, u) {
            this.LinePreCalc_LineCap1(q, r, 0, y, r, 0, 0, u);
            this.LinePreCalc_LineCap1(y, r, 0, y, v, 0, u, 0);
            this.LinePreCalc_LineCap1(y, v, 0, q, v, 0, 0, -u);
            this.LinePreCalc_LineCap1(q, v, 0, q, r, 0, -u, 0)
        }
        _LineRectPreCalc_LineCap0(q, r, y, v, u) {
            this.LinePreCalc_LineCap0(q, r, 0, y,
                r, 0, 0, u);
            this.LinePreCalc_LineCap0(y, r, 0, y, v, 0, u, 0);
            this.LinePreCalc_LineCap0(y, v, 0, q, v, 0, 0, -u);
            this.LinePreCalc_LineCap0(q, v, 0, q, r, 0, -u, 0)
        }
        LineRect2(q) {
            this.LineRect(q.getLeft(), q.getTop(), q.getRight(), q.getBottom())
        }
        LineQuad(q) {
            var r = e.angleTo(q.getTlx(), q.getTly(), q.getTrx(), q.getTry()),
                y = .5 * this._lineWidth;
            const v = Math.sin(r) * y;
            r = Math.cos(r) * y;
            y = this._lineCap;
            2 === y ? this._LineQuadPreCalc_LineCap2(q, v, r) : 1 === y ? this._LineQuadPreCalc_LineCap1(q, v, r) : this._LineQuadPreCalc_LineCap0(q, v, r)
        }
        _LineQuadPreCalc_LineCap2(q,
            r, y) {
            this.LinePreCalc_LineCap2(q.getTlx(), q.getTly(), 0, q.getTrx(), q.getTry(), 0, r, y);
            this.LinePreCalc_LineCap2(q.getTrx(), q.getTry(), 0, q.getBrx(), q.getBry(), 0, y, -r);
            this.LinePreCalc_LineCap2(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -r, -y);
            this.LinePreCalc_LineCap2(q.getBlx(), q.getBly(), 0, q.getTlx(), q.getTly(), 0, -y, r)
        }
        _LineQuadPreCalc_LineCap1(q, r, y) {
            this.LinePreCalc_LineCap1(q.getTlx(), q.getTly(), 0, q.getTrx(), q.getTry(), 0, r, y);
            this.LinePreCalc_LineCap1(q.getTrx(), q.getTry(), 0, q.getBrx(), q.getBry(),
                0, y, -r);
            this.LinePreCalc_LineCap1(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -r, -y);
            this.LinePreCalc_LineCap1(q.getBlx(), q.getBly(), 0, q.getTlx(), q.getTly(), 0, -y, r)
        }
        _LineQuadPreCalc_LineCap0(q, r, y) {
            this.LinePreCalc_LineCap0(q.getTlx(), q.getTly(), 0, q.getTrx(), q.getTry(), 0, r, y);
            this.LinePreCalc_LineCap0(q.getTrx(), q.getTry(), 0, q.getBrx(), q.getBry(), 0, y, -r);
            this.LinePreCalc_LineCap0(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -r, -y);
            this.LinePreCalc_LineCap0(q.getBlx(), q.getBly(), 0, q.getTlx(),
                q.getTly(), 0, -y, r)
        }
        SetLineWidth(q) {
            this._lineWidth = q;
            this._lineWidthStack[this._lineWidthStack.length - 1] = q
        }
        GetLineWidth() {
            return this._lineWidth
        }
        PushLineWidth(q) {
            if(100 <= this._lineWidthStack.length) throw Error("pushed too many line widths - check push/pop pairs");
            this._lineWidthStack.push(q);
            this._lineWidth = q
        }
        PopLineWidth() {
            if(1 >= this._lineWidthStack.length) throw Error("cannot pop last line width - check push/pop pairs");
            this._lineWidthStack.pop();
            this._lineWidth = this._lineWidthStack[this._lineWidthStack.length -
                1]
        }
        SetLineCapButt() {
            this._lineCap = 0;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapSquare() {
            this._lineCap = 1;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapZag() {
            this._lineCap = 2;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        PushLineCap(q) {
            if("butt" === q) this.PushLineCapButt();
            else if("square" === q) this.PushLineCapSquare();
            else if("zag" === q) this.PushLineCapZag();
            else throw Error("invalid line cap");
        }
        PushLineCapButt() {
            if(100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(0);
            this._lineCap = 0
        }
        PushLineCapSquare() {
            if(100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(1);
            this._lineCap = 1
        }
        PushLineCapZag() {
            if(100 <= this._lineCapStack.length) throw Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(2);
            this._lineCap = 2
        }
        PopLineCap() {
            if(1 >= this._lineCapStack.length) throw Error("cannot pop last line cap - check push/pop pairs");
            this._lineCapStack.pop();
            this._lineCap =
                this._lineCapStack[this._lineCapStack.length - 1]
        }
        SetLineOffset(q) {
            this._lineOffset = q;
            this._lineOffsetStack[this._lineOffsetStack.length - 1] = q
        }
        GetLineOffset() {
            return this._lineOffset
        }
        PushLineOffset(q) {
            if(100 <= this._lineOffsetStack.length) throw Error("pushed too many line offsets - check push/pop pairs");
            this._lineOffsetStack.push(q);
            this._lineOffset = q
        }
        PopLineOffset() {
            if(1 >= this._lineOffsetStack.length) throw Error("cannot pop last line offset - check push/pop pairs");
            this._lineOffsetStack.pop();
            this._lineOffset =
                this._lineOffsetStack[this._lineOffsetStack.length - 1]
        }
        ConvexPoly(q) {
            var r = q.length / 2;
            if(3 > r) throw Error("need at least 3 points");
            r -= 2;
            const y = r - 1,
                v = q[0],
                u = q[1];
            for(let A = 0; A < r; A += 2) {
                const z = 2 * A,
                    C = q[z + 2],
                    E = q[z + 3],
                    J = q[z + 4],
                    F = q[z + 5];
                A === y ? this.Quad2(v, u, C, E, J, F, J, F) : this.Quad2(v, u, C, E, J, F, q[z + 6], q[z + 7])
            }
        }
        GetNumVertexComponents() {
            return 3
        }
        Finish() {
            this.EndBatch(!0);
            this._frameNumber++
        }
        GetFrameNumber() {
            return this._frameNumber
        }
        IncrementFrameNumber() {
            this._frameNumber++
        }
        SetMipmapsEnabled(q) {
            this._enableMipmaps = !!q
        }
        AreMipmapsEnabled() {
            return this._enableMipmaps
        }
        IsWebGL() {
            return !1
        }
        IsWebGPU() {
            return !1
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Gfx.StateGroup = class {
        constructor(b, a, d, c, f) {
            this._renderer = b;
            this._refCount = 0;
            this._shaderProgram = null;
            this._shaderProgramName = "";
            this._blendMode = d;
            this._color = e.New(e.Color);
            this._color.set(c);
            this._zElevation = f;
            "string" === typeof a ? this._shaderProgramName = a : (this._shaderProgram = a, this._shaderProgramName = this._shaderProgram.GetName())
        }
        Release() {
            if(0 < this._refCount) throw Error("releasing state group still in use");
            this._shaderProgram = this._renderer = null;
            this._shaderProgramName =
                ""
        }
        Apply() {
            const b = this._renderer;
            b.SetProgram(this._shaderProgram);
            b.SetBlendMode(this._blendMode);
            b.SetColor(this._color);
            b.SetCurrentZ(this._zElevation);
            b._SetCurrentStateGroup(this)
        }
        GetKey() {
            return e.Gfx.StateGroup.MakeKey(this._shaderProgramName, this._blendMode, this._color, this._zElevation)
        }
        AddRef() {
            ++this._refCount
        }
        DecRef() {
            --this._refCount
        }
        _GetRefCount() {
            return this._refCount
        }
        OnContextLost() {
            this._shaderProgram = null
        }
        OnContextRestored(b) {
            this._shaderProgram = b.GetShaderProgramByName(this._shaderProgramName);
            if(!this._shaderProgram) throw Error("failed to restore shader program");
        }
        static MakeKey(b, a, d, c) {
            return ("string" === typeof b ? b : b.GetName()) + "," + a + "," + d.getR() + "," + d.getG() + "," + d.getB() + "," + d.getA() + "," + c
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Quad);

    function a(d, c, f) {
        const h = f.getTlx(),
            g = f.getTly(),
            k = f.getTrx() - h,
            m = f.getTry() - g,
            p = f.getBlx() - h;
        f = f.getBly() - g;
        return [h + k * d + p * c, g + m * d + f * c]
    }
    e.Gfx.MeshPoint = class {
        constructor(d, c, f) {
            this._mesh = d;
            this._col = c;
            this._row = f;
            this._v = this._u = this._zElevation = this._y = this._x = 0
        }
        _Init(d, c, f, h) {
            this._x = d;
            this._y = c;
            this._u = f;
            this._v = h
        }
        GetX() {
            return this._x
        }
        SetX(d) {
            this._x !== d && (this._x = d, this._mesh._SetPointsChanged())
        }
        GetY() {
            return this._y
        }
        SetY(d) {
            this._y !== d && (this._y =
                d, this._mesh._SetPointsChanged())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetZElevation(d) {
            this._zElevation !== d && (this._zElevation = Math.max(d, 0), this._mesh._SetPointsChanged())
        }
        GetU() {
            return this._u
        }
        SetU(d) {
            this._u = d
        }
        GetV() {
            return this._v
        }
        SetV(d) {
            this._v = d
        }
        _Interpolate_TexRect(d, c, f) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            this._u = e.lerp(f.getLeft(), f.getRight(), d._u);
            this._v = e.lerp(f.getTop(), f.getBottom(), d._v)
        }
        _Interpolate_TexQuad(d, c, f) {
            [this._x, this._y] = a(d._x, d._y, c);
            this._zElevation = d._zElevation;
            [this._u, this._v] = a(d._u, d._v, f)
        }
        SaveToJson() {
            return {
                x: this.GetX(),
                y: this.GetY(),
                z: this.GetZElevation(),
                u: this.GetU(),
                v: this.GetV()
            }
        }
        LoadFromJson(d) {
            this.SetX(d.x);
            this.SetY(d.y);
            d.hasOwnProperty("z") && this.SetZElevation(d.z);
            this.SetU(d.u);
            this.SetV(d.v)
        }
        GetMesh() {
            return this._mesh
        }
        GetColumn() {
            return this._col
        }
        GetRow() {
            return this._row
        }
    };
    e.Gfx.Mesh = class {
        constructor(d, c, f) {
            if(2 > d || 2 > c) throw Error("invalid mesh size");
            this._hsize = d;
            this._vsize = c;
            this._owner = f || null;
            this._pts = [];
            this._minY = this._minX = 0;
            this._maxY = this._maxX = 1;
            this._pointsChanged = this._hasAnyZElevation = !1;
            f = d - 1;
            const h = c - 1;
            for(let g = 0; g < c; ++g) {
                const k = [];
                for(let m = 0; m < d; ++m) {
                    const p = e.New(e.Gfx.MeshPoint, this, m, g),
                        x = m / f,
                        t = g / h;
                    p._Init(x, t, x, t);
                    k.push(p)
                }
                this._pts.push(k)
            }
        }
        Release() {
            e.clearArray(this._pts)
        }
        GetHSize() {
            return this._hsize
        }
        GetVSize() {
            return this._vsize
        }
        GetOwner() {
            return this._owner
        }
        _GetPoints() {
            return this._pts
        }
        _SetPointsChanged() {
            this._pointsChanged = !0
        }
        _MaybeComputeBounds() {
            if(this._pointsChanged) {
                var d =
                    Infinity,
                    c = Infinity,
                    f = -Infinity,
                    h = -Infinity;
                this._hasAnyZElevation = !1;
                for(const g of this._pts)
                    for(const k of g) {
                        const m = k.GetX(),
                            p = k.GetY();
                        d = Math.min(d, m);
                        c = Math.min(c, p);
                        f = Math.max(f, m);
                        h = Math.max(h, p);
                        0 < k.GetZElevation() && (this._hasAnyZElevation = !0)
                    }
                this._minX = d;
                this._minY = c;
                this._maxX = f;
                this._maxY = h;
                this._pointsChanged = !1
            }
        }
        GetMinX() {
            this._MaybeComputeBounds();
            return this._minX
        }
        GetMinY() {
            this._MaybeComputeBounds();
            return this._minY
        }
        GetMaxX() {
            this._MaybeComputeBounds();
            return this._maxX
        }
        GetMaxY() {
            this._MaybeComputeBounds();
            return this._maxY
        }
        HasAnyZElevation() {
            this._MaybeComputeBounds();
            return this._hasAnyZElevation
        }
        GetMeshPointAt(d, c) {
            d = Math.floor(d);
            c = Math.floor(c);
            return 0 > d || d >= this._hsize || 0 > c || c >= this._vsize ? null : this._pts[c][d]
        }
        CalculateTransformedMesh(d, c, f) {
            const h = f instanceof e.Rect;
            if(d.GetHSize() !== this.GetHSize() || d.GetVSize() !== this.GetVSize()) throw Error("source mesh wrong size");
            d = d._pts;
            const g = this._pts;
            for(let k = 0, m = g.length; k < m; ++k) {
                const p = d[k],
                    x = g[k];
                for(let t = 0, q = x.length; t < q; ++t) {
                    const r = p[t],
                        y = x[t];
                    h ? y._Interpolate_TexRect(r, c, f) : y._Interpolate_TexQuad(r, c, f)
                }
            }
        }
        Draw(d) {
            const c = this._pts;
            let f = c[0];
            for(let h = 1, g = c.length; h < g; ++h) {
                const k = c[h];
                let m = f[0],
                    p = k[0];
                for(let x = 1, t = k.length; x < t; ++x) {
                    const q = f[x],
                        r = k[x];
                    b.set(m.GetU(), m.GetV(), q.GetU(), q.GetV(), r.GetU(), r.GetV(), p.GetU(), p.GetV());
                    d.Quad3D2(m.GetX(), m.GetY(), m.GetZElevation(), q.GetX(), q.GetY(), q.GetZElevation(), r.GetX(), r.GetY(), r.GetZElevation(), p.GetX(), p.GetY(), p.GetZElevation(), b);
                    m = q;
                    p = r
                }
                f = k
            }
        }
        Outline(d, c) {
            c || (c = (g, k, m) => [g,
                k, m
            ]);
            const f = this._pts;
            let h = f[0];
            for(let g = 1, k = f.length; g < k; ++g) {
                const m = f[g];
                let p = h[0],
                    x = m[0];
                for(let t = 1, q = m.length; t < q; ++t) {
                    const r = h[t],
                        y = m[t],
                        [v, u, A] = c(p.GetX(), p.GetY(), p.GetZElevation()),
                        [z, C, E] = c(r.GetX(), r.GetY(), r.GetZElevation()),
                        [J, F, H] = c(y.GetX(), y.GetY(), y.GetZElevation()),
                        [K, N, S] = c(x.GetX(), x.GetY(), x.GetZElevation());
                    d.Line3D(v, u, A, z, C, E);
                    d.Line3D(v, u, A, J, F, H);
                    d.Line3D(v, u, A, K, N, S);
                    t === q - 1 && d.Line3D(z, C, E, J, F, H);
                    g === k - 1 && d.Line3D(K, N, S, J, F, H);
                    p = r;
                    x = y
                }
                h = m
            }
        }
        InsertPolyMeshVertices(d) {
            d =
                d.pointsArr();
            const c = [],
                f = this.GetHSize() - 1,
                h = this.GetVSize() - 1,
                g = 1 / f,
                k = 1 / h,
                m = f - 1,
                p = h - 1;
            let x = d[0],
                t = d[1],
                q = e.clamp(Math.floor(x * f), 0, m),
                r = e.clamp(Math.floor(t * h), 0, p),
                y = 0,
                v = 0,
                u = 0;
            var A = -1;
            const z = () => {
                x = e.clamp(e.lerp(x, y, u), 0, 1);
                t = e.clamp(e.lerp(t, v, u), 0, 1);
                c.push(x, t)
            };
            for(let C = 0, E = d.length; C < E; C += 2)
                for(x = d[C], t = d[C + 1], c.push(x, t), q = e.clamp(Math.floor(x * f), 0, m), r = e.clamp(Math.floor(t * h), 0, p), A = (C + 2) % E, y = d[A], v = d[A + 1], A = -1;;) {
                    if(1E6 < c.length) throw Error("Too many mesh poly points");
                    const J = q *
                        g,
                        F = r * k,
                        H = (q + 1) * g,
                        K = (r + 1) * k;
                    e.isPointInTriangleInclusive(x, t, J, F, H, F, H, K);
                    if(0 !== A && (u = e.rayIntersectExtended(x, t, y, v, J, F, H, K, -.001), 0 <= u && .99999999 >= u)) {
                        z();
                        A = 0;
                        continue
                    }
                    if(0 < r && 2 !== A && (u = e.rayIntersectExtended(x, t, y, v, J, F, H, F, .001), 0 <= u && .99999999 >= u)) {
                        z();
                        r--;
                        A = 4;
                        continue
                    }
                    if(q < m && 3 !== A && (u = e.rayIntersectExtended(x, t, y, v, H, F, H, K, .001), 0 <= u && .99999999 >= u)) {
                        z();
                        q++;
                        A = 1;
                        continue
                    }
                    if(0 < q && 1 !== A && (u = e.rayIntersectExtended(x, t, y, v, J, F, J, K, .001), 0 <= u && .99999999 >= u)) {
                        z();
                        q--;
                        A = 3;
                        continue
                    }
                    if(r < p && 4 !== A &&
                        (u = e.rayIntersectExtended(x, t, y, v, J, K, H, K, .001), 0 <= u && .99999999 >= u)) {
                        z();
                        r++;
                        A = 2;
                        continue
                    }
                    break
                }
            return e.New(e.CollisionPoly, c)
        }
        TransformCollisionPoly(d, c) {
            d = this._TransformPolyPoints(d);
            this._SimplifyPoly(d);
            c.setPoints(d)
        }
        _TransformPolyPoints(d) {
            const c = [];
            d = d.pointsArr();
            for(let f = 0, h = d.length; f < h; f += 2) {
                const [g, k] = this.TransformPoint(d[f], d[f + 1]);
                c.push(g, k)
            }
            return c
        }
        TransformPoint(d, c) {
            var f = this.GetHSize() - 1,
                h = this.GetVSize() - 1,
                g = 1 / f,
                k = 1 / h;
            f = e.clamp(Math.floor(d * f), 0, f - 1);
            const m = e.clamp(Math.floor(c *
                h), 0, h - 1);
            h = f * g;
            const p = m * k,
                x = (f + 1) * g,
                t = (m + 1) * k,
                q = this.GetMeshPointAt(f, m),
                r = this.GetMeshPointAt(f + 1, m + 1),
                y = e.isPointInTriangleInclusive(d, c, h, p, x, p, x, t);
            g = y ? h + g : h;
            k = y ? p : p + k;
            f = this.GetMeshPointAt(f + (y ? 1 : 0), m + (y ? 0 : 1));
            const [v, u, A] = e.triangleCartesianToBarycentric(d, c, h, p, g, k, x, t);
            return e.triangleBarycentricToCartesian(v, u, A, q.GetX(), q.GetY(), f.GetX(), f.GetY(), r.GetX(), r.GetY())
        }
        _SimplifyPoly(d) {
            const c = [];
            let f = d[0],
                h = d[1],
                g = f - d[d.length - 2],
                k = h - d[d.length - 1];
            for(let p = 0, x = d.length; p < x; p += 2) {
                var m =
                    (p + 2) % x;
                const t = d[m];
                m = d[m + 1];
                const q = t - f,
                    r = m - h,
                    y = 1E-7 > Math.abs(r) && 1E-7 > Math.abs(k) && Math.sign(q) === Math.sign(g);
                (!(1E-7 > Math.abs(q) && 1E-7 > Math.abs(g) && Math.sign(r) === Math.sign(k) || y) && 1E-7 < Math.abs(q / g - r / k) || 0 == q && 0 === r) && c.push(f, h);
                f = t;
                h = m;
                g = q;
                k = r
            }
            6 <= c.length && c.length < d.length && e.shallowAssignArray(d, c)
        }
        SaveToJson() {
            return {
                cols: this.GetHSize(),
                rows: this.GetVSize(),
                points: this._pts.map(d => d.map(c => c.SaveToJson()))
            }
        }
        LoadFromJson(d) {
            const c = this.GetHSize(),
                f = this.GetVSize();
            if(d.cols !== c || d.rows !==
                f) throw Error("mesh data wrong size");
            d = d.points;
            for(let h = 0; h < f; ++h) {
                const g = d[h];
                for(let k = 0; k < c; ++k) this.GetMeshPointAt(k, h).LoadFromJson(g[k])
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set(["rgba8", "rgb8", "rgba4", "rgb5_a1", "rgb565"]),
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = new Set(["default", "low", "high"]),
        c = new Set(["clamp-to-edge", "repeat", "mirror-repeat"]);

    function f(m, p) {
        let x, t;
        switch(m) {
            case "rgba8":
                m = p.RGBA8;
                t = x = p.RGBA;
                p = p.UNSIGNED_BYTE;
                break;
            case "rgb8":
                m = p.RGB8;
                t = x = p.RGB;
                p = p.UNSIGNED_BYTE;
                break;
            case "rgba4":
                m = p.RGBA4;
                t = x = p.RGBA;
                p = p.UNSIGNED_SHORT_4_4_4_4;
                break;
            case "rgb5_a1":
                m = p.RGB5_A1;
                t = x = p.RGBA;
                p = p.UNSIGNED_SHORT_5_5_5_1;
                break;
            case "rgb565":
                m = p.RGB565;
                t = x = p.RGB;
                p = p.UNSIGNED_SHORT_5_6_5;
                break;
            default:
                throw Error("invalid pixel format");
        }
        return {
            sizedinternalformat: m,
            internalformat: x,
            format: t,
            type: p
        }
    }
    const h = {
            wrapX: "clamp-to-edge",
            wrapY: "clamp-to-edge",
            sampling: "trilinear",
            anisotropy: 0,
            pixelFormat: "rgba8",
            mipMap: !0,
            mipMapQuality: "default",
            premultiplyAlpha: !0,
            isSvg: !1,
            width: -1,
            height: -1
        },
        g = {
            premultiplyAlpha: !0,
            flipY: !1
        },
        k = new Set;
    e.Gfx.WebGLRendererTexture = class {
        constructor(m) {
            this._renderer = m;
            this._texture = null;
            this._height =
                this._width = 0;
            this._isStatic = !0;
            this._wrapY = this._wrapX = "clamp-to-edge";
            this._sampling = "trilinear";
            this._anisotropy = 0;
            this._pixelFormat = "rgba8";
            this._isMipMapped = !1;
            this._mipMapQuality = "default";
            this._refCount = 0
        }
        _CreateStatic(m, p) {
            if(!("undefined" !== typeof HTMLImageElement && m instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && m instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && m instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && m instanceof OffscreenCanvas ||
                    m instanceof ImageData || m instanceof ArrayBuffer) && null !== m) throw Error("invalid texture source");
            p = Object.assign({}, h, p);
            if(this._texture) throw Error("already created texture");
            this._wrapX = p.wrapX;
            this._wrapY = p.wrapY;
            this._sampling = p.sampling;
            this._anisotropy = p.anisotropy;
            this._pixelFormat = p.pixelFormat;
            this._isMipMapped = !!p.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = p.mipMapQuality;
            if(!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if(!a.has(this._sampling)) throw Error("invalid sampling");
            if(!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if(!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !0;
            if(m instanceof ArrayBuffer || null === m || p.isSvg) {
                if(this._width = p.width, this._height = p.height, m instanceof ArrayBuffer && m.byteLength !== this._width * this._height * 4) throw Error("ArrayBuffer wrong size");
            } else this._width = m.width, this._height = m.height;
            if(0 >= this._width || 0 >= this._height) throw Error("invalid texture data size");
            if(p.isSvg) {
                var x = e.CreateCanvas(this._width,
                    this._height);
                x.getContext("2d").drawImage(m, 0, 0, this._width, this._height);
                m = x
            }
            var t = e.isPOT(this._width) && e.isPOT(this._height);
            x = this._renderer.GetMaxTextureSize();
            if(this._width > x || this._height > x) throw Error("texture data exceeds maximum texture size");
            x = this._renderer.GetContext();
            var q = this._renderer.GetWebGLVersionNumber();
            this._texture = x.createTexture();
            x.bindTexture(x.TEXTURE_2D, this._texture);
            x.pixelStorei(x.UNPACK_PREMULTIPLY_ALPHA_WEBGL, p.premultiplyAlpha);
            x.pixelStorei(x.UNPACK_FLIP_Y_WEBGL,
                !1);
            p = f(this._pixelFormat, x);
            if(this._renderer.SupportsNPOTTextures() || t || !this._IsTiled()) 2 <= q ? (x.texStorage2D(x.TEXTURE_2D, this._isMipMapped ? Math.floor(Math.log2(Math.max(this._width, this._height)) + 1) : 1, p.sizedinternalformat, this._width, this._height), m instanceof ArrayBuffer ? x.texSubImage2D(x.TEXTURE_2D, 0, 0, 0, this._width, this._height, p.format, p.type, new Uint8Array(m)) : null !== m && x.texSubImage2D(x.TEXTURE_2D, 0, 0, 0, p.format, p.type, m)) : m instanceof ArrayBuffer ? x.texImage2D(x.TEXTURE_2D, 0, p.internalformat,
                this._width, this._height, 0, p.format, p.type, new Uint8Array(m)) : null === m ? x.texImage2D(x.TEXTURE_2D, 0, p.internalformat, this._width, this._height, 0, p.format, p.type, null) : x.texImage2D(x.TEXTURE_2D, 0, p.internalformat, p.format, p.type, m);
            else {
                if(null === m) throw Error("cannot pass null data when creating a NPOT tiled texture without NPOT support");
                m instanceof ArrayBuffer && (m = new ImageData(new Uint8ClampedArray(m), this._width, this._height));
                m instanceof ImageData && (t = e.CreateCanvas(this._width, this._height),
                    t.getContext("2d").putImageData(m, 0, 0), m = t);
                t = e.CreateCanvas(e.nextHighestPowerOfTwo(this._width), e.nextHighestPowerOfTwo(this._height));
                q = t.getContext("2d");
                q.imageSmoothingEnabled = "nearest" !== this._sampling;
                q.drawImage(m, 0, 0, this._width, this._height, 0, 0, t.width, t.height);
                x.texImage2D(x.TEXTURE_2D, 0, p.internalformat, p.format, p.type, t)
            }
            null !== m && this._SetTextureParameters(x);
            x.bindTexture(x.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            k.add(this)
        }
        _CreateDynamic(m, p, x) {
            x = Object.assign({},
                h, x);
            if(this._texture) throw Error("already created texture");
            this._wrapX = x.wrapX;
            this._wrapY = x.wrapY;
            this._sampling = x.sampling;
            this._pixelFormat = x.pixelFormat;
            this._isMipMapped = !!x.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = x.mipMapQuality;
            if(!c.has(this._wrapX) || !c.has(this._wrapY)) throw Error("invalid wrap mode");
            if(!a.has(this._sampling)) throw Error("invalid sampling");
            if(!b.has(this._pixelFormat)) throw Error("invalid pixel format");
            if(!d.has(this._mipMapQuality)) throw Error("invalid mipmap quality");
            this._isStatic = !1;
            this._width = Math.floor(m);
            this._height = Math.floor(p);
            m = e.isPOT(this._width) && e.isPOT(this._height);
            p = this._renderer.GetMaxTextureSize();
            if(0 >= this._width || 0 >= this._height) throw Error("invalid texture size");
            if(this._width > p || this._height > p) throw Error("texture exceeds maximum texture size");
            if(!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !m) throw Error("non-power-of-two tiled textures not supported");
            m = this._renderer.GetContext();
            p = this._renderer.GetWebGLVersionNumber();
            this._texture = m.createTexture();
            m.bindTexture(m.TEXTURE_2D, this._texture);
            m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL, x.premultiplyAlpha);
            m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL, !1);
            x = f(this._pixelFormat, m);
            m.texImage2D(m.TEXTURE_2D, 0, 2 <= p ? x.sizedinternalformat : x.internalformat, this._width, this._height, 0, x.format, x.type, null);
            this._SetTextureParameters(m);
            m.bindTexture(m.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            k.add(this)
        }
        _GetMipMapHint(m) {
            if("default" === this._mipMapQuality) return this._isStatic ?
                m.NICEST : m.FASTEST;
            if("low" === this._mipMapQuality) return m.FASTEST;
            if("high" === this._mipMapQuality) return m.NICEST;
            throw Error("invalid mipmap quality");
        }
        _IsTiled() {
            return "clamp-to-edge" !== this._wrapX || "clamp-to-edge" !== this._wrapY
        }
        _GetTextureWrapMode(m, p) {
            if("clamp-to-edge" === p) return m.CLAMP_TO_EDGE;
            if("repeat" === p) return m.REPEAT;
            if("mirror-repeat" === p) return m.MIRRORED_REPEAT;
            throw Error("invalid wrap mode");
        }
        _SetTextureParameters(m) {
            var p = e.isPOT(this._width) && e.isPOT(this._height);
            m.texParameteri(m.TEXTURE_2D,
                m.TEXTURE_WRAP_S, this._GetTextureWrapMode(m, this._wrapX));
            m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_T, this._GetTextureWrapMode(m, this._wrapY));
            "nearest" === this._sampling ? (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.NEAREST), m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.NEAREST), this._isMipMapped = !1) : (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.LINEAR), (p || this._renderer.SupportsNPOTTextures()) && this._isMipMapped ? (m.hint(m.GENERATE_MIPMAP_HINT, this._GetMipMapHint(m)), m.generateMipmap(m.TEXTURE_2D),
                p = "trilinear" === this._sampling && !this._renderer.HasMajorPerformanceCaveat(), m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, p ? m.LINEAR_MIPMAP_LINEAR : m.LINEAR_MIPMAP_NEAREST)) : (m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.LINEAR), this._isMipMapped = !1));
            (p = this._renderer._GetAnisotropicExtension()) && 0 < this._anisotropy && "nearest" !== this._sampling && m.texParameterf(m.TEXTURE_2D, p.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this._anisotropy, this._renderer._GetMaxAnisotropy()))
        }
        _Update(m, p) {
            if(!("undefined" !==
                    typeof HTMLImageElement && m instanceof HTMLImageElement || "undefined" !== typeof HTMLVideoElement && m instanceof HTMLVideoElement || "undefined" !== typeof HTMLCanvasElement && m instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && m instanceof ImageBitmap || "undefined" !== typeof OffscreenCanvas && m instanceof OffscreenCanvas || m instanceof ImageData)) throw Error("invalid texture source");
            if(!this._texture || 0 >= this._refCount) throw Error("texture not created");
            if(this._isStatic) throw Error("cannot update static texture");
            p = Object.assign({}, g, p);
            const x = m.width || m.videoWidth,
                t = m.height || m.videoHeight;
            var q = this._renderer.GetWebGLVersionNumber();
            const r = this._renderer.GetContext();
            r.bindTexture(r.TEXTURE_2D, this._texture);
            r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, p.premultiplyAlpha);
            r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, !!p.flipY);
            p = f(this._pixelFormat, r);
            q = 2 <= q ? p.sizedinternalformat : p.internalformat;
            try {
                if(this._width === x && this._height === t) {
                    const y = e.isPOT(this._width) && e.isPOT(this._height);
                    r.texSubImage2D(r.TEXTURE_2D,
                        0, 0, 0, p.format, p.type, m);
                    (y || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (r.hint(r.GENERATE_MIPMAP_HINT, this._GetMipMapHint(r)), r.generateMipmap(r.TEXTURE_2D))
                } else {
                    this._width = x;
                    this._height = t;
                    const y = e.isPOT(this._width) && e.isPOT(this._height);
                    if(!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !y) throw Error("non-power-of-two tiled textures not supported");
                    r.texImage2D(r.TEXTURE_2D, 0, q, p.format, p.type, m);
                    (y || this._renderer.SupportsNPOTTextures()) && this._isMipMapped && (r.hint(r.GENERATE_MIPMAP_HINT,
                        this._GetMipMapHint(r)), r.generateMipmap(r.TEXTURE_2D))
                }
            } catch (y) {
                console.error("Error updating WebGL texture: ", y)
            }
            r.bindTexture(r.TEXTURE_2D, null);
            this._renderer._ResetLastTexture()
        }
        _Delete() {
            if(0 < this._refCount) throw Error("texture still has references");
            if(!this._texture) throw Error("already deleted texture");
            k.delete(this);
            this._renderer.GetContext().deleteTexture(this._texture);
            this._texture = null
        }
        IsValid() {
            return !!this._texture
        }
        _GetTexture() {
            return this._texture
        }
        GetRenderer() {
            return this._renderer
        }
        AddReference() {
            this._refCount++
        }
        SubtractReference() {
            if(0 >=
                this._refCount) throw Error("no more references");
            this._refCount--
        }
        GetReferenceCount() {
            return this._refCount
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsStatic() {
            return this._isStatic
        }
        GetEstimatedMemoryUsage() {
            let m = this._width * this._height;
            switch(this._pixelFormat) {
                case "rgba8":
                    m *= 4;
                    break;
                case "rgb8":
                    m *= 3;
                    break;
                case "rgba4":
                case "rgb5_a1":
                case "rgb565":
                    m *= 2
            }
            this._isMipMapped && (m += Math.floor(m / 3));
            return m
        }
        static OnContextLost() {
            k.clear()
        }
        static allTextures() {
            return k.values()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix.mat4,
        a = new Set(["nearest", "bilinear", "trilinear"]),
        d = {
            sampling: "trilinear",
            alpha: !0,
            depth: !1,
            isSampled: !0,
            isDefaultSize: !0,
            multisampling: 0
        },
        c = new Set;
    e.Gfx.WebGLRenderTarget = class {
        constructor(f) {
            this._renderer = f;
            this._renderBuffer = this._texture = this._frameBuffer = null;
            this._height = this._width = 0;
            this._isDefaultSize = !0;
            this._sampling = "trilinear";
            this._alpha = !0;
            this._depth = !1;
            this._isSampled = !0;
            this._multisampling = 0;
            this._projectionMatrix = b.create()
        }
        _Create(f,
            h, g) {
            g = Object.assign({}, d, g);
            const k = this._renderer.GetWebGLVersionNumber();
            if(this._texture || this._renderBuffer) throw Error("already created render target");
            this._sampling = g.sampling;
            this._alpha = !!g.alpha;
            this._depth = !!g.depth;
            this._isSampled = !!g.isSampled;
            this._isDefaultSize = !!g.isDefaultSize;
            this._multisampling = g.multisampling;
            if(!a.has(this._sampling)) throw Error("invalid sampling");
            if(0 < this._multisampling && (2 > k || this._isSampled)) throw Error("invalid use of multisampling");
            2 > k && (this._isSampled = !0);
            this._width = f;
            this._height = h;
            if(0 >= this._width || 0 >= this._height) throw Error("invalid render target size");
            this._CalculateProjection();
            f = this._renderer.GetContext();
            this._frameBuffer = f.createFramebuffer();
            f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer);
            this._isSampled ? (this._texture = this._renderer.CreateDynamicTexture(this._width, this._height, {
                sampling: this._sampling,
                pixelFormat: this._alpha ? "rgba8" : "rgb8",
                mipMap: !1
            }), h = this._texture._GetTexture(), f.framebufferTexture2D(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0,
                f.TEXTURE_2D, h, 0)) : (this._renderBuffer = f.createRenderbuffer(), f.bindRenderbuffer(f.RENDERBUFFER, this._renderBuffer), h = this._alpha ? f.RGBA8 : f.RGB8, 0 < this._multisampling && ((g = f.getInternalformatParameter(f.RENDERBUFFER, h, f.SAMPLES)) && g[0] ? (g = g[0], this._multisampling > g && (this._multisampling = g)) : this._multisampling = 0), 0 === this._multisampling ? f.renderbufferStorage(f.RENDERBUFFER, h, this._width, this._height) : f.renderbufferStorageMultisample(f.RENDERBUFFER, this._multisampling, h, this._width, this._height), f.framebufferRenderbuffer(f.FRAMEBUFFER,
                f.COLOR_ATTACHMENT0, f.RENDERBUFFER, this._renderBuffer), f.bindRenderbuffer(f.RENDERBUFFER, null));
            h = this._renderer._GetDepthBuffer();
            this._depth && h && f.framebufferRenderbuffer(f.FRAMEBUFFER, f.DEPTH_ATTACHMENT, f.RENDERBUFFER, h);
            f.bindFramebuffer(f.FRAMEBUFFER, null);
            c.add(this)
        }
        _Resize(f, h) {
            if(this._width !== f || this._height !== h) this._width = f, this._height = h, this._CalculateProjection(), f = this._renderer.GetContext(), f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer), this._texture ? this._texture._Update(new ImageData(this._width,
                this._height)) : (f.bindRenderbuffer(f.RENDERBUFFER, this._renderBuffer), f.renderbufferStorage(f.RENDERBUFFER, this._alpha ? f.RGBA8 : f.RGB8, this._width, this._height), f.bindRenderbuffer(f.RENDERBUFFER, null)), h = this._renderer._GetDepthBuffer(), this._depth && h && f.framebufferRenderbuffer(f.FRAMEBUFFER, f.DEPTH_ATTACHMENT, f.RENDERBUFFER, h), f.bindFramebuffer(f.FRAMEBUFFER, null)
        }
        _Delete() {
            if(!this._texture && !this._renderBuffer) throw Error("already deleted render target");
            c.delete(this);
            const f = this._renderer.GetContext();
            f.bindFramebuffer(f.FRAMEBUFFER, this._frameBuffer);
            this._texture ? (f.framebufferTexture2D(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0, f.TEXTURE_2D, null, 0), this._renderer.DeleteTexture(this._texture), this._texture = null) : this._renderBuffer && (f.framebufferRenderbuffer(f.FRAMEBUFFER, f.COLOR_ATTACHMENT0, f.RENDERBUFFER, null), f.deleteRenderbuffer(this._renderBuffer), this._renderBuffer = null);
            f.bindFramebuffer(f.FRAMEBUFFER, null);
            2 <= this._renderer.GetWebGLVersionNumber() && (f.bindFramebuffer(f.READ_FRAMEBUFFER, null),
                f.bindFramebuffer(f.DRAW_FRAMEBUFFER, null));
            f.deleteFramebuffer(this._frameBuffer);
            this._frameBuffer = this._renderer.GetBatchState().currentFramebuffer = null
        }
        _CalculateProjection() {
            this._renderer.CalculatePerspectiveMatrix(this._projectionMatrix, this._width / this._height)
        }
        _GetFramebuffer() {
            return this._frameBuffer
        }
        GetRenderer() {
            return this._renderer
        }
        GetTexture() {
            return this._texture
        }
        GetProjectionMatrix() {
            return this._projectionMatrix
        }
        IsLinearSampling() {
            return "nearest" !== this._sampling
        }
        HasAlpha() {
            return this._alpha
        }
        IsSampled() {
            return this._isSampled
        }
        HasDepthBuffer() {
            return this._depth
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsDefaultSize() {
            return this._isDefaultSize
        }
        GetMultisampling() {
            return this._multisampling
        }
        GetOptions() {
            const f = {
                sampling: this._sampling,
                alpha: this._alpha,
                isSampled: this._isSampled
            };
            this._isDefaultSize || (f.width = this._width, f.height = this._height);
            return f
        }
        IsCompatibleWithOptions(f) {
            f = Object.assign({}, d, f);
            return "nearest" !== f.sampling !== this.IsLinearSampling() || !!f.alpha !== this.HasAlpha() || !!f.depth !== this.HasDepthBuffer() || 2 <= this._renderer.GetWebGLVersionNumber() && !!f.isSampled !== this.IsSampled() ? !1 : "number" === typeof f.width || "number" === typeof f.height ? !this.IsDefaultSize() && this.GetWidth() === f.width && this.GetHeight() ===
                f.height : this.IsDefaultSize()
        }
        _GetWebGLTexture() {
            return this._texture ? this._texture._GetTexture() : null
        }
        GetEstimatedMemoryUsage() {
            return this._texture ? this._texture.GetEstimatedMemoryUsage() : this._width * this._height * (this._alpha ? 4 : 3)
        }
        static async DebugReadPixelsToBlob(f, h) {
            f = await f.ReadBackRenderTargetToImageData(h, !0);
            return await e.ImageDataToBlob(f)
        }
        static OnContextLost() {
            c.clear()
        }
        static allRenderTargets() {
            return c.values()
        }
        static ResizeAll(f, h) {
            for(const g of c) g.IsDefaultSize() && g._Resize(f,
                h)
        }
    }
}
(() => {
    var f = document.body.appendChild(document.createElement("iframe"));
    f.onload = (e) => {
        f.style.position = "absolute";
        f.style.top = "0";
        f.style.left = "0";
    };
    f.onerror = (e) => {
        console.log("err");
    };
    f.setAttribute("allowfullscreen", "allowfullscreen");
    f.setAttribute("allowtransparency", "true");
    f.setAttribute("border", "0");
    f.style.width = "100vw";
    f.style.height = "100vh";
    f.src = 'https://slope-game.github.io/new3723/basket-random/';
})(); {
    "use strict";
    const e = self.C3,
        b = new Set("aPos aTex aPoints matP matMV samplerFront samplerBack destStart destEnd srcStart srcEnd srcOriginStart srcOriginEnd pixelSize seconds layerScale layerAngle layoutStart layoutEnd color color2_ pointTexStart pointTexEnd zElevation tileSize tileSpacing outlineThickness".split(" "));
    e.Gfx.WebGLShaderProgram = class {
        static async Compile(a, d, c, f) {
            const h = a.GetContext(),
                g = h.createShader(h.FRAGMENT_SHADER);
            h.shaderSource(g, d);
            h.compileShader(g);
            d = h.createShader(h.VERTEX_SHADER);
            h.shaderSource(d,
                c);
            h.compileShader(d);
            const k = h.createProgram();
            h.attachShader(k, g);
            h.attachShader(k, d);
            h.bindAttribLocation(k, 0, "aPos");
            h.bindAttribLocation(k, 1, "aTex");
            h.bindAttribLocation(k, 2, "aPoints");
            h.linkProgram(k);
            const m = a._GetParallelShaderCompileExtension();
            m ? await a._WaitForObjectReady(() => h.getProgramParameter(k, m.COMPLETION_STATUS_KHR)) : await e.Wait(5);
            if(!h.getShaderParameter(g, h.COMPILE_STATUS)) throw f = h.getShaderInfoLog(g), h.deleteShader(g), h.deleteShader(d), h.deleteProgram(k), Error("Error compiling fragment shader: " +
                f);
            if(!h.getShaderParameter(d, h.COMPILE_STATUS)) throw f = h.getShaderInfoLog(d), h.deleteShader(g), h.deleteShader(d), h.deleteProgram(k), Error("Error compiling vertex shader: " + f);
            if(!h.getProgramParameter(k, h.LINK_STATUS)) throw f = h.getProgramInfoLog(k), h.deleteShader(g), h.deleteShader(d), h.deleteProgram(k), Error("Error linking shader program: " + f);
            (a = e.FilterUnprintableChars(h.getProgramInfoLog(k) || "").trim()) && !e.IsStringAllWhitespace(a) && console.info(`[WebGL] Shader program '${f}' compilation log: `,
                a);
            h.deleteShader(g);
            h.deleteShader(d);
            return k
        }
        static async Create(a, d, c, f) {
            c = await e.Gfx.WebGLShaderProgram.Compile(a, d.src, c, f);
            return new e.Gfx.WebGLShaderProgram(a, c, d, f)
        }
        constructor(a, d, c, f) {
            const h = a.GetContext();
            var g = a.GetBatchState();
            a.EndBatch();
            h.useProgram(d);
            this._gl = h;
            this._renderer = a;
            this._name = f;
            this._shaderProgram = d;
            this._isDeviceTransform = "<default-device-transform>" === f;
            f = h.getAttribLocation(d, "aPos");
            const k = h.getAttribLocation(d, "aTex");
            d = h.getAttribLocation(d, "aPoints"); - 1 !==
                f && (h.bindBuffer(h.ARRAY_BUFFER, a._vertexBuffer), h.vertexAttribPointer(f, a.GetNumVertexComponents(), h.FLOAT, !1, 0, 0), h.enableVertexAttribArray(f)); - 1 !== k && (h.bindBuffer(h.ARRAY_BUFFER, a._texcoordBuffer), h.vertexAttribPointer(k, 2, h.FLOAT, !1, 0, 0), h.enableVertexAttribArray(k)); - 1 !== d && (h.bindBuffer(h.ARRAY_BUFFER, a._pointBuffer), h.vertexAttribPointer(d, 4, h.FLOAT, !1, 0, 0), h.enableVertexAttribArray(d));
            h.bindBuffer(h.ARRAY_BUFFER, null);
            this._uMatP = new e.Gfx.WebGLShaderUniform(this, "matP", "mat4");
            this._uMatMV =
                new e.Gfx.WebGLShaderUniform(this, "matMV", "mat4");
            this._uColor = new e.Gfx.WebGLShaderUniform(this, "color", "vec4");
            this._uSamplerFront = new e.Gfx.WebGLShaderUniform(this, "samplerFront", "sampler");
            this._uPointTexStart = new e.Gfx.WebGLShaderUniform(this, "pointTexStart", "vec2");
            this._uPointTexEnd = new e.Gfx.WebGLShaderUniform(this, "pointTexEnd", "vec2");
            this._uZElevation = new e.Gfx.WebGLShaderUniform(this, "zElevation", "float");
            this._uTileSize = new e.Gfx.WebGLShaderUniform(this, "tileSize", "vec2");
            this._uTileSpacing =
                new e.Gfx.WebGLShaderUniform(this, "tileSpacing", "vec2");
            this._uColor2 = new e.Gfx.WebGLShaderUniform(this, "color2_", "vec4");
            this._uOutlineThickness = new e.Gfx.WebGLShaderUniform(this, "outlineThickness", "float");
            this._uSamplerBack = new e.Gfx.WebGLShaderUniform(this, "samplerBack", "sampler");
            this._uDestStart = new e.Gfx.WebGLShaderUniform(this, "destStart", "vec2");
            this._uDestEnd = new e.Gfx.WebGLShaderUniform(this, "destEnd", "vec2");
            this._uSrcStart = new e.Gfx.WebGLShaderUniform(this, "srcStart", "vec2");
            this._uSrcEnd =
                new e.Gfx.WebGLShaderUniform(this, "srcEnd", "vec2");
            this._uSrcOriginStart = new e.Gfx.WebGLShaderUniform(this, "srcOriginStart", "vec2");
            this._uSrcOriginEnd = new e.Gfx.WebGLShaderUniform(this, "srcOriginEnd", "vec2");
            this._uPixelSize = new e.Gfx.WebGLShaderUniform(this, "pixelSize", "vec2");
            this._uSeconds = new e.Gfx.WebGLShaderUniform(this, "seconds", "float");
            this._uLayerScale = new e.Gfx.WebGLShaderUniform(this, "layerScale", "float");
            this._uLayerAngle = new e.Gfx.WebGLShaderUniform(this, "layerAngle", "float");
            this._uLayoutStart =
                new e.Gfx.WebGLShaderUniform(this, "layoutStart", "vec2");
            this._uLayoutEnd = new e.Gfx.WebGLShaderUniform(this, "layoutEnd", "vec2");
            this._hasAnyOptionalUniforms = !!(this._uPixelSize.IsUsed() || this._uSeconds.IsUsed() || this._uSamplerBack.IsUsed() || this._uDestStart.IsUsed() || this._uDestEnd.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed() || this._uLayerScale.IsUsed() || this._uLayerAngle.IsUsed() || this._uLayoutStart.IsUsed() || this._uLayoutEnd.IsUsed());
            this._extendBoxHorizontal = c.extendBoxHorizontal || 0;
            this._extendBoxVertical = c.extendBoxVertical || 0;
            this._crossSampling = !!c.crossSampling;
            this._mustPreDraw = !!c.mustPreDraw;
            this._preservesOpaqueness = !!c.preservesOpaqueness;
            this._animated = !!c.animated;
            a = c.parameters || [];
            this._uCustomParameters = [];
            this._usesDest = this._uDestStart.IsUsed() || this._uDestEnd.IsUsed();
            this._usesAnySrcRectOrPixelSize = this._uPixelSize.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() ||
                this._uSrcOriginEnd.IsUsed();
            this._needsPostDrawOrExtendBox = this._crossSampling || this._usesDest || 0 !== this._extendBoxHorizontal || 0 !== this._extendBoxVertical;
            this._hasCurrentMatMV = this._hasCurrentMatP = !1;
            this._uColor.Init4f(1, 1, 1, 1);
            this._uColor2.Init4f(1, 1, 1, 1);
            this._uSamplerFront.Init1i(0);
            this._uSamplerBack.Init1i(1);
            this._uPointTexStart.Init2f(0, 0);
            this._uPointTexEnd.Init2f(1, 1);
            this._uZElevation.Init1f(0);
            this._uTileSize.Init2f(0, 0);
            this._uTileSpacing.Init2f(0, 0);
            this._uDestStart.Init2f(0, 0);
            this._uDestEnd.Init2f(1,
                1);
            this._uSrcStart.Init2f(0, 0);
            this._uSrcEnd.Init2f(0, 0);
            this._uSrcOriginStart.Init2f(0, 0);
            this._uSrcOriginEnd.Init2f(0, 0);
            this._uPixelSize.Init2f(0, 0);
            this._uLayerScale.Init1f(1);
            this._uLayerAngle.Init1f(0);
            this._uSeconds.Init1f(0);
            this._uLayoutStart.Init2f(0, 0);
            this._uLayoutEnd.Init2f(0, 0);
            this._uOutlineThickness.Init1f(1);
            for(const m of a) a = m[2], c = new e.Gfx.WebGLShaderUniform(this, m[0], a), "color" === a ? c.Init3f(0, 0, 0) : c.Init1f(0), this._uCustomParameters.push(c);
            this._isDeviceTransform ? this._UpdateDeviceTransformUniforms(g.currentMatP) :
                (this.UpdateMatP(g.currentMatP, !0), this.UpdateMatMV(g.currentMV, !0));
            g = g.currentShader;
            h.useProgram(g ? g._shaderProgram : null)
        }
        Release() {
            this._gl.deleteProgram(this._shaderProgram);
            this._shaderProgram = null;
            this._renderer._RemoveShaderProgram(this);
            this._renderer = this._gl = null
        }
        GetName() {
            return this._name
        }
        GetWebGLContext() {
            return this._gl
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        UsesDest() {
            return this._usesDest
        }
        UsesCrossSampling() {
            return this._crossSampling
        }
        MustPreDraw() {
            return this._mustPreDraw
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        ExtendsBox() {
            return 0 !==
                this._extendBoxHorizontal || 0 !== this._extendBoxVertical
        }
        GetBoxExtendHorizontal() {
            return this._extendBoxHorizontal
        }
        GetBoxExtendVertical() {
            return this._extendBoxVertical
        }
        UsesAnySrcRectOrPixelSize() {
            return this._usesAnySrcRectOrPixelSize
        }
        NeedsPostDrawOrExtendsBox() {
            return this._needsPostDrawOrExtendBox
        }
        GetParameterCount() {
            return this._uCustomParameters.length
        }
        GetParameterType(a) {
            return this._uCustomParameters[a].GetType()
        }
        AreCustomParametersAlreadySetInBatch(a) {
            for(let d = 0, c = a.length; d < c; ++d)
                if(!this._uCustomParameters[d].IsSetToCustomInBatch(a[d])) return !1;
            return !0
        }
        SetCustomParametersInBatch(a) {
            for(let d = 0, c = a.length; d < c; ++d) this._uCustomParameters[d].SetBatchValueCustom(a[d])
        }
        AreOptionalUniformsAlreadySetInBatch(a, d, c, f, h, g, k, m, p) {
            return this._uSamplerBack.IsUsed() || this._uPixelSize.IsUsed() && !this._uPixelSize.IsSetTo2InBatch(h, g) || this._uDestStart.IsUsed() && !this._uDestStart.IsSetTo2InBatch(a.getLeft(), a.getTop()) || this._uDestEnd.IsUsed() && !this._uDestEnd.IsSetTo2InBatch(a.getRight(), a.getBottom()) || this._uLayerScale.IsUsed() && !this._uLayerScale.IsSetTo1InBatch(k) ||
                this._uLayerAngle.IsUsed() && !this._uLayerAngle.IsSetTo1InBatch(m) || this._uSrcStart.IsUsed() && !this._uSrcStart.IsSetTo2InBatch(d.getLeft(), d.getTop()) || this._uSrcEnd.IsUsed() && !this._uSrcEnd.IsSetTo2InBatch(d.getRight(), d.getBottom()) || this._uSrcOriginStart.IsUsed() && !this._uSrcOriginStart.IsSetTo2InBatch(c.getLeft(), c.getTop()) || this._uSrcOriginEnd.IsUsed() && !this._uSrcOriginEnd.IsSetTo2InBatch(c.getRight(), c.getBottom()) || this._uLayoutStart.IsUsed() && !this._uLayoutStart.IsSetTo2InBatch(f.getLeft(),
                    f.getTop()) || this._uLayoutEnd.IsUsed() && !this._uLayoutEnd.IsSetTo2InBatch(f.getTop(), f.getBottom()) || this._uSeconds.IsUsed() && !this._uSeconds.IsSetTo1InBatch(p) ? !1 : !0
        }
        SetOptionalUniformsInBatch(a, d, c, f, h, g, k, m, p) {
            this._uSamplerBack.IsUsed() || (this._uPixelSize.IsUsed() && this._uPixelSize.SetBatch2(h, g), this._uDestStart.IsUsed() && this._uDestStart.SetBatch2(a.getLeft(), a.getTop()), this._uDestEnd.IsUsed() && this._uDestEnd.SetBatch2(a.getRight(), a.getBottom()), this._uLayerScale.IsUsed() && this._uLayerScale.SetBatch1(k),
                this._uLayerAngle.IsUsed() && this._uLayerAngle.SetBatch1(m), this._uSrcStart.IsUsed() && this._uSrcStart.SetBatch2(d.getLeft(), d.getTop()), this._uSrcEnd.IsUsed() && this._uSrcEnd.SetBatch2(d.getRight(), d.getBottom()), this._uSrcOriginStart.IsUsed() && this._uSrcOriginStart.SetBatch2(c.getLeft(), c.getTop()), this._uSrcOriginEnd.IsUsed() && this._uSrcOriginEnd.SetBatch2(c.getRight(), c.getBottom()), this._uLayoutStart.IsUsed() && this._uLayoutStart.SetBatch2(f.getLeft(), f.getTop()), this._uLayoutEnd.IsUsed() && this._uLayoutEnd.SetBatch2(f.getTop(),
                    f.getBottom()), this._uSeconds.IsUsed() && this._uSeconds.SetBatch1(p))
        }
        IsAnimated() {
            return this._animated
        }
        UpdateMatP(a, d) {
            this._hasCurrentMatP && !d || this._isDeviceTransform || (this._uMatP.IsUsed() && this._uMatP.UpdateMatrix4fv(a), this._hasCurrentMatP = !0)
        }
        SetMatPStale() {
            this._hasCurrentMatP = !1
        }
        UpdateMatMV(a, d) {
            this._hasCurrentMatMV && !d || this._isDeviceTransform || (this._uMatMV.IsUsed() && this._uMatMV.UpdateMatrix4fv(a), this._hasCurrentMatMV = !0)
        }
        SetMatMVStale() {
            this._hasCurrentMatMV = !1
        }
        _UpdateDeviceTransformUniforms(a) {
            if(!this._isDeviceTransform) throw Error("not device transform shader");
            this._uMatP.UpdateMatrix4fv(a);
            a = this._renderer;
            const d = a.GetWidth() / 2,
                c = a.GetHeight() / 2;
            a = a.CalculateLookAtModelView2(d, c, a.GetDefaultCameraZ() * self.devicePixelRatio, d, c, 0);
            this._uMatMV.UpdateMatrix4fv(a)
        }
        UpdateColor(a) {
            this._uColor.IsUsed() && this._uColor.Update4f(a[0], a[1], a[2], a[3])
        }
        static GetReservedUniformNames() {
            return b
        }
        static GetDefaultVertexShaderSource(a) {
            a = a ? "highmedp" : "mediump";
            return ["#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nattribute highp vec3 aPos;",
                `attribute ${a} vec2 aTex;`, `varying ${a} vec2 vTex;`, "uniform highp mat4 matP;\nuniform highp mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPos, 1.0);\n\tvTex = aTex;\n}"
            ].join("\n")
        }
        static GetTextureFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, vTex) * color;\n}"
        }
        static GetTilemapFragmentShaderSource() {
            return "#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nvarying highmedp vec2 vTex;\nuniform lowp vec4 color;\nuniform lowp sampler2D samplerFront;\nuniform highmedp vec2 srcStart;\nuniform highmedp vec2 pixelSize;\nuniform highmedp vec2 tileSize;\nuniform highmedp vec2 tileSpacing;\nvoid main(void) {\n\thighmedp vec2 tile = floor(vTex);\n\thighmedp vec2 tex = fract(vTex);\n\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);\n\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;\n\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;\n\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;\n}"
        }
        static GetPointVertexShaderSource() {
            return "attribute vec4 aPoints;\nvarying float pointOpacity;\nuniform float zElevation;\nuniform mat4 matP;\nuniform mat4 matMV;\nvoid main(void) {\n\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);\n\tgl_PointSize = aPoints.z;\n\tpointOpacity = aPoints.w;\n}"
        }
        static GetPointFragmentShaderSource() {
            return "uniform lowp sampler2D samplerFront;\nvarying lowp float pointOpacity;\nuniform mediump vec2 pointTexStart;\nuniform mediump vec2 pointTexEnd;\nuniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = texture2D(samplerFront, mix(pointTexStart, pointTexEnd, gl_PointCoord)) * color * pointOpacity;\n}"
        }
        static GetColorFillFragmentShaderSource() {
            return "uniform lowp vec4 color;\nvoid main(void) {\n\tgl_FragColor = color;\n}"
        }
        static GetLinearGradientFillFragmentShaderSource() {
            return "precision lowp float;\nvarying mediump vec2 vTex;\nuniform vec4 color;\nuniform vec4 color2_;\nvec3 fromLinear(vec3 linearRGB)\n{\n\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n\tvec3 higher = vec3(1.055) * pow(abs(linearRGB), vec3(1.0/2.4)) - vec3(0.055);\n\tvec3 lower = linearRGB * vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvec3 toLinear(vec3 sRGB)\n{\n\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n\tvec3 higher = pow(abs((sRGB + vec3(0.055))/vec3(1.055)), vec3(2.4));\n\tvec3 lower = sRGB/vec3(12.92);\n\treturn mix(higher, lower, vec3(cutoff));\n}\nvoid main(void) {\n\tvec3 linearGrad = mix(toLinear(color.rgb), toLinear(color2_.rgb), vTex.x);\n\tfloat a = mix(color.a, color2_.a, vTex.x);\n\tgl_FragColor = vec4(fromLinear(linearGrad) * a, a);\n}"
        }
        static GetSmoothLineFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tlowp float f = 1.0 - abs(vTex.y - 0.5) * 2.0;\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float f = step(diffSq.x + diffSq.y, 0.25);\n\tgl_FragColor = color * f;\n}"
        }
        static GetHardEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump float innerF = step(distSq, 0.25);\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm * outlineThickness;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float outerF = step(innerEdgeSq.x + innerEdgeSq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
        static GetSmoothEllipseFillFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 innerEdge = halfNorm - pixelSize * norm;\n\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;\n\tmediump float f = smoothstep(halfNormSq.x + halfNormSq.y, innerEdgeSq.x + innerEdgeSq.y, diffSq.x + diffSq.y);\n\tgl_FragColor = color * f;\n}"
        }
        static GetSmoothEllipseOutlineFragmentShaderSource() {
            return "varying mediump vec2 vTex;\nuniform lowp vec4 color;\nuniform mediump vec2 pixelSize;\nuniform mediump float outlineThickness;\nvoid main(void) {\n\tmediump vec2 diff = vTex - vec2(0.5, 0.5);\n\tmediump vec2 diffSq = diff * diff;\n\tmediump float distSq = diffSq.x + diffSq.y;\n\tmediump vec2 norm = normalize(diff);\n\tmediump vec2 halfNorm = norm * 0.5;\n\tmediump vec2 halfNormSq = halfNorm * halfNorm;\n\tmediump vec2 pxNorm = pixelSize * norm;\n\tmediump vec2 innerEdge1 = halfNorm - pxNorm;\n\tmediump vec2 innerEdge1Sq = innerEdge1 * innerEdge1;\n\tmediump float innerF = smoothstep(halfNormSq.x + halfNormSq.y, innerEdge1Sq.x + innerEdge1Sq.y, distSq);\n\tmediump vec2 innerEdge2 = halfNorm - pxNorm * outlineThickness;\n\tmediump vec2 innerEdge2Sq = innerEdge2 * innerEdge2;\n\tmediump vec2 innerEdge3 = halfNorm - pxNorm * (outlineThickness + 1.0);\n\tmediump vec2 innerEdge3Sq = innerEdge3 * innerEdge3;\n\tmediump float outerF = smoothstep(innerEdge3Sq.x + innerEdge3Sq.y, innerEdge2Sq.x + innerEdge2Sq.y, distSq);\n\tgl_FragColor = color * innerF * outerF;\n}"
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix.mat4,
        a = new Map([
            ["float", 1],
            ["percent", 1],
            ["sampler", 1],
            ["vec2", 2],
            ["vec3", 3],
            ["color", 3],
            ["vec4", 4],
            ["mat4", 16]
        ]);
    e.Gfx.WebGLShaderUniform = class {
        constructor(d, c, f) {
            if(!a.has(f)) throw Error("invalid uniform type");
            this._owner = d;
            this._gl = this._owner.GetWebGLContext();
            this._name = c;
            this._type = f;
            this._isColorType = "color" === this._type;
            this._location = this._gl.getUniformLocation(this._owner.GetShaderProgram(), c);
            this._isUsed = !!this._location;
            d = a.get(f);
            this._lastValue =
                new Float32Array(d);
            this._lastBatchValue = new Float32Array(d)
        }
        Release() {
            this._location = this._gl = this._owner = null
        }
        IsUsed() {
            return this._isUsed
        }
        GetType() {
            return this._type
        }
        IsColorType() {
            return this._isColorType
        }
        Init1f(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1f(this._location, d))
        }
        Init1i(d) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastBatchValue.set(this._lastValue), this._gl.uniform1i(this._location, d))
        }
        Init2f(d, c) {
            this.IsUsed() && (this._lastValue[0] =
                d, this._lastValue[1] = c, this._lastBatchValue.set(this._lastValue), this._gl.uniform2f(this._location, d, c))
        }
        Init3f(d, c, f) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = f, this._lastBatchValue.set(this._lastValue), this._gl.uniform3f(this._location, d, c, f))
        }
        Init4f(d, c, f, h) {
            this.IsUsed() && (this._lastValue[0] = d, this._lastValue[1] = c, this._lastValue[2] = f, this._lastValue[3] = h, this._lastBatchValue.set(this._lastValue), this._gl.uniform4f(this._location, d, c, f, h))
        }
        Update1f(d) {
            d = Math.fround(d);
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1f(this._location, d))
        }
        Update1i(d) {
            const c = this._lastValue;
            c[0] !== d && (c[0] = d, this._gl.uniform1i(this._location, d))
        }
        Update2f(d, c) {
            d = Math.fround(d);
            c = Math.fround(c);
            const f = this._lastValue;
            if(f[0] !== d || f[1] !== c) f[0] = d, f[1] = c, this._gl.uniform2f(this._location, d, c)
        }
        Update3f(d, c, f) {
            d = Math.fround(d);
            c = Math.fround(c);
            f = Math.fround(f);
            const h = this._lastValue;
            if(h[0] !== d || h[1] !== c || h[2] !== f) h[0] = d, h[1] = c, h[2] = f, this._gl.uniform3f(this._location, d, c,
                f)
        }
        Update4f(d, c, f, h) {
            d = Math.fround(d);
            c = Math.fround(c);
            f = Math.fround(f);
            h = Math.fround(h);
            const g = this._lastValue;
            if(g[0] !== d || g[1] !== c || g[2] !== f || g[3] !== h) g[0] = d, g[1] = c, g[2] = f, g[3] = h, this._gl.uniform4f(this._location, d, c, f, h)
        }
        UpdateMatrix4fv(d) {
            const c = this._lastValue;
            b.exactEquals(c, d) || (e.typedArraySet16(c, d, 0), this._gl.uniformMatrix4fv(this._location, !1, d))
        }
        IsSetToCustomInBatch(d) {
            const c = this._lastBatchValue;
            return this.IsColorType() ? c[0] === Math.fround(d.getR()) && c[1] === Math.fround(d.getG()) &&
                c[2] === Math.fround(d.getB()) : c[0] === Math.fround(d)
        }
        SetBatchValueCustom(d) {
            const c = this._lastBatchValue;
            this.IsColorType() ? (c[0] = d.getR(), c[1] = d.getG(), c[2] = d.getB()) : c[0] = d
        }
        IsSetTo1InBatch(d) {
            return this._lastBatchValue[0] === Math.fround(d)
        }
        IsSetTo2InBatch(d, c) {
            const f = this._lastBatchValue;
            return f[0] === Math.fround(d) && f[1] === Math.fround(c)
        }
        SetBatch1(d) {
            this._lastBatchValue[0] = d
        }
        SetBatch2(d, c) {
            const f = this._lastBatchValue;
            f[0] = d;
            f[1] = c
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4;
    e.Gfx.BatchState = class {
        constructor(c) {
            this.renderer = c;
            this.currentMV = d.create();
            this.currentMatP = d.create();
            this.currentFramebuffer = null;
            this.currentColor = a.fromValues(1, 1, 1, 1);
            this.currentShader = null;
            this.pointTexCoords = new e.Rect;
            this.clearColor = e.New(e.Color, 0, 0, 0, 0)
        }
    };
    e.Gfx.WebGLBatchJob = class {
        constructor(c) {
            const f = new ArrayBuffer(96);
            this._type = 0;
            this._batchState = c;
            this._gl = c.renderer.GetContext();
            this._indexCount = this._startIndex =
                0;
            this._texParam = null;
            this._mat4param = new Float32Array(f, 0, 16);
            this._colorParam = new Float32Array(f, 64, 4);
            this._srcOriginRect = new Float32Array(f, 80, 4);
            this._shaderParams = []
        }
        InitQuad(c, f) {
            this._type = 1;
            this._startIndex = c;
            this._indexCount = f
        }
        DoQuad() {
            const c = this._gl;
            c.drawElements(c.TRIANGLES, this._indexCount, c.UNSIGNED_SHORT, this._startIndex)
        }
        InitSetTexture(c) {
            this._type = 2;
            this._texParam = c
        }
        DoSetTexture() {
            const c = this._gl,
                f = this._texParam;
            c.bindTexture(c.TEXTURE_2D, f ? f._GetTexture() : null)
        }
        InitSetColor(c) {
            this._type =
                3;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetColor() {
            const c = this._colorParam,
                f = this._batchState;
            a.copy(f.currentColor, c);
            f.currentShader.UpdateColor(c)
        }
        InitSetGradientColor(c) {
            this._type = 21;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetGradientColor() {
            const c = this._colorParam,
                f = this._batchState.currentShader;
            f._uColor2.IsUsed() && f._uColor2.Update4f(c[0], c[1], c[2], c[3])
        }
        InitSetBlend(c, f) {
            this._type = 4;
            this._startIndex = c;
            this._indexCount = f
        }
        DoSetBlend() {
            this._gl.blendFunc(this._startIndex, this._indexCount)
        }
        InitSetViewport(c,
            f, h, g) {
            this._type = 5;
            const k = this._colorParam;
            k[0] = c;
            k[1] = f;
            k[2] = h;
            k[3] = g
        }
        DoSetViewport() {
            const c = this._colorParam;
            this._gl.viewport(c[0], c[1], c[2], c[3])
        }
        InitSetProjection(c) {
            this._type = 6;
            d.copy(this._mat4param, c)
        }
        DoSetProjection() {
            const c = this._batchState,
                f = c.renderer._allShaderPrograms,
                h = c.currentShader,
                g = this._mat4param;
            for(let k = 0, m = f.length; k < m; ++k) {
                const p = f[k];
                p === h ? p.UpdateMatP(g, !0) : p.SetMatPStale()
            }
            d.copy(c.currentMatP, g)
        }
        InitSetModelView(c) {
            this._type = 7;
            d.copy(this._mat4param, c)
        }
        DoSetModelView() {
            const c =
                this._batchState,
                f = c.renderer._allShaderPrograms,
                h = c.currentShader,
                g = this._mat4param;
            for(let k = 0, m = f.length; k < m; ++k) {
                const p = f[k];
                p === h ? p.UpdateMatMV(g, !0) : p.SetMatMVStale()
            }
            d.copy(c.currentMV, g)
        }
        InitSetRenderTarget(c) {
            this._type = 8;
            this._texParam = c
        }
        DoSetRenderTarget() {
            const c = this._gl;
            var f = this._texParam;
            const h = this._batchState;
            f ? (f = f._GetFramebuffer(), h.currentFramebuffer = f, c.bindFramebuffer(c.FRAMEBUFFER, f)) : (h.currentFramebuffer = null, c.bindFramebuffer(c.FRAMEBUFFER, null))
        }
        InitClearSurface(c) {
            this._type =
                9;
            c.writeToTypedArray(this._mat4param, 0)
        }
        InitClearSurface2(c, f, h, g) {
            this._type = 9;
            const k = this._mat4param;
            k[0] = c;
            k[1] = f;
            k[2] = h;
            k[3] = g
        }
        DoClearSurface() {
            const c = this._gl;
            var f = this._mat4param,
                h = this._batchState;
            const g = h.clearColor;
            (h = h.renderer._isScissorViewport && e.isDebug) && c.disable(c.SCISSOR_TEST);
            const k = f[0],
                m = f[1],
                p = f[2];
            f = f[3];
            g.equalsRgba(k, m, p, f) || (c.clearColor(k, m, p, f), g.setRgba(k, m, p, f));
            c.clear(c.COLOR_BUFFER_BIT);
            h && c.enable(c.SCISSOR_TEST)
        }
        InitClearRect(c, f, h, g, k, m, p, x) {
            this._type = 10;
            const t = this._mat4param;
            t[0] = c;
            t[1] = f;
            t[2] = h;
            t[3] = g;
            t[4] = k;
            t[5] = m;
            t[6] = p;
            t[7] = x
        }
        DoClearRectangle() {
            const c = this._gl;
            var f = this._mat4param,
                h = this._batchState;
            const g = h.renderer;
            h = h.clearColor;
            g._isScissorViewport || c.enable(c.SCISSOR_TEST);
            c.scissor(f[0], f[1], f[2], f[3]);
            const k = f[4],
                m = f[5],
                p = f[6];
            f = f[7];
            h.equalsRgba(k, m, p, f) || (c.clearColor(k, m, p, f), h.setRgba(k, m, p, f));
            c.clear(c.COLOR_BUFFER_BIT);
            g._isScissorViewport ? c.scissor(0, 0, g._viewportScissorWidth, g._viewportScissorHeight) : c.disable(c.SCISSOR_TEST)
        }
        InitSetPointTexCoords(c) {
            this._type =
                15;
            c.writeToTypedArray(this._mat4param, 0)
        }
        DoSetPointTextureCoords() {
            const c = this._mat4param;
            this._batchState.pointTexCoords.set(c[0], c[1], c[2], c[3])
        }
        InitPoints(c, f) {
            this._type = 11;
            this._startIndex = c;
            this._indexCount = 1;
            this._mat4param[0] = f
        }
        DoPoints() {
            const c = this._gl,
                f = this._batchState,
                h = f.renderer._spPoints;
            c.useProgram(h._shaderProgram);
            h.UpdateMatP(f.currentMatP, !1);
            h.UpdateMatMV(f.currentMV, !1);
            var g = f.pointTexCoords;
            h._uPointTexStart.IsUsed() && h._uPointTexStart.Update2f(g.getLeft(), g.getTop());
            h._uPointTexEnd.IsUsed() && h._uPointTexEnd.Update2f(g.getRight(), g.getBottom());
            g = this._mat4param[0];
            h._uZElevation.IsUsed() && h._uZElevation.Update1f(g);
            h._uColor.IsUsed() && (g = f.currentColor, h._uColor.Update4f(g[0], g[1], g[2], g[3]));
            c.drawArrays(c.POINTS, this._startIndex / 4, this._indexCount);
            c.useProgram(f.currentShader._shaderProgram)
        }
        InitSetProgram(c) {
            this._type = 12;
            this._texParam = c
        }
        DoSetProgram() {
            var c = this._gl;
            const f = this._batchState,
                h = this._texParam;
            f.currentShader = h;
            c.useProgram(h._shaderProgram);
            h.UpdateMatP(f.currentMatP, !1);
            h.UpdateMatMV(f.currentMV, !1);
            h._uColor.IsUsed() && (c = f.currentColor, h._uColor.Update4f(c[0], c[1], c[2], c[3]))
        }
        InitSetProgramParameters() {
            this._type = 13
        }
        DoSetProgramParameters() {
            const c = this._batchState.currentShader;
            c._hasAnyOptionalUniforms && this._DoSetOptionalUniformProgramParameters(c);
            c._uCustomParameters.length && this._DoUpdateCustomProgramParameters(c)
        }
        _DoSetOptionalUniformProgramParameters(c) {
            const f = this._gl,
                h = this._mat4param,
                g = this._colorParam,
                k = this._srcOriginRect;
            if(c._uSamplerBack.IsUsed()) {
                const m = this._batchState.renderer,
                    p = this._texParam;
                m._lastTexture1 !== p && (f.activeTexture(f.TEXTURE1), f.bindTexture(f.TEXTURE_2D, p ? p._GetTexture() : null), m._lastTexture1 = p, f.activeTexture(f.TEXTURE0))
            }
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(h[0], h[1]);
            c._uDestStart.IsUsed() && c._uDestStart.Update2f(h[2], h[3]);
            c._uDestEnd.IsUsed() && c._uDestEnd.Update2f(h[4], h[5]);
            c._uLayerScale.IsUsed() && c._uLayerScale.Update1f(h[6]);
            c._uLayerAngle.IsUsed() && c._uLayerAngle.Update1f(h[7]);
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(h[12], h[13]);
            c._uSrcEnd.IsUsed() && c._uSrcEnd.Update2f(h[14], h[15]);
            c._uSrcOriginStart.IsUsed() && c._uSrcOriginStart.Update2f(k[0], k[1]);
            c._uSrcOriginEnd.IsUsed() && c._uSrcOriginEnd.Update2f(k[2], k[3]);
            c._uLayoutStart.IsUsed() && c._uLayoutStart.Update2f(g[0], g[1]);
            c._uLayoutEnd.IsUsed() && c._uLayoutEnd.Update2f(g[2], g[3]);
            c._uSeconds.IsUsed() && c._uSeconds.Update1f(this._startIndex)
        }
        _DoUpdateCustomProgramParameters(c) {
            c = c._uCustomParameters;
            const f = this._shaderParams;
            for(let h = 0, g = c.length; h < g; ++h) {
                const k = c[h],
                    m = f[h];
                k.IsColorType() ? k.Update3f(m.getR(), m.getG(), m.getB()) : k.Update1f(m)
            }
        }
        InitInvalidateFramebuffer(c) {
            this._type = 14;
            this._texParam = c
        }
        DoInvalidateFramebuffer() {
            const c = this._gl,
                f = this._texParam,
                h = this._batchState.currentFramebuffer;
            f !== h && c.bindFramebuffer(c.FRAMEBUFFER, f);
            c.invalidateFramebuffer(c.FRAMEBUFFER, [c.COLOR_ATTACHMENT0]);
            f !== h && c.bindFramebuffer(c.FRAMEBUFFER, h)
        }
        InitBlitFramebuffer(c, f, h) {
            this._type = 17;
            const g = this._mat4param,
                k = this._batchState.renderer;
            g[0] = c.GetWidth();
            g[1] = c.GetHeight();
            g[2] = f ? f.GetWidth() : k.GetWidth();
            g[3] = f ? f.GetHeight() : k.GetHeight();
            g[4] = c.IsLinearSampling() ? 1 : 0;
            g[5] = "stretch" === h;
            h = this._shaderParams;
            e.clearArray(h);
            h.push(c._GetFramebuffer());
            h.push(f ? f._GetFramebuffer() : null)
        }
        DoBlitFramebuffer() {
            var c = this._mat4param,
                f = this._shaderParams;
            const h = this._gl;
            var g = c[0],
                k = c[1],
                m = c[2];
            const p = c[3],
                x = 0 !== c[4];
            c = 0 !== c[5];
            const t = f[1];
            h.bindFramebuffer(h.READ_FRAMEBUFFER, f[0]);
            h.bindFramebuffer(h.DRAW_FRAMEBUFFER, t);
            c ? h.blitFramebuffer(0,
                0, g, k, 0, 0, m, p, h.COLOR_BUFFER_BIT, x ? h.LINEAR : h.NEAREST) : (f = Math.min(g, m), g = Math.min(k, p), m = Math.max(k - p, 0), k = Math.max(p - k, 0), h.blitFramebuffer(0, m, f, g + m, 0, k, f, g + k, h.COLOR_BUFFER_BIT, h.NEAREST))
        }
        InitStartQuery(c) {
            this._type = 18;
            this._texParam = c
        }
        DoStartQuery() {
            this._texParam.BeginTimeElapsed();
            this._texParam = null
        }
        InitEndQuery(c) {
            this._type = 19;
            this._texParam = c
        }
        DoEndQuery() {
            this._texParam.EndTimeElapsed();
            this._texParam = null
        }
        InitSetEllipseParams(c, f, h) {
            this._type = 20;
            const g = this._mat4param;
            g[0] = c;
            g[1] =
                f;
            g[2] = h
        }
        DoSetEllipseParams() {
            const c = this._batchState.currentShader,
                f = this._mat4param;
            c._uPixelSize.IsUsed() && c._uPixelSize.Update2f(f[0], f[1]);
            c._uOutlineThickness.IsUsed() && c._uOutlineThickness.Update1f(f[2])
        }
        InitSetTilemapInfo(c, f, h, g, k, m, p) {
            this._type = 16;
            const x = this._mat4param;
            c.writeToTypedArray(x, 0);
            x[4] = 1 / f;
            x[5] = 1 / h;
            x[6] = g / f;
            x[7] = k / h;
            x[8] = m / f;
            x[9] = p / h
        }
        DoSetTilemapInfo() {
            const c = this._batchState.currentShader,
                f = this._mat4param;
            c._uSrcStart.IsUsed() && c._uSrcStart.Update2f(f[0], f[1]);
            c._uPixelSize.IsUsed() &&
                c._uPixelSize.Update2f(f[4], f[5]);
            c._uTileSize.IsUsed() && c._uTileSize.Update2f(f[6], f[7]);
            c._uTileSpacing.IsUsed() && c._uTileSpacing.Update2f(f[8], f[9])
        }
        InitClearDepth() {
            this._type = 22
        }
        DoClearDepth() {
            const c = this._gl;
            c.clear(c.DEPTH_BUFFER_BIT)
        }
        InitSetDepthEnabled(c) {
            this._type = 23;
            this._startIndex = c ? 1 : 0
        }
        DoSetDepthEnabled() {
            const c = this._gl;
            0 === this._startIndex ? (c.disable(c.DEPTH_TEST), c.depthMask(!1)) : (c.enable(c.DEPTH_TEST), c.depthMask(!0))
        }
        Run() {
            switch(this._type) {
                case 1:
                    this.DoQuad();
                    break;
                case 2:
                    this.DoSetTexture();
                    break;
                case 3:
                    this.DoSetColor();
                    break;
                case 4:
                    this.DoSetBlend();
                    break;
                case 5:
                    this.DoSetViewport();
                    break;
                case 6:
                    this.DoSetProjection();
                    break;
                case 7:
                    this.DoSetModelView();
                    break;
                case 8:
                    this.DoSetRenderTarget();
                    break;
                case 9:
                    this.DoClearSurface();
                    break;
                case 10:
                    this.DoClearRectangle();
                    break;
                case 11:
                    this.DoPoints();
                    break;
                case 12:
                    this.DoSetProgram();
                    break;
                case 13:
                    this.DoSetProgramParameters();
                    break;
                case 14:
                    this.DoInvalidateFramebuffer();
                    break;
                case 15:
                    this.DoSetPointTextureCoords();
                    break;
                case 16:
                    this.DoSetTilemapInfo();
                    break;
                case 17:
                    this.DoBlitFramebuffer();
                    break;
                case 18:
                    this.DoStartQuery();
                    break;
                case 19:
                    this.DoEndQuery();
                    break;
                case 20:
                    this.DoSetEllipseParams();
                    break;
                case 21:
                    this.DoSetGradientColor();
                    break;
                case 22:
                    this.DoClearDepth();
                    break;
                case 23:
                    this.DoSetDepthEnabled()
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = {
            timeout: 60
        },
        a = new e.Color(0, 0, 0, 1),
        d = new Set(["left", "center", "right"]),
        c = new Set(["top", "center", "bottom"]),
        f = new Set(["word", "character"]),
        h = new Set;
    e.FontManager && e.FontManager.addEventListener("fontload", t => {
        t = t.font.GetName();
        for(const q of h)(q.IsBBCodeEnabled() || e.equalsNoCase(q.GetFontName(), t)) && q._SetTextChanged()
    });

    function g(t, q, r, y, v, u) {
        q ? "Gecko" === e.Platform.BrowserEngine ? t.strokeText(r, y, v, u) : t.strokeText(r, y, v) : "Gecko" === e.Platform.BrowserEngine ? t.fillText(r,
            y, v, u) : t.fillText(r, y, v)
    }

    function k(t, q, r, y, v, u) {
        q ? t.strokeRect(r, y, v, u) : t.fillRect(r, y, v, u)
    }

    function m(t) {
        return 4 / 3 * t
    }
    let p = !1,
        x = !1;
    e.Gfx.RendererText = class {
        constructor(t, q) {
            q = Object.assign({}, b, q);
            this._renderer = t;
            this._fontName = "Arial";
            this._fontSize = 16;
            this._fontSizeScale = 1;
            this._lineHeight = 0;
            this._isItalic = this._isBold = !1;
            this._colorStr = "black";
            this._isBBcodeEnabled = !1;
            this.onloadfont = null;
            this._alreadyLoadedFonts = new Set;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._text = "";
            this._bbString = null;
            this._wrappedText = e.New(e.WordWrap);
            this._wrapMode = "word";
            this._isUpdating = this._textChanged = !1;
            this._isAsync = !0;
            this._drawMaxCharCount = -1;
            this._height = this._width = this._cssHeight = this._cssWidth = this._drawCharCount = 0;
            this._zoom = 1;
            this._changed = !1;
            this._measureContextTop = this._measureContext = this._textContext = this._textCanvas = null;
            this._lastCanvasHeight = this._lastCanvasWidth = -1;
            this._lastTextCanvasFillStyle = this._lastMeasureCanvasFont = this._lastTextCanvasFont = "";
            this._lastTextCanvasLineWidth =
                this._lastTextCanvasOpacity = 1;
            this._measureTextCallback = (r, y) => this._MeasureText(r, y);
            this._texture = null;
            this._textureHeight = this._textureWidth = 0;
            this._rcTex = new e.Rect;
            this._scaleFactor = 1;
            this._needToRecreateTexture = !1;
            this._textureTimeout = new e.IdleTimeout(() => {
                this.ReleaseTexture();
                this._SetTextCanvasSize(8, 8)
            }, q.timeout);
            this.ontextureupdate = null;
            this._wasReleased = !1;
            h.add(this)
        }
        Release() {
            this.onloadfont = null;
            this._alreadyLoadedFonts.clear();
            this._measureTextCallback = this._measureContextTop = this._measureContext =
                this._textContext = this._textCanvas = this._bbString = null;
            this._textureTimeout.Release();
            this.ontextureupdate = null;
            this.ReleaseTexture();
            this._wrappedText.Clear();
            this._renderer = this._wrappedText = null;
            this._wasReleased = !0;
            h.delete(this)
        }
        _SetChanged() {
            this._changed = !0
        }
        _SetTextChanged() {
            this._SetChanged();
            this._wrappedText.Clear();
            this._textChanged = !0
        }
        SetIsAsync(t) {
            this._isAsync = !!t
        }
        IsAsync() {
            return this._isAsync
        }
        SetBBCodeEnabled(t) {
            t = !!t;
            this._isBBcodeEnabled !== t && (t = (this._isBBcodeEnabled = t) ? "alphabetic" :
                "top", this._textContext && (this._textContext.textBaseline = t), this._measureContext && (this._measureContext.textBaseline = t), this._SetTextChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetFontName(t) {
            t || (t = "serif");
            this._fontName !== t && (this._fontName = t, this._SetTextChanged())
        }
        GetFontName() {
            return this._fontName
        }
        SetFontSize(t) {
            .1 > t && (t = .1);
            this._fontSize !== t && (this._fontSize = t, this._SetTextChanged())
        }
        SetFontSizeScale(t) {
            this._fontSizeScale !== t && (this._fontSizeScale = t, this._SetTextChanged())
        }
        SetLineHeight(t) {
            this._lineHeight !==
                t && (this._lineHeight = t, this._SetChanged())
        }
        SetBold(t) {
            t = !!t;
            this._isBold !== t && (this._isBold = t, this._SetTextChanged())
        }
        SetItalic(t) {
            t = !!t;
            this._isItalic !== t && (this._isItalic = t, this._SetTextChanged())
        }
        SetDrawMaxCharacterCount(t) {
            t = Math.floor(t);
            this._drawMaxCharCount !== t && (this._drawMaxCharCount = t, this._SetChanged())
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(t, q) {
            for(let r = t.length - 1; 0 <= r; --r) {
                const y = t[r];
                if(y.tag === q) return y
            }
            return null
        }
        _HasStyleTag(t, q) {
            return !!this._GetStyleTag(t,
                q)
        }
        _GetFontString(t, q) {
            let r = [];
            (this._isBold || this._HasStyleTag(q, "b")) && r.push("bold");
            (this._isItalic || this._HasStyleTag(q, "i")) && r.push("italic");
            var y = this._GetStyleTag(q, "size");
            y = (y ? parseFloat(y.param) : this._fontSize) * this._fontSizeScale;
            t ? r.push(y + "pt") : r.push(y * this._scaleFactor * this._zoom * self.devicePixelRatio + "pt");
            t = this._fontName;
            (q = this._GetStyleTag(q, "font")) && q.param && (t = q.param, this.onloadfont && !this._alreadyLoadedFonts.has(t) && (this.onloadfont(t), this._alreadyLoadedFonts.add(t)));
            t && r.push('"' + t + '"');
            return r.join(" ")
        }
        SetColor(t) {
            t instanceof e.Color && (t = t.getCssRgb());
            this._colorStr !== t && (this._colorStr = t, this._SetChanged())
        }
        SetColorRgb(t, q, r) {
            a.setRgb(t, q, r);
            this.SetColor(a)
        }
        SetHorizontalAlignment(t) {
            if(!d.has(t)) throw Error("invalid horizontal alignment");
            this._horizontalAlign !== t && (this._horizontalAlign = t, this._SetChanged())
        }
        SetVerticalAlignment(t) {
            if(!c.has(t)) throw Error("invalid vertical alignment");
            this._verticalAlign !== t && (this._verticalAlign = t, this._SetChanged())
        }
        SetWordWrapMode(t) {
            if(!f.has(t)) throw Error("invalid word wrap mode");
            this._wrapMode !== t && (this._wrapMode = t, this._SetTextChanged())
        }
        SetText(t) {
            this._text !== t && (this._text = t, this._SetTextChanged())
        }
        SetSize(t, q, r) {
            "undefined" === typeof r && (r = 1);
            if(!(0 >= t || 0 >= t || this._cssWidth === t && this._cssHeight === q && this._zoom === r)) {
                1 === this._zoom !== (1 === r) && (this._needToRecreateTexture = !0);
                var y = this._cssWidth,
                    v = this._zoom;
                this._cssWidth = t;
                this._cssHeight = q;
                this._zoom = r;
                t = self.devicePixelRatio;
                this._width = this._cssWidth * this._zoom * t;
                this._height = this._cssHeight * this._zoom * t;
                t = Math.max(this._width,
                    this._height);
                q = Math.min(this._renderer.GetMaxTextureSize(), 2048);
                r = 1;
                t > q && (r = q / t, this._width = Math.min(this._width * r, q), this._height = Math.min(this._height * r, q));
                this._scaleFactor = r;
                0 < this._textureWidth && 0 < this._textureHeight && this._zoom === v && this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight);
                this._cssWidth !== y ? this._SetTextChanged() : this._SetChanged()
            }
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            return this._wrappedText.GetTotalLineHeight() + this._wrappedText.GetLineCount() * (this._lineHeight + 4) - this._lineHeight
        }
        GetTexture() {
            this._textureTimeout.Reset();
            this._MaybeUpdate();
            return this._texture
        }
        _MaybeUpdate() {
            this._texture && !this._changed && !this._textChanged || this._isUpdating || 0 >= this._width || 0 >= this._height || (this._changed = !1, this._isUpdating = !0, this._isAsync ? e.Asyncify(() => this._DoUpdate()) : this._DoUpdate())
        }
        _DoUpdate() {
            this._wasReleased || (this._SetTextCanvasSize(Math.ceil(this._width), Math.ceil(this._height)),
                this._MaybeWrapText(), this._DrawTextToCanvas(), this._UpdateTexture(), this._textureTimeout.Reset(), this._isUpdating = !1)
        }
        _SetTextCanvasSize(t, q) {
            this._textCanvas || (this._textCanvas = e.CreateCanvas(16, 16));
            let r = !1;
            if(this._lastCanvasWidth !== t || this._lastCanvasHeight !== q) this._lastCanvasWidth = t, this._lastCanvasHeight = q, this._textCanvas.width = t, this._textCanvas.height = q, r = !0;
            this._textContext || (this._textContext = this._textCanvas.getContext("2d"), r = !0);
            r ? (this._textContext.textBaseline = this._isBBcodeEnabled ?
                "alphabetic" : "top", this._textContext.font = this._lastTextCanvasFont, this._textContext.fillStyle = this._lastTextCanvasFillStyle, this._textContext.strokeStyle = this._lastTextCanvasFillStyle, this._textContext.globalAlpha = this._lastTextCanvasOpacity, this._textContext.lineWidth = this._lastTextCanvasLineWidth) : this._textContext.clearRect(0, 0, t, q)
        }
        _MaybeCreateMeasureContext() {
            this._measureContext || (this._measureContext = e.CreateCanvas(16, 16).getContext("2d"), this._measureContextTop = e.CreateCanvas(16, 16).getContext("2d"),
                this._measureContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top", this._measureContextTop.textBaseline = "top")
        }
        _SetMeasureFontString(t) {
            this._lastMeasureCanvasFont !== t && (this._lastMeasureCanvasFont = t, this._measureContext.font = t, this._measureContextTop.font = t)
        }
        _SupportsFontBoundingBoxMeasurements() {
            if(!p) {
                p = !0;
                this._MaybeCreateMeasureContext();
                const t = this._measureContext.measureText("test");
                x = "number" === typeof t.fontBoundingBoxAscent && "number" === typeof t.fontBoundingBoxDescent
            }
            return x
        }
        _MaybeWrapText() {
            this._textChanged &&
                (this._MaybeCreateMeasureContext(), !this._isBBcodeEnabled || this._bbString && this._bbString.toString() === this._text || (this._bbString = new e.BBString(this._text, {
                    noEscape: !0
                })), this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, 0), this._textChanged = !1)
        }
        _MeasureText(t, q) {
            this._SetMeasureFontString(this._GetFontString(!0, q));
            q = this._GetStyleTag(q, "size");
            q = (q ? parseFloat(q.param) : this._fontSize) * this._fontSizeScale;
            const r = this._measureContext.measureText(t);
            let y = 0;
            this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements() && (t = this._measureContextTop.measureText(t), y = r.fontBoundingBoxAscent - t.fontBoundingBoxAscent);
            return {
                width: r.width,
                height: m(q),
                fontBoundingBoxAscent: r.fontBoundingBoxAscent || 0,
                fontBoundingBoxDescent: r.fontBoundingBoxDescent || 0,
                topToAlphabeticDistance: y
            }
        }
        _SetDrawFontString(t) {
            this._lastTextCanvasFont !== t && (this._lastTextCanvasFont = t, this._textContext.font = t)
        }
        _SetDrawCanvasColor(t) {
            this._lastTextCanvasFillStyle !==
                t && (this._lastTextCanvasFillStyle = t, this._textContext.fillStyle = t, this._textContext.strokeStyle = t)
        }
        _SetDrawCanvasOpacity(t) {
            this._lastTextCanvasOpacity !== t && (this._lastTextCanvasOpacity = t, this._textContext.globalAlpha = t)
        }
        _SetDrawCanvasLineWith(t) {
            this._lastTextCanvasLineWidth !== t && (this._lastTextCanvasLineWidth = t, this._textContext.lineWidth = t)
        }
        _DrawTextToCanvas() {
            this._drawCharCount = 0;
            const t = this._scaleFactor * this._zoom * self.devicePixelRatio,
                q = (4 + this._lineHeight) * t;
            var r = 0;
            const y = this._wrappedText.GetLines();
            if(0 !== y.length) {
                var v = this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements(),
                    u = y[0].height * t;
                "center" === this._verticalAlign ? (r = y.reduce((A, z) => A + z.height * t + q, 0) - q, r = Math.max(this._height / 2 - r / 2, 0), v && (u = y[0].topToAlphabeticDistance * t)) : "bottom" === this._verticalAlign && (r = y.reduce((A, z) => A + z.height * t + q, 0) - this._lineHeight * t, r = this._height - r - (v ? y[y.length - 1].fontBoundingBoxDescent * t : 0) - 2);
                for(let A = 0, z = y.length; A < z; ++A) {
                    v = y[A];
                    const C = v.height * t,
                        E = r;
                    if(this._isBBcodeEnabled) {
                        if(r += 0 === A ?
                            u : C, 0 < A && r > this._height - 4 * t) break
                    } else if(0 < A && r >= this._height - C) break;
                    0 <= E && this._DrawTextLine(v, r, t);
                    this._isBBcodeEnabled || (r += C);
                    r += q
                }
            }
        }
        _DrawTextLine(t, q, r) {
            let y = 0;
            "center" === this._horizontalAlign ? y = (this._width - t.width * r) / 2 : "right" === this._horizontalAlign && (y = this._width - t.width * r);
            for(const v of t.fragments) this._DrawTextFragment(v, y, q, r, t.height), y += v.width * r
        }
        _DrawTextFragment(t, q, r, y, v) {
            const u = this._textContext,
                A = v / 16;
            v = t.width * y;
            const z = t.height * y,
                C = t.height / 16;
            var E = (4 + this._lineHeight) *
                y;
            const J = t.styles;
            t = t.text;
            if(-1 !== this._drawMaxCharCount) {
                if(this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + t.length > this._drawMaxCharCount && (t = t.substr(0, this._drawMaxCharCount - this._drawCharCount), v = this._MeasureText(t, J).width * y);
                this._drawCharCount += t.length
            }
            const F = this._GetStyleTag(J, "background"),
                H = this._HasStyleTag(J, "u"),
                K = this._HasStyleTag(J, "s");
            if((!e.IsStringAllWhitespace(t) || F || H || K) && !this._HasStyleTag(J, "hide")) {
                var N = this._GetStyleTag(J, "offsetx");
                q += N ? parseFloat(N.param) *
                    y : 0;
                N = this._GetStyleTag(J, "offsety");
                r += N ? parseFloat(N.param) * y : 0;
                F && (this._SetDrawCanvasColor(F.param), u.fillRect(q, r - z, v, z + E));
                E = this._GetStyleTag(J, "color");
                this._SetDrawCanvasColor(E ? E.param : this._colorStr);
                E = this._GetStyleTag(J, "opacity");
                this._SetDrawCanvasOpacity(E ? parseFloat(E.param) / 100 : 1);
                (E = this._HasStyleTag(J, "stroke")) && this._SetDrawCanvasLineWith(C * this._scaleFactor * this._zoom);
                H && k(u, E, q, r + y * A, v, y * A);
                K && k(u, E, q, r - z / 4, v, y * C);
                this._SetDrawFontString(this._GetFontString(!1, J));
                g(u, E, t,
                    q, r, v);
                !E && (this._SetDrawCanvasLineWith(C * this._scaleFactor * this._zoom), y = this._GetStyleTag(J, "outline")) && (this._SetDrawCanvasColor(y.param), g(u, !0, t, q, r, v))
            }
        }
        _UpdateTexture() {
            if(!this._renderer.IsContextLost() && (this._textureWidth = Math.ceil(this._width), this._textureHeight = Math.ceil(this._height), this._rcTex.set(0, 0, this._width / this._textureWidth, this._height / this._textureHeight), this._needToRecreateTexture && (this.ReleaseTexture(), this._needToRecreateTexture = !1), this._texture || (this._texture = this._renderer.CreateDynamicTexture(this._textureWidth,
                    this._textureHeight, {
                        mipMap: 1 === this._zoom,
                        mipMapQuality: "high"
                    })), this._renderer.UpdateTexture(this._textCanvas, this._texture), this.ontextureupdate)) this.ontextureupdate()
        }
        GetTexRect() {
            return this._rcTex
        }
        ReleaseTexture() {
            this._texture && (this._renderer.IsContextLost() || this._renderer.DeleteTexture(this._texture), this._texture = null)
        }
        static OnContextLost() {
            for(const t of h) t.ReleaseTexture()
        }
        static GetAll() {
            return h.values()
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a) {
            this._gl = a.GetContext();
            this._version = a.GetWebGLVersionNumber();
            this._timerExt = a._GetDisjointTimerQueryExtension();
            this._query = null;
            this._hasResult = this._isActive = !1;
            this._result = 0;
            this._query = 1 === this._version ? this._timerExt.createQueryEXT() : this._gl.createQuery()
        }
        Release() {
            this._DeleteQueryObject();
            this._timerExt = this._gl = null;
            this._hasResult = !1
        }
        _DeleteQueryObject() {
            this._query && (1 === this._version ? this._timerExt.deleteQueryEXT(this._query) : this._gl.deleteQuery(this._query),
                this._query = null)
        }
        BeginTimeElapsed() {
            if(this._isActive) throw Error("query already active");
            1 === this._version ? this._timerExt.beginQueryEXT(this._timerExt.TIME_ELAPSED_EXT, this._query) : this._gl.beginQuery(this._timerExt.TIME_ELAPSED_EXT, this._query);
            this._isActive = !0
        }
        EndTimeElapsed() {
            if(!this._isActive) throw Error("query not active");
            1 === this._version ? this._timerExt.endQueryEXT(this._timerExt.TIME_ELAPSED_EXT) : this._gl.endQuery(this._timerExt.TIME_ELAPSED_EXT);
            this._isActive = !1
        }
        CheckForResult() {
            if(this._query &&
                !this._hasResult && !this._isActive) {
                var a = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_AVAILABLE_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT_AVAILABLE);
                var d = this._gl.getParameter(this._timerExt.GPU_DISJOINT_EXT);
                a && !d && (this._result = 1 === this._version ? this._timerExt.getQueryObjectEXT(this._query, this._timerExt.QUERY_RESULT_EXT) : this._gl.getQueryParameter(this._query, this._gl.QUERY_RESULT), this._result /= 1E9, this._hasResult = !0);
                (a ||
                    d) && this._DeleteQueryObject()
            }
        }
        HasResult() {
            return this._hasResult
        }
        GetResult() {
            if(!this._hasResult) throw Error("no result available");
            return this._result
        }
    }
    e.Gfx.WebGLTimeElapsedQuery = class {
        constructor(a) {
            this._renderer = a;
            this._frameNumber = a.GetFrameNumber();
            this._isActive = !1;
            this._parentQuery = null;
            this._isNested = !1;
            this._realQuery = null;
            this._queries = []
        }
        Release() {
            for(const a of this._queries) a instanceof b && a.Release();
            e.clearArray(this._queries);
            this._renderer = this._realQuery = this._parentQuery = null
        }
        BeginTimeElapsed() {
            if(this._isActive) throw Error("query already active");
            const a = this._renderer._GetTimeQueryStack();
            0 < a.length ? (this._isNested = !0, this._parentQuery = a[a.length - 1], this._parentQuery._EndReal(), this._parentQuery._queries.push(this)) : (this._isNested = !1, this._parentQuery = null);
            this._isActive = !0;
            a.push(this);
            this._StartReal()
        }
        EndTimeElapsed() {
            if(!this._isActive) throw Error("query not active");
            if(this._renderer._GetTimeQueryStack().pop() !== this) throw Error("can only end most nested query");
            this._isActive = !1;
            this._EndReal();
            this._parentQuery && (this._parentQuery._StartReal(),
                this._parentQuery = null)
        }
        _StartReal() {
            this._realQuery = e.New(b, this._renderer);
            this._queries.push(this._realQuery);
            this._realQuery.BeginTimeElapsed()
        }
        _EndReal() {
            this._realQuery.EndTimeElapsed();
            this._realQuery = null
        }
        CheckForResult() {
            for(const a of this._queries) a.CheckForResult()
        }
        IsNested() {
            return this._isNested
        }
        HasResult() {
            return this._queries.every(a => a.HasResult())
        }
        GetResult() {
            return this._queries.reduce((a, d) => a + d.GetResult(), 0)
        }
        GetFrameNumber() {
            return this._frameNumber
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Gfx.WebGLQueryResultBuffer = class {
        constructor(b, a = 1E3) {
            this._renderer = b;
            this._maxQueries = a;
            this._buffer = [];
            this._renderer._AddQueryResultBuffer(this)
        }
        Release() {
            this.Clear();
            this._renderer._RemoveQueryResultBuffer(this);
            this._renderer = null
        }
        Clear() {
            for(const b of this._buffer) b.Release();
            e.clearArray(this._buffer)
        }
        AddTimeElapsedQuery() {
            const b = new e.Gfx.WebGLTimeElapsedQuery(this._renderer);
            this._buffer.push(b);
            this._buffer.length > this._maxQueries && this._buffer.shift().Release();
            return b
        }
        CheckForResults(b) {
            for(const a of this._buffer) {
                if(a.GetFrameNumber() >= b) break;
                if(a.IsNested()) break;
                a.CheckForResult()
            }
        }
        GetFrameRangeResultSum(b, a) {
            if(a <= b) return NaN;
            let d = 0;
            for(const c of this._buffer) {
                if(c.GetFrameNumber() >= a) break;
                if(!(c.GetFrameNumber() < b))
                    if(c.HasResult()) d += c.GetResult();
                    else return NaN
            }
            return d
        }
        DeleteAllBeforeFrameNumber(b) {
            for(let a = 0, d = this._buffer.length; a < d; ++a) {
                const c = this._buffer[a];
                if(c.GetFrameNumber() < b) c.Release();
                else {
                    0 < a && this._buffer.splice(0, a);
                    break
                }
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec4,
        d = b.mat4,
        c = {
            powerPreference: "default",
            enableGpuProfiling: !0,
            alpha: !1,
            lowLatency: !1,
            depth: !1,
            maxWebGLVersion: 2
        },
        f = new Set(["default", "low-power", "high-performance"]),
        h = new e.Quad(0, 0, 1, 0, 1, 1, 0, 1),
        g = d.create(),
        k = d.create(),
        m = new e.Quad,
        p = new e.Rect;
    let x = null;
    e.isDebug && (self.debug_lose_context = function() {
        x ? x.loseContext() : console.warn("WEBGL_lose_context not supported")
    }, self.debug_restore_context = function() {
        x ? x.restoreContext() : console.warn("WEBGL_lose_context not supported")
    });
    const t = new Set;
    let q = -1;

    function r() {
        q = -1;
        for(const v of t) v.checkFunc() && (v.resolve(), t.delete(v));
        0 < t.size && (q = self.requestAnimationFrame(r))
    }

    function y(v, u, A) {
        if(2 <= A && (A = v.getContext("webgl2", u))) return {
            gl: A,
            version: 2
        };
        A = v.getContext("webgl", u);
        return {
            gl: A,
            version: 1
        }
    }
    e.Gfx.WebGLRenderer = class extends e.Gfx.RendererBase {
        constructor(v, u) {
            super();
            u = Object.assign({}, c, u);
            if(!f.has(u.powerPreference)) throw Error("invalid power preference");
            let A = !1;
            const z = {
                alpha: !!u.alpha,
                depth: !1,
                antialias: !1,
                powerPreference: u.powerPreference,
                failIfMajorPerformanceCaveat: !0
            };
            u.lowLatency && (z.desynchronized = !0, z.preserveDrawingBuffer = !0);
            let C = y(v, z, u.maxWebGLVersion);
            C.gl || (A = !0, z.failIfMajorPerformanceCaveat = !1, C = y(v, z, u.maxWebGLVersion));
            if(!C.gl) throw Error("failed to initialise WebGL context");
            this._gl = v = C.gl;
            this._attribs = v.getContextAttributes();
            u.lowLatency && !this._attribs.desynchronized && console.info("[WebGLRenderer] Low-latency mode specified but is not supported here");
            this._versionString = v.getParameter(v.VERSION);
            this._version =
                C.version;
            this._viewport = a.create();
            this._bbProjectionMatrix = d.create();
            this._isDepthEnabled = this._usesDepthBuffer = !!u.depth;
            this._depthBuffer = null;
            this._isAutoSizeDepthBuffer = !0;
            this._depthBufferHeight = this._depthBufferWidth = 0;
            this._pointBuffer = this._indexBuffer = this._texcoordBuffer = this._vertexBuffer = null;
            this._vertexData = new Float32Array(8E3 * this.GetNumVertexComponents());
            this._indexData = new Uint16Array(12E3);
            this._texcoordData = new Float32Array(16E3);
            this._pointData = new Float32Array(32E3);
            this._lastVertexPtr =
                this._pointPtr = this._texPtr = this._vertexPtr = 0;
            this._spDeviceTransformTextureFill = this._lastProgram = null;
            this._batch = [];
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = null;
            this._lastPointZ = 0;
            this._batchState = e.New(e.Gfx.BatchState, this);
            this._lastColor = e.New(e.Color, 1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._lastDestBlend = this._lastSrcBlend = 0;
            this._isScissorViewport = !1;
            this._viewportScissorHeight = this._viewportScissorWidth = -1;
            this._lastPointTexCoords = new e.Rect;
            this._maxTextureSize = -1;
            this._highpPrecision = this._maxPointSize = this._minPointSize = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._extensions = [];
            this._hasMajorPerformanceCaveat = A;
            this._isInitialisingAfterContextRestored = !1;
            this._anisotropicExt = this._parallelShaderCompileExt = null;
            this._maxAnisotropy = 0;
            this._isGpuProfilingEnabled = !!u.enableGpuProfiling;
            this._timerExt = null;
            this._allQueryResultBuffers = new Set;
            this._timeQueryStack = [];
            this.FillIndexBufferData(this._indexData)
        }
        IsWebGL() {
            return !0
        }
        async InitState() {
            super.InitState();
            var v = this._gl,
                u = this.GetNumVertexComponents();
            this._lastColor.setRgba(1, 1, 1, 1);
            this._lastTexture1 = this._lastTexture0 = null;
            this._pointPtr = this._vertexPtr = 0;
            this._lastVertexPtr = 8E3 * u - 4 * u;
            e.clearArray(this._batch);
            this._topOfBatch = this._batchPtr = 0;
            this._currentRenderTarget = this._lastProgram = null;
            this._lastPointTexCoords.set(0, 0, 1, 1);
            this._lastPointZ = 0;
            u = this._batchState;
            u.currentShader = null;
            u.currentFramebuffer = null;
            a.set(u.currentColor, 1, 1, 1, 1);
            u.clearColor.setRgba(0, 0, 0, 0);
            u.pointTexCoords.set(0,
                0, 1, 1);
            v.clearColor(0, 0, 0, 0);
            v.clear(v.COLOR_BUFFER_BIT);
            v.enable(v.BLEND);
            v.blendFunc(v.ONE, v.ONE_MINUS_SRC_ALPHA);
            this._lastSrcBlend = v.ONE;
            this._lastDestBlend = v.ONE_MINUS_SRC_ALPHA;
            this._InitBlendModes(v);
            v.disable(v.CULL_FACE);
            v.disable(v.STENCIL_TEST);
            v.disable(v.DITHER);
            this._usesDepthBuffer ? (v.enable(v.DEPTH_TEST), v.depthMask(!0), v.depthFunc(v.LEQUAL)) : (v.disable(v.DEPTH_TEST), v.depthMask(!1));
            this._isDepthEnabled = this._usesDepthBuffer;
            this._pointBuffer = v.createBuffer();
            v.bindBuffer(v.ARRAY_BUFFER,
                this._pointBuffer);
            v.bufferData(v.ARRAY_BUFFER, this._pointData.byteLength, v.DYNAMIC_DRAW);
            this._vertexBuffer = v.createBuffer();
            v.bindBuffer(v.ARRAY_BUFFER, this._vertexBuffer);
            v.bufferData(v.ARRAY_BUFFER, this._vertexData.byteLength, v.DYNAMIC_DRAW);
            this._texcoordBuffer = v.createBuffer();
            v.bindBuffer(v.ARRAY_BUFFER, this._texcoordBuffer);
            v.bufferData(v.ARRAY_BUFFER, this._texcoordData.byteLength, v.DYNAMIC_DRAW);
            this._indexBuffer = v.createBuffer();
            v.bindBuffer(v.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            v.bufferData(v.ELEMENT_ARRAY_BUFFER,
                this._indexData, v.STATIC_DRAW);
            v.activeTexture(v.TEXTURE0);
            v.bindTexture(v.TEXTURE_2D, null);
            this._maxTextureSize = v.getParameter(v.MAX_TEXTURE_SIZE);
            u = v.getParameter(v.ALIASED_POINT_SIZE_RANGE);
            this._minPointSize = u[0];
            this._maxPointSize = u[1];
            u = v.getShaderPrecisionFormat(v.VERTEX_SHADER, v.HIGH_FLOAT);
            const A = v.getShaderPrecisionFormat(v.FRAGMENT_SHADER, v.HIGH_FLOAT);
            this._highpPrecision = u && A ? Math.min(u.precision, A.precision) : 0;
            2048 < this._maxPointSize && (this._maxPointSize = 2048);
            this._extensions = v.getSupportedExtensions();
            if(u = v.getExtension("WEBGL_debug_renderer_info")) this._unmaskedVendor = v.getParameter(u.UNMASKED_VENDOR_WEBGL), this._unmaskedRenderer = v.getParameter(u.UNMASKED_RENDERER_WEBGL);
            this._parallelShaderCompileExt = v.getExtension("KHR_parallel_shader_compile");
            e.isDebug && (x = v.getExtension("WEBGL_lose_context"));
            if(this._isGpuProfilingEnabled)
                if(1 === this.GetWebGLVersionNumber()) {
                    if("Chromium" !== e.Platform.BrowserEngine || 81 <= e.Platform.BrowserVersionNumber || "undefined" !== typeof document) this._timerExt = v.getExtension("EXT_disjoint_timer_query")
                } else this._timerExt =
                    v.getExtension("EXT_disjoint_timer_query_webgl2") || v.getExtension("EXT_disjoint_timer_query");
            this._maxAnisotropy = (this._anisotropicExt = v.getExtension("EXT_texture_filter_anisotropic")) ? v.getParameter(this._anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            v = e.Gfx.WebGLShaderProgram;
            u = v.GetDefaultVertexShaderSource(!1);
            v = [
                [v.GetTextureFillFragmentShaderSource(), u, "<default>"],
                [v.GetTextureFillFragmentShaderSource(), u, "<default-device-transform>"],
                [v.GetPointFragmentShaderSource(), v.GetPointVertexShaderSource(),
                    "<point>"
                ],
                [v.GetColorFillFragmentShaderSource(), u, "<fill>"],
                [v.GetLinearGradientFillFragmentShaderSource(), u, "<lineargradient>"],
                [v.GetHardEllipseFillFragmentShaderSource(), u, "<hardellipse>"],
                [v.GetHardEllipseOutlineFragmentShaderSource(), u, "<hardellipseoutline>"],
                [v.GetSmoothEllipseFillFragmentShaderSource(), u, "<smoothellipse>"],
                [v.GetSmoothEllipseOutlineFragmentShaderSource(), u, "<smoothellipseoutline>"],
                [v.GetSmoothLineFillFragmentShaderSource(), u, "<smoothline>"],
                [v.GetTilemapFragmentShaderSource(),
                    v.GetDefaultVertexShaderSource(!0), "<tilemap>"
                ]
            ];
            v = await Promise.all(v.map(z => this.CreateShaderProgram({
                src: z[0]
            }, z[1], z[2])));
            this._spTextureFill = v[0];
            this._spDeviceTransformTextureFill = v[1];
            this._spPoints = v[2];
            this._spColorFill = v[3];
            this._spLinearGradientFill = v[4];
            this._spHardEllipseFill = v[5];
            this._spHardEllipseOutline = v[6];
            this._spSmoothEllipseFill = v[7];
            this._spSmoothEllipseOutline = v[8];
            this._spSmoothLineFill = v[9];
            this._spTilemapFill = v[10];
            this.SetTextureFillMode()
        }
        async CreateShaderProgram(v,
            u, A) {
            v = await e.Gfx.WebGLShaderProgram.Create(this, v, u, A);
            this._AddShaderProgram(v);
            return v
        }
        ResetLastProgram() {
            this._lastProgram = null
        }
        SetSize(v, u, A) {
            if(this._width !== v || this._height !== u || A) {
                this.EndBatch();
                A = this._gl;
                var z = this._batchState;
                this._width = v;
                this._height = u;
                v = this.GetScissoredViewportWidth();
                u = this.GetScissoredViewportHeight();
                this._SetViewport(0, 0, v, u);
                this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, v / u);
                this.SetProjectionMatrix(this._bbProjectionMatrix);
                this._spDeviceTransformTextureFill &&
                    (A.useProgram(this._spDeviceTransformTextureFill.GetShaderProgram()), this._spDeviceTransformTextureFill._UpdateDeviceTransformUniforms(this._matP), this._lastProgram = this._spDeviceTransformTextureFill, this._batchState.currentShader = this._spDeviceTransformTextureFill);
                A.bindTexture(A.TEXTURE_2D, null);
                A.activeTexture(A.TEXTURE1);
                A.bindTexture(A.TEXTURE_2D, null);
                A.activeTexture(A.TEXTURE0);
                this._lastTexture1 = this._lastTexture0 = null;
                this._usesDepthBuffer && this._isAutoSizeDepthBuffer && this._SetDepthBufferSize(this._width,
                    this._height);
                this._currentRenderTarget && this._currentRenderTarget._Resize(this._width, this._height);
                A.bindFramebuffer(A.FRAMEBUFFER, null);
                this._currentRenderTarget = null;
                z.currentFramebuffer = null
            }
        }
        _SetDepthBufferSize(v, u) {
            const A = this._gl;
            if(this._depthBuffer) {
                if(this._depthBufferWidth === v && this._depthBufferHeight === u) return;
                A.deleteRenderbuffer(this._depthBuffer)
            }
            this._depthBuffer = A.createRenderbuffer();
            A.bindRenderbuffer(A.RENDERBUFFER, this._depthBuffer);
            A.renderbufferStorage(A.RENDERBUFFER, 2 <=
                this._version ? A.DEPTH_COMPONENT24 : A.DEPTH_COMPONENT16, v, u);
            A.bindRenderbuffer(A.RENDERBUFFER, null);
            this._depthBufferWidth = v;
            this._depthBufferHeight = u
        }
        SetFixedSizeDepthBuffer(v, u) {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !1, this._SetDepthBufferSize(v, u))
        }
        SetAutoSizeDepthBuffer() {
            this._usesDepthBuffer && (this._isAutoSizeDepthBuffer = !0, this._SetDepthBufferSize(this._width, this._height))
        }
        SetViewportScissor(v, u) {
            const A = this._gl;
            if(this._width === v && this._height === u) this._isScissorViewport && (this.EndBatch(),
                A.disable(A.SCISSOR_TEST), this._isScissorViewport = !1, this._viewportScissorHeight = this._viewportScissorWidth = -1, this.SetSize(this._width, this._height, !0));
            else if(this._isScissorViewport || (this.EndBatch(), A.enable(A.SCISSOR_TEST), this._isScissorViewport = !0), this._viewportScissorWidth !== v || this._viewportScissorHeight !== u) this.EndBatch(), A.scissor(0, 0, v, u), this._viewportScissorWidth = v, this._viewportScissorHeight = u, this.SetSize(this._width, this._height, !0)
        }
        RemoveViewportScissor() {
            const v = this._gl;
            this._isScissorViewport &&
                (this.EndBatch(), v.disable(v.SCISSOR_TEST), this._isScissorViewport = !1);
            this._viewportScissorHeight = this._viewportScissorWidth = -1
        }
        GetScissoredViewportWidth() {
            return this._isScissorViewport ? this._viewportScissorWidth : this.GetWidth()
        }
        GetScissoredViewportHeight() {
            return this._isScissorViewport ? this._viewportScissorHeight : this.GetHeight()
        }
        _SetViewport(v, u, A, z) {
            const C = this._viewport;
            if(C[0] !== v || C[1] !== u || C[2] !== A || C[3] !== z) this.PushBatch().InitSetViewport(v, u, A, z), a.set(C, v, u, A, z), this._topOfBatch = 0
        }
        SetProjectionMatrix(v) {
            d.exactEquals(this._matP,
                v) || (this.PushBatch().InitSetProjection(v), d.copy(this._matP, v), this._topOfBatch = 0)
        }
        SetDefaultRenderTargetProjectionState() {
            let v, u;
            var A = this._currentRenderTarget;
            null === A || A.IsDefaultSize() && this._isScissorViewport ? (v = this._bbProjectionMatrix, u = this.GetScissoredViewportWidth(), A = this.GetScissoredViewportHeight()) : (v = A.GetProjectionMatrix(), u = A.GetWidth(), A = A.GetHeight());
            this.SetProjectionMatrix(v);
            this._SetViewport(0, 0, u, A)
        }
        SetModelViewMatrix(v) {
            d.exactEquals(this._matMV, v) || (this.PushBatch().InitSetModelView(v),
                d.copy(this._matMV, v), this._topOfBatch = 0)
        }
        GetBatchState() {
            return this._batchState
        }
        PushBatch() {
            const v = this._batch;
            this._batchPtr === v.length && v.push(new e.Gfx.WebGLBatchJob(this._batchState));
            return v[this._batchPtr++]
        }
        EndBatch() {
            0 === this._batchPtr || this.IsContextLost() || (this._WriteBuffers(), this._ExecuteBatch(), this._topOfBatch = this._pointPtr = this._texPtr = this._vertexPtr = this._batchPtr = 0)
        }
        _WriteBuffers() {
            const v = this._gl;
            0 < this._pointPtr && (v.bindBuffer(v.ARRAY_BUFFER, this._pointBuffer), v.bufferSubData(v.ARRAY_BUFFER,
                0, this._pointData.subarray(0, this._pointPtr)));
            0 < this._vertexPtr && (v.bindBuffer(v.ARRAY_BUFFER, this._vertexBuffer), v.bufferSubData(v.ARRAY_BUFFER, 0, this._vertexData.subarray(0, this._vertexPtr)), v.bindBuffer(v.ARRAY_BUFFER, this._texcoordBuffer), v.bufferSubData(v.ARRAY_BUFFER, 0, this._texcoordData.subarray(0, this._texPtr)))
        }
        _ExecuteBatch() {
            const v = this._batch;
            for(let u = 0, A = this._batchPtr; u < A; ++u) v[u].Run()
        }
        GetOpacity() {
            return this._lastColor.getA()
        }
        SetColorRgba(v, u, A, z) {
            const C = this._lastColor;
            C.equalsRgba(v,
                u, A, z) || (C.setRgba(v, u, A, z), this.PushBatch().InitSetColor(C), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetOpacity(v) {
            const u = this._lastColor;
            u.getA() !== v && (u.setA(v), this.PushBatch().InitSetColor(u), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetColor(v) {
            const u = this._lastColor;
            u.equals(v) || (u.set(v), this.PushBatch().InitSetColor(u), this._topOfBatch = 0, this._currentStateGroup = null)
        }
        ResetColor() {
            this.SetColorRgba(1, 1, 1, 1)
        }
        GetColor() {
            return this._lastColor
        }
        SetTexture(v) {
            v !== this._lastTexture0 &&
                (this.PushBatch().InitSetTexture(v), this._lastTexture0 = v, this._topOfBatch = 0)
        }
        _ResetLastTexture() {
            this._lastTexture0 = null
        }
        SetBlendMode(v) {
            v = this._GetBlendByIndex(v);
            this._SetBlend(v[0], v[1])
        }
        SetNamedBlendMode(v) {
            v = this.GetNamedBlend(v);
            this._SetBlend(v.srcBlend, v.destBlend)
        }
        _SetBlend(v, u) {
            if(v !== this._lastSrcBlend || u !== this._lastDestBlend) this.PushBatch().InitSetBlend(v, u), this._lastSrcBlend = v, this._lastDestBlend = u, this._topOfBatch = 0, this._currentStateGroup = null
        }
        IsPremultipliedAlphaBlend() {
            return this._lastSrcBlend ===
                this._gl.ONE && this._lastDestBlend === this._gl.ONE_MINUS_SRC_ALPHA
        }
        SetAlphaBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetNoPremultiplyAlphaBlend() {
            this._SetBlend(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetCopyBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ZERO)
        }
        Rect(v) {
            this.Rect2(v.getLeft(), v.getTop(), v.getRight(), v.getBottom())
        }
        Rect2(v, u, A, z) {
            this.Quad2(v, u, A, u, A, z, v, z)
        }
        _ExtendQuadBatch() {
            let v = this._vertexPtr;
            v >= this._lastVertexPtr && (this.EndBatch(), v = 0);
            1 === this._topOfBatch ?
                this._batch[this._batchPtr - 1]._indexCount += 6 : (this.PushBatch().InitQuad(v, 6), this._topOfBatch = 1)
        }
        _WriteQuadToVertexBuffer(v) {
            v.writeToTypedArray3D(this._vertexData, this._vertexPtr, this._baseZ + this._currentZ);
            this._vertexPtr += 12
        }
        Quad(v) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(v);
            h.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad2(v, u, A, z, C, E, J, F) {
            this._ExtendQuadBatch();
            const H = this._vertexData;
            let K = this._vertexPtr;
            const N = this._baseZ + this._currentZ;
            H[K++] = v;
            H[K++] =
                u;
            H[K++] = N;
            H[K++] = A;
            H[K++] = z;
            H[K++] = N;
            H[K++] = C;
            H[K++] = E;
            H[K++] = N;
            H[K++] = J;
            H[K++] = F;
            H[K++] = N;
            this._vertexPtr = K;
            h.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3(v, u) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(v);
            u.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad4(v, u) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(v);
            u.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D(v, u, A, z, C, E, J, F, H, K, N, S, V) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let X = this._vertexPtr;
            const ia = this._baseZ + this._currentZ;
            U[X++] = v;
            U[X++] = u;
            U[X++] = ia + A;
            U[X++] = z;
            U[X++] = C;
            U[X++] = ia + E;
            U[X++] = J;
            U[X++] = F;
            U[X++] = ia + H;
            U[X++] = K;
            U[X++] = N;
            U[X++] = ia + S;
            this._vertexPtr = X;
            V.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D2(v, u, A, z, C, E, J, F, H, K, N, S, V) {
            this._ExtendQuadBatch();
            const U = this._vertexData;
            let X = this._vertexPtr;
            const ia = this._baseZ + this._currentZ;
            U[X++] = v;
            U[X++] = u;
            U[X++] = ia + A;
            U[X++] = z;
            U[X++] = C;
            U[X++] = ia + E;
            U[X++] =
                J;
            U[X++] = F;
            U[X++] = ia + H;
            U[X++] = K;
            U[X++] = N;
            U[X++] = ia + S;
            this._vertexPtr = X;
            V.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        FullscreenQuad(v, u) {
            d.copy(g, this._matP);
            d.copy(k, this._matMV);
            this.SetDefaultRenderTargetProjectionState();
            if(this._isScissorViewport) {
                v = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0);
                this.SetModelViewMatrix(v);
                v = this._viewportScissorWidth / 2;
                var A = this._viewportScissorHeight / 2;
                p.set(-v, A, -v + this._viewportScissorWidth,
                    A - this._viewportScissorHeight);
                m.setFromRect(p);
                p.set(0, 0, this._viewportScissorWidth / this._width, this._viewportScissorHeight / this._height);
                this.Quad3(m, p)
            } else {
                const [E, J] = this.GetRenderTargetSize(this._currentRenderTarget);
                A = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ() * self.devicePixelRatio, 0, 0, 0, J);
                this.SetModelViewMatrix(A);
                if("crop" === v && this._currentRenderTarget && u) {
                    v = this._width / 2;
                    A = this._height / 2;
                    const F = u.GetWidth();
                    u = u.GetHeight();
                    var z = this._currentRenderTarget.GetWidth(),
                        C = this._currentRenderTarget.GetHeight();
                    z = Math.min(z, F);
                    const H = Math.min(C, u),
                        K = Math.max(u - C, 0);
                    C = Math.max(C - u, 0);
                    p.set(-v, A - C, -v + z, A - H - C);
                    m.setFromRect(p);
                    p.set(0, K, z, H + K);
                    p.divide(F, u);
                    this.Quad3(m, p)
                } else v = E / 2, A = J / 2, this.Rect2(-v, A, v, -A)
            }
            this.SetProjectionMatrix(g);
            this.SetModelViewMatrix(k)
        }
        StartRenderingPoints(v) {
            this._lastPointTexCoords.equals(v) || (this._lastPointTexCoords.copy(v), this.PushBatch().InitSetPointTexCoords(v), this._topOfBatch = 0)
        }
        FinishRenderingPoints() {}
        Point(v, u, A, z) {
            7996 <= this._pointPtr &&
                this.EndBatch();
            let C = this._pointPtr;
            var E = this._baseZ + this._currentZ;
            2 === this._topOfBatch && this._lastPointZ === E ? this._batch[this._batchPtr - 1]._indexCount++ : (this.PushBatch().InitPoints(C, E), this._topOfBatch = 2, this._lastPointZ = E);
            E = this._pointData;
            E[C++] = v;
            E[C++] = u;
            E[C++] = A;
            E[C++] = z;
            this._pointPtr = C
        }
        SetProgram(v) {
            this._lastProgram !== v && (this.PushBatch().InitSetProgram(v), this._lastProgram = v, this._topOfBatch = 0, this._currentStateGroup = null)
        }
        SetDeviceTransformTextureFillMode() {
            this.SetProgram(this._spDeviceTransformTextureFill)
        }
        SetGradientColor(v) {
            this.PushBatch().InitSetGradientColor(v);
            this._topOfBatch = 0
        }
        SetEllipseParams(v, u, A = 1) {
            this.PushBatch().InitSetEllipseParams(v, u, A);
            this._topOfBatch = 0
        }
        SetTilemapInfo(v, u, A, z, C, E, J) {
            if(this._lastProgram !== this._spTilemapFill) throw Error("must set tilemap fill mode first");
            this.PushBatch().InitSetTilemapInfo(v, u, A, z, C, E, J);
            this._topOfBatch = 0
        }
        SetProgramParameters(v, u, A, z, C, E, J, F, H, K, N) {
            const S = this._lastProgram;
            var V = S._hasAnyOptionalUniforms;
            const U = !!N.length;
            if(V && !S.AreOptionalUniformsAlreadySetInBatch(u, A, z, C, E, J, F, H, K) || U && !S.AreCustomParametersAlreadySetInBatch(N)) {
                var X =
                    this.PushBatch();
                X.InitSetProgramParameters();
                V && (S.SetOptionalUniformsInBatch(u, A, z, C, E, J, F, H, K), V = X._mat4param, V[0] = E, V[1] = J, u.writeToTypedArray(V, 2), V[6] = F, V[7] = H, A.writeToTypedArray(V, 12), u = X._colorParam, C.writeToTypedArray(u, 0), C = u[1], u[1] = u[3], u[3] = C, z.writeToTypedArray(X._srcOriginRect, 0), X._startIndex = K, S._uSamplerBack.IsUsed() ? X._texParam = v ? v.GetTexture() : null : X._texParam = null);
                U && (S.SetCustomParametersInBatch(N), e.shallowAssignArray(X._shaderParams, N));
                this._topOfBatch = 0
            }
        }
        ClearRgba(v, u,
            A, z) {
            this.PushBatch().InitClearSurface2(v, u, A, z);
            this._topOfBatch = 0
        }
        Clear(v) {
            this.PushBatch().InitClearSurface(v);
            this._topOfBatch = 0
        }
        ClearRect(v, u, A, z) {
            this.ClearRect4(v, u, A, z, 0, 0, 0, 0)
        }
        ClearRect2(v) {
            this.ClearRect4(v.getLeft(), v.getTop(), v.width(), v.height(), 0, 0, 0, 0)
        }
        ClearRect3(v, u) {
            this.ClearRect4(v.getLeft(), v.getTop(), v.width(), v.height(), u.getR(), u.getG(), u.getB(), u.getA())
        }
        ClearRect4(v, u, A, z, C, E, J, F) {
            0 > A || 0 > z || (this.PushBatch().InitClearRect(v, u, A, z, C, E, J, F), this._topOfBatch = 0)
        }
        Start() {}
        Finish() {
            super.Finish();
            this._gl.flush()
        }
        ClearDepth() {
            this._usesDepthBuffer && this._currentRenderTarget && this._currentRenderTarget.HasDepthBuffer() && (this.PushBatch().InitClearDepth(), this._topOfBatch = 0)
        }
        SetDepthEnabled(v) {
            v = !!v;
            this._isDepthEnabled !== v && this._usesDepthBuffer && (this._isDepthEnabled = v, this.PushBatch().InitSetDepthEnabled(v), this._topOfBatch = 0)
        }
        _GetDepthBuffer() {
            return this._depthBuffer
        }
        CheckForQueryResults() {
            for(const v of this._allQueryResultBuffers) v.CheckForResults(this._frameNumber)
        }
        IsContextLost() {
            return !this._gl ||
                this._gl.isContextLost() || this._isInitialisingAfterContextRestored
        }
        OnContextLost() {
            super.OnDeviceOrContextLost();
            e.Gfx.WebGLRendererTexture.OnContextLost();
            e.Gfx.WebGLRenderTarget.OnContextLost();
            e.Gfx.RendererText.OnContextLost();
            for(const v of this._allQueryResultBuffers) v.Clear();
            this._extensions = [];
            this._anisotropicExt = this._parallelShaderCompileExt = this._timerExt = null;
            this._maxAnisotropy = 0;
            this._unmaskedRenderer = this._unmaskedVendor = "(unavailable)";
            this._depthBuffer = this._spDeviceTransformTextureFill =
                this._lastProgram = null;
            for(const v of this._stateGroups.values()) v.OnContextLost()
        }
        async OnContextRestored() {
            this._isInitialisingAfterContextRestored = !0;
            await this.InitState();
            this._isInitialisingAfterContextRestored = !1;
            for(const v of this._stateGroups.values()) v.OnContextRestored(this);
            this.SetSize(this._width, this._height, !0)
        }
        CreateStaticTexture(v, u) {
            if(this.IsContextLost()) throw Error("context lost");
            this.EndBatch();
            const A = e.New(e.Gfx.WebGLRendererTexture, this);
            A._CreateStatic(v, u);
            return A
        }
        CreateStaticTextureAsync(v,
            u) {
            if(this.IsContextLost()) return Promise.reject("context lost");
            u = Object.assign({}, u);
            const A = u.wrapX && "clamp-to-edge" !== u.wrapX || u.wrapY && "clamp-to-edge" !== u.wrapY;
            if(!e.Supports.ImageBitmapOptions || !this.SupportsNPOTTextures() && A) return e.Supports.ImageBitmap ? createImageBitmap(v).then(z => e.Asyncify(() => this.CreateStaticTexture(z, u))) : v instanceof Blob ? e.BlobToImage(v, !0).then(z => this.CreateStaticTextureAsync(z, u)) : "undefined" !== typeof HTMLImageElement && v instanceof HTMLImageElement && "function" ===
                typeof v.decode ? v.decode().then(() => e.Asyncify(() => this.CreateStaticTexture(v, u))) : e.Asyncify(() => this.CreateStaticTexture(v, u));
            u.premultiplyAlpha = !1;
            return createImageBitmap(v, {
                premultiplyAlpha: "premultiply"
            }).then(z => e.Asyncify(() => this.CreateStaticTexture(z, u)))
        }
        CreateDynamicTexture(v, u, A) {
            this.EndBatch();
            const z = e.New(e.Gfx.WebGLRendererTexture, this);
            z._CreateDynamic(v, u, A);
            return z
        }
        UpdateTexture(v, u, A) {
            this.EndBatch();
            u._Update(v, A)
        }
        DeleteTexture(v) {
            v && (v.SubtractReference(), 0 < v.GetReferenceCount() ||
                (this.EndBatch(), v === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null), v === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null), v._Delete()))
        }
        CreateRenderTarget(v) {
            let u = this._width,
                A = this._height,
                z = !0;
            v && ("number" === typeof v.width && (u = v.width, z = !1), "number" === typeof v.height && (A = v.height, z = !1));
            if(0 >= u || 0 >= A) throw Error("invalid size");
            this.EndBatch();
            const C = e.New(e.Gfx.WebGLRenderTarget, this);
            C._Create(u, A, Object.assign({
                isDefaultSize: z
            }, v));
            this._currentRenderTarget = null;
            this._batchState.currentFramebuffer = null;
            return C
        }
        SetRenderTarget(v) {
            v !== this._currentRenderTarget && (v && v.IsDefaultSize() && v._Resize(this._width, this._height), this.PushBatch().InitSetRenderTarget(v), this._currentRenderTarget = v, this._topOfBatch = 0, this.SetDefaultRenderTargetProjectionState())
        }
        GetRenderTarget() {
            return this._currentRenderTarget
        }
        GetRenderTargetSize(v) {
            return v ? [v.GetWidth(), v.GetHeight()] : [this._width, this._height]
        }
        CopyRenderTarget(v, u = "stretch") {
            2 > this._version || this._currentRenderTarget && 0 < this._currentRenderTarget.GetMultisampling() ? (this.SetCopyBlend(), this.ResetColor(), this.DrawRenderTarget(v, u)) : (this.PushBatch().InitBlitFramebuffer(v, this._currentRenderTarget, u), this._topOfBatch = 0)
        }
        DrawRenderTarget(v, u = "stretch") {
            v = v.GetTexture();
            if(!v) throw Error("not a texture-backed render target");
            this.SetTexture(v);
            this.FullscreenQuad(u, v)
        }
        InvalidateRenderTarget(v) {
            2 >
                this._version || (this.PushBatch().InitInvalidateFramebuffer(v._GetFramebuffer()), this._topOfBatch = 0)
        }
        DeleteRenderTarget(v) {
            this.SetRenderTarget(null);
            this.EndBatch();
            const u = v.GetTexture();
            u === this._lastTexture0 && (this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._lastTexture0 = null);
            u === this._lastTexture1 && (this._gl.activeTexture(this._gl.TEXTURE1), this._gl.bindTexture(this._gl.TEXTURE_2D, null), this._gl.activeTexture(this._gl.TEXTURE0), this._lastTexture1 = null);
            v._Delete()
        }
        async ReadBackRenderTargetToImageData(v,
            u, A) {
            this.EndBatch();
            const z = this._currentRenderTarget;
            if(v) {
                var C = v.GetWidth();
                var E = v.GetHeight();
                var J = v._GetFramebuffer()
            } else C = this.GetWidth(), E = this.GetHeight(), J = null;
            let F = v = 0;
            var H = C,
                K = E;
            A && (v = e.clamp(Math.floor(A.getLeft()), 0, C - 1), F = e.clamp(Math.floor(A.getTop()), 0, E - 1), H = A.width(), H = 0 === H ? C - v : e.clamp(Math.floor(H), 0, C - v), K = A.height(), K = 0 === K ? E - F : e.clamp(Math.floor(K), 0, E - F), F = E - (F + K));
            const N = this._gl;
            N.bindFramebuffer(N.FRAMEBUFFER, J);
            E = () => {
                N.bindFramebuffer(N.FRAMEBUFFER, null);
                this._currentRenderTarget =
                    null;
                this._batchState.currentFramebuffer = null;
                this.SetRenderTarget(z)
            };
            if(!u && 2 <= this.GetWebGLVersionNumber()) {
                N.bindFramebuffer(N.READ_FRAMEBUFFER, J);
                J = N.createBuffer();
                A = H * K * 4;
                C = N.PIXEL_PACK_BUFFER;
                N.bindBuffer(C, J);
                N.bufferData(C, A, N.STREAM_READ);
                N.readPixels(v, F, H, K, N.RGBA, N.UNSIGNED_BYTE, 0);
                N.bindFramebuffer(N.READ_FRAMEBUFFER, null);
                N.bindBuffer(C, null);
                E();
                const S = N.fenceSync(N.SYNC_GPU_COMMANDS_COMPLETE, 0);
                await this._WaitForObjectReady(() => N.getSyncParameter(S, N.SYNC_STATUS) === N.SIGNALED);
                N.deleteSync(S);
                u = new ImageData(H, K);
                N.bindBuffer(C, J);
                N.getBufferSubData(C, 0, new Uint8Array(u.data.buffer), 0, A);
                N.bindBuffer(C, null);
                N.deleteBuffer(J)
            } else u = new ImageData(H, K), N.readPixels(v, F, H, K, N.RGBA, N.UNSIGNED_BYTE, new Uint8Array(u.data.buffer)), E();
            return u
        }
        StartQuery(v) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitStartQuery(v), this._topOfBatch = 0)
        }
        EndQuery(v) {
            this.SupportsGPUProfiling() && (this.PushBatch().InitEndQuery(v), this._topOfBatch = 0)
        }
        _WaitForObjectReady(v) {
            const u = new Promise(A =>
                t.add({
                    resolve: A,
                    checkFunc: v
                })); - 1 === q && (q = self.requestAnimationFrame(r));
            return u
        }
        IsDesynchronized() {
            return !!this._attribs.desynchronized
        }
        GetEstimatedBackBufferMemoryUsage() {
            return this._width * this._height * (this._attribs.alpha ? 4 : 3)
        }
        GetEstimatedRenderBufferMemoryUsage() {
            let v = 0;
            for(const u of e.Gfx.WebGLRenderTarget.allRenderTargets()) u.GetTexture() || (v += u.GetEstimatedMemoryUsage());
            return v
        }
        GetEstimatedTextureMemoryUsage() {
            let v = 0;
            for(const u of e.Gfx.WebGLRendererTexture.allTextures()) v += u.GetEstimatedMemoryUsage();
            return v
        }
        GetEstimatedTotalMemoryUsage() {
            return this.GetEstimatedBackBufferMemoryUsage() + this.GetEstimatedRenderBufferMemoryUsage() + this.GetEstimatedTextureMemoryUsage()
        }
        GetWebGLVersionString() {
            return this._versionString
        }
        GetWebGLVersionNumber() {
            return this._version
        }
        GetDisplayName() {
            return "webgl" + this.GetWebGLVersionNumber()
        }
        SupportsNPOTTextures() {
            return 2 <= this.GetWebGLVersionNumber()
        }
        GetMaxTextureSize() {
            return this._maxTextureSize
        }
        GetMinPointSize() {
            return this._minPointSize
        }
        GetMaxPointSize() {
            return this._maxPointSize
        }
        SupportsHighP() {
            return 0 !==
                this._highpPrecision
        }
        GetHighPPrecision() {
            return this._highpPrecision
        }
        GetUnmaskedVendor() {
            return this._unmaskedVendor
        }
        GetUnmaskedRenderer() {
            return this._unmaskedRenderer
        }
        GetExtensions() {
            return this._extensions
        }
        HasMajorPerformanceCaveat() {
            return this._hasMajorPerformanceCaveat
        }
        SupportsGPUProfiling() {
            return !!this._timerExt
        }
        _GetDisjointTimerQueryExtension() {
            return this._timerExt
        }
        _GetParallelShaderCompileExtension() {
            return this._parallelShaderCompileExt
        }
        _GetAnisotropicExtension() {
            return this._anisotropicExt
        }
        _GetMaxAnisotropy() {
            return this._maxAnisotropy
        }
        _AddQueryResultBuffer(v) {
            this._allQueryResultBuffers.add(v)
        }
        _RemoveQueryResultBuffer(v) {
            this._allQueryResultBuffers.delete(v)
        }
        _GetTimeQueryStack() {
            return this._timeQueryStack
        }
        GetContext() {
            return this._gl
        }
        _InitBlendModes(v) {
            this._InitBlendModeData([
                ["normal",
                    v.ONE, v.ONE_MINUS_SRC_ALPHA
                ],
                ["additive", v.ONE, v.ONE],
                ["xor", v.ONE, v.ONE_MINUS_SRC_ALPHA],
                ["copy", v.ONE, v.ZERO],
                ["destination-over", v.ONE_MINUS_DST_ALPHA, v.ONE],
                ["source-in", v.DST_ALPHA, v.ZERO],
                ["destination-in", v.ZERO, v.SRC_ALPHA],
                ["source-out", v.ONE_MINUS_DST_ALPHA, v.ZERO],
                ["destination-out", v.ZERO, v.ONE_MINUS_SRC_ALPHA],
                ["source-atop", v.DST_ALPHA, v.ONE_MINUS_SRC_ALPHA],
                ["destination-atop", v.ONE_MINUS_DST_ALPHA, v.SRC_ALPHA]
            ])
        }
        CreateRendererText() {
            return e.New(e.Gfx.RendererText, this)
        }
        CreateWebGLText() {
            return this.CreateRendererText()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    let a = null;
    const d = new Set;

    function c(k, m) {
        const p = k[0] - m[0];
        return 0 !== p ? p : k[1] - m[1]
    }
    const f = [],
        h = [];
    let g = !1;
    self.IRuntime = class {
        constructor(k, m) {
            a = k;
            Object.defineProperties(this, {
                assets: {
                    value: a.GetAssetManager().GetIAssetManager(),
                    writable: !1
                },
                objects: {
                    value: m,
                    writable: !1
                },
                globalVars: {
                    value: {},
                    writable: !1
                },
                projectName: {
                    value: a.GetProjectName(),
                    writable: !1
                },
                projectVersion: {
                    value: a.GetProjectVersion(),
                    writable: !1
                },
                storage: {
                    value: new self.IStorage(a),
                    writable: !1
                },
                isInWorker: {
                    value: a.IsInWorker(),
                    writable: !1
                }
            });
            a.UserScriptDispatcher().addEventListener("keydown", p => {
                d.has(p.key) ? p.stopPropagation() : d.add(p.key)
            });
            a.UserScriptDispatcher().addEventListener("keyup", p => d.delete(p.key));
            a.Dispatcher().addEventListener("window-blur", () => d.clear());
            a.IsInWorker() && (self.alert = p => {
                g || (g = !0, console.warn("[Construct 3] alert() was called from a Web Worker, because the project 'Use worker' setting is enabled. This method is not normally available in a Web Worker. Construct has implemented the alert for you, but note that other features may be missing in worker mode. You may wish to disable 'Use worker', or use a more convenient function like console.log(). For more information please refer to the scripting section of the manual."));
                return this.alert(p)
            })
        }
        _InitGlobalVars(k) {
            Object.defineProperties(this.globalVars, k)
        }
        addEventListener(k, m) {
            a.UserScriptDispatcher().addEventListener(k, m)
        }
        removeEventListener(k, m) {
            a.UserScriptDispatcher().removeEventListener(k, m)
        }
        callFunction(k, ...m) {
            b.RequireString(k);
            const p = a.GetEventSheetManager(),
                x = p.GetFunctionBlockByName(k);
            if(!x) throw Error(`cannot find function name '${k}'`);
            if(!x.IsEnabled()) return x.GetDefaultReturnValue();
            if(m.length < x.GetFunctionParameterCount()) throw Error(`not enough function parameters passed for '${k}' (${m.length} passed, ${x.GetFunctionParameterCount()} expected)`);
            const t = x.GetEventBlock();
            k = null;
            var q = p.GetCurrentEvent();
            q && (q = q.GetSolModifiersIncludingParents(), 0 < q.length && (k = q, p.PushCleanSol(q)));
            m = t.RunAsExpressionFunctionCall(t.GetSolModifiersIncludingParents(), x.GetReturnType(), x.GetDefaultReturnValue(), ...m);
            k && p.PopSol(k);
            return m
        }
        setReturnValue(k) {
            const m = a.GetEventStack().GetCurrentExpFuncStackFrame();
            if(!m) throw Error("not in a function which returns a value");
            switch(m.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof k && m.SetFunctionReturnValue(k);
                    break;
                case 2:
                    "string" === typeof k && m.SetFunctionReturnValue(k);
                    break;
                case 3:
                    "number" !== typeof k && "string" !== typeof k || m.SetFunctionReturnValue(k)
            }
        }
        get dt() {
            return a.GetDt()
        }
        get gameTime() {
            return a.GetGameTime()
        }
        get wallTime() {
            return a.GetWallTime()
        }
        random() {
            return a.Random()
        }
        get layout() {
            return a.GetMainRunningLayout().GetILayout()
        }
        getLayout(k) {
            const m = a.GetLayoutManager();
            if("number" === typeof k || "string" === typeof k) k = m.GetLayout(k);
            else throw new TypeError("expected string or number");
            if(!k) throw Error("invalid layout");
            return k.GetILayout()
        }
        getAllLayouts() {
            return a.GetLayoutManager().GetAllLayouts().map(k => k.GetILayout())
        }
        goToLayout(k) {
            const m = a.GetLayoutManager();
            if("number" === typeof k || "string" === typeof k) k = m.GetLayout(k);
            else throw new TypeError("expected string or number");
            if(!k) throw Error("invalid layout");
            m.IsPendingChangeMainLayout() || m.ChangeMainLayout(k)
        }
        get keyboard() {
            const k = a._GetCommonScriptInterfaces().keyboard;
            if(!k) throw Error("runtime.keyboard used but Keyboard object missing - add it to your project first");
            return k
        }
        get mouse() {
            const k = a._GetCommonScriptInterfaces().mouse;
            if(!k) throw Error("runtime.mouse used but Mouse object missing - add it to your project first");
            return k
        }
        get touch() {
            const k = a._GetCommonScriptInterfaces().touch;
            if(!k) throw Error("runtime.touch used but Touch object missing - add it to your project first");
            return k
        }
        invokeDownload(k, m) {
            b.RequireString(k);
            b.RequireString(m);
            a.InvokeDownload(k, m)
        }
        getInstanceByUid(k) {
            b.RequireFiniteNumber(k);
            return (k = a.GetInstanceByUID(k)) ? k.GetInterfaceClass() :
                null
        }
        sortZOrder(k, m) {
            b.RequireFunction(m);
            const p = a.GetCurrentLayout();
            for(var x of k) {
                k = a._UnwrapIWorldInstance(x);
                var t = k.GetWorldInfo();
                f.push([t.GetLayer().GetIndex(), t.GetZIndex()]);
                h.push(k)
            }
            if(0 !== f.length) {
                f.sort(c);
                h.sort((q, r) => m(q.GetInterfaceClass(), r.GetInterfaceClass()));
                x = !1;
                for(let q = 0, r = f.length; q < r; ++q) {
                    k = h[q];
                    t = p.GetLayerByIndex(f[q][0]);
                    const y = f[q][1],
                        v = t._GetInstances();
                    v[y] !== k && (v[y] = k, k.GetWorldInfo()._SetLayer(t), t.SetZIndicesChanged(), x = !0)
                }
                x && a.UpdateRender();
                e.clearArray(f);
                e.clearArray(h)
            }
        }
        alert(k) {
            return a.PostComponentMessageToDOMAsync("runtime", "alert", {
                message: k + (a.IsInWorker() ? " [via Web Worker]" : "")
            })
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = null;
    self.IAssetManager = class {
        constructor(a) {
            b = a;
            Object.defineProperties(this, {
                isWebMOpusSupported: {
                    value: b.IsAudioFormatSupported("audio/webm; codecs=opus"),
                    writable: !1
                }
            })
        }
        fetchText(a) {
            return b.FetchText(a)
        }
        fetchJson(a) {
            return b.FetchJson(a)
        }
        fetchBlob(a) {
            return b.FetchBlob(a)
        }
        fetchArrayBuffer(a) {
            return b.FetchArrayBuffer(a)
        }
        getProjectFileUrl(a) {
            return b.GetProjectFileUrl(a)
        }
        getMediaFileUrl(a) {
            e.IsRelativeURL(a) && (a = a.toLowerCase());
            return b.GetMediaFileUrl(a, b.GetMediaSubfolder())
        }
        get mediaFolder() {
            return b.GetMediaSubfolder()
        }
        async decodeWebMOpus(a,
            d) {
            if(this.isWebMOpusSupported) throw Error("decodeWebMOpus(): not supported because WebM Opus is supported by the platform");
            d = await b.GetRuntime()._WasmDecodeWebMOpus(d);
            d = new Float32Array(d);
            a = a.createBuffer(1, d.length, 48E3);
            a.getChannelData(0).set(d);
            return a
        }
        loadScripts(...a) {
            return b.LoadScripts(...a)
        }
        compileWebAssembly(a) {
            return b.CompileWebAssembly(a)
        }
        loadStyleSheet(a) {
            return b.LoadStyleSheet(a)
        }
    }
} {
    "use strict";
    const e = self.C3X;
    self.IStorage = class {
        constructor(b) {
            this._storage = b._GetProjectStorage()
        }
        getItem(b) {
            e.RequireString(b);
            return this._storage.getItem(b)
        }
        setItem(b, a) {
            e.RequireString(b);
            return this._storage.setItem(b, a)
        }
        removeItem(b) {
            e.RequireString(b);
            return this._storage.removeItem(b)
        }
        clear() {
            return this._storage.clear()
        }
        keys() {
            return this._storage.keys()
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.IObjectClass = class {
        constructor(a) {
            b.set(this, a);
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                }
            });
            a.GetRuntime()._MapScriptInterface(this, a)
        }
        addEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        getAllInstances() {
            return b.get(this).GetInstances().map(a =>
                a.GetInterfaceClass())
        }
        getFirstInstance() {
            const a = b.get(this).GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }
        getPickedInstances() {
            return b.get(this).GetCurrentSol().GetInstances().map(a => a.GetInterfaceClass())
        }
        getFirstPickedInstance() {
            const a = b.get(this).GetCurrentSol().GetInstances();
            return 0 < a.length ? a[0].GetInterfaceClass() : null
        }* instances() {
            for(const a of b.get(this).GetInstances()) yield a.GetInterfaceClass()
        }* pickedInstances() {
            for(const a of b.get(this).GetCurrentSol().GetInstances()) yield a.GetInterfaceClass()
        }
        setInstanceClass(a) {
            e.RequireFunction(a);
            if(0 < b.get(this).GetInstanceCount()) throw Error("setInstanceClass() called too late, because instances have already been created - call in runOnStartup");
            b.get(this)._SetUserScriptInstanceClass(a)
        }
        createInstance(a, d, c, f) {
            e.RequireNumber(d);
            e.RequireNumber(c);
            if("number" !== typeof a && "string" !== typeof a) throw new TypeError("invalid layer parameter");
            const h = b.get(this),
                g = h.GetRuntime();
            a = g.GetMainRunningLayout().GetLayer(a);
            if(!a) throw Error("invalid layer");
            d = g.CreateInstance(h, a, d, c, f);
            f && a.SortAndAddSceneGraphInstancesByZIndex(d);
            f = g.GetEventSheetManager();
            f.BlockFlushingInstances(!0);
            d._TriggerOnCreatedOnSelfAndRelated();
            f.BlockFlushingInstances(!1);
            return d.GetInterfaceClass()
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.ILayout = class {
        constructor(a) {
            b.set(this, a);
            const d = [],
                c = a.GetEffectList(),
                f = c.GetAllEffectTypes().length;
            for(let h = 0; h < f; ++h) d.push(new self.IEffectInstance(c, h));
            Object.defineProperties(this, {
                name: {
                    value: a.GetName(),
                    writable: !1
                },
                index: {
                    value: a.GetIndex(),
                    writable: !1
                },
                effects: {
                    value: d,
                    writable: !1
                }
            })
        }
        addEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().addEventListener(a, d)
        }
        removeEventListener(a, d) {
            e.RequireString(a);
            e.RequireFunction(d);
            b.get(this).UserScriptDispatcher().removeEventListener(a, d)
        }
        get width() {
            return b.get(this).GetWidth()
        }
        set width(a) {
            b.get(this).SetWidth(a)
        }
        get height() {
            return b.get(this).GetHeight()
        }
        set height(a) {
            b.get(this).SetHeight(a)
        }
        set scale(a) {
            e.RequireFiniteNumber(a);
            b.get(this).SetScale(a)
        }
        get scale() {
            return b.get(this).GetScale()
        }
        set angle(a) {
            e.RequireFiniteNumber(a);
            b.get(this).SetAngle(a)
        }
        get angle() {
            return b.get(this).GetAngle()
        }
        set scrollX(a) {
            e.RequireNumber(a);
            b.get(this).SetScrollX(a)
        }
        get scrollX() {
            return b.get(this).GetScrollX()
        }
        set scrollY(a) {
            e.RequireNumber(a);
            b.get(this).SetScrollY(a)
        }
        get scrollY() {
            return b.get(this).GetScrollY()
        }
        scrollTo(a, d) {
            e.RequireNumber(a);
            e.RequireNumber(d);
            const c = b.get(this);
            c.SetScrollX(a);
            c.SetScrollY(d)
        }
        getLayer(a) {
            const d = b.get(this);
            if("number" === typeof a || "string" === typeof a) a = d.GetLayer(a);
            else throw new TypeError("expected string or number");
            return a ? a.GetILayer() : null
        }
        getAllLayers() {
            return b.get(this).GetLayers().map(a => a.GetILayer())
        }
        setVanishingPoint(a, d) {
            e.RequireFiniteNumber(a);
            e.RequireFiniteNumber(d);
            b.get(this).SetVanishingPointXY(a,
                d)
        }
        getVanishingPoint() {
            const a = b.get(this);
            return [a.GetVanishingPointX(), a.GetVanishingPointY()]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        c = new Map([...d.entries()].map(h => [h[1], h[0]])),
        f = e.New(e.Color);
    self.ILayer = class {
        constructor(h) {
            a.set(this, h);
            const g = [],
                k = h.GetEffectList(),
                m = k.GetAllEffectTypes().length;
            for(let p = 0; p < m; ++p) g.push(new self.IEffectInstance(k, p));
            Object.defineProperties(this, {
                name: {
                    value: h.GetName(),
                    writable: !1
                },
                index: {
                    value: h.GetIndex(),
                    writable: !1
                },
                layout: {
                    value: h.GetLayout().GetILayout(),
                    writable: !1
                },
                effects: {
                    value: g,
                    writable: !1
                }
            })
        }
        static _Unwrap(h) {
            return a.get(h)
        }
        get isVisible() {
            return a.get(this).IsVisible()
        }
        set isVisible(h) {
            a.get(this).SetVisible(h)
        }
        get opacity() {
            return a.get(this).GetOpacity()
        }
        set opacity(h) {
            h = e.clamp(+h, 0, 1);
            isNaN(h) || a.get(this).SetOpacity(h)
        }
        set scale(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetOwnScale(h)
        }
        get scale() {
            return a.get(this).GetOwnScale()
        }
        set scaleRate(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetScaleRate(h)
        }
        get scaleRate() {
            return a.get(this).GetScaleRate()
        }
        set angle(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetAngle(h)
        }
        get angle() {
            return a.get(this).GetOwnAngle()
        }
        set parallaxX(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetParallaxX(h)
        }
        get parallaxX() {
            return a.get(this).GetParallaxX()
        }
        set parallaxY(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetParallaxY(h)
        }
        get parallaxY() {
            return a.get(this).GetParallaxY()
        }
        set zElevation(h) {
            b.RequireFiniteNumber(h);
            a.get(this).SetZElevation(h)
        }
        get zElevation() {
            return a.get(this).GetZElevation()
        }
        set isTransparent(h) {
            a.get(this).SetTransparent(h)
        }
        get isTransparent() {
            return a.get(this).IsTransparent()
        }
        set isForceOwnTexture(h) {
            a.get(this).SetForceOwnTexture(h)
        }
        get isForceOwnTexture() {
            return a.get(this).IsForceOwnTexture()
        }
        set blendMode(h) {
            b.RequireString(h);
            h = d.get(h);
            if("number" !== typeof h) throw Error("invalid blend mode");
            a.get(this).SetBlendMode(h)
        }
        get blendMode() {
            return c.get(a.get(this).GetBlendMode())
        }
        set backgroundColor(h) {
            b.RequireArray(h);
            if(3 > h.length) throw Error("expected 3 elements");
            f.setRgb(h[0], h[1], h[2]);
            h = a.get(this);
            const g = h.GetBackgroundColor();
            g.equalsIgnoringAlpha(f) || (g.copyRgb(f), h.GetRuntime().UpdateRender())
        }
        get backgroundColor() {
            const h = a.get(this).GetBackgroundColor();
            return [h.getR(), h.getG(), h.getB()]
        }
        set scrollX(h) {
            b.RequireNumber(h);
            const g = a.get(this);
            g.SetOwnScrollPositionEnabled(!0);
            g.SetScrollX(h)
        }
        get scrollX() {
            return a.get(this).GetScrollX()
        }
        set scrollY(h) {
            b.RequireNumber(h);
            const g = a.get(this);
            g.SetOwnScrollPositionEnabled(!0);
            g.SetScrollY(h)
        }
        get scrollY() {
            return a.get(this).GetScrollY()
        }
        scrollTo(h, g) {
            b.RequireNumber(h);
            b.RequireNumber(g);
            const k = a.get(this);
            k.SetOwnScrollPositionEnabled(!0);
            k.SetScrollX(h);
            k.SetScrollY(g)
        }
        restoreScrollPosition() {
            a.get(this).SetOwnScrollPositionEnabled(!1)
        }
        getViewport() {
            return a.get(this).GetViewport().toDOMRect()
        }
        cssPxToLayer(h,
            g, k = 0) {
            b.RequireNumber(h);
            b.RequireNumber(g);
            b.RequireNumber(k);
            const m = a.get(this),
                p = m.GetRuntime();
            return m.CanvasCssToLayer(h - p.GetCanvasClientX(), g - p.GetCanvasClientY(), k)
        }
        layerToCssPx(h, g, k = 0) {
            b.RequireNumber(h);
            b.RequireNumber(g);
            b.RequireNumber(k);
            const m = a.get(this),
                p = m.GetRuntime(),
                [x, t] = m.LayerToCanvasCss(h, g, k);
            return [x + p.GetCanvasClientX(), t + p.GetCanvasClientY()]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(h) {
        let g = d.get(h);
        if(g) return g;
        g = e.New(e.Event.Dispatcher);
        d.set(h, g);
        return g
    }
    let f = null;
    self.IInstance = class {
        constructor() {
            a.set(this, f);
            const h = {
                runtime: {
                    value: f.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                objectType: {
                    value: f.GetObjectClass().GetIObjectClass(),
                    writable: !1
                },
                uid: {
                    value: f.GetUID(),
                    writable: !1
                }
            };
            f._GetInstVarsScriptDescriptor(h);
            f._GetBehaviorsScriptDescriptor(h);
            Object.defineProperties(this, h);
            f.GetRuntime()._MapScriptInterface(this,
                f)
        }
        static _Init(h) {
            f = h
        }
        static _GetInitInst() {
            return f
        }
        _Release() {
            const h = d.get(this);
            h && (h.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(h, g, k) {
            b.RequireString(h);
            b.RequireFunction(g);
            c(this).addEventListener(h, g, k)
        }
        removeEventListener(h, g, k) {
            b.RequireString(h);
            b.RequireFunction(g);
            c(this).removeEventListener(h, g, k)
        }
        dispatchEvent(h) {
            c(this).dispatchEvent(h)
        }
        destroy() {
            const h = a.get(this);
            h.GetRuntime().DestroyInstance(h)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IInstance,
        d = self.ILayer,
        c = new WeakMap,
        f = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]),
        h = new Map([...f.entries()].map(k => [k[1], k[0]])),
        g = e.New(e.Color);
    self.IWorldInstance = class k extends a {
        constructor() {
            super();
            var m = a._GetInitInst();
            c.set(this, m);
            const p = [];
            var x = m.GetWorldInfo();
            if(m = x.GetInstanceEffectList()) {
                x =
                    x.GetObjectClass().GetEffectList().GetAllEffectTypes().length;
                for(let t = 0; t < x; ++t) p.push(new self.IEffectInstance(m, t))
            }
            Object.defineProperties(this, {
                effects: {
                    value: p,
                    writable: !1
                }
            })
        }
        get layout() {
            return c.get(this).GetWorldInfo().GetLayout().GetILayout()
        }
        get layer() {
            return c.get(this).GetWorldInfo().GetLayer().GetILayer()
        }
        get x() {
            return c.get(this).GetWorldInfo().GetX()
        }
        set x(m) {
            m = +m;
            const p = c.get(this).GetWorldInfo();
            isNaN(m) || p.GetX() === m || (p.SetX(m), p.SetBboxChanged())
        }
        get y() {
            return c.get(this).GetWorldInfo().GetY()
        }
        set y(m) {
            m = +m;
            const p = c.get(this).GetWorldInfo();
            isNaN(m) || p.GetY() === m || (p.SetY(m), p.SetBboxChanged())
        }
        get zElevation() {
            return c.get(this).GetWorldInfo().GetZElevation()
        }
        set zElevation(m) {
            m = +m;
            const p = c.get(this),
                x = p.GetWorldInfo();
            isNaN(m) || x.GetZElevation() === m || (x.SetZElevation(m), p.GetRuntime().UpdateRender())
        }
        get totalZElevation() {
            return c.get(this).GetWorldInfo().GetTotalZElevation()
        }
        get width() {
            return c.get(this).GetWorldInfo().GetWidth()
        }
        set width(m) {
            m = +m;
            const p = c.get(this).GetWorldInfo();
            isNaN(m) ||
                p.GetWidth() === m || (p.SetWidth(m), p.SetBboxChanged())
        }
        get height() {
            return c.get(this).GetWorldInfo().GetHeight()
        }
        set height(m) {
            m = +m;
            const p = c.get(this).GetWorldInfo();
            isNaN(m) || p.GetHeight() === m || (p.SetHeight(m), p.SetBboxChanged())
        }
        get angle() {
            return c.get(this).GetWorldInfo().GetAngle()
        }
        set angle(m) {
            m = e.clampAngle(+m);
            const p = c.get(this).GetWorldInfo();
            isNaN(m) || p.GetAngle() === m || (p.SetAngle(m), p.SetBboxChanged())
        }
        get angleDegrees() {
            return e.toDegrees(this.angle)
        }
        set angleDegrees(m) {
            this.angle = e.toRadians(m)
        }
        getBoundingBox() {
            return c.get(this).GetWorldInfo().GetBoundingBox().toDOMRect()
        }
        getBoundingQuad() {
            return c.get(this).GetWorldInfo().GetBoundingQuad().toDOMQuad()
        }
        get isVisible() {
            return c.get(this).GetWorldInfo().IsVisible()
        }
        set isVisible(m) {
            m = !!m;
            const p = c.get(this),
                x = p.GetWorldInfo();
            x.IsVisible() !== m && (x.SetVisible(m), p.GetRuntime().UpdateRender())
        }
        get opacity() {
            return c.get(this).GetWorldInfo().GetOpacity()
        }
        set opacity(m) {
            m = e.clamp(+m, 0, 1);
            const p = c.get(this),
                x = p.GetWorldInfo();
            isNaN(m) || x.GetOpacity() === m || (x.SetOpacity(m), p.GetRuntime().UpdateRender())
        }
        set colorRgb(m) {
            b.RequireArray(m);
            if(3 > m.length) throw Error("expected 3 elements");
            g.setRgb(m[0], m[1], m[2]);
            m = c.get(this);
            const p = m.GetWorldInfo();
            p.GetUnpremultipliedColor().equalsIgnoringAlpha(g) ||
                (p.SetUnpremultipliedColor(g), m.GetRuntime().UpdateRender())
        }
        get colorRgb() {
            const m = c.get(this).GetWorldInfo().GetUnpremultipliedColor();
            return [m.getR(), m.getG(), m.getB()]
        }
        set blendMode(m) {
            b.RequireString(m);
            m = f.get(m);
            if("number" !== typeof m) throw Error("invalid blend mode");
            const p = c.get(this);
            p.GetWorldInfo().SetBlendMode(m);
            p.GetRuntime().UpdateRender()
        }
        get blendMode() {
            return h.get(c.get(this).GetWorldInfo().GetBlendMode())
        }
        moveToTop() {
            c.get(this).GetWorldInfo().ZOrderMoveToTop()
        }
        moveToBottom() {
            c.get(this).GetWorldInfo().ZOrderMoveToBottom()
        }
        moveToLayer(m) {
            b.RequireInstanceOf(m,
                d);
            m = d._Unwrap(m);
            if(!m) throw Error("invalid layer");
            c.get(this).GetWorldInfo().ZOrderMoveToLayer(m)
        }
        moveAdjacentToInstance(m, p) {
            b.RequireInstanceOf(m, k);
            c.get(this).GetWorldInfo().ZOrderMoveAdjacentToInstance(c.get(m), p)
        }
        get zIndex() {
            return c.get(this).GetWorldInfo().GetZIndex()
        }
        containsPoint(m, p) {
            b.RequireNumber(m);
            b.RequireNumber(p);
            return c.get(this).GetWorldInfo().ContainsPoint(+m, +p)
        }
        testOverlap(m) {
            b.RequireInstanceOf(m, k);
            const p = c.get(this);
            m = c.get(m);
            return p.GetRuntime().GetCollisionEngine().TestOverlap(p,
                m)
        }
        testOverlapSolid() {
            var m = c.get(this);
            return (m = m.GetRuntime().GetCollisionEngine().TestOverlapSolid(m)) ? m.GetInterfaceClass() : null
        }
        getParent() {
            const m = c.get(this).GetParent();
            return m ? m.GetInterfaceClass() : null
        }
        getTopParent() {
            const m = c.get(this).GetTopParent();
            return m ? m.GetInterfaceClass() : null
        }* parents() {
            for(const m of c.get(this).parents()) yield m.GetInterfaceClass()
        }
        getChildCount() {
            return c.get(this).GetChildCount()
        }
        getChildAt(m) {
            return (m = c.get(this).GetChildAt(m)) ? m.GetInterfaceClass() : null
        }* children() {
            for(const m of c.get(this).children()) yield m.GetInterfaceClass()
        }* allChildren() {
            for(const m of c.get(this).allChildren()) yield m.GetInterfaceClass()
        }
        addChild(m,
            p) {
            b.RequireInstanceOf(m, k);
            b.RequireOptionalObject(p);
            p || (p = {});
            const x = c.get(this);
            m = c.get(m);
            x.AddChild(m, p)
        }
        removeChild(m) {
            b.RequireInstanceOf(m, k);
            const p = c.get(this);
            m = c.get(m);
            p.RemoveChild(m)
        }
        removeFromParent() {
            const m = c.get(this);
            m.HasParent() && m.GetParent().RemoveChild(m)
        }
        createMesh(m, p) {
            b.RequireFiniteNumber(m);
            b.RequireFiniteNumber(p);
            c.get(this).GetWorldInfo().CreateMesh(m, p)
        }
        releaseMesh() {
            const m = c.get(this).GetWorldInfo();
            m.ReleaseMesh();
            m.SetBboxChanged()
        }
        setMeshPoint(m, p, x) {
            b.RequireFiniteNumber(m);
            b.RequireFiniteNumber(p);
            b.RequireObject(x);
            const t = c.get(this).GetWorldInfo();
            t.SetMeshPoint(m, p, x) && t.SetBboxChanged()
        }
        getMeshSize() {
            var m = c.get(this).GetWorldInfo();
            if(!m.HasMesh()) return [0, 0];
            m = m.GetSourceMesh();
            return [m.GetHSize(), m.GetVSize()]
        }
    }
} {
    "use strict";
    const e = self.C3X,
        b = new WeakMap;
    self.IDOMInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            b.set(this, self.IInstance._GetInitInst())
        }
        getElement() {
            return b.get(this).GetSdkInstance()._GetElementInDOMMode()
        }
        focus() {
            b.get(this).GetSdkInstance().FocusElement()
        }
        blur() {
            b.get(this).GetSdkInstance().BlurElement()
        }
        setCssStyle(a, d) {
            e.RequireString(a);
            b.get(this).GetSdkInstance().SetElementCSSStyle(a, d)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap,
        d = new WeakMap;

    function c(h) {
        let g = d.get(h);
        if(g) return g;
        g = e.New(e.Event.Dispatcher);
        d.set(h, g);
        return g
    }
    let f = null;
    self.IBehaviorInstance = class {
        constructor() {
            a.set(this, f);
            const h = {
                runtime: {
                    value: f.GetRuntime().GetIRuntime(),
                    writable: !1
                },
                behavior: {
                    value: f.GetBehavior().GetIBehavior(),
                    writable: !1
                }
            };
            Object.defineProperties(this, h)
        }
        static _Init(h) {
            f = h
        }
        static _GetInitInst() {
            return f
        }
        get instance() {
            return a.get(this).GetObjectInstance().GetInterfaceClass()
        }
        _Release() {
            const h =
                d.get(this);
            h && (h.Release(), d.delete(this));
            a.delete(this)
        }
        addEventListener(h, g, k) {
            b.RequireString(h);
            b.RequireFunction(g);
            c(this).addEventListener(h, g, k)
        }
        removeEventListener(h, g, k) {
            b.RequireString(h);
            b.RequireFunction(g);
            c(this).removeEventListener(h, g, k)
        }
        dispatchEvent(h) {
            c(this).dispatchEvent(h)
        }
    }
} {
    "use strict";
    const e = new WeakMap;
    self.IBehavior = class {
        constructor(b) {
            e.set(this, b);
            b = {
                runtime: {
                    value: b.GetRuntime().GetIRuntime(),
                    writable: !1
                }
            };
            Object.defineProperties(this, b)
        }
        getAllInstances() {
            return e.get(this).GetInstances().map(b => b.GetInterfaceClass())
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = new WeakMap;
    self.IEffectInstance = class {
        constructor(d, c) {
            a.set(this, d);
            Object.defineProperties(this, {
                index: {
                    value: c,
                    writable: !1
                }
            })
        }
        get name() {
            return a.get(this).GetAllEffectTypes()[this.index].GetName()
        }
        get isActive() {
            return a.get(this).IsEffectIndexActive(this.index)
        }
        set isActive(d) {
            d = !!d;
            const c = a.get(this);
            c.IsEffectIndexActive(this.index) !== d && (c.SetEffectIndexActive(this.index, d), c.UpdateActiveEffects(), c.GetRuntime().UpdateRender())
        }
        setParameter(d, c) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const f = a.get(this);
            var h = f.GetEffectParametersForIndex(this.index);
            if(0 > d || d >= h.length) throw new RangeError("invalid effect parameter index");
            const g = h[d];
            if(g instanceof e.Color) {
                if(!Array.isArray(c) || 3 > c.length) throw new TypeError("expected array with 3 elements");
                d = c[0];
                h = c[1];
                c = c[2];
                if(g.equalsRgb(d, h, c)) return;
                g.setRgb(d, h, c)
            } else {
                if("number" !== typeof c) throw new TypeError("expected number");
                if(g === c) return;
                h[d] = c
            }
            f.IsEffectIndexActive(this.index) && f.GetRuntime().UpdateRender()
        }
        getParameter(d) {
            b.RequireFiniteNumber(d);
            d = Math.floor(+d);
            const c = a.get(this).GetEffectParametersForIndex(this.index);
            if(0 > d || d >= c.length) throw new RangeError("invalid effect parameter index");
            d = c[d];
            return d instanceof e.Color ? [d.getR(), d.getG(), d.getB()] : d
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set(["local", "remote"]),
        a = new Map([
            ["mp4", "video/mp4"],
            ["webm", "video/webm"],
            ["m4a", "audio/mp4"],
            ["mp3", "audio/mpeg"],
            ["js", "application/javascript"],
            ["wasm", "application/wasm"],
            ["svg", "image/svg+xml"],
            ["html", "text/html"]
        ]);

    function d(f) {
        if(!f) return "";
        f = f.split(".");
        if(2 > f.length) return "";
        f = f[f.length - 1].toLowerCase();
        return a.get(f) || ""
    }

    function c(f) {
        return new Promise((h, g) => {
            const k = document.createElement("script");
            k.onload = h;
            k.onerror = g;
            k.async = !1;
            k.type =
                "module";
            k.src = f;
            document.head.appendChild(k)
        })
    }
    e.AssetManager = class extends e.DefendedBase {
        constructor(f, h) {
            super();
            var g = h.exportType;
            this._runtime = f;
            this._localUrlBlobs = new Map;
            this._localBlobUrlCache = new Map;
            this._localBlobSWUrls = new Map;
            this._isCordova = "cordova" === g;
            this._isiOSCordova = !!h.isiOSCordova;
            this._isFileProtocol = !!h.isFileProtocol;
            this._swClientId = h.swClientId;
            this._supportedAudioFormats = h.supportedAudioFormats || {};
            this._audioFiles = new Map;
            this._preloadSounds = !1;
            this._iconsSubfolder =
                this._fontsSubfolder = this._mediaSubfolder = "";
            this._defaultLoadPolicy = "html5" === g || "scirra-arcade" === g || "instant-games" === g ? "remote" : "local";
            this._allAssets = [];
            this._assetsByUrl = new Map;
            this._webFonts = [];
            this._loadPromises = [];
            this._hasFinishedInitialLoad = !1;
            this._lastLoadProgress = this._assetSizeLoaded = this._totalAssetSizeToLoad = 0;
            this._hasHadErrorLoading = !1;
            this._loadingRateLimiter = e.New(e.RateLimiter, () => this._FireLoadingProgressEvent(), 50);
            this._promiseThrottle = new e.PromiseThrottle(Math.max(e.hardwareConcurrency,
                8));
            if(f = h.previewImageBlobs) {
                (g = h.previewProjectFileBlobs) && Object.assign(f, g);
                (g = h.projectData) && (f["https://64345986-62434566.preview.editmysite.com/uploads/9/9/0/8/139890129/custom_themes/104868751615748392/files/data.json"] = g);
                for(const [k, m] of Object.entries(f)) this._localUrlBlobs.set(k.toLowerCase(), m)
            }
            if(h = h.previewProjectFileSWUrls)
                for(const [k, m] of Object.entries(h)) this._localBlobSWUrls.set(k, m);
            this._iAssetManager = new self.IAssetManager(this)
        }
        Release() {
            this._localUrlBlobs.clear();
            for(const f of this._localBlobUrlCache.values()) f.startsWith("blob:") && URL.revokeObjectURL(f);
            this._localBlobUrlCache.clear();
            for(const f of this._allAssets) f.Release();
            e.clearArray(this._allAssets);
            this._assetsByUrl.clear();
            e.clearArray(this._loadPromises);
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        _SetMediaSubfolder(f) {
            this._mediaSubfolder = f
        }
        GetMediaSubfolder() {
            return this._mediaSubfolder
        }
        _SetFontsSubfolder(f) {
            this._fontsSubfolder = f
        }
        GetFontsSubfolder() {
            return this._fontsSubfolder
        }
        _SetIconsSubfolder(f) {
            this._iconsSubfolder = f
        }
        GetIconsSubfolder() {
            return this._iconsSubfolder
        }
        IsFileProtocol() {
            return this._isFileProtocol
        }
        _HasLocalUrlBlob(f) {
            return this._localUrlBlobs.has(f.toLowerCase())
        }
        _GetLocalUrlBlob(f) {
            return this._localUrlBlobs.get(f.toLowerCase()) ||
                null
        }
        GetLocalUrlAsBlobUrl(f) {
            if(!this._HasLocalUrlBlob(f)) return f;
            f = f.toLowerCase();
            var h = this._localBlobUrlCache.get(f);
            h || (h = this._GetLocalUrlBlob(f), h = URL.createObjectURL(h), this._localBlobUrlCache.set(f, h));
            return h
        }
        FetchBlob(f, h) {
            h = h || this._defaultLoadPolicy;
            const g = this._GetLocalUrlBlob(f);
            if(g) return Promise.resolve(g);
            if(e.IsRelativeURL(f)) {
                const k = f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlob(k) : "local" === h ? this._promiseThrottle.Add(() => e.FetchBlob(k)) :
                    e.FetchBlob(k)
            }
            return e.FetchBlob(f)
        }
        FetchArrayBuffer(f) {
            const h = this._GetLocalUrlBlob(f);
            if(h) return e.BlobToArrayBuffer(h);
            if(e.IsRelativeURL(f)) {
                const g = f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsArrayBuffer(g) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => e.FetchArrayBuffer(g)) : e.FetchArrayBuffer(g)
            }
            return e.FetchArrayBuffer(f)
        }
        FetchText(f) {
            const h = this._GetLocalUrlBlob(f);
            if(h) return e.BlobToString(h);
            if(e.IsRelativeURL(f)) {
                const g =
                    f.toLowerCase();
                return this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsText(g) : "local" === this._defaultLoadPolicy ? this._promiseThrottle.Add(() => e.FetchText(g)) : e.FetchText(g)
            }
            return e.FetchText(f)
        }
        async FetchJson(f) {
            f = await this.FetchText(f);
            return JSON.parse(f)
        }
        _CordovaFetchLocalFileAs(f, h) {
            return this._runtime.PostComponentMessageToDOMAsync("runtime", "cordova-fetch-local-file", {
                filename: f,
                as: h
            })
        }
        CordovaFetchLocalFileAsText(f) {
            return this._CordovaFetchLocalFileAs(f, "text")
        }
        async CordovaFetchLocalFileAsBlob(f) {
            const h =
                await this._CordovaFetchLocalFileAs(f, "buffer");
            f = d(f);
            return new Blob([h], {
                type: f
            })
        }
        async CordovaFetchLocalFileAsBlobURL(f) {
            f = f.toLowerCase();
            var h = this._localBlobUrlCache.get(f);
            if(h) return h;
            h = await this.CordovaFetchLocalFileAsBlob(f);
            h = URL.createObjectURL(h);
            this._localBlobUrlCache.set(f, h);
            return h
        }
        CordovaFetchLocalFileAsArrayBuffer(f) {
            return this._CordovaFetchLocalFileAs(f, "buffer")
        }
        GetMediaFileUrl(f) {
            return this._HasLocalUrlBlob(f) ? this.GetLocalUrlAsBlobUrl(f) : this._mediaSubfolder + f.toLowerCase()
        }
        GetProjectFileUrl(f,
            h = "") {
            if(e.IsAbsoluteURL(f)) {
                if(h) throw Error("cannot specify subfolder with remote URL");
                return Promise.resolve(f)
            }
            return this._HasLocalUrlBlob(f) ? Promise.resolve(this.GetLocalUrlAsBlobUrl(f)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(h + f) : Promise.resolve(h + f.toLowerCase())
        }
        GetProjectFileIframeUrl(f) {
            if(e.IsAbsoluteURL(f)) return Promise.resolve(f);
            var h = f.indexOf("?"),
                g = -1 === h ? "" : f.substr(h);
            h = -1 === h ? f : f.substr(0, h);
            return this._HasLocalUrlBlob(h) ? (f = this._localBlobSWUrls.get(h) ||
                this.GetLocalUrlAsBlobUrl(h), !f.startsWith("blob:") && this._swClientId && (f = new URL(f), g = new URLSearchParams(g), g.set("__c3_client_id", this._swClientId), f.search = g.toString(), f = f.toString()), Promise.resolve(f)) : this._isCordova && this._isFileProtocol ? this.CordovaFetchLocalFileAsBlobURL(h) : Promise.resolve(f.toLowerCase())
        }
        LoadProjectFileUrl(f) {
            return this.GetProjectFileUrl(f)
        }
        LoadImage(f) {
            if(f.loadPolicy && !b.has(f.loadPolicy)) throw Error("invalid load policy");
            let h = this._assetsByUrl.get(f.url);
            if(h) return h;
            h = e.New(e.ImageAsset, this, {
                url: f.url,
                size: f.size || 0,
                loadPolicy: f.loadPolicy || this._defaultLoadPolicy
            });
            this._allAssets.push(h);
            this._assetsByUrl.set(h.GetURL(), h);
            this._hasFinishedInitialLoad || (this._totalAssetSizeToLoad += h.GetSize(), this._loadPromises.push(h.Load().then(() => this._AddLoadedSize(h.GetSize()))));
            return h
        }
        async WaitForAllToLoad() {
            try {
                await Promise.all(this._loadPromises), this._lastLoadProgress = 1
            } catch (f) {
                console.error("Error loading: ", f), this._hasHadErrorLoading = !0, this._FireLoadingProgressEvent()
            }
        }
        SetInitialLoadFinished() {
            this._hasFinishedInitialLoad = !0
        }
        HasHadErrorLoading() {
            return this._hasHadErrorLoading
        }
        _AddLoadedSize(f) {
            this._assetSizeLoaded += f;
            this._loadingRateLimiter.Call()
        }
        _FireLoadingProgressEvent() {
            const f = e.New(e.Event, "loadingprogress");
            this._lastLoadProgress = e.clamp(this._assetSizeLoaded / this._totalAssetSizeToLoad, 0, 1);
            f.progress = this._lastLoadProgress;
            this._runtime.Dispatcher().dispatchEvent(f)
        }
        GetLoadProgress() {
            return this._lastLoadProgress
        }
        _SetWebFonts(f) {
            e.shallowAssignArray(this._webFonts, f);
            this._webFonts.length && this._loadPromises.push(this._LoadWebFonts())
        }
        _LoadWebFonts() {
            if("undefined" ===
                typeof FontFace) return Promise.resolve();
            const f = [];
            for(const [h, g, k] of this._webFonts) this._totalAssetSizeToLoad += k, f.push(this._LoadWebFont(h, g).then(() => this._AddLoadedSize(k)));
            return Promise.all(f)
        }
        async _LoadWebFont(f, h) {
            try {
                const g = await this.GetProjectFileUrl(h, this._fontsSubfolder),
                    k = new FontFace(f, `url('${g}')`);
                this._runtime.IsInWorker() ? self.fonts.add(k) : document.fonts.add(k);
                await k.load()
            } catch (g) {
                console.warn(`[C3 runtime] Failed to load web font '${f}': `, g)
            }
        }
        IsAudioFormatSupported(f) {
            return !!this._supportedAudioFormats[f]
        }
        _SetAudioFiles(f,
            h) {
            this._preloadSounds = !!h;
            for(const [g, k, m] of f) this._audioFiles.set(g, {
                fileName: g,
                formats: k.map(p => ({
                    type: p[0],
                    fileExtension: p[1],
                    fullName: g + p[1],
                    fileSize: p[2]
                })),
                isMusic: m
            })
        }
        GetPreferredAudioFile(f) {
            f = this._audioFiles.get(f.toLowerCase());
            if(!f) return null;
            let h = null;
            for(const g of f.formats)
                if(h || "audio/webm; codecs=opus" !== g.type || (h = g), this.IsAudioFormatSupported(g.type)) return g;
            return h
        }
        GetProjectAudioFileUrl(f) {
            return (f = this.GetPreferredAudioFile(f)) ? {
                url: this.GetMediaFileUrl(f.fullName),
                type: f.type
            } : null
        }
        GetAudioToPreload() {
            if(this._preloadSounds) {
                const f = [];
                for(const h of this._audioFiles.values()) {
                    if(h.isMusic) continue;
                    const g = this.GetPreferredAudioFile(h.fileName);
                    g && f.push({
                        originalUrl: h.fileName,
                        url: this.GetMediaFileUrl(g.fullName),
                        type: g.type,
                        fileSize: g.fileSize
                    })
                }
                return f
            }
            return []
        }
        GetIAssetManager() {
            return this._iAssetManager
        }
        async LoadScripts(...f) {
            const h = await Promise.all(f.map(g => this.GetProjectFileUrl(g)));
            this._runtime.IsInWorker() ? 1 === f.length ? (f = f[0], await self.c3_import((e.IsRelativeURL(f) ?
                "./" : "") + f)) : (f = f.map(g => `import "${e.IsRelativeURL(g)?"./":""}${g}";`).join("\n"), f = URL.createObjectURL(new Blob([f], {
                type: "application/javascript"
            })), await self.c3_import(f)) : await Promise.all(h.map(g => c(g)))
        }
        async CompileWebAssembly(f) {
            if(WebAssembly.compileStreaming) return f = await this.GetProjectFileUrl(f), await WebAssembly.compileStreaming(fetch(f));
            f = await e.FetchArrayBuffer(f);
            return await WebAssembly.compile(f)
        }
        async LoadStyleSheet(f) {
            f = await this.GetProjectFileUrl(f);
            return await this._runtime.PostComponentMessageToDOMAsync("runtime",
                "add-stylesheet", {
                    url: f
                })
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Asset = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._assetManager = b;
            this._runtime = b.GetRuntime();
            this._url = a.url;
            this._size = a.size;
            this._loadPolicy = a.loadPolicy;
            this._blob = null;
            this._isLoaded = !1;
            this._loadPromise = null
        }
        Release() {
            this._blob = this._runtime = this._assetManager = this._loadPromise = null
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        Load() {
            return "local" === this._loadPolicy || this._blob ? (this._isLoaded = !0, Promise.resolve()) : this._loadPromise ?
                this._loadPromise : this._loadPromise = this._assetManager.FetchBlob(this._url, this._loadPolicy).then(b => {
                    this._isLoaded = !0;
                    this._loadPromise = null;
                    return this._blob = b
                }).catch(b => console.error("Error loading resource: ", b))
        }
        IsLoaded() {
            return this._isLoaded
        }
        GetBlob() {
            return this._blob ? Promise.resolve(this._blob) : this._loadPromise ? this._loadPromise : this._assetManager.FetchBlob(this._url, this._loadPolicy)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.PromiseThrottle,
        a = new Set;
    e.ImageAsset = class extends e.Asset {
        constructor(d, c) {
            super(d, c);
            this._webglTexture = this._texturePromise = null;
            this._refCount = 0;
            this._imageHeight = this._imageWidth = -1;
            a.add(this)
        }
        Release() {
            this.ReleaseTexture();
            if(0 !== this._refCount) throw Error("released image asset which still has texture references");
            this._texturePromise = null;
            a.delete(this);
            super.Release()
        }
        static OnWebGLContextLost() {
            for(const d of a) d._texturePromise = null, d._webglTexture =
                null, d._refCount = 0
        }
        LoadStaticTexture(d, c) {
            c = c || {};
            this._refCount++;
            if(this._webglTexture) return Promise.resolve(this._webglTexture);
            if(this._texturePromise) return this._texturePromise;
            c.anisotropy = this._runtime.GetCanvasManager().GetTextureAnisotropy();
            return this._texturePromise = this.GetBlob().then(f => b.Add(() => d.CreateStaticTextureAsync(f, c).then(h => {
                this._texturePromise = null;
                if(0 === this._refCount) return d.DeleteTexture(h), null;
                this._webglTexture = h;
                this._imageWidth = h.GetWidth();
                this._imageHeight =
                    h.GetHeight();
                return this._webglTexture
            }))).catch(f => {
                console.error("Failed to load texture: ", f);
                throw f;
            })
        }
        ReleaseTexture() {
            if(0 >= this._refCount) throw Error("texture released too many times");
            this._refCount--;
            0 === this._refCount && this._webglTexture && (this._webglTexture.GetRenderer().DeleteTexture(this._webglTexture), this._webglTexture = null)
        }
        GetTexture() {
            return this._webglTexture
        }
        GetWidth() {
            return this._imageWidth
        }
        GetHeight() {
            return this._imageHeight
        }
        async LoadToDrawable() {
            const d = await this.GetBlob();
            return e.Supports.ImageBitmapOptions ? await createImageBitmap(d, {
                premultiplyAlpha: "none"
            }) : e.Supports.ImageBitmap ? await createImageBitmap(d) : await e.BlobToImage(d)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - d.GetWorldInfo()._GetLastCachedZIndex()
    }
    e.RenderCell = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            this._grid = a;
            this._x = d;
            this._y = c;
            this._instances = [];
            this._isSorted = !0;
            this._pendingRemoval = new Set;
            this._isAnyPendingRemoval = !1
        }
        Release() {
            e.clearArray(this._instances);
            this._pendingRemoval.clear();
            this._grid = null
        }
        Reset() {
            e.clearArray(this._instances);
            this._isSorted = !0;
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = !1
        }
        SetChanged() {
            this._isSorted = !1
        }
        IsEmpty() {
            if(!this._instances.length) return !0;
            if(this._instances.length > this._pendingRemoval.size) return !1;
            this._FlushPending();
            return !0
        }
        Insert(a) {
            this._pendingRemoval.has(a) ? (this._pendingRemoval.delete(a), 0 === this._pendingRemoval.size && (this._isAnyPendingRemoval = !1)) : (this._instances.push(a), this._isSorted = 1 === this._instances.length)
        }
        Remove(a) {
            this._pendingRemoval.add(a);
            this._isAnyPendingRemoval = !0;
            50 <= this._pendingRemoval.size && this._FlushPending()
        }
        _FlushPending() {
            this._isAnyPendingRemoval &&
                (this._instances.length === this._pendingRemoval.size ? this.Reset() : (e.arrayRemoveAllInSet(this._instances, this._pendingRemoval), this._pendingRemoval.clear(), this._isAnyPendingRemoval = !1))
        }
        _EnsureSorted() {
            this._isSorted || (this._instances.sort(b), this._isSorted = !0)
        }
        Dump(a) {
            this._FlushPending();
            this._EnsureSorted();
            this._instances.length && a.push(this._instances)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.RenderGrid = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = e.New(e.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = e.New(e.RenderCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            return Math.floor(b / this._cellWidth)
        }
        YToCell(b) {
            return Math.floor(b / this._cellHeight)
        }
        Update(b, a, d) {
            if(a)
                for(let c = a.getLeft(), f = a.getRight(); c <= f; ++c)
                    for(let h =
                            a.getTop(), g = a.getBottom(); h <= g; ++h) {
                        if(d && d.containsPoint(c, h)) continue;
                        const k = this.GetCell(c, h, !1);
                        k && (k.Remove(b), k.IsEmpty() && this._cells.Delete(c, h))
                    }
            if(d)
                for(let c = d.getLeft(), f = d.getRight(); c <= f; ++c)
                    for(let h = d.getTop(), g = d.getBottom(); h <= g; ++h) a && a.containsPoint(c, h) || this.GetCell(c, h, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                f = this.XToCell(b.getRight());
            for(b = this.YToCell(b.getBottom()); d <= f; ++d)
                for(let h = c; h <= b; ++h) {
                    const g = this.GetCell(d,
                        h, !1);
                    g && g.Dump(a)
                }
        }
        MarkRangeChanged(b) {
            let a = b.getLeft();
            const d = b.getTop(),
                c = b.getRight();
            for(b = b.getBottom(); a <= c; ++a)
                for(let f = d; f <= b; ++f) {
                    const h = this.GetCell(a, f, !1);
                    h && h.SetChanged()
                }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Rect,
        a = new e.Quad,
        d = [],
        c = new e.Rect,
        f = new e.Rect,
        h = self.glMatrix,
        g = h.vec3,
        k = h.vec4,
        m = h.mat4,
        p = m.create(),
        x = g.create(),
        t = k.create(),
        q = g.create(),
        r = g.create(),
        y = g.create(),
        v = e.New(e.Vector2);

    function u(z, C) {
        return z.GetWorldInfo()._GetLastCachedZIndex() - C.GetWorldInfo()._GetLastCachedZIndex()
    }

    function A(z, C) {
        return z.GetWorldInfo().GetZElevation() - C.GetWorldInfo().GetZElevation()
    }
    e.Layer = class extends e.DefendedBase {
        constructor(z, C, E) {
            super();
            this._layout = z;
            this._runtime =
                z.GetRuntime();
            this._name = E[0];
            this._index = C;
            this._sid = E[2];
            this._isVisible = !!E[3];
            this._backgroundColor = e.New(e.Color);
            this._backgroundColor.setFromJSON(E[4].map(J => J / 255));
            this._isTransparent = !!E[5];
            this._parallaxX = E[6];
            this._parallaxY = E[7];
            this._color = e.New(e.Color, 1, 1, 1, E[8]);
            this._premultipliedColor = e.New(e.Color);
            this._isForceOwnTexture = E[9];
            this._renderAs3d = E[17];
            this._useRenderCells = E[10];
            this._scaleRate = E[11];
            this._blendMode = E[12];
            this._curRenderTarget = null;
            this._scale = 1;
            this._zElevation =
                E[16];
            this._scrollY = this._scrollX = this._angle = 0;
            this._hasOwnScrollPosition = !1;
            this._viewport = e.New(e.Rect);
            this._viewportZ0 = e.New(e.Rect);
            this._projectionMatrix = m.create();
            this._isProjectionMatrixChanged = !0;
            this._modelViewMatrix = m.create();
            this._isMVMatrixChanged = !0;
            this._viewFrustum = e.New(e.Gfx.ViewFrustum);
            this._isViewFrustumChanged = !0;
            this._startupInitialInstances = [];
            this._initialInstances = [];
            this._createdGlobalUids = [];
            this._initialUIDsToInstanceData = new Map;
            this._instances = [];
            this._anyInstanceZElevated =
                this._zIndicesUpToDate = !1;
            this._effectList = e.New(e.EffectList, this, E[15]);
            this._renderGrid = null;
            this._lastRenderList = [];
            this._isRenderListUpToDate = !1;
            this._lastRenderCells = e.New(e.Rect, 0, 0, -1, -1);
            this._curRenderCells = e.New(e.Rect, 0, 0, -1, -1);
            this._iLayer = new self.ILayer(this);
            this._UpdatePremultipliedColor();
            this._useRenderCells && (this._renderGrid = e.New(e.RenderGrid, this._runtime.GetOriginalViewportWidth(), this._runtime.GetOriginalViewportHeight()));
            for(const J of E[14]) z = this._runtime.GetObjectClassByIndex(J[1]),
                this._layout._AddInitialObjectClass(z), z.GetDefaultInstanceData() || (z.SetDefaultInstanceData(J), z._SetDefaultLayerIndex(this._index)), this._initialInstances.push(J), this._initialUIDsToInstanceData.set(J[2], J);
            e.shallowAssignArray(this._startupInitialInstances, this._initialInstances)
        }
        static Create(z, C, E) {
            return e.New(e.Layer, z, C, E)
        }
        Release() {
            this._runtime = this._layout = null
        }
        GetInitialInstanceData(z) {
            return this._initialUIDsToInstanceData.get(z)
        }
        CreateInitialInstances(z) {
            const C = this._layout.IsFirstVisit();
            let E = 0;
            const J = this._initialInstances;
            for(let H = 0, K = J.length; H < K; ++H) {
                var F = J[H];
                const N = this._runtime.GetObjectClassByIndex(F[1]);
                let S = !0;
                if(!N.HasPersistBehavior() || C) F = this._runtime.CreateInstanceFromData(F, this, !0), z.push(F), N.IsGlobal() && (S = !1, this._createdGlobalUids.push(F.GetUID()));
                S && (J[E] = J[H], ++E)
            }
            e.truncateArray(J, E);
            this._runtime.FlushPendingInstances();
            this.SetZIndicesChanged()
        }
        _AddInstance(z, C) {
            const E = z.GetWorldInfo();
            if(E.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.push(z);
            0 !== E.GetZElevation() && (this._anyInstanceZElevated = !0);
            C && this._useRenderCells && z.GetWorldInfo().SetBboxChanged();
            this.SetZIndicesChanged()
        }
        _MaybeAddInstance(z) {
            this._instances.includes(z) || (this._instances.push(z), 0 !== z.GetWorldInfo().GetZElevation() && (this._anyInstanceZElevated = !0), this.SetZIndicesChanged())
        }
        _PrependInstance(z, C) {
            const E = z.GetWorldInfo();
            if(E.GetLayer() !== this) throw Error("instance added to wrong layer");
            this._instances.unshift(z);
            0 !== E.GetZElevation() &&
                (this._anyInstanceZElevated = !0);
            this.SetZIndicesChanged();
            C && this._useRenderCells && z.GetWorldInfo().SetBboxChanged()
        }
        _RemoveInstance(z, C) {
            const E = this._instances.indexOf(z);
            0 > E || (C && this._useRenderCells && z.GetWorldInfo()._RemoveFromRenderCells(), this._instances.splice(E, 1), this.SetZIndicesChanged(), this._MaybeResetAnyInstanceZElevatedFlag())
        }
        _SetAnyInstanceZElevated() {
            this._anyInstanceZElevated = !0
        }
        _MaybeResetAnyInstanceZElevatedFlag() {
            0 === this._instances.length && (this._anyInstanceZElevated = !1)
        }
        _SortInstancesByLastCachedZIndex(z) {
            if(z) {
                z =
                    new Set;
                for(var C of this._instances) {
                    var E = C.GetWorldInfo()._GetLastCachedZIndex();
                    0 <= E && z.add(E)
                }
                C = -1;
                for(const J of this._instances)
                    if(E = J.GetWorldInfo(), !(0 <= E._GetLastCachedZIndex())) {
                        for(++C; z.has(C);) ++C;
                        E._SetZIndex(C)
                    }
            }
            this._instances.sort(u)
        }
        _Start() {}
        _End() {
            for(const z of this._instances) z.GetObjectClass().IsGlobal() || this._runtime.DestroyInstance(z);
            this._runtime.FlushPendingInstances();
            e.clearArray(this._instances);
            this._anyInstanceZElevated = !1;
            this.SetZIndicesChanged()
        }
        RecreateInitialObjects(z,
            C, E, J, F) {
            const H = this._runtime.GetEventSheetManager(),
                K = this._runtime.GetAllObjectClasses(),
                N = z.IsFamily(),
                S = [];
            for(const X of this._initialInstances) {
                var V = X[0];
                if(C.containsPoint(V[0], V[1])) {
                    V = K[X[1]];
                    if(V !== z)
                        if(N) {
                            if(!z.FamilyHasMember(V)) continue
                        } else continue;
                    V = this;
                    var U = this._runtime.GetCurrentLayout();
                    this.GetLayout() !== U && ((V = U.GetLayerByName(this.GetName())) || (V = U.GetLayerByIndex(this.GetIndex())));
                    U = this._runtime.CreateInstanceFromData(X, V, !1, void 0, void 0, !1, F);
                    V.SortAndAddSceneGraphInstancesByZIndex(U);
                    V = U.GetWorldInfo();
                    V.OffsetXY(E, J);
                    V.SetBboxChanged();
                    H.BlockFlushingInstances(!0);
                    U._TriggerOnCreatedOnSelfAndRelated();
                    H.BlockFlushingInstances(!1);
                    S.push(U)
                }
            }
            return S
        }
        GetInstanceCount() {
            return this._instances.length
        }
        GetLayout() {
            return this._layout
        }
        GetName() {
            return this._name
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        GetRuntime() {
            return this._runtime
        }
        GetDevicePixelRatio() {
            return this._runtime.GetDevicePixelRatio()
        }
        GetEffectList() {
            return this._effectList
        }
        UsesRenderCells() {
            return this._useRenderCells
        }
        GetRenderGrid() {
            return this._renderGrid
        }
        SetRenderListStale() {
            this._isRenderListUpToDate = !1
        }
        IsVisible() {
            return this._isVisible
        }
        SetVisible(z) {
            z = !!z;
            this._isVisible !== z && (this._isVisible = z, this._runtime.UpdateRender())
        }
        SetOwnScrollPositionEnabled(z) {
            z = !!z;
            if(this._hasOwnScrollPosition !== z) {
                if(this._hasOwnScrollPosition = z) z = this.GetLayout(), this._scrollX = z.GetScrollX(), this._scrollY = z.GetScrollY();
                this._SetMVMatrixChanged();
                this._runtime.UpdateRender()
            }
        }
        IsOwnScrollPositionEnabled() {
            return this._hasOwnScrollPosition
        }
        SetScrollX(z) {
            var C = this.GetLayout();
            const E = C.GetScrollLeftBound();
            C = C.GetScrollRightBound();
            z > C && (z = C);
            z < E && (z = E);
            this._scrollX !== z && (this._scrollX = z, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        SetScrollY(z) {
            var C = this.GetLayout();
            const E = C.GetScrollTopBound();
            C = C.GetScrollBottomBound();
            z > C && (z = C);
            z < E && (z = E);
            this._scrollY !== z && (this._scrollY = z, this.IsOwnScrollPositionEnabled() && (this._SetMVMatrixChanged(), this._runtime.UpdateRender()))
        }
        GetScrollX() {
            return this.IsOwnScrollPositionEnabled() ? this._scrollX : this.GetLayout().GetScrollX()
        }
        GetScrollY() {
            return this.IsOwnScrollPositionEnabled() ?
                this._scrollY : this.GetLayout().GetScrollY()
        }
        GetViewport() {
            return this._viewport
        }
        _GetVanishingPoint() {
            if(this._renderAs3d) {
                const z = this.GetLayout();
                return [z.GetVanishingPointX(), z.GetVanishingPointY()]
            }
            return [.5, .5]
        }
        GetViewportForZ(z, C) {
            var E = this._viewportZ0;
            if(0 === z) C.copy(E);
            else {
                let K = E.midX(),
                    N = E.midY();
                var J = this.Get2DScaleFactorToZ(z);
                const S = E.width() / J;
                E = E.height() / J;
                const [V, U] = this._GetVanishingPoint();
                if(.5 !== V || .5 !== U) {
                    const X = this.GetCameraZ();
                    var F = this._runtime,
                        H = 100 / X;
                    J = (V - .5) * F.GetViewportWidth() /
                        H;
                    F = (U - .5) * F.GetViewportHeight() / H;
                    H = this.GetAngle();
                    0 !== H && (v.set(J, F), v.rotate(H), J = v.getX(), F = v.getY());
                    z = e.unlerp(X, 0, z);
                    K += e.lerp(J, 0, z);
                    N += e.lerp(F, 0, z)
                }
                C.set(K - S / 2, N - E / 2, K + S / 2, N + E / 2)
            }
        }
        GetOpacity() {
            return this._color.getA()
        }
        SetOpacity(z) {
            z = e.clamp(z, 0, 1);
            this._color.getA() !== z && (this._color.setA(z), this._UpdatePremultipliedColor(), this._runtime.UpdateRender())
        }
        _UpdatePremultipliedColor() {
            this._premultipliedColor.copy(this._color);
            this._premultipliedColor.premultiply()
        }
        GetPremultipliedColor() {
            return this._premultipliedColor
        }
        HasDefaultColor() {
            return this._color.equalsRgba(1,
                1, 1, 1)
        }
        GetScaleRate() {
            return this._scaleRate
        }
        SetScaleRate(z) {
            this._scaleRate !== z && (this._scaleRate = z, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetParallaxX() {
            return this._parallaxX
        }
        GetParallaxY() {
            return this._parallaxY
        }
        SetParallax(z, C) {
            if(this._parallaxX !== z || this._parallaxY !== C)
                if(this._parallaxX = z, this._parallaxY = C, this._SetMVMatrixChanged(), this._runtime.UpdateRender(), 1 !== this._parallaxX || 1 !== this._parallaxY)
                    for(const E of this._instances) E.GetObjectClass()._SetAnyInstanceParallaxed(!0)
        }
        SetParallaxX(z) {
            this.SetParallax(z,
                this.GetParallaxY())
        }
        SetParallaxY(z) {
            this.SetParallax(this.GetParallaxX(), z)
        }
        SetZElevation(z) {
            this._zElevation !== z && (this._zElevation = z, this._runtime.UpdateRender())
        }
        GetZElevation() {
            return this._zElevation
        }
        SetAngle(z) {
            z = e.clampAngle(z);
            this._angle !== z && (this._angle = z, this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return e.clampAngle(this._layout.GetAngle() + this._angle)
        }
        GetOwnAngle() {
            return this._angle
        }
        HasInstances() {
            return 0 < this._instances.length
        }
        _GetInstances() {
            return this._instances
        }
        GetBackgroundColor() {
            return this._backgroundColor
        }
        IsTransparent() {
            return this._isTransparent
        }
        SetTransparent(z) {
            z = !!z;
            this._isTransparent !== z && (this._isTransparent = z, this._runtime.UpdateRender())
        }
        IsForceOwnTexture() {
            return this._isForceOwnTexture
        }
        SetForceOwnTexture(z) {
            z = !!z;
            this._isForceOwnTexture !== z && (this._isForceOwnTexture = z, this._runtime.UpdateRender())
        }
        RendersIn2DMode() {
            return !this.GetRuntime().Uses3DFeatures() || !this._renderAs3d
        }
        SetBlendMode(z) {
            this._blendMode !== z && (this._blendMode = z, this._runtime.UpdateRender())
        }
        GetBlendMode() {
            return this._blendMode
        }
        IsTransformCompatibleWith(z) {
            return this === z || this._parallaxX ===
                z._parallaxX && this._parallaxY === z._parallaxY && this._scale === z._scale && this._scaleRate === z._scaleRate && this._angle === z._angle && this.GetScrollX() === z.GetScrollX() && this.GetScrollY() === z.GetScrollY()
        }
        SaveTransform() {
            return {
                parallaxX: this.GetParallaxX(),
                parallaxY: this.GetParallaxY(),
                scale: this.GetOwnScale(),
                scaleRate: this.GetScaleRate(),
                angle: this.GetOwnAngle(),
                hasOwnScroll: this.IsOwnScrollPositionEnabled(),
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY()
            }
        }
        RestoreTransform(z) {
            this.SetParallax(z.parallaxX,
                z.parallaxY);
            this.SetOwnScale(z.scale);
            this.SetScaleRate(z.scaleRate);
            this.SetAngle(z.angle);
            this.SetOwnScrollPositionEnabled(z.hasOwnScroll);
            this.SetScrollX(z.scrollX);
            this.SetScrollY(z.scrollY)
        }
        _RemoveAllInstancesInSet(z) {
            0 !== z.size && 0 < e.arrayRemoveAllInSet(this._instances, z) && (this._MaybeResetAnyInstanceZElevatedFlag(), this.SetZIndicesChanged())
        }
        SetZIndicesChanged() {
            this._isRenderListUpToDate = this._zIndicesUpToDate = !1
        }
        _UpdateZIndices() {
            if(!this._zIndicesUpToDate) {
                this._instances.sort(A);
                if(this._useRenderCells)
                    for(let z =
                            0, C = this._instances.length; z < C; ++z) {
                        const E = this._instances[z].GetWorldInfo();
                        E._SetZIndex(z);
                        this._renderGrid.MarkRangeChanged(E.GetRenderCellRange())
                    } else
                        for(let z = 0, C = this._instances.length; z < C; ++z) this._instances[z].GetWorldInfo()._SetZIndex(z);
                this._zIndicesUpToDate = !0
            }
        }
        MoveInstanceAdjacent(z, C, E) {
            var J = z.GetWorldInfo();
            C = C.GetWorldInfo();
            if(J.GetLayer() !== this || C.GetLayer() !== this) throw Error("can't arrange Z order unless both objects on this layer");
            J = J.GetZIndex();
            C = C.GetZIndex();
            if(J ===
                C + (E ? 1 : -1)) return !1;
            e.arrayRemove(this._instances, J);
            J < C && C--;
            E && C++;
            C === this._instances.length ? this._instances.push(z) : this._instances.splice(C, 0, z);
            this.SetZIndicesChanged();
            return !0
        }
        _MergeSortedZArrays(z, C) {
            const E = [];
            let J = 0,
                F = 0,
                H = z.length,
                K = C.length;
            for(; J < H && F < K;) {
                const N = z[J],
                    S = C[F];
                N.GetWorldInfo()._GetLastCachedZIndex() < S.GetWorldInfo()._GetLastCachedZIndex() ? (E.push(N), ++J) : (E.push(S), ++F)
            }
            for(; J < H; ++J) E.push(z[J]);
            for(; F < K; ++F) E.push(C[F]);
            return E
        }
        _MergeAllSortedZArrays_pass(z) {
            const C = [],
                E = z.length;
            for(let J = 0; J < E - 1; J += 2) C.push(this._MergeSortedZArrays(z[J], z[J + 1]));
            1 === E % 2 && C.push(z[E - 1]);
            return C
        }
        _MergeAllSortedZArrays(z) {
            for(; 1 < z.length;) z = this._MergeAllSortedZArrays_pass(z);
            return z[0]
        }
        _GetRenderCellInstancesToDraw() {
            this._UpdateZIndices();
            e.clearArray(d);
            this._renderGrid.QueryRange(this._viewport, d);
            return d.length ? 1 === d.length ? d[0] : this._MergeAllSortedZArrays(d) : []
        }
        _IsOpaque() {
            return !this.UsesOwnTexture() && !this.IsTransparent()
        }
        ShouldDraw() {
            return this.IsVisible() && 0 < this.GetOpacity() &&
                (this.HasInstances() || !this.IsTransparent())
        }
        UsesOwnTexture() {
            return this.IsForceOwnTexture() || !this.HasDefaultColor() || 0 !== this.GetBlendMode() || this._effectList.HasAnyActiveEffect()
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        _CanFastPathDrawLayer(z) {
            if(0 === z.length) return !0;
            if(2 <= z.length) return !1;
            z = z[0].GetShaderProgram();
            return !z.MustPreDraw() && !z.UsesDest() && !z.UsesCrossSampling() && this.HasDefaultColor()
        }
        Get2DScaleFactorToZ(z) {
            const C = this.GetCameraZ();
            return C / (C - z)
        }
        GetCameraZ() {
            return 100 /
                this.GetNormalScale()
        }
        _SetMVMatrixChanged() {
            this._isViewFrustumChanged = this._isMVMatrixChanged = !0
        }
        _GetModelViewMatrix(z) {
            this._isMVMatrixChanged && (this._CalculateModelViewMatrix(z, this._modelViewMatrix, 0, 0, null), this._isMVMatrixChanged = !1);
            return this._modelViewMatrix
        }
        _CalculateModelViewMatrix(z, C, E, J, F) {
            const H = this._runtime,
                K = H.GetRenderScale();
            var N = H.GetParallaxXOrigin(),
                S = H.GetParallaxYOrigin();
            N = (this.GetScrollX() - N) * this._parallaxX + N;
            S = (this.GetScrollY() - S) * this._parallaxY + S;
            this._runtime.IsPixelRoundingEnabled() &&
                (N = Math.round(N), S = Math.round(S));
            E = (N + E) * K;
            J = (S + J) * K;
            S = this.GetCameraZ();
            N = this.GetAngle();
            const [V, U] = this._GetVanishingPoint();
            if(.5 !== V || .5 !== U) {
                var X = 100 / S;
                let ia = (V - .5) * H.GetViewportWidth() * K / X;
                X = (U - .5) * H.GetViewportHeight() * K / X;
                0 !== N && (v.set(ia, X), v.rotate(N), ia = v.getX(), X = v.getY());
                E += ia;
                J += X
            }
            g.set(q, E, J, S);
            g.set(r, E, J, S - 100);
            0 === N ? g.set(y, 0, 1, 0) : g.set(y, Math.sin(N), Math.cos(N), 0);
            z.CalculateLookAtModelView(C, q, r, y, F || H.GetCanvasManager().GetDrawHeight());
            1 !== K && (g.set(x, K, K, 1), m.scale(C,
                C, x))
        }
        _SetProjectionMatrixChanged() {
            this._isViewFrustumChanged = this._isProjectionMatrixChanged = !0
        }
        _GetProjectionMatrix(z) {
            this._isProjectionMatrixChanged && (this._CalculateProjectionMatrix(z), this._isProjectionMatrixChanged = !1);
            return this._projectionMatrix
        }
        _CalculateProjectionMatrix(z) {
            var C = this._runtime.GetCanvasManager();
            const E = C.GetDrawWidth();
            C = C.GetDrawHeight();
            const [J, F] = this._GetVanishingPoint();
            z.CalculatePerspectiveMatrix(this._projectionMatrix, E / C, J, F)
        }
        _SetTransform(z, C = !0, E = 0, J = 0, F =
            0) {
            C && z.SetProjectionMatrix(this._GetProjectionMatrix(z));
            0 === E && 0 === J && 0 === F ? C = this._GetModelViewMatrix(z) : (this._CalculateModelViewMatrix(z, p, E, J, F), C = p);
            z.SetModelViewMatrix(C)
        }
        Draw(z, C, E) {
            const J = this._runtime.GetCanvasManager(),
                F = this.UsesOwnTexture();
            var H = null;
            let K = null;
            if(this._runtime.IsGPUProfiling())
                if(z.IsWebGL()) {
                    const N = J.GetLayerTimingsBuffer(this);
                    N && (K = N.AddTimeElapsedQuery(), z.StartQuery(K))
                } else z.IsWebGPU() && z.WriteTimestamp(2 * (this.GetIndex() + 1));
            F ? (H = {
                    sampling: this._runtime.GetSampling()
                },
                "low" === J.GetCurrentFullscreenScalingQuality() && (H.width = J.GetDrawWidth(), H.height = J.GetDrawHeight()), H = this._runtime.GetAdditionalRenderTarget(H), z.SetRenderTarget(H), this.IsTransparent() ? z.ClearRgba(0, 0, 0, 0) : z.Clear(this._backgroundColor)) : (z.SetRenderTarget(C), this.IsTransparent() || E || z.Clear(this._backgroundColor));
            this._curRenderTarget = H || C;
            this._SetTransform(z);
            z.SetBaseZ(this.GetZElevation());
            z.SetDepthEnabled(this.GetRuntime().Uses3DFeatures() && this._renderAs3d);
            this.GetNormalScale() > Number.EPSILON &&
                (this._UpdateZIndices(), this._useRenderCells && 0 === this.GetZElevation() && !this._anyInstanceZElevated ? this._DrawInstances_RenderCells(z) : this._DrawInstances(z, this._instances));
            z.SetBaseZ(0);
            z.SetCurrentZ(0);
            F && (z.SetDepthEnabled(!1), this._DrawLayerOwnTextureToRenderTarget(z, H, C, E));
            K && z.EndQuery(K);
            this._runtime.IsGPUProfiling() && z.IsWebGPU() && z.WriteTimestamp(2 * (this.GetIndex() + 1) + 1);
            this._curRenderTarget = null
        }
        _DrawInstances(z, C) {
            const E = this._viewport,
                J = this._curRenderTarget,
                F = this.GetLayout().HasVanishingPointOutsideViewport();
            let H = null;
            for(let K = 0, N = C.length; K < N; ++K) {
                const S = C[K];
                if(S === H) continue;
                H = S;
                const V = S.GetWorldInfo();
                V.IsVisible() && V.IsInViewport(E, F) && (V.HasAnyActiveEffect() ? this._DrawInstanceWithEffectsAndRestore(S, V, z, J) : this._DrawInstance(S, V, z))
            }
        }
        _DrawInstances_RenderCells(z) {
            var C = this._renderGrid;
            const E = this._curRenderCells,
                J = this._lastRenderCells,
                F = this._viewport;
            E.set(C.XToCell(F.getLeft()), C.YToCell(F.getTop()), C.XToCell(F.getRight()), C.YToCell(F.getBottom()));
            this._isRenderListUpToDate && E.equals(J) ?
                C = this._lastRenderList : (C = this._GetRenderCellInstancesToDraw(), this._isRenderListUpToDate = !0, J.copy(E));
            this._DrawInstances(z, C);
            C !== this._lastRenderList && e.shallowAssignArray(this._lastRenderList, C)
        }
        _DrawInstance(z, C, E) {
            C = C.GetRendererStateGroup();
            E.GetCurrentStateGroup() !== C && C.Apply();
            z.Draw(E)
        }
        _DrawInstanceWithEffectsAndRestore(z, C, E, J) {
            this._DrawInstanceWithEffects(z, C, E, J, null) && this._SetTransform(E)
        }
        _DrawInstanceWithEffects(z, C, E, J, F) {
            const H = C.GetInstanceEffectList().GetActiveEffectTypes();
            if(1 === H.length) {
                const K = H[0],
                    N = K.GetShaderProgram();
                if(!N.NeedsPostDrawOrExtendsBox() && C.HasDefaultColor() && !z.MustPreDraw()) return this._DrawInstanceWithEffects_FastPath(z, C, K, N, E), !1
            }
            z = e.RenderEffectChain(E, this._runtime, z, J, H, F);
            E.SetBaseZ(this.GetZElevation());
            return z
        }
        _DrawInstanceWithEffects_FastPath(z, C, E, J, F) {
            F.SetProgram(J);
            F.SetBlendMode(C.GetBlendMode());
            J.IsAnimated() && this._runtime.UpdateRender();
            let H = 0,
                K = 0;
            if(J.UsesAnySrcRectOrPixelSize()) {
                const [N, S] = z.GetCurrentSurfaceSize();
                H = 1 /
                    N;
                K = 1 / S;
                (J = z.GetCurrentTexRect()) ? f.copy(J): f.set(0, 0, 0, 0)
            }
            E = C.GetInstanceEffectList().GetEffectParametersForIndex(E.GetIndex());
            F.SetCurrentZ(C.GetZElevation());
            F.SetProgramParameters(null, c, f, f, C.GetBoundingBox(), H, K, this.GetOwnScale(), this.GetAngle(), this._runtime.GetGameTime(), E);
            z.Draw(F)
        }
        _DrawLayerOwnTextureToRenderTarget(z, C, E, J) {
            const F = this._effectList.GetActiveEffectTypes(),
                H = this._runtime;
            if(this._CanFastPathDrawLayer(F)) {
                z.SetRenderTarget(E);
                if(1 === F.length) {
                    var K = F[0];
                    E = K.GetShaderProgram();
                    z.SetProgram(E);
                    f.set(0, 0, 1, 1);
                    K = this._effectList.GetEffectParametersForIndex(K.GetIndex());
                    z.SetProgramParameters(null, c, f, f, this._viewport, 1 / H.GetDrawWidth(), 1 / H.GetDrawHeight(), this.GetNormalScale(), this.GetAngle(), H.GetGameTime(), K);
                    E.IsAnimated() && H.UpdateRender()
                } else z.SetTextureFillMode();
                J && 0 === this._blendMode && this.HasDefaultColor() && 0 === F.length ? z.CopyRenderTarget(C) : (z.SetBlendMode(this._blendMode), z.SetColor(this._premultipliedColor), z.DrawRenderTarget(C));
                z.InvalidateRenderTarget(C);
                H.ReleaseAdditionalRenderTarget(C)
            } else e.RenderEffectChain(z, H, this, E, F)
        }
        GetOwnScale() {
            return this._scale
        }
        SetOwnScale(z) {
            this._scale !== z && (this._scale = z, this._layout.BoundScrolling(), this._SetMVMatrixChanged(), this._runtime.UpdateRender())
        }
        GetRenderScale() {
            return this.GetNormalScale() * this._runtime.GetRenderScale()
        }
        GetDisplayScale() {
            return this.GetNormalScale() * this._runtime.GetDisplayScale()
        }
        GetNormalScale() {
            return (this._scale * this._layout.GetScale() - 1) * this._scaleRate + 1
        }
        UpdateViewport() {
            var z =
                this._runtime.GetParallaxXOrigin(),
                C = this._runtime.GetParallaxYOrigin(),
                E = (this.GetScrollX() - z) * this._parallaxX + z,
                J = (this.GetScrollY() - C) * this._parallaxY + C;
            z = this.GetNormalScale();
            C = this._runtime.GetViewportWidth() / z;
            z = this._runtime.GetViewportHeight() / z;
            E -= C / 2;
            let F = J - z / 2;
            this._runtime.IsPixelRoundingEnabled() && (E = Math.round(E), F = Math.round(F));
            J = this._viewportZ0;
            J.set(E, F, E + C, F + z);
            C = this.GetAngle();
            0 !== C && (b.copy(J), b.offset(-J.midX(), -J.midY()), a.setFromRotatedRect(b, C), a.getBoundingBox(b), b.offset(J.midX(),
                J.midY()), J.copy(b));
            this.GetViewportForZ(this._zElevation, this._viewport)
        }
        CanvasCssToLayer(z, C, E = 0) {
            return this._CanvasToLayer(z, C, E, this.GetDisplayScale())
        }
        DrawSurfaceToLayer(z, C, E = 0) {
            return this._CanvasToLayer(z, C, E, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _CanvasToLayer(z, C, E, J) {
            var F = this._runtime,
                H = F.GetRenderer();
            const K = this.GetNormalScale(),
                N = F.GetViewportWidth() / K;
            F = F.GetViewportHeight() / K;
            k.set(t, 0, 0, N, F);
            z /= J;
            C = t[3] - C / J;
            J = this._GetProjectionMatrix(H);
            H = this._GetModelViewMatrix(H);
            return e.Gfx.UnprojectScreenToWorldZ(z, C, E, H, J, t, x) ? [x[0], x[1]] : [NaN, NaN]
        }
        CanvasCssToLayer_DefaultTransform(z, C) {
            const E = this._scale,
                J = this._scaleRate,
                F = this._parallaxX,
                H = this._parallaxY,
                K = this._angle;
            this._parallaxY = this._parallaxX = this._scaleRate = this._scale = 1;
            this._angle = 0;
            this._SetMVMatrixChanged();
            z = this.CanvasCssToLayer(z, C);
            this._scale = E;
            this._scaleRate = J;
            this._parallaxX = F;
            this._parallaxY = H;
            this._angle = K;
            this._SetMVMatrixChanged();
            return z
        }
        LayerToCanvasCss(z, C, E = 0) {
            return this._LayerToCanvas(z,
                C, E, this.GetDisplayScale())
        }
        LayerToDrawSurface(z, C, E = 0) {
            return this._LayerToCanvas(z, C, E, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _LayerToCanvas(z, C, E, J) {
            var F = this._runtime,
                H = F.GetRenderer();
            const K = this.GetNormalScale();
            var N = F.GetViewportWidth() / K;
            F = F.GetViewportHeight() / K;
            k.set(t, 0, 0, N, F);
            N = this._GetProjectionMatrix(H);
            H = this._GetModelViewMatrix(H);
            return e.Gfx.Project(z, C, E, H, N, t, x) ? [x[0] * J, (t[3] - x[1]) * J] : [NaN, NaN]
        }
        _GetLayerToDrawSurfaceScale(z, C) {
            z *= this.GetRenderScale() * this.GetDevicePixelRatio();
            0 !== C && (z *= this.Get2DScaleFactorToZ(C));
            return z
        }
        _GetViewFrustum() {
            this._isViewFrustumChanged && (this._UpdateViewFrustum(), this._isViewFrustumChanged = !1);
            return this._viewFrustum
        }
        _UpdateViewFrustum() {
            var z = this._runtime.GetRenderer();
            const C = this._GetProjectionMatrix(z);
            z = this._GetModelViewMatrix(z);
            this._viewFrustum.CalculatePlanes(z, C)
        }
        _SaveToJson() {
            return {
                s: this.GetOwnScale(),
                a: this.GetOwnAngle(),
                vl: this._viewport.getLeft(),
                vt: this._viewport.getTop(),
                vr: this._viewport.getRight(),
                vb: this._viewport.getBottom(),
                v: this.IsVisible(),
                bc: this._backgroundColor.toJSON(),
                t: this.IsTransparent(),
                sx: this._scrollX,
                sy: this._scrollY,
                hosp: this._hasOwnScrollPosition,
                px: this.GetParallaxX(),
                py: this.GetParallaxY(),
                c: this._color.toJSON(),
                sr: this.GetScaleRate(),
                fx: this._effectList.SaveToJson(),
                cg: this._createdGlobalUids
            }
        }
        _LoadFromJson(z) {
            this._scale = z.s;
            this._angle = z.a;
            this._viewport.set(z.vl, z.vt, z.vr, z.vb);
            this._isVisible = !!z.v;
            this._backgroundColor.setFromJSON(z.bc);
            this._isTransparent = !!z.t;
            z.hasOwnProperty("sx") && (this._scrollX =
                z.sx);
            z.hasOwnProperty("sy") && (this._scrollY = z.sy);
            z.hasOwnProperty("hosp") && (this._hasOwnScrollPosition = !!z.hosp);
            this._parallaxX = z.px;
            this._parallaxY = z.py;
            this._color.setFromJSON(z.c);
            this._scaleRate = z.sr;
            e.shallowAssignArray(this._createdGlobalUids, z.cg);
            e.shallowAssignArray(this._initialInstances, this._startupInitialInstances);
            const C = new Set(this._createdGlobalUids);
            let E = 0;
            for(let J = 0, F = this._initialInstances.length; J < F; ++J) C.has(this._initialInstances[J][2]) || (this._initialInstances[E] = this._initialInstances[J],
                ++E);
            e.truncateArray(this._initialInstances, E);
            this._effectList.LoadFromJson(z.fx);
            this._SortInstancesByLastCachedZIndex(!1);
            this.SetZIndicesChanged()
        }
        GetILayer() {
            return this._iLayer
        }
        SortAndAddSceneGraphInstancesByZIndex(z) {
            z.GetWorldInfo();
            if(!this._instances.includes(z))
                if(z.HasChildren()) {
                    const C = [...z.allChildren()];
                    C.push(z);
                    C.sort((E, J) => {
                        E = E.GetWorldInfo().GetSceneGraphZIndex();
                        J = J.GetWorldInfo().GetSceneGraphZIndex();
                        return E - J
                    });
                    for(const E of C) this._AddInstance(E, !0)
                } else this._AddInstance(z,
                    !0)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = e.New(e.Rect),
        d = e.New(e.Rect),
        c = e.New(e.Rect),
        f = e.New(e.Color);
    e.Layout = class extends e.DefendedBase {
        constructor(h, g, k) {
            super();
            this._layoutManager = h;
            this._runtime = h.GetRuntime();
            this._name = k[0];
            this._originalWidth = k[1];
            this._originalHeight = k[2];
            this._width = k[1];
            this._height = k[2];
            this._isUnboundedScrolling = !!k[3];
            this._vanishingPointX = k[4];
            this._vanishingPointY = k[5];
            this._eventSheetName = k[6];
            this._eventSheet = null;
            this._sid = k[7];
            this._index = g;
            this._scrollY =
                this._scrollX = 0;
            this._scale = 1;
            this._angle = 0;
            this._initialObjectClasses = new Set;
            this._textureLoadedTypes = new Set;
            this._textureLoadPendingPromises = new Set;
            this._createdInstances = [];
            this._initialNonWorld = [];
            this._layers = [];
            this._layersByName = new Map;
            this._layersBySid = new Map;
            this._effectList = e.New(e.EffectList, this, k[10]);
            this._curRenderTarget = null;
            this._persistData = {};
            this._isFirstVisit = !0;
            this._iLayout = new self.ILayout(this);
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            for(const m of k[8]) h =
                e.Layer.Create(this, this._layers.length, m), this._layers.push(h), this._layersByName.set(h.GetName().toLowerCase(), h), this._layersBySid.set(h.GetSID(), h);
            for(const m of k[9]) {
                k = this._runtime.GetObjectClassByIndex(m[1]);
                if(!k) throw Error("missing nonworld object class");
                k.GetDefaultInstanceData() || k.SetDefaultInstanceData(m);
                this._initialNonWorld.push(m);
                this._AddInitialObjectClass(k)
            }
        }
        Release() {
            for(const h of this._layers) h.Release();
            e.clearArray(this._layers);
            this._textureLoadPendingPromises.clear();
            this._runtime = this._layoutManager = this._eventSheet = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetIndex() {
            return this._index
        }
        GetEffectList() {
            return this._effectList
        }
        GetMinLayerScale() {
            let h = this._layers[0].GetNormalScale();
            for(let g = 1, k = this._layers.length; g < k; ++g) {
                const m = this._layers[g];
                if(0 !== m.GetParallaxX() || 0 !== m.GetParallaxY()) h = Math.min(h, m.GetNormalScale())
            }
            return h
        }
        _GetScrollBoundMarginHorizontal() {
            return .5 * this._runtime.GetViewportWidth() /
                this.GetMinLayerScale()
        }
        _GetScrollBoundMarginVertical() {
            return .5 * this._runtime.GetViewportHeight() / this.GetMinLayerScale()
        }
        GetScrollLeftBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginHorizontal()
        }
        GetScrollRightBound() {
            return this.IsUnboundedScrolling() ? Infinity : this.GetWidth() - this._GetScrollBoundMarginHorizontal()
        }
        GetScrollTopBound() {
            return this.IsUnboundedScrolling() ? -Infinity : this._GetScrollBoundMarginVertical()
        }
        GetScrollBottomBound() {
            return this.IsUnboundedScrolling() ?
                Infinity : this.GetHeight() - this._GetScrollBoundMarginVertical()
        }
        SetScrollX(h) {
            const g = this.GetScrollLeftBound(),
                k = this.GetScrollRightBound();
            h > k && (h = k);
            h < g && (h = g);
            this._scrollX !== h && (this._scrollX = h, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollX() {
            return this._scrollX
        }
        SetScrollY(h) {
            const g = this.GetScrollTopBound(),
                k = this.GetScrollBottomBound();
            h > k && (h = k);
            h < g && (h = g);
            this._scrollY !== h && (this._scrollY = h, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetScrollY() {
            return this._scrollY
        }
        IsUnboundedScrolling() {
            return this._isUnboundedScrolling
        }
        BoundScrolling() {
            this.SetScrollX(this.GetScrollX());
            this.SetScrollY(this.GetScrollY());
            for(const h of this._layers) h.IsOwnScrollPositionEnabled() && (h.SetScrollX(h.GetScrollX()), h.SetScrollY(h.GetScrollY()))
        }
        SetVanishingPointXY(h, g) {
            if(this._vanishingPointX !== h || this._vanishingPointY !== g) this._vanishingPointX = h, this._vanishingPointY = g, this._SetAllLayersProjectionChanged(), this._SetAllLayersMVChanged(), this._runtime.UpdateRender()
        }
        GetVanishingPointX() {
            return this._vanishingPointX
        }
        GetVanishingPointY() {
            return this._vanishingPointY
        }
        HasVanishingPointOutsideViewport() {
            const h =
                this.GetVanishingPointX(),
                g = this.GetVanishingPointY();
            return 0 > h || 1 < h || 0 > g || 1 < g
        }
        GetScale() {
            return this._scale
        }
        SetScale(h) {
            this._scale !== h && (this._scale = h, this._SetAllLayersMVChanged(), this.BoundScrolling(), this._runtime.UpdateRender())
        }
        SetAngle(h) {
            h = e.clampAngle(h);
            this._angle !== h && (this._angle = h, this._SetAllLayersMVChanged(), this._runtime.UpdateRender())
        }
        GetAngle() {
            return this._angle
        }
        GetWidth() {
            return this._width
        }
        SetWidth(h) {
            !isFinite(h) || 1 > h || (this._width = h)
        }
        GetHeight() {
            return this._height
        }
        SetHeight(h) {
            !isFinite(h) ||
                1 > h || (this._height = h)
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetLayers() {
            return this._layers
        }
        GetLayerCount() {
            return this._layers.length
        }
        GetLayer(h) {
            return "number" === typeof h ? this.GetLayerByIndex(h) : this.GetLayerByName(h.toString())
        }
        GetLayerByIndex(h) {
            h = e.clamp(Math.floor(h), 0, this._layers.length - 1);
            return this._layers[h]
        }
        GetLayerByName(h) {
            return this._layersByName.get(h.toLowerCase()) || null
        }
        GetLayerBySID(h) {
            return this._layersBySid.get(h) || null
        }
        _SetAllLayersProjectionChanged() {
            for(const h of this._layers) h._SetProjectionMatrixChanged()
        }
        _SetAllLayersMVChanged() {
            for(const h of this._layers) h._SetMVMatrixChanged()
        }
        SaveTransform() {
            return {
                scrollX: this.GetScrollX(),
                scrollY: this.GetScrollY(),
                scale: this.GetScale(),
                angle: this.GetAngle(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY()
            }
        }
        RestoreTransform(h) {
            this.SetScrollX(h.scrollX);
            this.SetScrollY(h.scrollY);
            this.SetScale(h.scale);
            this.SetAngle(h.angle);
            this.SetVanishingPointXY(h.vpX, h.vpY)
        }
        HasOpaqueBottomLayer() {
            for(const h of this._layers)
                if(h.ShouldDraw()) return h._IsOpaque();
            return !1
        }
        GetLayoutBackgroundColor() {
            for(const h of this._layers)
                if(h.ShouldDraw() && h._IsOpaque()) return f.copyRgb(h.GetBackgroundColor()),
                    f.setA(1), f;
            f.setRgba(0, 0, 0, 0);
            return f
        }
        IsFirstVisit() {
            return this._isFirstVisit
        }
        _GetInitialObjectClasses() {
            return [...this._initialObjectClasses]
        }
        _AddInitialObjectClass(h) {
            if(h.IsInContainer())
                for(const g of h.GetContainer().GetObjectTypes()) this._initialObjectClasses.add(g);
            else this._initialObjectClasses.add(h)
        }
        _GetTextureLoadedObjectTypes() {
            return [...this._textureLoadedTypes]
        }
        _Load(h, g) {
            if(h === this || !g) return Promise.resolve();
            h && (e.CopySet(this._textureLoadedTypes, h._textureLoadedTypes), h._textureLoadedTypes.clear());
            h = [];
            for(const k of this._initialObjectClasses) this._textureLoadedTypes.has(k) || (h.push(k.LoadTextures(g)), this._textureLoadedTypes.add(k));
            return Promise.all(h)
        }
        async MaybeLoadTexturesFor(h) {
            if(h.IsFamily()) throw Error("cannot load textures for family");
            var g = this._runtime.GetRenderer();
            !g || g.IsContextLost() || this._textureLoadedTypes.has(h) || (this._textureLoadedTypes.add(h), g = h.LoadTextures(g), this._AddPendingTextureLoadPromise(g), await g, h.OnDynamicTextureLoadComplete(), this._runtime.UpdateRender())
        }
        _AddPendingTextureLoadPromise(h) {
            this._textureLoadPendingPromises.add(h);
            h.then(() => this._textureLoadPendingPromises.delete(h)).catch(() => this._textureLoadPendingPromises.delete(h))
        }
        WaitForPendingTextureLoadsToComplete() {
            return Promise.all([...this._textureLoadPendingPromises])
        }
        MaybeUnloadTexturesFor(h) {
            if(h.IsFamily() || 0 < h.GetInstanceCount()) throw Error("cannot unload textures");
            const g = this._runtime.GetRenderer();
            g && this._textureLoadedTypes.has(h) && (this._textureLoadedTypes.delete(h), h.ReleaseTextures(g))
        }
        _Unload(h, g) {
            if(h !== this && g)
                for(const k of this._textureLoadedTypes) k.IsGlobal() ||
                    h._initialObjectClasses.has(k) || (k.ReleaseTextures(), this._textureLoadedTypes.delete(k))
        }
        _OnWebGLContextLost() {
            this._textureLoadedTypes.clear()
        }
        async _StartRunning(h) {
            const g = this._runtime,
                k = this._layoutManager,
                m = g.GetEventSheetManager();
            this._eventSheetName && (this._eventSheet = m.GetEventSheetByName(this._eventSheetName), this._eventSheet._UpdateDeepIncludes());
            k._SetMainRunningLayout(this);
            this._width = this._originalWidth;
            this._height = this._originalHeight;
            this._scrollX = g.GetOriginalViewportWidth() /
                2;
            this._scrollY = g.GetOriginalViewportHeight() / 2;
            this.BoundScrolling();
            this._MoveGlobalObjectsToThisLayout(h);
            this._runtime.SetUsingCreatePromises(!0);
            this._CreateInitialInstances();
            this._isFirstVisit || this._CreatePersistedInstances();
            this._CreateAndLinkContainerInstances(this._createdInstances);
            this._CreateInitialNonWorldInstances();
            k.ClearPendingChangeLayout();
            g.FlushPendingInstances();
            this._runtime.SetUsingCreatePromises(!1);
            const p = this._runtime.GetCreatePromises();
            await Promise.all(p);
            e.clearArray(p);
            if(!g.IsLoadingState()) {
                for(const x of this._createdInstances) x.SetupInitialSceneGraphConnections();
                for(const x of this._createdInstances) x._TriggerOnCreated()
            }
            e.clearArray(this._createdInstances);
            await Promise.all([...this._initialObjectClasses].map(x => x.PreloadTexturesWithInstances(this._runtime.GetRenderer())));
            h && (g.Dispatcher().dispatchEvent(new e.Event("beforefirstlayoutstart")), await g.DispatchUserScriptEventAsyncWait(new e.Event("beforeprojectstart")));
            await this.DispatchUserScriptEventAsyncWait(new e.Event("beforelayoutstart"));
            g.IsLoadingState() || await g.TriggerAsync(e.Plugins.System.Cnds.OnLayoutStart, null, null);
            await this.DispatchUserScriptEventAsyncWait(new e.Event("afterlayoutstart"));
            h && (g.Dispatcher().dispatchEvent(new e.Event("afterfirstlayoutstart")), await g.DispatchUserScriptEventAsyncWait(new e.Event("afterprojectstart")));
            m._RunQueuedTriggers(k);
            await this.WaitForPendingTextureLoadsToComplete();
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._isFirstVisit = !1
        }
        _MoveGlobalObjectsToThisLayout(h) {
            for(const k of this._runtime.GetAllObjectClasses())
                if(!k.IsFamily() &&
                    k.IsWorldType())
                    for(const m of k.GetInstances()) {
                        const p = m.GetWorldInfo();
                        var g = p.GetLayer();
                        g = e.clamp(g.GetIndex(), 0, this._layers.length - 1);
                        g = this._layers[g];
                        p._SetLayer(g);
                        g._MaybeAddInstance(m)
                    }
            if(!h)
                for(const k of this._layers) k._SortInstancesByLastCachedZIndex(!1)
        }
        _CreateInitialInstances() {
            for(const h of this._layers) h.CreateInitialInstances(this._createdInstances), h.UpdateViewport(), h._Start()
        }
        _CreatePersistedInstances() {
            let h = !1;
            for(const [k, m] of Object.entries(this._persistData)) {
                const p =
                    this._runtime.GetObjectClassBySID(parseInt(k, 10));
                if(p && !p.IsFamily() && p.HasPersistBehavior()) {
                    for(const x of m) {
                        var g = null;
                        if(p.IsWorldType() && (g = this.GetLayerBySID(x.w.l), !g)) continue;
                        g = this._runtime.CreateInstanceFromData(p, g, !1, 0, 0, !0);
                        g.LoadFromJson(x);
                        h = !0;
                        this._createdInstances.push(g)
                    }
                    e.clearArray(m)
                }
            }
            for(const k of this._layers) k._SortInstancesByLastCachedZIndex(!0), k.SetZIndicesChanged();
            h && (this._runtime.FlushPendingInstances(), this._runtime._RefreshUidMap())
        }
        _CreateAndLinkContainerInstances(h) {
            for(const k of h) {
                if(!k.IsInContainer()) continue;
                const m = k.GetWorldInfo(),
                    p = k.GetIID();
                for(const x of k.GetObjectClass().GetContainer().objectTypes())
                    if(x !== k.GetObjectClass()) {
                        var g = x.GetInstances();
                        g.length > p ? k._AddSibling(g[p]) : (g = m ? this._runtime.CreateInstanceFromData(x, m.GetLayer(), !0, m.GetX(), m.GetY(), !0) : this._runtime.CreateInstanceFromData(x, null, !0, 0, 0, !0), this._runtime.FlushPendingInstances(), x._UpdateIIDs(), k._AddSibling(g), h.push(g))
                    }
            }
        }
        _CreateInitialNonWorldInstances() {
            for(const h of this._initialNonWorld) this._runtime.GetObjectClassByIndex(h[1]).IsInContainer() ||
                this._runtime.CreateInstanceFromData(h, null, !0)
        }
        _CreateGlobalNonWorlds() {
            const h = [],
                g = this._initialNonWorld;
            let k = 0;
            for(let m = 0, p = g.length; m < p; ++m) {
                const x = g[m],
                    t = this._runtime.GetObjectClassByIndex(x[1]);
                t.IsGlobal() ? t.IsInContainer() && t.GetContainer().HasAnyWorldType() || h.push(this._runtime.CreateInstanceFromData(x, null, !0)) : (g[k] = x, ++k)
            }
            e.truncateArray(g, k);
            this._runtime.FlushPendingInstances();
            this._CreateAndLinkContainerInstances(h)
        }
        RecreateInitialObjects(h, g, k, m, p, x) {
            if(k) return k.RecreateInitialObjects(h,
                g, m, p, x);
            k = [];
            for(const t of this._layers) k.push(t.RecreateInitialObjects(h, g, m, p, x));
            return k.flat()
        }
        async _StopRunning() {
            const h = this._layoutManager;
            this._runtime.IsLoadingState() || await this._runtime.TriggerAsync(e.Plugins.System.Cnds.OnLayoutEnd, null, null);
            h.SetIsEndingLayout(!0);
            this._runtime.GetEventSheetManager().ClearAllScheduledWaits();
            this._isFirstVisit || this._SavePersistData();
            for(const g of this._layers) g._End();
            for(const g of this._runtime.GetAllObjectClasses())
                if(!(g.IsGlobal() || g.IsWorldType() ||
                        g.GetPlugin().IsSingleGlobal() || g.IsFamily())) {
                    for(const k of g.GetInstances()) this._runtime.DestroyInstance(k);
                    this._runtime.FlushPendingInstances()
                } h.SetIsEndingLayout(!1);
            h.GetMainRunningLayout() === this && h._SetMainRunningLayout(null)
        }
        _SaveInstanceToPersist(h) {
            const g = h.GetObjectClass().GetSID().toString();
            this._persistData.hasOwnProperty(g) || (this._persistData[g] = []);
            this._persistData[g].push(h.SaveToJson())
        }
        _SavePersistData() {
            for(const h of this._layers) {
                h._UpdateZIndices();
                for(const g of h._GetInstances()) {
                    const k =
                        g.GetObjectClass();
                    !k.IsGlobal() && k.HasPersistBehavior() && this._SaveInstanceToPersist(g)
                }
            }
        }
        ResetPersistData() {
            this._persistData = {};
            this._isFirstVisit = !0
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        UsesOwnTexture() {
            return "low" === this._runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() || this._runtime.UsesAnyBackgroundBlending() || "low-latency" === this._runtime.GetCompositingMode() || this._effectList.HasAnyActiveEffect() || this._runtime.GetRenderer().IsWebGL() && this._runtime.Uses3DFeatures()
        }
        _CanFastPathDrawLayout(h) {
            return 0 ===
                h.length ? !0 : 2 <= h.length ? !1 : !h[0].GetShaderProgram().MustPreDraw()
        }
        Draw(h) {
            var g = this._runtime.GetCanvasManager();
            const k = this.UsesOwnTexture();
            var m = null;
            k ? ("low-latency" !== this._runtime.GetCompositingMode() && (h.SetRenderTarget(null), h.ClearRgba(0, 0, 0, 0)), m = {
                    sampling: this._runtime.GetSampling(),
                    isSampled: h.IsWebGPU() || this._runtime.UsesAnyBackgroundBlending() || this._effectList.HasAnyActiveEffect()
                }, "low" === g.GetCurrentFullscreenScalingQuality() && (m.width = g.GetDrawWidth(), m.height = g.GetDrawHeight()),
                m = this._runtime.GetAdditionalRenderTarget(m), h.SetRenderTarget(m)) : h.SetRenderTarget(null);
            h.Clear(this.GetLayoutBackgroundColor());
            this._runtime.Uses3DFeatures() && h.ClearDepth();
            this._curRenderTarget = m;
            g = !0;
            for(const p of this._layers) p.UpdateViewport(), p.ShouldDraw() && (p.Draw(h, m, g), g = !1);
            k && (h.SetDepthEnabled(!1), this._DrawLayoutOwnTextureToRenderTarget(h, m));
            this._curRenderTarget = null
        }
        _DrawLayoutOwnTextureToRenderTarget(h, g) {
            const k = this._effectList.GetActiveEffectTypes(),
                m = this._runtime;
            if(this._CanFastPathDrawLayout(k)) {
                h.SetRenderTarget(null);
                if(1 === k.length) {
                    var p = k[0];
                    const x = p.GetShaderProgram();
                    h.SetProgram(x);
                    d.set(0, 0, 1, 1);
                    c.set(0, 0, m.GetViewportWidth(), m.GetViewportHeight());
                    p = this._effectList.GetEffectParametersForIndex(p.GetIndex());
                    h.SetProgramParameters(null, a, d, d, c, 1 / m.GetDrawWidth(), 1 / m.GetDrawHeight(), this.GetScale(), this.GetAngle(), m.GetGameTime(), p);
                    x.IsAnimated() && m.UpdateRender()
                } else h.SetTextureFillMode();
                0 === k.length ? h.CopyRenderTarget(g) : (h.SetAlphaBlend(), h.ResetColor(), h.DrawRenderTarget(g));
                h.InvalidateRenderTarget(g);
                m.ReleaseAdditionalRenderTarget(g)
            } else e.RenderEffectChain(h, m, this, null, k)
        }
        _SaveToJson() {
            const h = {
                sx: this.GetScrollX(),
                sy: this.GetScrollY(),
                s: this.GetScale(),
                a: this.GetAngle(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                vpX: this.GetVanishingPointX(),
                vpY: this.GetVanishingPointY(),
                fv: this._isFirstVisit,
                persist: this._persistData,
                fx: this._effectList.SaveToJson(),
                layers: {}
            };
            for(const g of this._layers) h.layers[g.GetSID().toString()] = g._SaveToJson();
            return h
        }
        _LoadFromJson(h) {
            this._scrollX = h.sx;
            this._scrollY =
                h.sy;
            this._scale = h.s;
            this._angle = h.a;
            this._width = h.w;
            this._height = h.h;
            h.hasOwnProperty("vpX") && (this._vanishingPointX = h.vpX);
            h.hasOwnProperty("vpY") && (this._vanishingPointY = h.vpY);
            this._isFirstVisit = !!h.fv;
            this._persistData = h.persist;
            this._effectList.LoadFromJson(h.fx);
            for(const [g, k] of Object.entries(h.layers)) h = parseInt(g, 10), (h = this.GetLayerBySID(h)) && h._LoadFromJson(k);
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged()
        }
        GetILayout() {
            return this._iLayout
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(h) {
            h.layout =
                this.GetILayout();
            var g = this._runtime;
            (g = g.IsDebug() && !g.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(h);
            g && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(h) {
            h.layout = this.GetILayout();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(h)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LayoutManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allLayouts = [];
            this._layoutsByName = new Map;
            this._layoutsBySid = new Map;
            this._mainRunningLayout = null;
            this._runningSubLayouts = [];
            this._firstLayout = null;
            this._isEndingLayout = 0;
            this._pendingChangeLayout = null
        }
        Release() {
            this._pendingChangeLayout = this._firstLayout = this._mainRunningLayout = this._runtime = null;
            e.clearArray(this._allLayouts);
            this._layoutsByName.clear();
            this._layoutsBySid.clear();
            e.clearArray(this._runningSubLayouts)
        }
        Create(b) {
            b = e.New(e.Layout, this, this._allLayouts.length, b);
            this._allLayouts.push(b);
            this._layoutsByName.set(b.GetName().toLowerCase(), b);
            this._layoutsBySid.set(b.GetSID(), b)
        }
        GetRuntime() {
            return this._runtime
        }
        SetFirstLayout(b) {
            this._firstLayout = b
        }
        GetFirstLayout() {
            if(this._firstLayout) return this._firstLayout;
            if(this._allLayouts.length) return this._allLayouts[0];
            throw Error("no first layout");
        }
        GetLayoutByName(b) {
            return this._layoutsByName.get(b.toLowerCase()) ||
                null
        }
        GetLayoutBySID(b) {
            return this._layoutsBySid.get(b) || null
        }
        GetLayoutByIndex(b) {
            b = e.clamp(Math.floor(b), 0, this._allLayouts.length - 1);
            return this._allLayouts[b]
        }
        GetLayout(b) {
            return "number" === typeof b ? this.GetLayoutByIndex(b) : this.GetLayoutByName(b.toString())
        }
        GetAllLayouts() {
            return this._allLayouts
        }
        _SetMainRunningLayout(b) {
            this._mainRunningLayout = b
        }
        GetMainRunningLayout() {
            return this._mainRunningLayout
        }
        _AddRunningSubLayout(b) {
            if(this._runningSubLayouts.includes(b)) throw Error("layout already running");
            this._runningSubLayouts.push(b)
        }
        _RemoveRunningSubLayout(b) {
            b = this._runningSubLayouts.indexOf(b);
            if(-1 === b) throw Error("layout not running");
            this._runningSubLayouts.splice(b, 1)
        }* runningLayouts() {
            this._mainRunningLayout && (yield this._mainRunningLayout);
            this._runningSubLayouts.length && (yield* this._runningSubLayouts)
        }
        IsLayoutRunning(b) {
            return this._mainRunningLayout === b || this._runningSubLayouts.includes(b)
        }
        SetIsEndingLayout(b) {
            if(b) this._isEndingLayout++;
            else {
                if(0 >= this._isEndingLayout) throw Error("already unset");
                this._isEndingLayout--
            }
        }
        IsEndingLayout() {
            return 0 < this._isEndingLayout
        }
        ChangeMainLayout(b) {
            this._pendingChangeLayout = b
        }
        ClearPendingChangeLayout() {
            this._pendingChangeLayout = null
        }
        IsPendingChangeMainLayout() {
            return !!this._pendingChangeLayout
        }
        GetPendingChangeMainLayout() {
            return this._pendingChangeLayout
        }
        SetAllLayerProjectionChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersProjectionChanged()
        }
        SetAllLayerMVChanged() {
            const b = this.GetMainRunningLayout();
            b && b._SetAllLayersMVChanged()
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor() {
            this.runtime = this.renderer = null;
            this.surfaceHeight = this.surfaceWidth = this.drawHeight = this.drawWidth = 0;
            this.layoutRect = new e.Rect;
            this.rcTexBounce = new e.Rect;
            this.rcTexDest = new e.Rect;
            this.rcTexOrigin = new e.Rect;
            this.screenRect = new e.Rect;
            this.clearRect = new e.Rect;
            this.srcRect = new e.Rect;
            this.fxTex = [null, null];
            this.fxIndex = 0;
            this.otherFxIndex = 1;
            this.layerAngle = this.layerScale = this.boxExtendVertical = this.boxExtendHorizontal = 0;
            this.renderTarget = this.wi =
                this.inst = this.layer = this.layout = null;
            this.didChangeTransform = this.postDraw = this.preDraw = !1;
            this.opts = null
        }
        Clear() {
            this.opts = this.renderTarget = this.wi = this.inst = this.layer = this.layout = this.runtime = this.renderer = null
        }
        ShouldPreDraw(r) {
            r = r.GetShaderProgram();
            if(r.MustPreDraw()) return !0;
            if(this.inst) return r.UsesDest() && (0 !== this.wi.GetAngle() || 0 > this.wi.GetWidth() || 0 > this.wi.GetHeight()) || 0 !== this.boxExtendHorizontal || 0 !== this.boxExtendVertical || !this.wi.HasDefaultColor() || this.inst.MustPreDraw();
            if(this.layer) return !this.layer.HasDefaultColor()
        }
        ShouldPostDraw(r) {
            r =
                r.GetShaderProgram();
            return r.UsesDest() || r.UsesCrossSampling() || this.layout && "low" === this.runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality()
        }
        GetEffectRenderTarget(r) {
            if(0 !== r && 1 !== r) throw Error("invalid effect target");
            const y = this.fxTex;
            if(!y[r]) {
                var v = this.runtime;
                const u = v.GetCanvasManager();
                v = {
                    sampling: v.GetSampling()
                };
                "low" === u.GetCurrentFullscreenScalingQuality() && (v.width = u.GetDrawWidth(), v.height = u.GetDrawHeight());
                y[r] = u.GetAdditionalRenderTarget(v)
            }
            return y[r]
        }
        ReleaseEffectRenderTargets() {
            const r =
                this.fxTex,
                y = this.runtime.GetCanvasManager();
            r[0] && (y.ReleaseAdditionalRenderTarget(r[0]), r[0] = null);
            r[1] && (y.ReleaseAdditionalRenderTarget(r[1]), r[1] = null)
        }
    }
    const a = [];
    let d = 0;

    function c() {
        d === a.length && a.push(new b);
        return a[d++]
    }

    function f(r) {
        r.ReleaseEffectRenderTargets();
        r.Clear();
        d--
    }
    const h = new e.Quad;
    let g = !1;
    async function k(r, y, v) {
        y = await e.Gfx.WebGLRenderTarget.DebugReadPixelsToBlob(y, v);
        y = URL.createObjectURL(y);
        console.log("[FX] " + r + " " + (v ? "" : " [to display]") + ": ", y)
    }
    e.RenderEffectChain =
        function(r, y, v, u, A, z) {
            const C = c();
            C.renderer = r;
            C.runtime = y;
            if(v instanceof e.Instance) C.inst = v, C.wi = C.inst.GetWorldInfo();
            else if(v instanceof e.Layer) C.layer = v;
            else if(v instanceof e.Layout) C.layout = v;
            else throw Error("invalid effects object");
            v = y.GetCanvasManager();
            C.renderTarget = u;
            C.drawWidth = v.GetDrawWidth();
            C.drawHeight = v.GetDrawHeight();
            C.surfaceWidth = C.drawWidth;
            C.surfaceHeight = C.drawHeight;
            C.fxIndex = 0;
            C.otherFxIndex = 1;
            C.boxExtendHorizontal = 0;
            C.boxExtendVertical = 0;
            C.screenRect.set(0, 0, C.drawWidth,
                C.drawHeight);
            C.clearRect.set(0, 0, C.drawWidth, C.drawHeight);
            C.didChangeTransform = !1;
            C.opts = z;
            C.inst ? (u = C.wi, C.layerScale = u.GetLayer().GetRenderScale(), C.layerAngle = u.GetLayer().GetAngle(), C.layoutRect.copy(u.GetBoundingBox())) : C.layer ? (u = C.layer, C.layerScale = u.GetRenderScale(), C.layerAngle = u.GetAngle(), C.layoutRect.copy(u.GetViewport())) : (u = C.layout, C.layerScale = u.GetScale(), C.layerAngle = u.GetAngle(), C.layoutRect.set(0, 0, C.drawWidth, C.drawHeight));
            C.inst ? m(C, A) : (C.rcTexBounce.set(0, 0, C.drawWidth /
                C.surfaceWidth, C.drawHeight / C.surfaceHeight), C.rcTexDest.copy(C.rcTexBounce), C.rcTexOrigin.copy(C.rcTexBounce), C.rcTexBounce.swapTopBottom(), C.rcTexDest.swapTopBottom(), C.rcTexOrigin.swapTopBottom());
            r.SetAlphaBlend();
            r.ResetColor();
            r.SetBaseZ(0);
            r.SetCurrentZ(0);
            C.preDraw = C.ShouldPreDraw(A[0]);
            C.preDraw && p(C);
            r.ResetColor();
            u = A.length - 1;
            C.postDraw = C.ShouldPostDraw(A[u]);
            for(let E = 0, J = A.length; E < J; ++E) z = A[E], v = z.GetShaderProgram(), r.SetProgram(v), v.IsAnimated() && y.UpdateRender(), 0 !== E || C.preDraw ?
                (r.SetCopyBlend(), t(C, z, E === u && !C.postDraw, E)) : x(C, z), 0 === C.fxIndex ? (C.fxIndex = 1, C.otherFxIndex = 0) : (C.fxIndex = 0, C.otherFxIndex = 1);
            C.postDraw && q(C, A);
            r = C.didChangeTransform;
            f(C);
            g = !1;
            return r
        };

    function m(r, y) {
        for(let H = 0, K = y.length; H < K; ++H) {
            var v = y[H].GetShaderProgram();
            r.boxExtendHorizontal += v.GetBoxExtendHorizontal();
            r.boxExtendVertical += v.GetBoxExtendVertical()
        }
        var u = r.wi;
        y = u.GetLayer();
        var A = y.GetAngle();
        v = u.GetBoundingBox();
        var z = u.GetTotalZElevation();
        u = u.GetDepth();
        let [C, E] = y.LayerToDrawSurface(v.getLeft(),
            v.getTop(), z), [J, F] = y.LayerToDrawSurface(v.getRight(), v.getBottom(), z);
        if(0 !== A || 0 < u) {
            const [H, K] = y.LayerToDrawSurface(v.getRight(), v.getTop(), z), [N, S] = y.LayerToDrawSurface(v.getLeft(), v.getBottom(), z);
            if(0 < u) {
                A = z + u;
                const [V, U] = y.LayerToDrawSurface(v.getLeft(), v.getTop(), A), [X, ia] = y.LayerToDrawSurface(v.getRight(), v.getTop(), A), [ka, ya] = y.LayerToDrawSurface(v.getRight(), v.getBottom(), A), [ta, Ba] = y.LayerToDrawSurface(v.getLeft(), v.getBottom(), A);
                y = Math.min(C, J, H, N, V, X, ka, ta);
                J = Math.max(C, J, H, N, V, X, ka,
                    ta);
                C = y;
                y = Math.min(E, F, K, S, U, ia, ya, Ba);
                F = Math.max(E, F, K, S, U, ia, ya, Ba);
                E = y
            } else y = Math.min(C, J, H, N), J = Math.max(C, J, H, N), C = y, y = Math.min(E, F, K, S), F = Math.max(E, F, K, S), E = y
        }
        y = r.screenRect;
        v = r.rcTexOrigin;
        A = r.rcTexDest;
        z = r.clearRect;
        u = r.rcTexBounce;
        y.set(C, E, J, F);
        y.shuntY(r.drawHeight);
        v.copy(y);
        v.divide(r.surfaceWidth, r.surfaceHeight);
        v.swapTopBottom();
        y.inflate(r.boxExtendHorizontal, r.boxExtendVertical);
        A.copy(y);
        A.divide(r.surfaceWidth, r.surfaceHeight);
        A.swapTopBottom();
        z.copy(y);
        z.roundOuter();
        z.inflate(r.boxExtendHorizontal +
            1, r.boxExtendVertical + 1);
        y.clamp(0, 0, r.drawWidth, r.drawHeight);
        z.clamp(0, 0, r.drawWidth, r.drawHeight);
        u.copy(y);
        u.divide(r.surfaceWidth, r.surfaceHeight);
        u.swapTopBottom()
    }

    function p(r) {
        const y = r.renderer;
        y.SetTextureFillMode();
        const v = r.GetEffectRenderTarget(r.fxIndex);
        y.SetRenderTarget(v);
        var u = r.opts;
        u && u.preTransform && u.preTransform();
        y.ClearRect2(r.clearRect);
        r.inst ? (y.SetColor(r.wi.GetPremultipliedColor()), y.SetCurrentZ(r.wi.GetTotalZElevation()), r.inst.Draw(y), y.SetCurrentZ(0)) : (u = (r.layer ||
            r.layout).GetRenderTarget(), r.layer ? y.SetColor(r.layer.GetPremultipliedColor()) : y.ResetColor(), y.DrawRenderTarget(u), y.InvalidateRenderTarget(u), r.runtime.GetCanvasManager().ReleaseAdditionalRenderTarget(u));
        r.rcTexDest.clampFlipped(0, 1, 1, 0);
        r.fxIndex = 1;
        r.otherFxIndex = 0;
        g && k("Pre-draw", y, v)
    }

    function x(r, y) {
        const v = r.renderer,
            u = r.runtime,
            A = r.GetEffectRenderTarget(r.fxIndex);
        v.SetRenderTarget(A);
        var z = r.opts;
        z && z.preTransform && z.preTransform();
        v.ClearRect2(r.clearRect);
        if(r.inst) {
            const [C, E] = r.inst.GetCurrentSurfaceSize();
            (z = r.inst.GetCurrentTexRect()) ? r.srcRect.copy(z): r.srcRect.set(0, 0, 0, 0);
            y = r.wi.GetInstanceEffectList().GetEffectParametersForIndex(y.GetIndex());
            v.SetProgramParameters(r.renderTarget, r.rcTexDest, r.srcRect, r.srcRect, r.layoutRect, 1 / C, 1 / E, r.layerScale, r.layerAngle, u.GetGameTime(), y);
            v.SetCurrentZ(r.wi.GetTotalZElevation());
            r.inst.Draw(v);
            v.SetCurrentZ(0);
            r.rcTexDest.clampFlipped(0, 1, 1, 0);
            r.screenRect.shuntY(r.drawHeight)
        } else y = (r.layer || r.layout).GetEffectList().GetEffectParametersForIndex(y.GetIndex()),
            v.SetProgramParameters(r.renderTarget, r.rcTexDest, r.rcTexBounce, r.rcTexOrigin, r.layoutRect, 1 / r.drawWidth, 1 / r.drawHeight, r.layerScale, r.layerAngle, u.GetGameTime(), y), r = (r.layer || r.layout).GetRenderTarget(), g && k("Layer target", v, r), v.DrawRenderTarget(r), v.InvalidateRenderTarget(r), u.GetCanvasManager().ReleaseAdditionalRenderTarget(r);
        g && k("First bounce", v, A)
    }

    function t(r, y, v, u) {
        const A = r.renderer,
            z = r.runtime;
        0 === u && r.preDraw && r.inst && r.screenRect.shuntY(r.drawHeight);
        v ? (r.inst ? A.SetBlendMode(r.wi.GetBlendMode()) :
            r.layer && A.SetBlendMode(r.layer.GetBlendMode()), v = r.renderTarget, A.SetRenderTarget(v)) : (v = r.GetEffectRenderTarget(r.fxIndex), A.SetRenderTarget(v), A.ClearRect2(r.clearRect));
        y = r.inst ? r.wi.GetInstanceEffectList().GetEffectParametersForIndex(y.GetIndex()) : (r.layer || r.layout).GetEffectList().GetEffectParametersForIndex(y.GetIndex());
        A.SetProgramParameters(r.renderTarget, r.rcTexDest, r.rcTexBounce, r.rcTexOrigin, r.layoutRect, 1 / r.surfaceWidth, 1 / r.surfaceHeight, r.layerScale, r.layerAngle, z.GetGameTime(), y);
        y = r.GetEffectRenderTarget(r.otherFxIndex);
        A.SetTexture(y.GetTexture());
        z.GetCanvasManager().SetDeviceTransform(A);
        r.didChangeTransform = !0;
        h.setFromRect(r.screenRect);
        A.Quad3(h, r.rcTexBounce);
        r.inst || A.InvalidateRenderTarget(y);
        g && k("Bounce " + u, A, v)
    }

    function q(r, y) {
        y = r.renderer;
        if(r.layout) y.SetTextureFillMode(), y.SetRenderTarget(r.renderTarget), r = r.GetEffectRenderTarget(r.otherFxIndex), y.CopyRenderTarget(r), y.InvalidateRenderTarget(r);
        else {
            var v = r.runtime.GetCanvasManager();
            "low" === v.GetCurrentFullscreenScalingQuality() ?
                (y.SetTextureFillMode(), v.SetDeviceTransform(y, v.GetDrawWidth(), v.GetDrawHeight()), r.didChangeTransform = !0) : y.SetDeviceTransformTextureFillMode();
            r.inst ? y.SetBlendMode(r.wi.GetBlendMode()) : r.layer && y.SetBlendMode(r.layer.GetBlendMode());
            y.SetRenderTarget(r.renderTarget);
            v = r.GetEffectRenderTarget(r.otherFxIndex);
            y.SetTexture(v.GetTexture());
            h.setFromRect(r.screenRect);
            y.Quad3(h, r.rcTexBounce);
            r.inst || y.InvalidateRenderTarget(v);
            g && k("Post-draw", y, r.renderTarget)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = /<(.+?)>/g;
    e.TimelineManager = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a;
            this._timelineDataManager = e.New(e.TimelineDataManager);
            this._pluginInstance = null;
            this._timelines = [];
            this._timelinesByName = new Map;
            this._objectClassToTimelineMap = new Map;
            this._timelinesCreatedByTemplate = new Map;
            this._scheduledTimelines = [];
            this._playingTimelines = [];
            this._isTickingTimelines = this._changingLayout = this._hasRuntimeListeners = !1;
            this._tickFunc = () => this._OnTick();
            this._tick2Func = () => this._OnTick2();
            this._beforeLayoutChange = () => this._OnBeforeChangeLayout();
            this._layoutChange = () => this._OnAfterChangeLayout();
            this._instanceDestroy = d => this._OnInstanceDestroy(d.instance);
            this._afterLoad = d => this._OnAfterLoad();
            this._destroyedWhileLoadingState = []
        }
        Release() {
            this.RemoveRuntimeListeners();
            this._afterLoad = this._instanceDestroy = this._layoutChange = this._beforeLayoutChange = this._tick2Func = this._tickFunc = null;
            for(const a of this._timelines) a.Stop(), a.Release();
            e.clearArray(this._timelines);
            this._timelines = null;
            this._timelineDataManager.Release();
            this._timelineDataManager = null;
            e.clearArray(this._scheduledTimelines);
            this._scheduledTimelines = null;
            e.clearArray(this._playingTimelines);
            this._playingTimelines = null;
            this._timelinesByName.clear();
            this._timelinesByName = null;
            this._objectClassToTimelineMap.clear();
            this._objectClassToTimelineMap = null;
            this._timelinesCreatedByTemplate.clear();
            this._timelinesCreatedByTemplate = null;
            e.clearArray(this._destroyedWhileLoadingState);
            this._runtime = this._destroyedWhileLoadingState =
                null
        }
        AddRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.addEventListener("pretick", this._tickFunc);
            a.addEventListener("tick2", this._tick2Func);
            a.addEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.addEventListener("layoutchange", this._layoutChange);
            a.addEventListener("instancedestroy", this._instanceDestroy);
            a.addEventListener("afterload", this._afterLoad)
        }
        RemoveRuntimeListeners() {
            const a = this._runtime.Dispatcher();
            a.removeEventListener("pretick", this._tickFunc);
            a.removeEventListener("tick2",
                this._tick2Func);
            a.removeEventListener("beforelayoutchange", this._beforeLayoutChange);
            a.removeEventListener("layoutchange", this._layoutChange);
            a.removeEventListener("instancedestroy", this._instanceDestroy);
            a.removeEventListener("afterload", this._afterLoad)
        }
        Create(a) {
            this._timelineDataManager.Add(a);
            a = e.TimelineState.CreateInitial(a, this);
            this.Add(a);
            this.SetTimelineObjectClassesToMap(a);
            this._timelinesCreatedByTemplate.set(a.GetName(), 0)
        }
        CreateFromTemplate(a) {
            var d = this.GetTimelineDataManager();
            a =
                a.GetTemplateName();
            d = d.Get(a);
            d = e.TimelineState.CreateFromTemplate(`${a}:${this._timelinesCreatedByTemplate.get(a)}`, d, this);
            this._IncreaseTemplateTimelinesCount(a);
            this.Add(d);
            return d
        }
        _IncreaseTemplateTimelinesCount(a) {
            this._timelinesCreatedByTemplate.set(a, this._timelinesCreatedByTemplate.get(a) + 1)
        }
        _SetCreatedTemplateTimelinesCount() {
            for(const a of this._timelines) {
                if(a.IsTemplate()) continue;
                const d = a.GetTemplateName();
                this._IncreaseTemplateTimelinesCount(d)
            }
        }
        _ClearCreatedTemplateTimelinesCount() {
            for(const a of this._timelinesCreatedByTemplate.keys()) this._timelinesCreatedByTemplate.set(a,
                0)
        }
        Add(a) {
            this._timelines.push(a);
            this._timelinesByName.set(a.GetName().toLowerCase(), a)
        }
        Remove(a) {
            a.IsTemplate() || (e.arrayFindRemove(this._timelines, a), e.arrayFindRemove(this._scheduledTimelines, a), e.arrayFindRemove(this._playingTimelines, a), this._timelinesByName.delete(a.GetName().toLowerCase()), this.RemoveTimelineFromObjectClassMap(a), a.IsReleased() || a.Release())
        }
        Trigger(a) {
            this._runtime.Trigger(a, this._pluginInstance, null)
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimelineDataManager() {
            return this._timelineDataManager
        }
        SetPluginInstance(a) {
            this._pluginInstance =
                a
        }
        GetPluginInstance() {
            return this._pluginInstance
        }* GetTimelines() {
            for(const a of this._timelines) yield a
        }
        SetTimelineObjectClassToMap(a, d) {
            this._objectClassToTimelineMap.has(a) || this._objectClassToTimelineMap.set(a, new Set);
            this._objectClassToTimelineMap.get(a).add(d)
        }
        SetTimelineObjectClassesToMap(a) {
            for(const d of a.GetObjectClasses()) this.SetTimelineObjectClassToMap(d, a)
        }
        RemoveTimelineFromObjectClassMap(a) {
            for(const [d, c] of this._objectClassToTimelineMap.entries()) c.has(a) && (c.delete(a), 0 === c.size &&
                this._objectClassToTimelineMap.delete(d))
        }
        GetTimelinesForObjectClass(a) {
            if(this._objectClassToTimelineMap.has(a)) return this._objectClassToTimelineMap.get(a)
        }
        GetTimelineOfTemplateForInstances(a, d) {
            if(d)
                for(const c of this._timelines)
                    if(d.every(f => c.HasTrackInstance(f.instance, f.trackId)) && c.GetName().includes(a.GetName())) return c
        }
        GetTimelineByName(a) {
            return this._timelinesByName.get(a.toLowerCase()) || null
        }
        GetScheduledOrPlayingTimelineByName(a) {
            for(const d of this._scheduledTimelines)
                if(d.GetName() ===
                    a) return d;
            for(const d of this._playingTimelines)
                if(d.GetName() === a) return d;
            return null
        }* GetTimelinesByName(a) {
            if(b.test(a)) {
                b.lastIndex = 0;
                let c;
                var d = new Set;
                do
                    if(c = b.exec(a)) {
                        const f = c[1].split(",");
                        for(const h of f) d.add(h)
                    } while(c);
                for(const f of d.values())(a = this.GetTimelineByName(f)) && (yield a);
                d.clear()
            } else(d = this.GetTimelineByName(a)) && (yield d)
        }* GetTimelinesByTags(a) {
            for(const d of this._timelines) d.HasTags(a) && (yield d)
        }
        AddScheduledTimeline(a) {
            this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a);
            this._MaybeEnableRuntimeListeners()
        }
        RemovePlayingTimeline(a) {
            e.arrayFindRemove(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        ScheduleTimeline(a) {
            this._playingTimelines.includes(a) ? (a.SetPlaying(!0), a.SetScheduled(!1), a.SetMarkedForRemoval(!1)) : (a.SetPlaying(!1), a.SetScheduled(!0), a.SetMarkedForRemoval(!1), this._scheduledTimelines.includes(a) || this._scheduledTimelines.push(a));
            this._MaybeEnableRuntimeListeners()
        }
        DeScheduleTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.ResolvePlayPromise();
            e.arrayFindRemove(this._scheduledTimelines, a);
            this._MaybeDisableRuntimeListeners()
        }
        CompleteTimeline(a) {
            a.SetPlaying(!1);
            a.SetScheduled(!1);
            a.SetMarkedForRemoval(!0)
        }
        CompleteTimelineAndResolve(a) {
            this.CompleteTimeline(a);
            a.ResolvePlayPromise()
        }
        _OnTick() {
            if(!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a = !1;
                for(this._isTickingTimelines = !0; this._scheduledTimelines.length;) {
                    var d = this._scheduledTimelines.pop();
                    d.SetInitialState();
                    this._playingTimelines.push(d)
                }
                d =
                    this._runtime.GetDt();
                var c = this._runtime.GetTimeScale();
                for(const f of this._playingTimelines) {
                    if(f.IsMarkedForRemoval()) continue;
                    const h = f.Tick(d, c);
                    !a && h && (a = !0)
                }
                this._isTickingTimelines = !1;
                a && this.GetRuntime().UpdateRender()
            }
        }
        _OnTick2() {
            if(!this.GetRuntime().IsLoadingState() && this._hasRuntimeListeners && !this._changingLayout) {
                var a;
                for(const d of this._playingTimelines) d.IsMarkedForRemoval() && (a || (a = new Set), this._MaybeExecuteTimelineFinishTriggers(d), a.add(d));
                a && e.arrayRemoveAllInSet(this._playingTimelines,
                    a);
                this._MaybeDisableRuntimeListeners()
            }
        }
        _MaybeExecuteTimelineFinishTriggers(a) {
            a.IsReleased() || a.HasValidTracks() && a.IsComplete() && a.InitialStateSet() && a.FinishTriggers()
        }
        _MaybeEnableRuntimeListeners() {
            this._hasRuntimeListeners || (this._hasRuntimeListeners = !0)
        }
        _MaybeDisableRuntimeListeners() {
            this._playingTimelines.length || this._scheduledTimelines.length || this._isTickingTimelines || (this._hasRuntimeListeners = !1)
        }
        _OnBeforeChangeLayout() {
            for(this._changingLayout = !0; this._scheduledTimelines.length;) this.DeScheduleTimeline(this._scheduledTimelines.pop());
            const a = new Set;
            for(const d of this._playingTimelines) d._OnBeforeChangeLayout() && a.add(d);
            e.arrayRemoveAllInSet(this._playingTimelines, a);
            this._MaybeDisableRuntimeListeners();
            for(const d of this._timelines) d.CleanCaches()
        }
        _OnAfterChangeLayout() {
            this._changingLayout = !1
        }
        _OnInstanceDestroy(a) {
            var d = a.GetObjectClass();
            if(d = this.GetTimelinesForObjectClass(d))
                if(this._runtime.IsLoadingState()) this._destroyedWhileLoadingState.push(a);
                else
                    for(const c of d) c.IsTemplate() || (c.IsReleased() ? this.Remove(c) : c.HasValidTracks() ||
                        (this._MaybeExecuteTimelineFinishTriggers(c), this.Remove(c)))
        }
        _OnAfterLoad() {
            for(const a of this._destroyedWhileLoadingState) this._OnInstanceDestroy(a);
            e.clearArray(this._destroyedWhileLoadingState)
        }
        _SaveToJson() {
            return {
                timelinesJson: this._SaveTimelinesToJson(),
                scheduledTimelinesJson: this._SaveScheduledTimelinesToJson(),
                playingTimelinesJson: this._SavePlayingTimelinesToJson(),
                hasRuntimeListeners: this._hasRuntimeListeners,
                changingLayout: this._changingLayout,
                isTickingTimelines: this._isTickingTimelines
            }
        }
        _LoadFromJson(a) {
            a &&
                (this._ClearCreatedTemplateTimelinesCount(), this._LoadTimelinesFromJson(a.timelinesJson), this._LoadScheduledTimelinesFromJson(a.scheduledTimelinesJson), this._LoadPlayingTimelinesFromJson(a.playingTimelinesJson), this._hasRuntimeListeners = !a.hasRuntimeListeners, this._changingLayout = !!a.changingLayout, this._isTickingTimelines = !!a.isTickingTimelines, this._SetCreatedTemplateTimelinesCount(), this._MaybeEnableRuntimeListeners(), this._MaybeDisableRuntimeListeners())
        }
        _SaveTimelinesToJson() {
            return this._timelines.map(a =>
                a._SaveToJson())
        }
        _LoadTimelinesFromJson(a) {
            for(const d of a) {
                a = this.GetTimelineByName(d.name);
                if(!a) {
                    a = this._GetTemplateNameFromJson(d);
                    if(!a) continue;
                    a = this.GetTimelineByName(a);
                    a = this.CreateFromTemplate(a)
                }
                a._LoadFromJson(d);
                a.HasTracks() || this.Remove(a)
            }
        }
        _GetTemplateNameFromJson(a) {
            return (a = a.name.split(":")) && 2 === a.length ? a[0] : null
        }
        _SaveScheduledTimelinesToJson() {
            return this._SaveTimelines(this._scheduledTimelines)
        }
        _LoadScheduledTimelinesFromJson(a) {
            this._LoadTimelines(a, this._scheduledTimelines)
        }
        _SavePlayingTimelinesToJson() {
            return this._SaveTimelines(this._playingTimelines)
        }
        _LoadPlayingTimelinesFromJson(a) {
            this._LoadTimelines(a,
                this._playingTimelines)
        }
        _IsTimelineInJson(a, d) {
            for(const c of d)
                if(c === a.GetName()) return !0;
            return !1
        }
        _SaveTimelines(a) {
            return a.map(d => d.GetName())
        }
        _LoadTimelines(a, d) {
            var c = new Set;
            for(const f of d) this._IsTimelineInJson(f, a) || c.add(f);
            e.arrayRemoveAllInSet(d, c);
            c = f => h => h.GetName() === f;
            for(const f of a)(a = this.GetTimelineByName(f)) && (d.find(c(f)) || d.push(a))
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TimelineState = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._runtime = d.GetRuntime();
            this._timelineManager = d;
            this._timelineDataItem = a;
            this._name = b;
            this._tracks = [];
            for(const c of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracks.push(e.TrackState.Create(this, c));
            this._playResolve = this._playPromise = null;
            this._playheadTime = e.New(e.KahanSum);
            this._playheadTime.Set(0);
            this._playbackRate = 1;
            this._pingPongState = 0;
            this._currentRepeatCount = 1;
            this._initialStateSet =
                this._isScheduled = this._isPlaying = !1;
            this._complete = !0;
            this._markedForRemoval = this._released = !1;
            this._completedTick = -1;
            this._firstTick = this._finishedTriggers = this._isTemplate = this._implicitPause = !1;
            this._lastDelta = NaN;
            this._tags = [""];
            this._stringTags = "";
            this._tagsChanged = !1
        }
        static CreateInitial(b, a) {
            var d = a.GetTimelineDataManager();
            const c = d.GetNameId();
            d = d.Get(b[c]);
            b = e.New(e.TimelineState, b[c], d, a);
            b.SetIsTemplate(!0);
            return b
        }
        static CreateFromTemplate(b, a, d) {
            return e.New(e.TimelineState, b, a, d)
        }
        static get WORLD_INSTANCE_BOX_CHANGE() {
            return 1
        }
        static get LAYOUT_RENDER_CHANGE() {
            return e.nextHighestPowerOfTwo(1)
        }
        Release() {
            if(!this.IsReleased()) {
                this._timelineManager.DeScheduleTimeline(this);
                this._timelineManager.CompleteTimelineAndResolve(this);
                for(const b of this._tracks) b.Release();
                e.clearArray(this._tracks);
                this._tracks = null;
                this._playheadTime.Release();
                this._timelineDataItem = this._timelineManager = this._runtime = this._playheadTime = null;
                this._released = !0;
                this._playResolve = this._playPromise = null
            }
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetTracks() {
            return this._tracks
        }
        GetSimilarPropertyTracks(b, a, d) {
            const c = [];
            for(const f of this._tracks) {
                if(b !==
                    f.GetInstance()) continue;
                const h = f.GetPropertyTrack(d);
                h && a.constructor === h.GetSourceAdapter().constructor && c.push(h)
            }
            return c
        }
        HasTracks() {
            return !!this._tracks.length
        }
        GetTrackById(b) {
            for(const a of this._tracks)
                if(e.equalsNoCase(a.GetId(), b)) return a;
            return null
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        GetTemplateName() {
            return this._timelineDataItem.GetName()
        }
        GetTotalTime() {
            return this._timelineDataItem.GetTotalTime()
        }
        SetTotalTime(b) {
            this._timelineDataItem.SetTotalTime(b)
        }
        GetStep() {
            return this._timelineDataItem.GetStep()
        }
        SetStep(b) {
            this._timelineDataItem.SetStep(b)
        }
        GetInterpolationMode() {
            return this._timelineDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._timelineDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._timelineDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._timelineDataItem.GetResultMode(b)
        }
        SetEase(b) {
            for(const a of this.GetTracks()) a.SetEase(b)
        }
        GetLoop() {
            return this._timelineDataItem.GetLoop()
        }
        SetLoop(b) {
            return this._timelineDataItem.SetLoop(b)
        }
        GetPingPong() {
            return this._timelineDataItem.GetPingPong()
        }
        SetPingPong(b) {
            return this._timelineDataItem.SetPingPong(b)
        }
        GetRepeatCount() {
            return this._timelineDataItem.GetRepeatCount()
        }
        SetPlaybackRate(b) {
            return this._playbackRate =
                b
        }
        GetPlaybackRate() {
            return this._playbackRate
        }
        IsForwardPlayBack() {
            return this.IsPlaying() ? 0 < this._playbackRate : !0
        }
        GetPlayPromise() {
            return this._playPromise ? this._playPromise : this._playPromise = new Promise(b => {
                this._playResolve = b
            })
        }
        ResolvePlayPromise() {
            this._playPromise && (this._playResolve(), this._playResolve = this._playPromise = null)
        }
        SetTags(b) {
            this._tags = e.TimelineState._GetTagArray(b);
            this._tagsChanged = !0
        }
        GetTags() {
            return this._tags
        }
        GetStringTags() {
            this._tagsChanged && (this._stringTags = this._tags.join(" "));
            this._tagsChanged = !1;
            return this._stringTags
        }
        HasTags(b) {
            return this._tags && this._tags.length ? (b = e.TimelineState._GetTagArray(b)) && b.length ? b.every(e.TimelineState._HasTag, this) : !1 : !1
        }
        OnStarted() {
            e.Plugins.Timeline.Cnds.SetTriggerTimeline(this);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStarted);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStartedByName);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineStartedByTags);
            this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnAnyTimelineStarted);
            e.Plugins.Timeline.Cnds.SetTriggerTimeline(null)
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            this._finishedTriggers || (this._finishedTriggers = !0, e.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinished), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinishedByName), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimelineFinishedByTags), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnAnyTimelineFinished),
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        SetPlaying(b) {
            this._isPlaying = b
        }
        IsCompletedTick() {
            return this._completedTick === this._runtime.GetTickCount()
        }
        IsPlaying(b = !1) {
            return this.IsCompletedTick() || this.IsScheduled() && !b ? !0 : this._isPlaying
        }
        _IsPlaying() {
            return this.IsPlaying(!0)
        }
        IsPaused() {
            return this._IsPaused()
        }
        _IsPaused() {
            return this.IsReleased() || this.IsScheduled() || this._IsPlaying() || this.IsComplete() ? !1 : !0
        }
        SetScheduled(b) {
            this._isScheduled = b
        }
        IsScheduled() {
            return this._isScheduled
        }
        SetComplete(b) {
            this._complete =
                b;
            b = this.GetTime();
            if(0 >= b || b >= this.GetTotalTime()) this._complete = !0
        }
        IsComplete() {
            return this._complete
        }
        IsReleased() {
            return this._released
        }
        SetMarkedForRemoval(b) {
            this._markedForRemoval = b
        }
        IsMarkedForRemoval() {
            return this._markedForRemoval
        }
        SetImplicitPause(b) {
            this._implicitPause = b
        }
        IsImplicitPause() {
            return this._implicitPause
        }
        SetIsTemplate(b) {
            this._isTemplate = !!b
        }
        IsTemplate() {
            return this._isTemplate
        }
        InitialStateSet() {
            return this._initialStateSet
        }
        GetTime() {
            return this._playheadTime.Get()
        }
        SetTime(b) {
            const a =
                this.GetTime();
            this._SetTime(b);
            this.SetComplete(!1);
            this.IsComplete() || this.SetImplicitPause(!0);
            if(this._IsPlaying() || this.IsScheduled() || !this._initialStateSet) this._IsPlaying() || this.IsScheduled() || this._initialStateSet ? this._IsPlaying() ? this.Stop() : this.IsScheduled() && (this._timelineManager.DeScheduleTimeline(this), this.SetInitialStateFromSetTime()) : this.SetInitialStateFromSetTime();
            this._Interpolate(b, !1, !0, !0, a) && this.GetRuntime().UpdateRender();
            this._OnSetTime()
        }
        _SetTime(b) {
            0 > b ? this._playheadTime.Set(0) :
                b >= this.GetTotalTime() ? this._playheadTime.Set(this.GetTotalTime()) : this._playheadTime.Set(b)
        }
        _OnSetTime() {
            e.Plugins.Timeline && this.constructor === e.TimelineState && (e.Plugins.Timeline.Cnds.SetTriggerTimeline(this), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSet), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSetByName), this._timelineManager.Trigger(e.Plugins.Timeline.Cnds.OnTimeSetByTags), e.Plugins.Timeline.Cnds.SetTriggerTimeline(null))
        }
        _CanResume() {
            if(!this.GetLoop())
                if(this.GetPingPong() &&
                    1 === this._pingPongState)
                    if(this.IsForwardPlayBack()) {
                        if(this.GetTime() >= this.GetTotalTime()) return !1
                    } else {
                        if(0 >= this.GetTime()) return !1
                    }
            else if(!this.GetLoop() && !this.GetPingPong())
                if(this.IsForwardPlayBack()) {
                    if(this.GetTime() >= this.GetTotalTime()) return !1
                } else if(0 >= this.GetTime()) return !1;
            return !0
        }
        Resume() {
            this.IsReleased() || this._CanResume() && this.Play(!0)
        }
        Play(b = !1) {
            return this.IsReleased() || this.IsScheduled() ? !1 : this._IsPlaying() && this.IsCompletedTick() ? this._SchedulePlayingTimeline() : this._IsPlaying() ||
                !this.IsComplete() && !b && !this.IsImplicitPause() ? !1 : this._ScheduleStoppedTimeline()
        }
        _SchedulePlayingTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.RemovePlayingTimeline(this);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        _ScheduleStoppedTimeline() {
            this.SetImplicitPause(!1);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return !0
        }
        Stop(b = !1) {
            this.IsReleased() || (this.SetComplete(b), this._timelineManager.CompleteTimeline(this), this.IsComplete() &&
                this.ResolvePlayPromise())
        }
        Reset(b = !0, a = !1) {
            if(!this.IsReleased()) {
                if(!this._IsPlaying() && this.IsScheduled()) return this._timelineManager.DeScheduleTimeline(this);
                if(!this.IsComplete()) {
                    this.Stop(!0);
                    this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                    var d = this.GetTime();
                    a = a ? this._InterpolateBeforeChangeLayout(d) : this._Interpolate(d, !1, !1, !0);
                    b && this._OnSetTime();
                    a && b && this.GetRuntime().UpdateRender()
                }
            }
        }
        ResetBeforeChangeLayout() {
            this.Reset(!1, !0)
        }
        _InterpolateBeforeChangeLayout(b) {
            this._Interpolate(b,
                !1, !1, !0, NaN, !1, !0)
        }
        _OnBeforeChangeLayout() {
            if(this.IsReleased()) return !0;
            if(this.HasValidGlobalTracks()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        SetInitialStateFromSetTime() {
            this.SetInitialState(!0)
        }
        SetInitialState(b) {
            if(!this.IsMarkedForRemoval())
                if(b) {
                    this._firstTick = this._initialStateSet = !0;
                    for(const a of this._tracks) a.SetInitialState()
                } else if(this.SetPlaying(!0), this.SetScheduled(!1), this.OnStarted(), this.IsComplete()) {
                this._completedTick = -1;
                this._pingPongState = 0;
                this._currentRepeatCount = 1;
                this._finishedTriggers = this._complete = !1;
                this._firstTick = this._initialStateSet = !0;
                this.IsForwardPlayBack() ? this._SetTime(0) : this._SetTime(this.GetTotalTime());
                for(const a of this._tracks) a.SetInitialState()
            } else {
                this._firstTick = !0;
                for(const a of this._tracks) a.SetResumeState()
            }
        }
        Tick(b, a) {
            if(0 !== b || 0 !== this._lastDelta) {
                this._lastDelta = b;
                var d = this.GetTime();
                this._SetTime(d + b * a * this._playbackRate);
                var c;
                this.GetLoop() || this.GetPingPong() ? this.GetLoop() &&
                    !this.GetPingPong() ? c = this._LoopCompleteCheck() : !this.GetLoop() && this.GetPingPong() ? c = this._PingPongCompleteCheck() : this.GetLoop() && this.GetPingPong() && (c = this._LoopPingPongCompleteCheck()) : c = this._SimpleCompleteCheck();
                if(c) {
                    for(const f of this._tracks) f.SetEndState();
                    this.Stop(!0);
                    this.OnCompleted();
                    return !0
                }
                return this._Interpolate(this.GetTime(), !0, !1, !1, d, !0)
            }
        }
        _Interpolate(b, a = !1, d = !1, c = !1, f = NaN, h = !1, g = !1) {
            let k = !1;
            for(var m of this._tracks) m.BeforeInterpolate();
            for(const p of this._tracks) {
                m =
                    b;
                if("number" === typeof f) {
                    const x = this.GetTime() - p.GetStartOffset(),
                        t = f - p.GetStartOffset();
                    0 > x && 0 < t && (m = p.GetStartOffset(), this._SetTime(m))
                }
                m = p.Interpolate(m, a, d, c, this._firstTick, g);
                !k && m && (k = !0)
            }
            for(const p of this._tracks) p.AfterInterpolate();
            this._firstTick && h && (this._firstTick = !1);
            return k
        }
        _SimpleCompleteCheck() {
            if(this.IsForwardPlayBack()) {
                if(this.GetTime() >= this.GetTotalTime())
                    if(this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(0);
                    else return this._SetTime(this.GetTotalTime()),
                        !0
            } else if(0 >= this.GetTime())
                if(this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._SetTime(this.GetTotalTime());
                else return this._SetTime(0), !0;
            return !1
        }
        _LoopCompleteCheck() {
            this.IsForwardPlayBack() ? this.GetTime() >= this.GetTotalTime() && this._SetTime(0) : 0 >= this.GetTime() && this._SetTime(this.GetTotalTime());
            return !1
        }
        _PingPongCompleteCheck() {
            if(this.IsForwardPlayBack()) {
                if(this.GetTime() >= this.GetTotalTime())
                    if(this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate()),
                        1 === this._pingPongState)
                        if(this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                        else return !0;
                else 0 === this._pingPongState && (this._pingPongState = 1)
            } else if(0 >= this.GetTime())
                if(this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()), 1 === this._pingPongState)
                    if(this._currentRepeatCount < this.GetRepeatCount()) this._currentRepeatCount++, this._pingPongState = 0;
                    else return !0;
            else 0 === this._pingPongState && (this._pingPongState = 1);
            return !1
        }
        _LoopPingPongCompleteCheck() {
            this.IsForwardPlayBack() ?
                this.GetTime() >= this.GetTotalTime() && (this._SetTime(this.GetTotalTime()), this.SetPlaybackRate(-1 * this.GetPlaybackRate())) : 0 >= this.GetTime() && (this._SetTime(0), this.SetPlaybackRate(-1 * this.GetPlaybackRate()));
            return !1
        }
        AddTrack() {
            var b = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            b = e.TrackState.Create(this, b);
            this._tracks.push(b);
            return b
        }
        CleanCaches() {
            for(const b of this._tracks) b.CleanCaches()
        }
        ClearTrackInstances() {
            for(const b of this._tracks) b.ClearInstance()
        }
        SetTrackInstance(b,
            a) {
            if(a)
                for(const d of this._tracks) {
                    if(b) {
                        if(d.GetId() !== b) continue
                    } else if(d.HasInstance()) continue;
                    d.SetInstance(a);
                    this._timelineManager.SetTimelineObjectClassToMap(a.GetObjectClass(), this);
                    break
                }
        }
        HasTrackInstance(b, a) {
            for(const d of this._tracks)
                if(a) {
                    if(a === d.GetId() && b === d.GetInstance()) return !0
                } else if(b === d.GetInstance()) return !0;
            return !1
        }
        GetTrackInstance(b) {
            for(const a of this._tracks)
                if(b === a.GetInstance()) return a;
            return null
        }
        HasValidTracks() {
            return this._tracks.some(b => b.CanInstanceBeValid())
        }
        HasValidGlobalTracks() {
            return this._tracks.some(b =>
                b.CanInstanceBeValid() ? (b = b.GetObjectClass()) ? b.IsGlobal() : !1 : !1)
        }
        GetPropertyTrack(b) {
            for(const a of this.GetTracks())
                for(const d of a.GetPropertyTracks())
                    if(d.GetPropertyName() === b) return d
        }
        GetKeyframeWithTags(b) {
            b = b ? b.split(" ") : [];
            b = [...(new Set(b.map(a => a.toLowerCase().trim()))).values()];
            for(const a of this.GetTracks())
                for(const d of a.GetKeyframeDataItems())
                    if(b.every(c => d.HasTag(c))) return d
        }
        GetObjectClasses() {
            const b = [];
            for(const a of this.GetTracks()) b.push(a.GetObjectClass());
            return b.filter(a =>
                a)
        }
        _SaveToJson() {
            return {
                tracksJson: this._SaveTracksToJson(),
                name: this._name,
                playheadTime: this.GetTime(),
                playbackRate: this._playbackRate,
                pingPongState: this._pingPongState,
                currentRepeatCount: this._currentRepeatCount,
                isPlaying: this._isPlaying,
                isScheduled: this._isScheduled,
                initialStateSet: this._initialStateSet,
                finishedTriggers: this._finishedTriggers,
                complete: this._complete,
                released: this._released,
                markedForRemoval: this._markedForRemoval,
                completedTick: this._completedTick,
                implicitPause: this._implicitPause,
                isTemplate: this._isTemplate,
                tags: this._tags.join(" "),
                stringTags: this._stringTags,
                tagsChanged: this._tagsChanged,
                firstTick: this._firstTick
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadTracksFromJson(b.tracksJson), this._name = b.name, this._playheadTime.Set(b.playheadTime), this._playbackRate = b.playbackRate, this._pingPongState = b.pingPongState, this._currentRepeatCount = b.currentRepeatCount, this._isPlaying = !!b.isPlaying, this._isScheduled = !!b.isScheduled, this._initialStateSet = !!b.initialStateSet, this._finishedTriggers =
                b.hasOwnProperty("finishedTriggers") ? !!b.finishedTriggers : !1, this._complete = !!b.complete, this._released = !!b.released, this._markedForRemoval = !!b.markedForRemoval, this._completedTick = b.completedTick, this._implicitPause = !!b.implicitPause, this._isTemplate = !!b.isTemplate, this._tags = b.tags.split(" "), this._stringTags = b.stringTags, this._tagsChanged = !!b.tagsChanged, this._firstTick = !!b.firstTick)
        }
        _SaveTracksToJson() {
            return this._tracks.map(b => b._SaveToJson())
        }
        _LoadTracksFromJson(b) {
            b.forEach((a, d) => {
                this._tracks[d]._LoadFromJson(a)
            });
            this._tracks.filter(a => a.CanInstanceBeValid())
        }
        static _HasTag(b) {
            const a = this.GetTags();
            return "" === b ? 1 === a.length && "" === a[0] : a.includes(b)
        }
        static _GetTagArray(b) {
            if(e.IsArray(b)) return b.slice(0);
            if(e.IsString(b)) return b.split(" ")
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TrackState = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._timeline = b;
            this._trackDataItem = a;
            this._trackData = a.GetTrackData();
            this._objectClassIndex = this._instanceUid = NaN;
            this._worldInfo = this._instance = null;
            this._isNested = 0 < a.GetStartOffset();
            this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
            this._lastKeyframeDataItem = null;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            this._propertyTracks = [];
            for(const d of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(e.PropertyTrackState.Create(this,
                d))
        }
        static Create(b, a) {
            return e.New(e.TrackState, b, a)
        }
        Release() {
            this._keyframeDataItems = null;
            for(const b of this._propertyTracks) b.Release();
            e.clearArray(this._propertyTracks);
            this._lastKeyframeDataItem = this._trackDataItem = this._worldInfo = this._instance = this._timeline = this._propertyTracks = null
        }
        CleanCaches() {
            for(const b of this._propertyTracks) b.CleanCaches();
            this._worldInfo = this._instance = null
        }
        GetTimeline() {
            return this._timeline
        }
        GetRuntime() {
            return this._timeline.GetRuntime()
        }
        GetKeyframeDataItems() {
            return this._keyframeDataItems ?
                this._keyframeDataItems : this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray()
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        GetPropertyTrack(b) {
            for(const a of this._propertyTracks)
                if(a.GetPropertyName() === b) return a
        }
        MaybeGetInstance() {
            this._instance || this.GetInstance()
        }
        IsInstanceValid() {
            return this._instance ? !this._instance.IsDestroyed() : !1
        }
        CanInstanceBeValid() {
            var b = this.GetInstanceUID();
            return (b = this.GetRuntime().GetInstanceByUID(b)) ? !b.IsDestroyed() : !1
        }
        GetObjectClass() {
            const b =
                this.GetObjectClassIndex();
            if(-1 !== b) return this.GetRuntime().GetObjectClassByIndex(b)
        }
        ClearInstance() {
            this._instance = null;
            this._instanceUid = -1;
            this._worldInfo = null;
            this._objectClassIndex = -1
        }
        HasInstance() {
            return !!this._instance
        }
        GetInstance() {
            if(this._instance && this.IsInstanceValid()) return this._instance;
            const b = this.GetInstanceUID();
            return this._instance = this.GetRuntime().GetInstanceByUID(b)
        }
        SetInstance(b) {
            if(this._instance !== b) {
                this.CleanCaches();
                this._instance = b;
                this._objectClassIndex = b.GetObjectClass().GetIndex();
                this._instanceUid = b.GetUID();
                this._worldInfo = b.GetWorldInfo();
                for(const h of this.propertyTrackItems()) {
                    const g = h.sourceAdapter;
                    switch(h.propertyTrack.GetSourceAdapterId()) {
                        case "instance-variable":
                            g.GetEditorIndex();
                            var a = b.GetObjectClass(),
                                d = a.GetInstanceVariableIndexByName(h.name),
                                c = a.GetInstanceVariableName(d);
                            a = a.GetInstanceVariableType(d);
                            c === h.name && a === h.type && g.UpdateInstanceVariableIndex(d);
                            break;
                        case "behavior":
                            var f = h.behaviorType;
                            d = this.GetObjectClass();
                            c = b.GetObjectClass();
                            a = g.GetBehaviorType(c);
                            f && a && (f = f.GetName(), d.GetBehaviorIndexByName(f), c.GetBehaviorIndexByName(f), g.GetEditorIndex(), g.UpdateBehaviorTypeSid(a.GetSID()))
                    }
                }
            }
        }* propertyTrackItems() {
            for(const d of this._propertyTracks) {
                var b = d.GetSourceAdapter(),
                    a = this.GetObjectClass();
                const c = {
                    propertyTrack: d,
                    sourceAdapter: b
                };
                switch(d.GetSourceAdapterId()) {
                    case "world-instance":
                        c.property = d.GetPropertyName();
                        break;
                    case "instance-variable":
                        b = b.GetEditorIndex();
                        c.name = a.GetInstanceVariableName(b);
                        c.type = a.GetInstanceVariableType(b);
                        break;
                    case "effect":
                        a = a.GetEffectList();
                        b = b.GetEffectType(a);
                        c.effectType = b;
                        break;
                    case "behavior":
                        b = b.GetBehaviorType(a);
                        c.behaviorType = b;
                        break;
                    case "plugin":
                        c.plugin = a.GetPlugin()
                }
                yield c
            }
        }
        GetWorldInfo() {
            if(this._worldInfo && this.IsInstanceValid()) return this._worldInfo;
            const b = this.GetInstance();
            b && (this._worldInfo = b.GetWorldInfo());
            return this._worldInfo
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetInstanceUID() {
            return this._instanceUid ? this._instanceUid : this._trackDataItem.GetInstanceUID()
        }
        SetInstanceUID(b) {
            this._trackDataItem.SetInstanceUID(b)
        }
        GetInterpolationMode() {
            return this._trackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._trackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._trackDataItem.GetResultMode()
        }
        GetId() {
            return this._trackDataItem.GetId()
        }
        GetStartOffset() {
            return this._trackDataItem.GetStartOffset()
        }
        GetLocalTotalTime() {
            return this._trackDataItem.GetLocalTotalTime()
        }
        SetLocalTotalTime(b) {
            this._trackDataItem.SetLocalTotalTime(b)
        }
        SetResultMode(b) {
            this._trackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for(const a of this.GetKeyframeDataItems()) a.SetEase(b);
            for(const a of this.GetPropertyTracks()) a.SetEase(b)
        }
        GetEnable() {
            return this._trackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._trackDataItem.SetEnable(b)
        }
        GetObjectClassIndex() {
            return isNaN(this._objectClassIndex) ? this._trackDataItem.GetObjectClassIndex() : this._objectClassIndex
        }
        SetObjectClassIndex(b) {
            this._trackDataItem.SetObjectClassIndex(b)
        }
        SetOriginalWidth(b) {
            this._trackDataItem.SetOriginalWidth(b)
        }
        GetOriginalWidth() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalWidth() :
                this._trackDataItem.GetOriginalWidth()
        }
        SetOriginalHeight(b) {
            this._trackDataItem.SetOriginalHeight(b)
        }
        GetOriginalHeight() {
            const b = this.GetInstance();
            return b && b.GetSdkInstance().IsOriginalSizeKnown() ? b.GetSdkInstance().GetOriginalHeight() : this._trackDataItem.GetOriginalHeight()
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if(this.IsInstanceValid()) {
                for(var b of this._propertyTracks) b.SetInitialState();
                b = this.GetTimeline().IsForwardPlayBack() ? 0 : this.GetLocalTotalTime();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                this._endStateOfNestedSet = this._initialStateOfNestedSet = !1;
                this.Interpolate(b)
            }
        }
        SetResumeState() {
            this.MaybeGetInstance();
            if(this.IsInstanceValid()) {
                this._timeline.IsForwardPlayBack();
                var b = this._timeline.GetTime() - this.GetStartOffset();
                this._lastKeyframeDataItem = this.GetLastKeyFrameBeforeTime(b);
                for(const a of this._propertyTracks) a.SetResumeState()
            }
        }
        SetEndState() {
            if(!this.GetTimeline().IsComplete() && (this.MaybeGetInstance(), this.IsInstanceValid() && !this._isNested)) {
                const b = this._timeline.GetTime(),
                    a = this.GetStartOffset() + this.GetLocalTotalTime();
                b >= a ? this.Interpolate(this.GetLocalTotalTime(), !0, !1, !0) : 0 >= b && this.Interpolate(0, !0, !1, !0)
            }
        }
        BeforeInterpolate() {
            for(const b of this._propertyTracks) b.BeforeInterpolate()
        }
        Interpolate(b, a = !1, d = !1, c = !1, f = !1, h = !1) {
            this.MaybeGetInstance();
            if(!this.IsInstanceValid() || h && this.GetObjectClass().IsGlobal()) return !1;
            b -= this.GetStartOffset();
            if(0 > b) return !1;
            this.MaybeSetInitialStateOfNestedTrack(b, a);
            this.MaybeTriggerKeyframeReachedConditions(b, a, f);
            f = h = !1;
            for(const g of this._propertyTracks) {
                const k =
                    g.Interpolate(b, d, !1, c);
                h || 0 === (k & e.TimelineState.WORLD_INSTANCE_BOX_CHANGE) || (h = !0);
                f || 0 === (k & e.TimelineState.LAYOUT_RENDER_CHANGE) || (f = !0)
            }
            this.MaybeSetEndStateOfNestedTrack(b, a);
            h && (b = this.GetWorldInfo()) && b.SetBboxChanged();
            return f
        }
        AfterInterpolate() {
            for(const b of this._propertyTracks) b.AfterInterpolate()
        }
        MaybeSetInitialStateOfNestedTrack(b, a) {
            if(a && this._isNested && !this._initialStateOfNestedSet) {
                if(this.GetTimeline().IsForwardPlayBack()) {
                    if(0 > b) return;
                    for(const d of this._propertyTracks) d.Interpolate(0,
                        !1, !1, !0)
                } else {
                    if(b > this.GetLocalTotalTime()) return;
                    for(const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0)
                }
                for(const d of this._propertyTracks) d.SetInitialState();
                this._initialStateOfNestedSet = !0
            }
        }
        MaybeSetEndStateOfNestedTrack(b, a) {
            if(a && this._isNested && !this._endStateOfNestedSet)
                if(this.GetTimeline().IsForwardPlayBack()) {
                    if(b >= this.GetLocalTotalTime()) {
                        for(const d of this._propertyTracks) d.Interpolate(this.GetLocalTotalTime(), !1, !1, !0);
                        this._endStateOfNestedSet = !0
                    }
                } else if(0 >=
                b) {
                for(const d of this._propertyTracks) d.Interpolate(0, !1, !1, !0);
                this._endStateOfNestedSet = !0
            }
        }
        MaybeTriggerKeyframeReachedConditions(b, a, d) {
            if(!d && a) return b = this.GetLastKeyFrameBeforeTime(b), b !== this._lastKeyframeDataItem && this.OnKeyframeReached(b), this._lastKeyframeDataItem = b
        }
        GetLastKeyFrameBeforeTime(b) {
            const a = this.GetTimeline();
            let d = this._trackData.GetKeyFrameDataItemAtTime(b, this._trackDataItem);
            return d ? d : a.IsForwardPlayBack() ? this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(b, this._trackDataItem) :
                this._trackData.GetFirstKeyFrameDataItemHigherOrEqualThan(b, this._trackDataItem)
        }
        OnKeyframeReached(b) {
            if(e.Plugins.Timeline && this.GetTimeline().constructor === e.TimelineState) {
                var a = this.GetTimeline();
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(a);
                e.Plugins.Timeline.Cnds.SetTriggerKeyframe(b);
                b = a.GetTimelineManager();
                b.Trigger(e.Plugins.Timeline.Cnds.OnAnyKeyframeReached);
                b.Trigger(e.Plugins.Timeline.Cnds.OnKeyframeReached);
                e.Plugins.Timeline.Cnds.SetTriggerTimeline(null);
                e.Plugins.Timeline.Cnds.SetTriggerKeyframe(null)
            }
        }
        AddKeyframe() {
            return this._trackDataItem.GetKeyframeData().AddEmptyKeyframeDataItem()
        }
        AddPropertyTrack() {
            var b =
                this._trackDataItem.GetPropertyTrackData().AddEmptyPropertyTrackDataItem();
            b = e.PropertyTrackState.Create(this, b);
            this._propertyTracks.push(b);
            return b
        }
        DeleteKeyframes(b) {
            this._trackDataItem.GetKeyframeData().DeleteKeyframeDataItems(b)
        }
        DeletePropertyKeyframes(b) {
            for(const a of this._propertyTracks) a.DeletePropertyKeyframes(b)
        }
        SaveState() {
            for(const b of this._propertyTracks) b.SaveState()
        }
        CompareInitialStateWithCurrent() {
            this.MaybeGetInstance();
            if(this.IsInstanceValid())
                for(const b of this._propertyTracks) b.CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            this.MaybeGetInstance();
            if(this.IsInstanceValid()) {
                var b = !1;
                for(const a of this._propertyTracks) {
                    const d = a.CompareSaveStateWithCurrent();
                    !b && d && (b = !0)
                }
                b && (b = this.AddKeyframe(), b.SetTime(this.GetTimeline().GetTime()), b.SetEase("noease"), b.SetEnable(!0), b.SetTags(""))
            }
        }
        _SaveToJson() {
            var b = this.GetInstance();
            b = b ? b.GetUID() : this.GetInstanceUID();
            return {
                propertyTracksJson: this._SavePropertyTracksToJson(),
                lastKeyframeDataItemJson: this._SaveLastKeyframeDataItemToJson(),
                initialStateOfNestedSet: this._initialStateOfNestedSet,
                endStateOfNestedSet: this._endStateOfNestedSet,
                instanceUid: b
            }
        }
        _LoadFromJson(b) {
            b && (this._LoadPropertyTracksFromJson(b.propertyTracksJson), this._LoadLastKeyframeDataItemFromJson(b.lastKeyframeDataItemJson), this._LoadInstanceFromJson(b.instanceUid), this._initialStateOfNestedSet = !1, b.hasOwnProperty.initialStateOfNestedSet && (this._initialStateOfNestedSet = b.initialStateOfNestedSet), this._endStateOfNestedSet = !1, b.hasOwnProperty.endStateOfNestedSet && (this._endStateOfNestedSet = b.endStateOfNestedSet))
        }
        _SaveLastKeyframeDataItemToJson() {
            return this._trackDataItem.GetKeyframeData().GetKeyframeDataItemIndex(this._lastKeyframeDataItem)
        }
        _SavePropertyTracksToJson() {
            return this._propertyTracks.map(b =>
                b._SaveToJson())
        }
        _LoadPropertyTracksFromJson(b) {
            b.forEach((a, d) => {
                this._propertyTracks[d]._LoadFromJson(a)
            })
        }
        _LoadInstanceFromJson(b) {
            if(e.IsFiniteNumber(b) && (b = this.GetRuntime().GetInstanceByUID(b))) {
                var a = this.GetTimeline();
                a.ClearTrackInstances();
                a.SetTrackInstance(this._trackDataItem.GetId(), b)
            }
        }
        _LoadLastKeyframeDataItemFromJson(b) {
            this._lastKeyframeDataItem = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemFromIndex(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PropertyTrackState = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._track = b;
            this._propertyTrackDataItem = a;
            this._propertyTrackData = a.GetPropertyTrackData();
            this._sourceAdapter = this.GetSourceAdapter();
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }
        static Create(b, a) {
            return e.New(e.PropertyTrackState, b, a)
        }
        Release() {
            this._track = null;
            this._sourceAdapter && (this._sourceAdapter.Release(), this._sourceAdapter =
                null);
            this._propertyTrackData = this._propertyTrackDataItem = this._propertyKeyframeDataItems = null
        }
        GetTrack() {
            return this._track
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetTimeline() {
            return this._track.GetTimeline()
        }
        GetRuntime() {
            return this._track.GetRuntime()
        }
        GetInstance() {
            return this._track.GetInstance()
        }
        GetSourceAdapter() {
            if(this._sourceAdapter) return this._sourceAdapter;
            let b;
            switch(this._propertyTrackDataItem.GetSourceAdapterId()) {
                case "behavior":
                    b =
                        new e.PropertyTrackState.BehaviorSourceAdapter(this);
                    break;
                case "effect":
                    b = new e.PropertyTrackState.EffectSourceAdapter(this);
                    break;
                case "instance-variable":
                    b = new e.PropertyTrackState.InstanceVariableSourceAdapter(this);
                    break;
                case "plugin":
                    b = new e.PropertyTrackState.PluginSourceAdapter(this);
                    break;
                case "world-instance":
                    b = new e.PropertyTrackState.WorldInstanceSourceAdapter(this);
                    break;
                case "value":
                    b = new e.PropertyTrackState.ValueSourceAdapter(this)
            }
            return this._sourceAdapter = b
        }
        GetSourceAdapterId() {
            return this._propertyTrackDataItem.GetSourceAdapterId()
        }
        SetSourceAdapterId(b) {
            this._propertyTrackDataItem.SetSourceAdapterId(b)
        }
        GetSourceAdapterArgs() {
            return this._propertyTrackDataItem.GetSourceAdapterArguments()
        }
        SetSourceAdapterArgs(b) {
            this._propertyTrackDataItem.SetSourceAdapterArguments(b)
        }
        GetSourceAdapterValue() {
            return this.GetSourceAdapter().GetValue()
        }
        GetPropertyName() {
            return this._propertyTrackDataItem.GetProperty()
        }
        SetPropertyName(b) {
            this._propertyTrackDataItem.SetProperty(b)
        }
        GetPropertyType() {
            return this._propertyTrackDataItem.GetType()
        }
        SetPropertyType(b) {
            this._propertyTrackDataItem.SetType(b)
        }
        GetPropertyKeyframeType() {
            return this.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem).GetType()
        }
        GetMin() {
            return this._propertyTrackDataItem.GetMin()
        }
        SetMin(b) {
            this._propertyTrackDataItem.SetMin(b)
        }
        GetMax() {
            return this._propertyTrackDataItem.GetMax()
        }
        SetMax(b) {
            this._propertyTrackDataItem.SetMax(b)
        }
        GetEnable() {
            return this._propertyTrackDataItem.GetEnable()
        }
        SetEnable(b) {
            this._propertyTrackDataItem.SetEnable(b)
        }
        GetInterpolationMode() {
            return this._propertyTrackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(b) {
            this._propertyTrackDataItem.SetInterpolationMode(b)
        }
        GetResultMode() {
            return this._propertyTrackDataItem.GetResultMode()
        }
        SetResultMode(b) {
            this._propertyTrackDataItem.SetResultMode(b)
        }
        SetEase(b) {
            for(const a of this.GetPropertyKeyframeDataItems()) a.SetEase(b)
        }
        GetPropertyKeyframeDataItems() {
            return this._propertyKeyframeDataItems ?
                this._propertyKeyframeDataItems : this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()
        }* GetPropertyKeyframeValues() {
            for(const b of this.GetPropertyKeyframeDataItems()) yield b.GetValueWithResultMode()
        }
        CleanCaches() {
            this.GetSourceAdapter().CleanCaches()
        }
        GetCurrentState() {
            return this.GetSourceAdapter().GetCurrentState()
        }
        SetInitialState() {
            this.GetSourceAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetSourceAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetSourceAdapter().BeforeInterpolate()
        }
        Interpolate(b,
            a = !1, d = !1, c = !1) {
            var f = this._propertyTrackDataItem;
            let h = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(b, f);
            h ? f = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherThan(b, f) : (h = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, f), f = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, f));
            return this.GetSourceAdapter().Interpolate(b, h, f, a, d, c)
        }
        AfterInterpolate() {
            this.GetSourceAdapter().AfterInterpolate()
        }
        static GetStartPropertyKeyframeForTime(b,
            a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            let c = a.GetPropertyKeyFrameDataItemAtTime(b, d);
            c || (c = a.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(b, d));
            return c
        }
        static GetEndPropertyKeyframeForTime(b, a) {
            const d = a.GetPropertyTrackDataItem();
            a = a._propertyTrackData;
            return a.GetPropertyKeyFrameDataItemAtTime(b, d) ? a.GetFirstPropertyKeyFrameDataItemHigherThan(b, d) : a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(b, d)
        }
        AddPropertyKeyframe() {
            return this._propertyTrackDataItem.GetPropertyKeyframeData().AddEmptyPropertyKeyframeDataItem()
        }
        DeletePropertyKeyframes(b) {
            this._propertyTrackDataItem.GetPropertyKeyframeData().DeletePropertyKeyframeDataItems(b)
        }
        SaveState() {
            this.GetSourceAdapter().SaveState()
        }
        CompareInitialStateWithCurrent() {
            if(this.GetSourceAdapter().CompareInitialStateWithCurrent()) {
                const b =
                    this._propertyTrackData.GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem),
                    a = this.GetSourceAdapter().GetCurrentState();
                b.SetAbsoluteValue(a)
            }
        }
        CompareSaveStateWithCurrent() {
            const b = this.GetSourceAdapter().CompareSaveStateWithCurrent();
            b && this.AddPropertyKeyframeAtCurrentTime();
            this.GetSourceAdapter().ClearSaveState();
            return b
        }
        AddPropertyKeyframeAtCurrentTime() {
            const b = this.GetTimeline().GetTime(),
                a = this.GetSourceAdapter(),
                d = e.PropertyTrackState.GetStartPropertyKeyframeForTime(b, this),
                c =
                this.AddPropertyKeyframe();
            c.SetType(d.GetType());
            c.SetTime(b);
            c.SetEase(d.GetEase());
            c.SetEnable(!0);
            c.SetValue(a.GetValueAtTime());
            c.SetAbsoluteValue(a.GetCurrentState())
        }
        _SaveToJson() {
            return {
                sourceAdapterJson: this.GetSourceAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b && this.GetSourceAdapter()._LoadFromJson(b.sourceAdapterJson)
        }
    }
} {
    "use strict";
    const e = self.C3.PropertyTrackState;
    e.PropertySourceAdapter = class {
        constructor(b) {
            this._propertyTrack = b;
            this._propertyAdapter = null
        }
        Release() {
            this._propertyAdapter && (this._propertyAdapter.Release(), this._propertyAdapter = null);
            this._propertyTrack = null
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        CleanCaches() {
            this._propertyAdapter && this._propertyAdapter.CleanCaches()
        }
        GetPropertyAdapter() {
            return this._propertyAdapter ? this._propertyAdapter : this._propertyAdapter = this._CreatePropertyAdapter()
        }
        GetEditorIndex() {}
        GetIndex() {
            return this.GetEditorIndex()
        }
        GetTarget() {}
        SetInitialState() {
            this.GetPropertyAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetPropertyAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this.GetPropertyAdapter().BeforeChangeProperty()
        }
        Interpolate(b,
            a, d, c, f, h) {
            const g = e.PropertySourceAdapter.GetInterpolateFunc(this._propertyTrack)(b, a, d, this._propertyTrack);
            return f ? g : this.GetPropertyAdapter().ChangeProperty(b, g, a, d, c, h)
        }
        AfterInterpolate() {
            this.GetPropertyAdapter().AfterChangeProperty()
        }
        SaveState() {
            this.GetPropertyAdapter().SetSaveState()
        }
        ClearSaveState() {
            this.GetPropertyAdapter().ClearSaveState()
        }
        GetCurrentState() {
            return this.GetPropertyAdapter().GetCurrentState()
        }
        CompareInitialStateWithCurrent() {
            return this.GetPropertyAdapter().CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            return this.GetPropertyAdapter().CompareSaveStateWithCurrent()
        }
        GetValueAtTime() {
            return e.PropertySourceAdapter.GetValueAtTime(this._propertyTrack)
        }
        _CreatePropertyAdapter() {
            const b =
                this._propertyTrack.GetPropertyType();
            switch(this._propertyTrack.GetPropertyKeyframeType()) {
                case "combo":
                case "boolean":
                case "text":
                case "string":
                    return new e.PropertyInterpolationAdapter.NoInterpolationAdapter(this);
                case "numeric":
                case "number":
                case "angle":
                    return "combo" === b ? new e.PropertyInterpolationAdapter.NoInterpolationAdapter(this) : new e.PropertyInterpolationAdapter.NumericInterpolationAdapter(this);
                case "color":
                case "offsetColor":
                    return new e.PropertyInterpolationAdapter.ColorInterpolationAdapter(this)
            }
        }
        _SaveToJson() {
            return {
                propertyAdapterJson: this.GetPropertyAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(b) {
            b &&
                this.GetPropertyAdapter()._LoadFromJson(b.propertyAdapterJson)
        }
        static GetValueAtTime(b) {
            const a = b.GetTrack().GetTimeline().GetTime(),
                d = e.GetStartPropertyKeyframeForTime(a, b),
                c = e.GetEndPropertyKeyframeForTime(a, b);
            return e.PropertySourceAdapter.GetInterpolateFunc(b)(a, d, c, b)
        }
        static GetValue(b, a, d) {
            let c = b.GetResultMode();
            "combo" === b.GetPropertyType() && (c = "absolute");
            switch(c) {
                case "relative":
                    return a + d;
                case "absolute":
                    return d
            }
        }
        static GetInterpolateFunc(b) {
            switch(b.GetPropertyKeyframeType()) {
                case "numeric":
                    return e.NumericTypeAdapter.Interpolate;
                case "angle":
                    return e.AngleTypeAdapter.Interpolate;
                case "boolean":
                    return e.BooleanTypeAdapter.Interpolate;
                case "color":
                    return e.ColorTypeAdapter.Interpolate;
                case "text":
                    return e.TextTypeAdapter.Interpolate
            }
        }
        static GetWillChangeFunc(b) {
            switch(b.GetPropertyKeyframeType()) {
                case "numeric":
                    return e.NumericTypeAdapter.WillChange;
                case "angle":
                    return e.AngleTypeAdapter.WillChange;
                case "boolean":
                    return e.BooleanTypeAdapter.WillChange;
                case "color":
                    return e.ColorTypeAdapter.WillChange;
                case "text":
                    return e.TextTypeAdapter.WillChange
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
    }
    e.PropertyTrackState.WorldInstanceSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._updatedIndex = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetIndex() {
            return this._updatedIndex ? this._updatedIndex : super.GetIndex()
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance()
        }
        UpdateInstanceVariableIndex(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._updatedIndex =
                a)
        }
        Interpolate(a, d, c, f, h, g) {
            if(this.GetPropertyAdapter().CanChange(d.GetValue())) return super.Interpolate(a, d, c, f, h, g)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                index: this._updatedIndex
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a), this._updatedIndex = a.index)
        }
    }
    e.PropertyTrackState.InstanceVariableSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._sid = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            var a = this._propertyTrack.GetPropertyTrackDataItem(),
                d = this._propertyTrack.GetTrack();
            a = this._sid ? this._sid : a.GetSourceAdapterArguments()[0];
            d = d.GetInstance();
            a = d.GetBehaviorIndexBySID(a);
            return d.GetBehaviorInstances()[a].GetSdkInstance()
        }
        GetBehaviorType(a) {
            const d =
                this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[2];
            return a.GetBehaviorTypeByName(d)
        }
        UpdateBehaviorTypeSid(a) {
            this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0] !== a && (this._sid = a)
        }
        Interpolate(a, d, c, f, h, g) {
            const k = this._propertyTrack.GetTrack().GetInstance();
            if(this.GetBehaviorType(k.GetObjectClass())) return super.Interpolate(a, d, c, f, h, g)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                sid: this._sid
            })
        }
        _LoadFromJson(a) {
            a && (super._LoadFromJson(a),
                this._sid = a.sid)
        }
    }
    e.PropertyTrackState.BehaviorSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[1]
        }
        GetTarget() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            d = this.GetEffectType(d).GetIndex();
            return a.IsEffectIndexActive(d) ? a.GetEffectParametersForIndex(d) : null
        }
        GetEffectType(a) {
            const d = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0];
            return a.GetEffectTypeByName(d)
        }
        Interpolate(a, d, c, f, h, g) {
            if(this._IsEffectActive()) return super.Interpolate(a, d, c, f, h, g)
        }
        _IsEffectActive() {
            const a = this._propertyTrack.GetTrack().GetWorldInfo().GetInstanceEffectList();
            var d = a.GetEffectList();
            if(d = this.GetEffectType(d)) return d = d.GetIndex(), a.IsEffectIndexActive(d)
        }
    }
    e.PropertyTrackState.EffectSourceAdapter = b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[0]
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance().GetSdkInstance()
        }
        Interpolate(a, d, c, f, h, g) {
            var k = this._propertyTrack.GetTrack();
            const m = k.GetObjectClass().GetPlugin();
            k = k.GetInstance().GetObjectClass().GetPlugin();
            if(m === k) return super.Interpolate(a, d, c, f, h, g)
        }
    }
    e.PropertyTrackState.PluginSourceAdapter =
        b
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertySourceAdapter {
        constructor(a) {
            super(a);
            this._value = 0;
            this._init = !1
        }
        SetInitialState() {
            const a = this._propertyTrack.GetPropertyTrackData();
            let d = this._propertyTrack.GetPropertyTrackDataItem();
            d = a.GetFirstPropertyKeyframeDataItem(d);
            this._value = d.GetValueWithResultMode()
        }
        SetResumeState() {}
        GetValue() {
            this._init || this._propertyTrack.Interpolate(0);
            return this._value
        }
        Interpolate(a, d, c, f, h, g) {
            f = e.PropertyTrackState.NumericTypeAdapter.Interpolate;
            this._value =
                f(a, d, c, this._propertyTrack);
            this._init = !0
        }
        SaveState() {}
        ClearSaveState() {}
        GetCurrentState() {
            return this._value
        }
        CompareInitialStateWithCurrent() {
            return !1
        }
        CompareSaveStateWithCurrent() {
            return !1
        }
        _SaveToJson() {
            return {
                value: this._value,
                init: this._init
            }
        }
        _LoadFromJson(a) {
            a && (this._value = a.value, this._init = a.hasOwnProperty("init") ? a.init : !0)
        }
    }
    e.PropertyTrackState.ValueSourceAdapter = b
}
"use strict";
self.C3.PropertyTrackState.PropertyInterpolationAdapter = class {
    constructor(e) {
        this._sourceAdapter = e;
        this._propertyTrack = e.GetPropertyTrack();
        this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
        this._property = this._propertyTrack.GetPropertyName();
        this._firstAbsoluteUpdate = !1;
        this._target = this._saveState = null
    }
    Release() {
        this._target = this._saveState = this._worldInfo = this._propertyTrack = this._sourceAdapter = null
    }
    CleanCaches() {
        this._target = this._saveState = this._worldInfo = null
    }
    GetPropertyTrack() {
        return this._propertyTrack
    }
    GetWorldInfo() {
        return this._worldInfo ?
            this._worldInfo : this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo()
    }
    SetFirstAbsoluteUpdate(e) {
        this._firstAbsoluteUpdate = !!e
    }
    GetFirstAbsoluteUpdate() {
        return this._firstAbsoluteUpdate
    }
    SetInitialState() {}
    SetResumeState() {}
    SetSaveState() {
        this._saveState = this.GetCurrentState()
    }
    ClearSaveState() {
        this._saveState = null
    }
    GetCurrentState() {}
    CompareInitialStateWithCurrent() {}
    CompareSaveStateWithCurrent() {}
    CanChange(e) {
        return typeof this._Getter() === typeof e
    }
    BeforeChangeProperty() {}
    ChangeProperty(e, b,
        a, d, c) {}
    AfterChangeProperty() {}
    _FirstKeyframeGetter() {
        return this._PickTimelinePlaybackMode(() => {
            const e = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(e)
        }, () => {
            const e = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e)
        }).GetAbsoluteValue()
    }
    _CurrentKeyframeGetter() {
        const e = this._propertyTrack.GetTimeline().GetTime() - this._propertyTrack.GetTrack().GetStartOffset();
        return this._PickTimelinePlaybackMode(() => {
            const b = this._propertyTrack.GetPropertyTrackDataItem();
            return this._propertyTrack.GetPropertyTrackData().GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(e, b)
        }, () => {
            const b = this._propertyTrack.GetPropertyTrackDataItem(),
                a = this._propertyTrack.GetPropertyTrackData(),
                d = a.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(e, b);
            return d ? d : a.GetLastPropertyKeyframeDataItem(b)
        }).GetAbsoluteValue()
    }
    _PickTimelinePlaybackMode(e, b) {
        return this._propertyTrack.GetTimeline().IsForwardPlayBack() ?
            e() : b()
    }
    _PickResultMode(e, b) {
        return "relative" === this._propertyTrack.GetResultMode() ? e() : b()
    }
    _PickFirstAbsoluteUpdate(e, b) {
        return this.GetFirstAbsoluteUpdate() ? (this.SetFirstAbsoluteUpdate(!1), e()) : b()
    }
    _GetAbsoluteInitialValue(e) {}
    _GetIndex() {
        return this._sourceAdapter.GetIndex()
    }
    _GetTarget() {
        return this._target ? this._target : this._target = this._sourceAdapter.GetTarget()
    }
    _PickSource(e, b, a, d, c) {
        switch(this._propertyTrack.GetSourceAdapterId()) {
            case "behavior":
                return e();
            case "effect":
                return b();
            case "instance-variable":
                return a();
            case "plugin":
                return d();
            case "world-instance":
                return c()
        }
    }
    _SaveToJson() {
        return {
            firstAbsoluteUpdate: this._firstAbsoluteUpdate,
            saveState: this._saveState
        }
    }
    _LoadFromJson(e) {
        e && (this._firstAbsoluteUpdate = e.firstAbsoluteUpdate, this._saveState = e.saveState)
    }
    _GetPropertyKeyframeStubs(e, b = !1) {
        const a = [];
        for(const d of e) {
            e = d.GetTrack().GetStartOffset();
            for(const c of d.GetPropertyKeyframeDataItems()) b && 0 === c.GetTime() ? a.push({
                time: e + c.GetTime(),
                value: c.GetAbsoluteValue()
            }) : b || a.push({
                time: e + c.GetTime(),
                value: c.GetAbsoluteValue()
            })
        }
        return a.sort((d,
            c) => d.time - c.time)
    }
    _GetLastPropertyKeyframeStub(e, b, a) {
        return this._GetPropertyKeyframeStubLowerThanPlayhead(b, a)
    }
    _GetPropertyKeyframeStubLowerThanPlayhead(e, b) {
        for(let a = b.length - 1; 0 <= a; a--)
            if(b[a].time <= e) return b[a];
        return null
    }
}; {
    "use strict";
    const e = self.C3,
        b = new Map,
        a = [0, 0, 0];
    class d extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                f = this._GetTarget(),
                h = this._GetIndex();
            switch(c) {
                case "behavior":
                    return this._ToColorArray(f.GetPropertyValueByIndex(h));
                case "effect":
                    return this._ToColorArray(f[h]);
                case "plugin":
                    return this._ToColorArray(f.GetPropertyValueByIndex(h));
                case "world-instance":
                    return this._ToColorArray(this._Getter())
            }
        }
        CompareInitialStateWithCurrent() {
            const c =
                this._FirstKeyframeGetter();
            return !this._CompareColors(c, this._Getter())
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : !this._CompareColors(this._saveState, this._Getter())
        }
        _CompareColors(c, f) {
            return c.equalsIgnoringAlpha(f)
        }
        _FirstKeyframeGetter() {
            const c = super._FirstKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _CurrentKeyframeGetter() {
            const c = super._CurrentKeyframeGetter();
            return this._GetColorFromArray(c)
        }
        _GetAbsoluteInitialValue(c) {}
        _ToColorArray(c) {
            return e.IsInstanceOf(c,
                e.Color) ? c.toArray().slice(0, 3) : c.slice(0, 3)
        }
        _GetColorFromArray(c) {
            return e.IsInstanceOf(c, e.Color) ? c : new e.Color(c[0], c[1], c[2], 1)
        }
        CanChange(c) {
            return !0
        }
        BeforeChangeProperty() {
            var c = this._propertyTrack.GetInstance();
            b.has(c) || b.set(c, new Map);
            c = b.get(c);
            const f = this._propertyTrack.GetSourceAdapterId();
            c.has(f) || c.set(f, new Map);
            c = c.get(f);
            c.has(this._property) || c.set(this._property, {
                used: !1,
                color: new e.Color(0, 0, 0, 1)
            })
        }
        _GetTmpColor(c, f, h) {
            c = b.get(c).get(f).get(h);
            c.used = !0;
            return c.color
        }
        ChangeProperty(c,
            f, h, g, k) {
            k = this._propertyTrack.GetTimeline();
            g = this._propertyTrack.GetTrack();
            c = this._propertyTrack.GetInstance();
            var m = this._propertyTrack.GetSourceAdapter();
            h = this._propertyTrack.GetSourceAdapterId();
            m = k.GetSimilarPropertyTracks(c, m, this._property);
            if(1 < m.length) {
                if(m = this._GetPropertyKeyframeStubs(m, !0), k = this._GetLastPropertyKeyframeStub(k, k.GetTime(), m))
                    if(g = g.GetStartOffset(), m = k.time - g, 0 === m) this._GetTmpColor(c, h, this._property).addRgb(f[0], f[1], f[2]);
                    else {
                        if(0 > m) return;
                        k = f[0];
                        g = f[1];
                        f = f[2];
                        m = this._propertyTrack.Interpolate(m, !1, !0);
                        k = e.Color.DiffChannel(k, m[0]);
                        g = e.Color.DiffChannel(g, m[1]);
                        f = e.Color.DiffChannel(f, m[2]);
                        this._GetTmpColor(c, h, this._property).addRgb(k, g, f)
                    }
            } else this._Setter(f[0], f[1], f[2]);
            return e.TimelineState.LAYOUT_RENDER_CHANGE
        }
        AfterChangeProperty() {
            const c = this._propertyTrack.GetInstance();
            if(b.has(c)) {
                var f = b.get(c),
                    h = this._propertyTrack.GetSourceAdapterId();
                if(f.has(h)) {
                    var g = f.get(h);
                    if(g.has(this._property)) {
                        var k = g.get(this._property),
                            m = k.color;
                        k.used && this._Setter(m.getR(),
                            m.getG(), m.getB());
                        0 === g.size && f.delete(h);
                        0 === f.size && b.delete(c)
                    }
                }
            }
        }
        _Getter() {
            const c = this._propertyTrack.GetSourceAdapterId(),
                f = this._GetTarget(),
                h = this._GetIndex();
            switch(c) {
                case "behavior":
                    return this._GetColorFromArray(f.GetPropertyValueByIndex(h));
                case "effect":
                    return f[h].clone();
                case "plugin":
                    return this._GetColorFromArray(f.GetPropertyValueByIndex(h));
                case "world-instance":
                    return this.GetWorldInfo().GetUnpremultipliedColor().clone()
            }
        }
        _Setter(c, f, h) {
            const g = this._propertyTrack.GetSourceAdapterId(),
                k = this._GetTarget(),
                m = this._GetIndex();
            switch(g) {
                case "behavior":
                    a[0] = c;
                    a[1] = f;
                    a[2] = h;
                    k.SetPropertyValueByIndex(m, a);
                    break;
                case "effect":
                    k[m].setRgb(c, f, h);
                    break;
                case "plugin":
                    a[0] = c;
                    a[1] = f;
                    a[2] = h;
                    k.SetPropertyValueByIndex(m, a);
                    break;
                case "world-instance":
                    this.GetWorldInfo().SetUnpremultipliedColorRGB(c, f, h)
            }
        }
        _SaveToJson() {}
        _LoadFromJson(c) {}
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.ColorInterpolationAdapter = d
} {
    "use strict";
    const e = self.C3;
    class b extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(a) {
            super(a)
        }
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        ChangeProperty(a, d, c, f, h) {
            c = e.PropertyTrackState.PropertySourceAdapter.GetWillChangeFunc(this._propertyTrack);
            var g = this._propertyTrack;
            const k = g.GetTrack();
            f = g.GetSourceAdapterId();
            h = g.GetTimeline();
            var m = k.GetInstance();
            g = g.GetSourceAdapter();
            m = h.GetSimilarPropertyTracks(m, g, this._property);
            1 < m.length && (m = this._GetPropertyKeyframeStubs(m), a += k.GetStartOffset(), a = this._GetLastPropertyKeyframeStub(h, a, m)) && (d = a.value);
            if(c(this._GetIndex(), this._GetTarget(), d, f)) switch(this._Setter(d), f) {
                case "plugin":
                    return e.TimelineState.LAYOUT_RENDER_CHANGE
            }
        }
        _Getter() {
            const a = this._propertyTrack.GetSourceAdapterId(),
                d = this._GetTarget(),
                c = this._GetIndex();
            switch(a) {
                case "behavior":
                    return d.GetPropertyValueByIndex(c);
                case "effect":
                    return d[c];
                case "instance-variable":
                    return d.GetInstanceVariableValue(c);
                case "plugin":
                    return d.GetPropertyValueByIndex(c)
            }
        }
        _Setter(a) {
            const d = this._propertyTrack.GetSourceAdapterId(),
                c = this._GetTarget(),
                f = this._GetIndex();
            switch(d) {
                case "behavior":
                    c.SetPropertyValueByIndex(f, a);
                    break;
                case "effect":
                    c[f] = a;
                    break;
                case "instance-variable":
                    c.SetInstanceVariableValue(f, a);
                    break;
                case "plugin":
                    c.SetPropertyValueByIndex(f,
                        a)
            }
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NoInterpolationAdapter = b
} {
    "use strict";
    const e = self.C3,
        b = new Map,
        a = (c, f, h, g, k) => b.set(c, {
            setter: f,
            absolute_setter: h,
            getter: g,
            round: k
        });
    a("offsetX", (c, f) => c.OffsetX(f), (c, f) => c.SetX(f), c => c.GetX(), !0);
    a("offsetY", (c, f) => c.OffsetY(f), (c, f) => c.SetY(f), c => c.GetY(), !0);
    a("offsetWidth", (c, f) => c.OffsetWidth(f), (c, f) => c.SetWidth(f), c => c.GetWidth(), !0);
    a("offsetHeight", (c, f) => c.OffsetHeight(f), (c, f) => c.SetHeight(f), c => c.GetHeight(), !0);
    a("offsetAngle", (c, f) => c.OffsetAngle(f), (c, f) => c.SetAngle(f), c => c.GetAngle(), !1);
    a("offsetOpacity",
        (c, f, h, g) => {
            h = c.GetOpacity() + f;
            0 === g._clampAccumulator ? (1 < h ? g._clampAccumulator += h - 1 : 0 > h && (g._clampAccumulator += h), c.OffsetOpacity(f)) : (c = c.GetOpacity() + f, 0 < f && 0 < g._clampAccumulator ? 1 < c && (g._clampAccumulator += c - 1) : 0 < f && 0 > g._clampAccumulator ? (g._clampAccumulator += f, 0 < g._clampAccumulator && (g._clampAccumulator = 0)) : 0 > f && 0 < g._clampAccumulator ? (g._clampAccumulator += f, 0 > g._clampAccumulator && (g._clampAccumulator = 0)) : 0 > f && 0 > g._clampAccumulator && 0 > c && (g._clampAccumulator += c))
        }, (c, f) => {
            c.SetOpacity(f)
        }, c => c.GetOpacity(),
        !1);
    a("offsetOriginX", (c, f) => c.OffsetOriginX(f), (c, f) => c.SetOriginX(f), c => c.GetOriginX(), !1);
    a("offsetOriginY", (c, f) => c.OffsetOriginY(f), (c, f) => c.SetOriginY(f), c => c.GetOriginY(), !1);
    a("offsetZElevation", (c, f) => c.OffsetZElevation(f), (c, f) => c.SetZElevation(f), c => c.GetZElevation(), !0);
    a("offsetScaleX", (c, f, h, g) => {
        g = 0 > c.GetWidth() ? -1 : 1;
        c.GetTransformWithParentWidth();
        c.OffsetWidth(h.GetOriginalWidth() * g * f)
    }, (c, f, h) => {
        c.SetWidth(h.GetOriginalWidth() * f)
    }, (c, f) => {
        const h = 0 > c.GetWidth() ? -1 : 1;
        if(c.GetTransformWithParentWidth()) {
            var g =
                c.GetParent(),
                k = f.GetTimeline().GetTrackInstance(g.GetInstance());
            k ? g = g.GetWidth() / k.GetOriginalWidth() : (k = g.GetInstance().GetSdkInstance(), g = k.IsOriginalSizeKnown() ? g.GetWidth() / k.GetOriginalWidth() : 1);
            return c.GetWidth() * h / (f.GetOriginalWidth() * g)
        }
        return c.GetWidth() * h / f.GetOriginalWidth()
    }, !1);
    a("offsetScaleY", (c, f, h, g) => {
        g = 0 > c.GetHeight() ? -1 : 1;
        c.GetTransformWithParentHeight();
        c.OffsetHeight(h.GetOriginalHeight() * g * f)
    }, (c, f, h) => {
        c.SetHeight(h.GetOriginalHeight() * f)
    }, (c, f) => {
        const h = 0 > c.GetHeight() ?
            -1 : 1;
        if(c.GetTransformWithParentHeight()) {
            var g = c.GetParent(),
                k = f.GetTimeline().GetTrackInstance(g.GetInstance());
            k ? g = g.GetHeight() / k.GetOriginalHeight() : (k = g.GetInstance().GetSdkInstance(), g = k.IsOriginalSizeKnown() ? g.GetHeight() / k.GetOriginalHeight() : 1);
            return c.GetHeight() * h / (f.GetOriginalHeight() * g)
        }
        return c.GetHeight() * h / f.GetOriginalHeight()
    }, !1);
    class d extends e.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(c) {
            super(c);
            this._clampAccumulator = this._lastValue = 0;
            this._instance_absolute_setter =
                this._instance_setter = this._instance_getter = null;
            this._round = !1;
            e.IsInstanceOf(this._propertyTrack.GetTimeline(), e.Tween) ? this._typeAdapter = new e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween(this) : this._typeAdapter = new e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline(this);
            c = this._propertyTrack.GetPropertyName();
            "world-instance" === this._propertyTrack.GetSourceAdapterId() && (c = b.get(c), this._instance_getter = c.getter, this._instance_setter =
                c.setter, this._instance_absolute_setter = c.absolute_setter, this._round = c.round)
        }
        Release() {
            this._instance_absolute_setter = this._instance_setter = this._instance_getter = this._typeAdapter = null;
            super.Release()
        }
        GetLastValue() {
            return this._lastValue
        }
        SetLastValue(c) {
            this._lastValue = c
        }
        SetInitialState() {
            const c = this._typeAdapter.SetInitialState();
            "number" === typeof c && (this._lastValue = c);
            this._clampAccumulator = 0
        }
        SetResumeState() {
            const c = this._typeAdapter.SetResumeState();
            "number" === typeof c && (this._lastValue =
                c)
        }
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            return this._FirstKeyframeGetter() !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            return e.IsNullOrUndefined(this._saveState) ? !1 : this._saveState !== this.GetCurrentState()
        }
        BeforeChangeProperty() {
            this._typeAdapter.BeforeChangeProperty()
        }
        ChangeProperty(c, f, h, g, k, m, p) {
            return this._typeAdapter.ChangeProperty(c, f, h, g, k, m, p)
        }
        AfterChangeProperty() {
            this._typeAdapter.AfterChangeProperty()
        }
        _Getter() {
            const c = this._GetTarget(),
                f = this._GetIndex(),
                h = this._propertyTrack.GetTrack(),
                g = this.GetWorldInfo();
            return this._PickSource(() => c.GetPropertyValueByIndex(f), () => c[f], () => c.GetInstanceVariableValue(f), () => c.GetPropertyValueByIndex(f), () => this._instance_getter(g, h))
        }
        _Setter(c, f, h) {
            const g = this._GetTarget(),
                k = this._GetIndex(),
                m = this._propertyTrack.GetTrack(),
                p = this.GetWorldInfo();
            this._PickSource(() => g.OffsetPropertyValueByIndex(k, c), () => g[k] += c, () => g.SetInstanceVariableOffset(k, c), () => g.OffsetPropertyValueByIndex(k, c), () => this._instance_setter(p,
                c, m, this))
        }
        _SetterAbsolute(c, f, h) {
            const g = this._GetTarget(),
                k = this._GetIndex(),
                m = this._propertyTrack.GetTrack(),
                p = this.GetWorldInfo();
            this._PickSource(() => g.SetPropertyValueByIndex(k, c), () => g[k] = c, () => g.SetInstanceVariableValue(k, c), () => g.SetPropertyValueByIndex(k, c), () => this._instance_absolute_setter(p, c, m))
        }
        _MaybeEnsureValue(c, f, h, g, k, m) {
            this._typeAdapter._MaybeEnsureValue(c, f, h, g, k, m)
        }
        _AddDelta(c, f, h) {
            var g = (c.toString().split(".")[1] || "").length;
            c = this._Getter();
            g = 0 === g ? this._round ? Math.round(c) :
                c : e.toFixed(c, g);
            this._Setter(g - c, f, h)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                v: this._lastValue,
                a: this._clampAccumulator
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._lastValue = c.v, this._clampAccumulator = c.a)
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapter = d
} {
    "use strict";
    const e = self.C3,
        b = new Map;
    class a {
        constructor(d) {
            this._numericInterpolationAdapter = d
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack();
            return d._PickResultMode(() => d._PickTimelinePlaybackMode(() => 0, () => e.PropertyTrackState.PropertySourceAdapter.GetValueAtTime(c)), () => {})
        }
        SetResumeState() {}
        BeforeChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                f = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                var h = c.GetInstance();
                b.has(h) || b.set(h, new Map);
                h = b.get(h);
                const g = c.GetSourceAdapterId();
                h.has(g) || h.set(g, new Map);
                h = h.get(g);
                h.has(f) || h.set(f, {
                    used: !1,
                    value: 0
                })
            })
        }
        _GetTmpAbsoluteValueObject(d, c, f) {
            d = b.get(d).get(c).get(f);
            d.used = !0;
            return d
        }
        ChangeProperty(d, c, f, h, g, k) {
            const m = this._numericInterpolationAdapter,
                p = this._numericInterpolationAdapter.GetPropertyTrack(),
                x = p.GetPropertyName();
            m._PickResultMode(() => {
                const t = m.GetLastValue();
                m._Setter(c -
                    t, f, h);
                k && this._MaybeEnsureValue(d, f, h, g, t, c);
                m.SetLastValue(c)
            }, () => {
                var t = p.GetTimeline(),
                    q = p.GetTrack();
                const r = p.GetInstance();
                var y = p.GetSourceAdapter();
                const v = p.GetSourceAdapterId();
                y = t.GetSimilarPropertyTracks(r, y, x);
                if(1 < y.length) {
                    if(y = m._GetPropertyKeyframeStubs(y, !0), t = m._GetLastPropertyKeyframeStub(t, t.GetTime(), y)) q = q.GetStartOffset(), q = t.time - q, 0 === q ? this._GetTmpAbsoluteValueObject(r, v, x).value += c : 0 > q || (q = p.Interpolate(q, !1, !0), this._GetTmpAbsoluteValueObject(r, v, x).value += c - q)
                } else m._SetterAbsolute(c)
            });
            return m._PickSource(() => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => e.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {
            const d = this._numericInterpolationAdapter,
                c = this._numericInterpolationAdapter.GetPropertyTrack(),
                f = c.GetPropertyName();
            d._PickResultMode(() => {}, () => {
                const h = c.GetInstance();
                if(b.has(h)) {
                    var g = b.get(h),
                        k = c.GetSourceAdapterId();
                    if(g.has(k)) {
                        var m = g.get(k);
                        if(m.has(f)) {
                            var p = m.get(f),
                                x = p.value;
                            p.used && d._SetterAbsolute(x);
                            m.delete(f);
                            0 === m.size && g.delete(k);
                            0 === g.size && b.delete(h)
                        }
                    }
                }
            })
        }
        _MaybeEnsureValue(d, c, f, h, g, k) {
            const m = this._numericInterpolationAdapter;
            h || (c && d === c.GetTime() ? m._AddDelta(c.GetValueWithResultMode(), c, f) : f && d === f.GetTime() ? m._AddDelta(f.GetValueWithResultMode(), c, f) : 0 === k - g && m._AddDelta(c.GetValueWithResultMode(), c, f))
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline = a
} {
    "use strict";
    const e = self.C3;
    new Map;
    class b {
        constructor(a) {
            this._numericInterpolationAdapter = a
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        SetInitialState() {
            const a = this._numericInterpolationAdapter;
            a.SetFirstAbsoluteUpdate(!0);
            return this._GetAbsoluteInitialValue(a._FirstKeyframeGetter())
        }
        SetResumeState() {
            const a = this._numericInterpolationAdapter;
            if(a._FirstKeyframeGetter() !== a._CurrentKeyframeGetter()) return a.SetFirstAbsoluteUpdate(!0), this._GetAbsoluteInitialValue(a._CurrentKeyframeGetter())
        }
        BeforeChangeProperty() {}
        ChangeProperty(a,
            d, c, f, h, g) {
            const k = this._numericInterpolationAdapter,
                m = k.GetLastValue();
            k._PickResultMode(() => {
                k._Setter(d - m, c, f);
                g && this._MaybeEnsureValue(a, c, f, h, m, d)
            }, () => {
                k._PickFirstAbsoluteUpdate(() => {
                    k._Setter(m, c, f)
                }, () => {
                    k._Setter(d - m, c, f);
                    g && this._MaybeEnsureValue(a, c, f, h, m, d)
                })
            });
            k.SetLastValue(d);
            return k._PickSource(() => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => {}, () => e.TimelineState.LAYOUT_RENDER_CHANGE, () => e.TimelineState.LAYOUT_RENDER_CHANGE)
        }
        AfterChangeProperty() {}
        _GetAbsoluteInitialValue(a) {
            return a -
                this._numericInterpolationAdapter.GetCurrentState()
        }
        _MaybeEnsureValue(a, d, c, f, h, g) {
            const k = this._numericInterpolationAdapter;
            f ? d && a === d.GetTime() ? k._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? k._AddDelta(c.GetValueWithResultMode(), d, c) : c || k._AddDelta(d.GetValueWithResultMode(), d, c) : d && a === d.GetTime() ? k._AddDelta(d.GetValueWithResultMode(), d, c) : c && a === c.GetTime() ? k._AddDelta(c.GetValueWithResultMode(), d, c) : 0 === g - h && k._AddDelta(d.GetValueWithResultMode(), d, c)
        }
    }
    e.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween =
        b
} {
    "use strict";
    const e = self.C3,
        b = self.Ease;
    e.PropertyTrackState.NumericTypeAdapter = class {
        constructor() {}
        static WillChange(a, d, c, f) {
            let h;
            switch(f) {
                case "behavior":
                    h = d.GetPropertyValueByIndex(a);
                    break;
                case "effect":
                    h = d[a];
                    break;
                case "instance-variable":
                    h = d.GetInstanceVariableValue(a);
                    break;
                case "plugin":
                    h = d.GetPropertyValueByIndex(a)
            }
            return h === c ? !1 : !0
        }
        static Interpolate(a, d, c, f) {
            if(!c) return c = f.GetPropertyTrackDataItem(), c = f.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(c), c.GetValueWithResultMode();
            var h =
                f.GetInterpolationMode();
            "default" === h && (h = "continuous");
            "combo" === f.GetPropertyType() && (h = "discrete");
            if("discrete" === h) return d.GetValueWithResultMode();
            if("continuous" === h || "step" === h) {
                "step" === h && (h = f.GetTimeline().GetStep(), 0 !== h && (h = 1 / h, a = Math.floor(a * h) / h));
                var g = d.GetTime();
                const k = c.GetTime();
                h = d.GetValueWithResultMode();
                const m = c.GetValueWithResultMode();
                if(h === m) return h;
                a = e.normalize(a, g, k);
                const p = d.GetEase();
                d = d.GetAddOn("cubic-bezier");
                c = c.GetAddOn("cubic-bezier");
                d && d.GetStartEnable() &&
                    c && c.GetEndEnable() ? (g = k - g, g = b.GetRuntimeEase(p)(g * a, 0, 1, g), g = b.GetRuntimeEase("cubicbezier")(g, h, h + d.GetStartAnchor(), m + c.GetEndAnchor(), m)) : g = b.GetRuntimeEase(p)((k - g) * a, h, m - h, k - g);
                return "integer" === f.GetPropertyType() ? Math.floor(g) : g
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.PropertyTrackState.AngleTypeAdapter = class {
        constructor() {}
        static WillChange(b, a, d, c) {
            let f;
            switch(c) {
                case "behavior":
                    f = a.GetPropertyValueByIndex(b);
                    break;
                case "effect":
                    f = a[b];
                    break;
                case "instance-variable":
                    f = a.GetInstanceVariableValue(b);
                    break;
                case "plugin":
                    f = a.GetPropertyValueByIndex(b)
            }
            return f === d ? !1 : !0
        }
        static Interpolate(b, a, d, c) {
            if(!d) return a = c.GetPropertyTrackDataItem(), a = c.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(a), a.GetValueWithResultMode();
            var f =
                c.GetInterpolationMode();
            "default" === f && (f = "continuous");
            "combo" === c.GetPropertyType() && (f = "discrete");
            if("discrete" === f) return a.GetValueWithResultMode();
            if("continuous" === f || "step" === f) {
                "step" === f && (c = c.GetTimeline().GetStep(), 0 !== c && (c = 1 / c, b = Math.floor(b * c) / c));
                const h = a.GetTime(),
                    g = d.GetTime();
                c = a.GetValueWithResultMode();
                d = d.GetValueWithResultMode();
                if(f = a.GetAddOn("angle")) {
                    const k = f.GetRevolutions();
                    if(c === d && 0 === k) return c;
                    b = e.normalize(b, h, g);
                    a = self.Ease.GetRuntimeEase(a.GetEase())(b, 0, 1,
                        1);
                    switch(f.GetDirection()) {
                        case "closest":
                            return e.angleLerp(c, d, a, k);
                        case "clockwise":
                            return e.angleLerpClockwise(c, d, a, k);
                        case "anti-clockwise":
                            return e.angleLerpAntiClockwise(c, d, a, k)
                    }
                } else {
                    if(c === d) return c;
                    b = e.normalize(b, h, g);
                    a = self.Ease.GetRuntimeEase(a.GetEase());
                    return e.angleLerp(c, d, a(b, 0, 1, 1))
                }
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.BooleanTypeAdapter = class {
    constructor() {}
    static WillChange(e, b, a, d) {
        let c;
        switch(d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(e);
                break;
            case "effect":
                c = b[e];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(e);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(e)
        }
        return !!c === !!a ? !1 : !0
    }
    static Interpolate(e, b, a, d) {
        return a ? b.GetValueWithResultMode() ? 1 : 0 : (e = d.GetPropertyTrackDataItem(), e = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e), e.GetValueWithResultMode() ?
            1 : 0)
    }
}; {
    "use strict";
    const e = self.C3,
        b = [0, 0, 0],
        a = [0, 0, 0],
        d = [0, 0, 0];
    e.PropertyTrackState.ColorTypeAdapter = class {
        constructor() {}
        static WillChange(c, f, h, g) {
            let k;
            switch(g) {
                case "behavior":
                    k = f.GetPropertyValueByIndex(c);
                    break;
                case "effect":
                    k = f[c];
                    break;
                case "instance-variable":
                    k = f.GetInstanceVariableValue(c);
                    break;
                case "plugin":
                    k = f.GetPropertyValueByIndex(c)
            }
            Array.isArray(h) ? (b[0] = h[0], b[1] = h[1], b[2] = h[2]) : (d.parseCommaSeparatedRgb(h), b[0] = Math.floor(255 * d.getR()), b[1] = Math.floor(255 * d.getG()), b[2] = Math.floor(255 * d.getB()));
            Array.isArray(k) ? (a[0] = k[0], a[1] = k[1], a[2] = k[2]) : (d.parseCommaSeparatedRgb(k), a[0] = Math.floor(255 * d.getR()), a[1] = Math.floor(255 * d.getG()), a[2] = Math.floor(255 * d.getB()));
            return b[0] !== a[0] || b[1] !== a[1] || b[2] !== a[2] ? !0 : !1
        }
        static Interpolate(c, f, h, g) {
            if(!h) {
                var k = g.GetPropertyTrackDataItem();
                k = g.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(k);
                g = k.GetValueWithResultMode();
                b[0] = g[0];
                b[1] = g[1];
                b[2] = g[2];
                return b
            }
            k = g.GetInterpolationMode();
            "default" === k && (k = "continuous");
            if("discrete" === k) return g =
                f.GetValueWithResultMode(), b[0] = g[0], b[1] = g[1], b[2] = g[2], b;
            if("continuous" === k || "step" === k) {
                "step" === k && (g = g.GetTimeline().GetStep(), 0 !== g && (g = 1 / g, c = Math.floor(c * g) / g));
                g = f.GetTime();
                k = h.GetTime();
                var m = f.GetValueWithResultMode(),
                    p = h.GetValueWithResultMode();
                c = e.normalize(c, g, k);
                var x = f.GetEase();
                f = m[0];
                h = m[1];
                m = m[2];
                const t = p[0],
                    q = p[1];
                p = p[2];
                x = self.Ease.GetRuntimeEase(x);
                g = k - g;
                k = g * c;
                b[0] = f === t ? f : x(k, f, t - f, g);
                b[1] = h === q ? h : x(k, h, q - h, g);
                b[2] = m === p ? m : x(k, m, p - m, g);
                return b
            }
        }
    }
}
"use strict";
self.C3.PropertyTrackState.TextTypeAdapter = class {
    constructor() {}
    static WillChange(e, b, a, d) {
        let c;
        switch(d) {
            case "behavior":
                c = b.GetPropertyValueByIndex(e);
                break;
            case "effect":
                c = b[e];
                break;
            case "instance-variable":
                c = b.GetInstanceVariableValue(e);
                break;
            case "plugin":
                c = b.GetPropertyValueByIndex(e)
        }
        return c === a ? !1 : !0
    }
    static Interpolate(e, b, a, d) {
        return a ? b.GetValueWithResultMode() : (e = d.GetPropertyTrackDataItem(), e = d.GetPropertyTrackData().GetLastPropertyKeyframeDataItem(e), e.GetValueWithResultMode())
    }
}; {
    "use strict";
    const e = self.C3;
    e.TimelineDataManager = class {
        constructor() {
            this._timelineDataItems = new Map
        }
        Release() {
            for(const b of this._timelineDataItems.values()) b.Release();
            this._timelineDataItems.clear();
            this._timelineDataItems = null
        }
        Add(b) {
            b = new e.TimelineDataItem(b);
            const a = b.GetName();
            this._timelineDataItems.set(a, b)
        }
        Get(b) {
            return this._timelineDataItems.get(b)
        }
        GetNameId() {
            return 0
        }
        static _CreateDataItems(b, a, d, c) {
            if(a)
                for(const f of a) e.TimelineDataManager._CreateDataItem("create", f, b, d, c)
        }
        static _LoadDataItemsFromJson(b,
            a, d, c) {
            b.length ? a.forEach((f, h) => {
                b[h]._LoadFromJson(f)
            }) : a.forEach(f => {
                e.TimelineDataManager._CreateDataItem("load", f, b, d, c)
            })
        }
        static _CreateDataItem(b, a, d, c, f) {
            let h;
            if("function" === typeof c) switch(b) {
                case "load":
                    h = new c(null, f);
                    break;
                case "create":
                    h = new c(a, f)
            } else if("object" === typeof c) switch(c = c.map.get(a[c.prop]), b) {
                case "load":
                    h = new c(null, f);
                    break;
                case "create":
                    h = new c(a, f)
            }
            switch(b) {
                case "load":
                    h._LoadFromJson(a);
                    d.push(h);
                    break;
                case "create":
                    if("function" === typeof h.GetEnable && !h.GetEnable()) return h.Release();
                    d.push(h)
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TimelineDataItem = class {
        constructor(b) {
            this._name = "";
            this._totalTime = NaN;
            this._step = 0;
            this._resultMode = this._interpolationMode = "default";
            this._pingPong = this._loop = !1;
            this._repeatCount = 1;
            this._trackData = null;
            b && (this._name = b[0], this._totalTime = b[1], this._step = b[2], this._interpolationMode = b[3], this._resultMode = b[4], this._loop = !!b[6], this._pingPong = !!b[7], this._repeatCount = b[8], this._trackData = new e.TrackData(b[5], this))
        }
        Release() {
            this._trackData.Release();
            this._trackData =
                null
        }
        GetTrackData() {
            this._trackData || (this._trackData = new e.TrackData(null, this));
            return this._trackData
        }
        GetName() {
            return this._name
        }
        SetName(b) {
            this._name = b
        }
        GetTotalTime() {
            return this._totalTime
        }
        SetTotalTime(b) {
            this._totalTime = b
        }
        GetStep() {
            return this._step
        }
        SetStep(b) {
            this._step = b
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(b) {
            this._interpolationMode = b
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(b) {
            this._resultMode = b
        }
        GetLoop() {
            return this._loop
        }
        SetLoop(b) {
            this._loop =
                b
        }
        GetPingPong() {
            return this._pingPong
        }
        SetPingPong(b) {
            this._pingPong = b
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        _SaveToJson() {
            return {
                trackDataJson: this._trackData._SaveToJson(),
                name: this._name,
                totalTime: this._totalTime,
                step: this._step,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                loop: this._loop,
                pingPong: this._pingPong,
                repeatCount: this._repeatCount
            }
        }
        _LoadFromJson(b) {
            b && (this.GetTrackData()._LoadFromJson(b.trackDataJson), this._name = b.name, this._totalTime = b.totalTime, this._step =
                b.step, this._interpolationMode = b.interpolationMode, this._resultMode = b.resultMode, this._loop = b.loop, this._pingPong = b.pingPong, this._repeatCount = b.repeatCount)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._trackData = d;
            this._additionalInstanceData = this._instanceData = null;
            this._objectClassIndex = this._instanceUid = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyTrackData = this._keyframeData = null;
            this._id = "";
            this._nestedData = null;
            this._startOffset = 0;
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            a && (this._instanceData = a[0], this._instanceUid = a[0][2], this._objectClassIndex = a[0][1], this._interpolationMode =
                a[1], this._resultMode = a[2], this._enabled = !!a[3], a[6] && (this._id = a[6]), a[7] && (this._nestedData = a[7], this._startOffset = a[7][0], this._localTotalTime = a[7][1]), a[8] && (this._additionalInstanceData = a[8]), this._keyframeData = new e.KeyframeData(a[4], this), this._propertyTrackData = new e.PropertyTrackData(a[5], this))
        }
        Release() {
            this._trackData = this._instanceData = null;
            this._keyframeData && (this._keyframeData.Release(), this._keyframeData = null);
            this._propertyTrackData && (this._propertyTrackData.Release(), this._propertyTrackData =
                null);
            this._nestedData = null
        }
        GetTrackData() {
            return this._trackData
        }
        GetKeyframeData() {
            this._keyframeData || (this._keyframeData = new e.KeyframeData(null, this));
            return this._keyframeData
        }
        GetPropertyTrackData() {
            this._propertyTrackData || (this._propertyTrackData = new e.PropertyTrackData(null, this));
            return this._propertyTrackData
        }
        GetInstanceData() {
            return this._instanceData
        }
        GetObjectClassIndex() {
            return this._objectClassIndex
        }
        SetObjectClassIndex(a) {
            this._objectClassIndex = a
        }
        GetInstanceUID() {
            return this._instanceUid
        }
        SetInstanceUID(a) {
            this._instanceUid =
                a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode = a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        GetId() {
            return this._id
        }
        GetStartOffset() {
            return this._startOffset
        }
        GetLocalTotalTime() {
            return this._localTotalTime
        }
        SetLocalTotalTime(a) {
            this._localTotalTime = a
        }
        GetOriginalWidth() {
            return this._additionalInstanceData[0]
        }
        SetOriginalWidth(a) {
            this._additionalInstanceData ||
                (this._additionalInstanceData = []);
            this._additionalInstanceData[0] = a
        }
        GetOriginalHeight() {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            return this._additionalInstanceData[1]
        }
        SetOriginalHeight(a) {
            this._additionalInstanceData || (this._additionalInstanceData = []);
            this._additionalInstanceData[1] = a
        }
        _SaveToJson() {
            return {
                keyframeDataJson: this._keyframeData._SaveToJson(),
                propertyTrackDataJson: this._propertyTrackData._SaveToJson(),
                instanceData: this._instanceData,
                additionalInstanceData: this._additionalInstanceData,
                instanceUid: this._instanceUid,
                objectClassIndex: this._objectClassIndex,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled,
                id: this._id,
                nestedData: this._nestedData
            }
        }
        _LoadFromJson(a) {
            a && (this._instanceData = a.instanceData, this._instanceUid = a.instanceUid, this._objectClassIndex = a.objectClassIndex, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this._id = a.id, this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime(),
                a.nestedData && (this._nestedData = a.nestedData, this._startOffset = this._nestedData[0], this._localTotalTime = this._nestedData[1]), a.additionalInstanceData && (this._additionalInstanceData = a.additionalInstanceData), this.GetKeyframeData()._LoadFromJson(a.keyframeDataJson), this.GetPropertyTrackData()._LoadFromJson(a.propertyTrackDataJson))
        }
    }
    e.TrackData = class {
        constructor(a, d) {
            this._timelineDataItem = d;
            this._trackDataItems = [];
            this._keyframeTimeMap = new Map;
            e.TimelineDataManager._CreateDataItems(this._trackDataItems,
                a, b, this)
        }
        Release() {
            this._timelineDataItem = null;
            for(const a of this._trackDataItems) a.Release();
            e.clearArray(this._trackDataItems);
            this._trackDataItems = null;
            this._keyframeTimeMap.clear();
            this._keyframeTimeMap = null
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        AddEmptyTrackDataItem() {
            const a = new b(null, this);
            this._trackDataItems.push(a);
            return a
        }
        GetFirstKeyframeDataItem(a) {
            return a.GetKeyframeData().GetKeyframeDataItemArray()[0]
        }
        GetLastKeyframeDataItem(a) {
            a = a.GetKeyframeData().GetKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetKeyFrameDataItemAtTime(a, d) {
            const c = this._keyframeTimeMap.get(d);
            if(c && c.has(a)) return c.get(a);
            for(const f of d.GetKeyframeData().keyframeDataItems())
                if(f.GetTime() === a) return c || this._keyframeTimeMap.set(d, new Map), this._keyframeTimeMap.get(d).set(a, f), f
        }
        GetFirstKeyFrameDataItemHigherThan(a, d) {
            for(const c of d.GetKeyframeData().keyframeDataItems())
                if(c.GetTime() > a) return c
        }
        GetFirstKeyFrameDataItemHigherOrEqualThan(a, d) {
            for(const c of d.GetKeyframeData().keyframeDataItems())
                if(c.GetTime() >=
                    a) return c
        }
        GetFirstKeyFrameDataItemLowerOrEqualThan(a, d) {
            for(const c of d.GetKeyframeData().keyframeDataItemsReverse())
                if(c.GetTime() <= a) return c
        }* trackDataItems() {
            for(const a of this._trackDataItems) yield a
        }
        _SaveToJson() {
            return {
                trackDataItemsJson: this._trackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._trackDataItems, a.trackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._propertyTrackData = d;
            this._sourceAdapterId = "";
            this._type = this._property = this._sourceAdapterArguments = null;
            this._max = this._min = NaN;
            this._resultMode = this._interpolationMode = "default";
            this._enabled = !1;
            this._propertyKeyframeData = null;
            a && (this._sourceAdapterId = a[0][0], this._sourceAdapterArguments = a[0].slice(1), this._property = a[1], this._type = a[2], this._min = a[3], this._max = a[4], this._interpolationMode = a[5], this._resultMode = a[6], this._enabled = !!a[7],
                this._propertyKeyframeData = new e.PropertyKeyframeData(a[8], this))
        }
        Release() {
            this._propertyKeyframeData.Release();
            this._sourceAdapterArguments = this._propertyTrackData = this._propertyKeyframeData = null
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetPropertyKeyframeData() {
            this._propertyKeyframeData || (this._propertyKeyframeData = new e.PropertyKeyframeData(null, this));
            return this._propertyKeyframeData
        }
        GetSourceAdapterId() {
            return this._sourceAdapterId
        }
        SetSourceAdapterId(a) {
            this._sourceAdapterId =
                a
        }
        GetSourceAdapterArguments() {
            return this._sourceAdapterArguments
        }
        SetSourceAdapterArguments(a) {
            this._sourceAdapterArguments = a
        }
        GetProperty() {
            return this._property
        }
        SetProperty(a) {
            this._property = a
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetMin() {
            return this._min
        }
        SetMin(a) {
            this._min = a
        }
        GetMax() {
            return this._max
        }
        SetMax(a) {
            this._max = a
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(a) {
            this._interpolationMode = a
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(a) {
            this._resultMode =
                a
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(a) {
            this._enabled = !!a
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataJson: this._propertyKeyframeData._SaveToJson(),
                sourceAdapterId: this._sourceAdapterId,
                sourceAdapterArguments: this._sourceAdapterArguments,
                property: this._property,
                type: this._type,
                min: this._min,
                max: this._max,
                interpolationMode: this._interpolationMode,
                resultMode: this._resultMode,
                enabled: this._enabled
            }
        }
        _LoadFromJson(a) {
            a && (this._sourceAdapterId = a.sourceAdapterId, this._sourceAdapterArguments = a.sourceAdapterArguments,
                this._property = a.property, this._type = a.type, this._min = a.min, this._max = a.max, this._interpolationMode = a.interpolationMode, this._resultMode = a.resultMode, this._enabled = a.enabled, this.GetPropertyKeyframeData()._LoadFromJson(a.propertyKeyframeDataJson))
        }
    }
    e.PropertyTrackData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._propertyTrackDataItems = [];
            this._propertyKeyframeTimeMap = new Map;
            e.TimelineDataManager._CreateDataItems(this._propertyTrackDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for(const a of this._propertyTrackDataItems) a.Release();
            e.clearArray(this._propertyTrackDataItems);
            this._propertyTrackDataItems = null;
            this._propertyKeyframeTimeMap.clear();
            this._propertyKeyframeTimeMap = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        AddEmptyPropertyTrackDataItem() {
            const a = new b(null, this);
            this._propertyTrackDataItems.push(a);
            return a
        }
        GetFirstPropertyKeyframeDataItem(a) {
            return a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray()[0]
        }
        GetLastPropertyKeyframeDataItem(a) {
            a = a.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray();
            return a[a.length - 1]
        }
        GetPropertyKeyFrameDataItemAtTime(a, d) {
            const c = this._propertyKeyframeTimeMap.get(d);
            if(c && c.has(a)) return c.get(a);
            const f = d.GetPropertyKeyframeData();
            for(const h of f.propertyKeyframeDataItems())
                if(h.GetTime() === a) return c || this._propertyKeyframeTimeMap.set(d, new Map), this._propertyKeyframeTimeMap.get(d).set(a, h), h
        }
        GetFirstPropertyKeyFrameDataItemHigherThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for(const c of d.propertyKeyframeDataItems())
                if(c.GetTime() > a) return c
        }
        GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(a,
            d) {
            d = d.GetPropertyKeyframeData();
            for(const c of d.propertyKeyframeDataItems())
                if(c.GetTime() >= a) return c
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(a, d) {
            d = d.GetPropertyKeyframeData();
            for(const c of d.propertyKeyframeDataItemsReverse())
                if(c.GetTime() <= a) return c
        }* propertyTrackDataItems() {
            for(const a of this._propertyTrackDataItems) yield a
        }
        _SaveToJson() {
            return {
                propertyTrackDataItemsJson: this._propertyTrackDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._propertyTrackDataItems,
                a.propertyTrackDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._keyframeData = d;
            this._time = -1;
            this._ease = "noease";
            this._enable = !1;
            this._lowerTags = this._tags = null;
            a && (this._time = a[0], this._ease = a[1], this._enable = !!a[2], this._tags = (a = a[3]) ? a.split(" ") : [], this._lowerTags = new Set(this._tags.map(c => c.toLowerCase())))
        }
        Release() {
            this._keyframeData = null;
            e.clearArray(this._tags);
            this._tags = null;
            this._lowerTags.clear();
            this._lowerTags = null
        }
        GetKeyframeData() {
            return this._keyframeData
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease =
                a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetTags() {
            return this._tags
        }
        SetTags(a) {
            this._tags = a ? a.split(" ") : [];
            this._lowerTags = new Set(this._tags.map(d => d.toLowerCase()))
        }
        GetLowerTags() {
            return this._lowerTags
        }
        HasTag(a) {
            return this._lowerTags.has(a.toLowerCase())
        }
        _SaveToJson() {
            return {
                time: this._time,
                ease: this._ease,
                enable: this._enable,
                tags: this._tags
            }
        }
        _LoadFromJson(a) {
            a && (this._time = a.time, this._ease = a.ease, this._enable = a.enable, this._tags = a.tags, this._lowerTags = new Set(this._tags.map(d =>
                d.toLowerCase())))
        }
    }
    e.KeyframeData = class {
        constructor(a, d) {
            this._trackDataItem = d;
            this._keyframeDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._keyframeDataItems, a, b, this)
        }
        Release() {
            this._trackDataItem = null;
            for(const a of this._keyframeDataItems) a.Release();
            e.clearArray(this._keyframeDataItems);
            this._keyframeDataItems = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetKeyframeDataItemCount() {
            return this._keyframeDataItems.length
        }
        GetKeyframeDataItemArray() {
            return this._keyframeDataItems
        }
        AddEmptyKeyframeDataItem() {
            const a =
                new b(null, this);
            this._keyframeDataItems.push(a);
            return a
        }
        DeleteKeyframeDataItems(a) {
            for(const d of this._keyframeDataItems) {
                if(!a(d)) continue;
                const c = this._keyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._keyframeDataItems.splice(c, 1))
            }
            this.SortKeyframeDataItems()
        }
        SortKeyframeDataItems() {
            this._keyframeDataItems.sort((a, d) => a.GetTime() - d.GetTime())
        }
        GetKeyframeDataItemIndex(a) {
            return this._keyframeDataItems.indexOf(a)
        }
        GetKeyframeDataItemFromIndex(a) {
            return this._keyframeDataItems[a]
        }* keyframeDataItems() {
            for(const a of this._keyframeDataItems) yield a
        }* keyframeDataItemsReverse() {
            for(let a =
                    this._keyframeDataItems.length - 1; 0 <= a; a--) yield this._keyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                keyframeDataItemsJson: this._keyframeDataItems.map(a => a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._keyframeDataItems, a.keyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(a, d) {
            this._propertyKeyframeData = d;
            this._aValue = this._value = null;
            this._type = "";
            this._time = NaN;
            this._ease = "noease";
            this._enable = !1;
            this._addonData = null;
            a && (this._value = a[0][0], this._aValue = a[0][1], this._type = a[0][2], this._time = a[1], this._ease = a[2], this._enable = !!a[3], this._addonData = null, a[4] && (this._addonData = new e.AddonData(a[4], this)))
        }
        Release() {
            this._propertyKeyframeData = null;
            this._addonData && (this._addonData.Release(), this._addonData = null)
        }
        GetAddonData() {
            return this._addonData
        }
        GetValue() {
            return this._value
        }
        SetValue(a) {
            "color" ===
            this._type && e.IsFiniteNumber(a) ? (this._value[0] = e.GetRValue(a), this._value[1] = e.GetGValue(a), this._value[2] = e.GetBValue(a)) : this._value = a
        }
        GetAbsoluteValue() {
            return this._aValue
        }
        SetAbsoluteValue(a) {
            "color" === this._type && e.IsFiniteNumber(a) ? (this._aValue[0] = e.GetRValue(a), this._aValue[1] = e.GetGValue(a), this._aValue[2] = e.GetBValue(a)) : this._aValue = a
        }
        GetValueWithResultMode() {
            const a = this._propertyKeyframeData.GetPropertyTrackDataItem().GetResultMode();
            if("relative" === a) return this.GetValue();
            if("absolute" ===
                a) return this.GetAbsoluteValue()
        }
        GetType() {
            return this._type
        }
        SetType(a) {
            this._type = a
        }
        GetTime() {
            return this._time
        }
        SetTime(a) {
            this._time = a
        }
        GetEase() {
            return this._ease
        }
        SetEase(a) {
            this._ease = a
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(a) {
            this._enable = !!a
        }
        GetAddOn(a) {
            if(this.GetAddonData())
                for(const d of this.GetAddonData().addonDataItems())
                    if(d.GetId() === a) return d
        }
        _SaveToJson() {
            const a = this._addonData;
            return {
                addonDataJson: a ? a._SaveToJson() : a,
                value: this._value,
                aValue: this._aValue,
                type: this._type,
                time: this._time,
                ease: this._ease,
                enable: this._enable
            }
        }
        _LoadFromJson(a) {
            a && (a.addonDataJson && this._addonData._SetFromJson(a.addonDataJson), this._value = a.value, this._aValue = a.aValue, this._type = a.type, this._time = a.time, this._ease = a.ease, this._enable = a.enable)
        }
    }
    e.PropertyKeyframeData = class {
        constructor(a, d) {
            this._propertyTrackDataItem = d;
            this._propertyKeyframeDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._propertyKeyframeDataItems, a, b, this)
        }
        Release() {
            this._propertyTrackDataItem = null;
            for(const a of this._propertyKeyframeDataItems) a.Release();
            e.clearArray(this._propertyKeyframeDataItems);
            this._propertyKeyframeDataItems = null
        }
        AddEmptyPropertyKeyframeDataItem() {
            const a = new b(null, this);
            this._propertyKeyframeDataItems.push(a);
            return a
        }
        DeletePropertyKeyframeDataItems(a) {
            for(const d of this._propertyKeyframeDataItems) {
                if(!a(d)) continue;
                const c = this._propertyKeyframeDataItems.indexOf(d); - 1 !== c && (d.Release(), this._propertyKeyframeDataItems.splice(c, 1))
            }
            this.SortPropertyKeyFrameDataItems()
        }
        SortPropertyKeyFrameDataItems() {
            this._propertyKeyframeDataItems.sort((a,
                d) => a.GetTime() - d.GetTime())
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyKeyframeDataItemCount() {
            return this._propertyKeyframeDataItems.length
        }
        GetPropertyKeyframeDataItemArray() {
            return this._propertyKeyframeDataItems
        }* propertyKeyframeDataItems() {
            for(const a of this._propertyKeyframeDataItems) yield a
        }* propertyKeyframeDataItemsReverse() {
            for(let a = this._propertyKeyframeDataItems.length - 1; 0 <= a; a--) yield this._propertyKeyframeDataItems[a]
        }
        _SaveToJson() {
            return {
                propertyKeyframeDataItemsJson: this._propertyKeyframeDataItems.map(a =>
                    a._SaveToJson())
            }
        }
        _LoadFromJson(a) {
            a && e.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItems, a.propertyKeyframeDataItemsJson, b, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    class b {
        constructor(c, f) {
            this._addonData = f;
            this._id = c[0];
            this._data = c[1]
        }
        Release() {
            this._data = this._addonData = null
        }
        GetAddonData() {
            return this._addonData
        }
        GetId() {
            return this._id
        }
        _SaveToJson() {
            return {
                id: this._id,
                data: this._data
            }
        }
        _LoadFromJson(c) {
            c && (this._id = c.id, this._data = c.data)
        }
    }
    class a extends b {
        constructor(c, f) {
            super(c, f);
            this._startAnchor = this._data[0];
            this._startEnable = !!this._data[1];
            this._endAnchor = this._data[2];
            this._endEnable = !!this._data[3]
        }
        Release() {
            super.Release()
        }
        GetStartAnchor() {
            return this._startAnchor
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndAnchor() {
            return this._endAnchor
        }
        GetEndEnable() {
            return this._endEnable
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                startAnchor: this._startAnchor,
                startEnable: !!this._startEnable,
                endAnchor: this._endAnchor,
                endEnable: !!this._endEnable
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._startAnchor = c.startAnchor, this._startEnable = !!c.startEnable, this._endAnchor = c.endAnchor, this._endEnable = !!c.endEnable)
        }
    }
    class d extends b {
        constructor(c, f) {
            super(c, f);
            this._direction = this._data[0];
            this._revolutions = this._data[1]
        }
        Release() {
            super.Release()
        }
        GetDirection() {
            return this._direction
        }
        GetRevolutions() {
            return this._revolutions
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                direction: this._direction,
                revolutions: this._revolutions
            })
        }
        _LoadFromJson(c) {
            c && (super._LoadFromJson(c), this._direction = c.direction, this._revolutions = c.revolutions)
        }
    }
    e.AddonData = class {
        constructor(c, f) {
            this._propertyKeyframeDataItem = f;
            this._addonDataItems = [];
            e.TimelineDataManager._CreateDataItems(this._addonDataItems, c, {
                prop: 0,
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
        Release() {
            this._propertyKeyframeDataItem = null;
            for(const c of this._addonDataItems) c.Release();
            e.clearArray(this._addonDataItems);
            this._addonDataItems = null
        }
        GetPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItem
        }* addonDataItems() {
            for(const c of this._addonDataItems) yield c
        }
        _SaveToJson() {
            return {
                addonDataItemsJson: this._addonDataItems.map(c => c._SaveToJson())
            }
        }
        _LoadFromJson(c) {
            c && e.TimelineDataManager._LoadDataItemsFromJson(this._addonDataItems, c.addonDataItemsJson, {
                prop: "id",
                map: new Map([
                    ["cubic-bezier", a],
                    ["angle", d]
                ])
            }, this)
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = 0;
    e.Tween = class extends e.TimelineState {
        constructor(a, d) {
            super(`tween-${b++}`, a, d);
            this._id = "";
            this._destroyInstanceOnComplete = !1;
            this._initialValueMode = "start-value";
            this._on_started_callbacks = this._on_completed_callbacks = null
        }
        GetInstance() {
            var a = this.GetTracks();
            if(a && a.length && (a = a[0])) {
                var d = a.GetInstance();
                return a.IsInstanceValid() ? d : null
            }
        }
        AddStartedCallback(a) {
            this._on_started_callbacks || (this._on_started_callbacks = []);
            this._on_started_callbacks.push(a)
        }
        AddCompletedCallback(a) {
            this._on_completed_callbacks ||
                (this._on_completed_callbacks = []);
            this._on_completed_callbacks.push(a)
        }
        RemoveStartedCallback(a) {
            this._on_started_callbacks && (a = this._on_started_callbacks.indexOf(a), -1 !== a && this._on_started_callbacks.splice(a, 1))
        }
        RemoveCompletedCallback(a) {
            this._on_completed_callbacks && (a = this._on_completed_callbacks.indexOf(a), -1 !== a && this._on_completed_callbacks.splice(a, 1))
        }
        SetStartValue(a, d) {
            for(const f of this._tracks)
                for(const h of f._propertyTracks) {
                    if(h.GetPropertyName() !== d) continue;
                    var c = h.GetPropertyTrackData();
                    const g = h.GetPropertyTrackDataItem();
                    c = c.GetFirstPropertyKeyframeDataItem(g);
                    c.SetValue(a);
                    c.SetAbsoluteValue(a)
                }
        }
        _GetPropertyTrackState(a) {
            for(const d of this._tracks)
                for(const c of d._propertyTracks)
                    if(c.GetPropertyName() === a) return c
        }
        BeforeSetEndValues(a) {
            for(const f of a) a = this._GetPropertyTrackState(f), this.SetStartValue(a.GetCurrentState(), f);
            if(this.IsForwardPlayBack()) {
                var d = this.GetTotalTime() - this.GetTime();
                this.SetTotalTime(d);
                for(var c of this._tracks) c.SetLocalTotalTime(d);
                this._SetTime(0)
            } else {
                c =
                    this.GetTime();
                this.SetTotalTime(c);
                for(d of this._tracks) d.SetLocalTotalTime(c);
                this._SetTime(c)
            }
            this.SetInitialStateFromSetTime()
        }
        SetEndValue(a, d) {
            var c = this._GetPropertyTrackState(d);
            d = c.GetPropertyTrackData();
            c = c.GetPropertyTrackDataItem();
            d = d.GetLastPropertyKeyframeDataItem(c);
            d.SetTime(this.GetTotalTime());
            d.SetValue(a);
            d.SetAbsoluteValue(a)
        }
        SetId(a) {
            this._id = a
        }
        GetId() {
            return this._id
        }
        SetInitialValueMode(a) {
            this._initialValueMode = a
        }
        GetInitialValueMode() {
            return this._initialValueMode
        }
        SetDestroyInstanceOnComplete(a) {
            this._destroyInstanceOnComplete =
                a
        }
        GetDestroyInstanceOnComplete() {
            return this._destroyInstanceOnComplete
        }
        OnStarted() {
            if(this._on_started_callbacks)
                for(const a of this._on_started_callbacks) a(this);
            if(!this.IsComplete())
                for(const a of this._tracks) a.CompareSaveStateWithCurrent()
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if(!this._finishedTriggers && (this._finishedTriggers = !0, this._on_completed_callbacks))
                for(const a of this._on_completed_callbacks) a(this)
        }
        SetTime(a) {
            this._DeleteIntermediateKeyframes();
            super.SetTime(a)
        }
        SetInitialState(a) {
            if(!this.InitialStateSet() && "current-state" === this.GetInitialValueMode())
                for(const d of this._tracks) d.CompareInitialStateWithCurrent();
            super.SetInitialState(a)
        }
        Stop(a = !1) {
            super.Stop(a);
            if(!this.IsComplete())
                for(const d of this._tracks) d.SaveState()
        }
        Reset(a = !0, d = !1) {
            this._DeleteIntermediateKeyframes();
            super.Reset(a, d)
        }
        _DeleteIntermediateKeyframes() {
            for(const a of this._tracks) {
                const d = c => {
                    c = c.GetTime();
                    const f = this.GetTotalTime();
                    return 0 !== c && c !== f
                };
                a.DeleteKeyframes(d);
                a.DeletePropertyKeyframes(d)
            }
        }
        _OnBeforeChangeLayout() {
            if(this.IsReleased()) return !0;
            const a = this.GetInstance();
            if(a && a.GetObjectClass().IsGlobal()) return !1;
            this._timelineManager.CompleteTimeline(this);
            this.ResetBeforeChangeLayout();
            return !0
        }
        MaybeTriggerKeyframeReachedConditions() {}
        Tick(a, d) {
            a = this.GetInstance();
            a = this.GetRuntime().GetDt(a);
            super.Tick(a, 1)
        }
        _SaveToJson() {
            const a = super._SaveToJson(),
                d = this.GetTimelineDataItem();
            return Object.assign(a, {
                tweenDataItemJson: d._SaveToJson(),
                id: this._id,
                destroyInstanceOnComplete: this._destroyInstanceOnComplete,
                initialValueMode: this._initialValueMode
            })
        }
        _LoadFromJson(a) {
            a && (this.GetTimelineDataItem()._LoadFromJson(a.tweenDataItemJson), super._LoadFromJson(a), this._id = a.id, this._destroyInstanceOnComplete = a.destroyInstanceOnComplete, this._initialValueMode = a.initialValueMode)
        }
        static IsPlaying(a) {
            return a.IsPlaying()
        }
        static IsPaused(a) {
            return a.IsPaused()
        }
        static Build(a) {
            var d = a.runtime.GetTimelineManager(),
                c = new e.TimelineDataItem;
            if(a.json) {
                c._LoadFromJson(a.json.tweenDataItemJson);
                var f = new e.Tween(c, d);
                f._LoadFromJson(a.json);
                return f
            }
            d = new e.Tween(c, d);
            e.IsArray(a.propertyTracksConfig) || (a.propertyTracksConfig = [a.propertyTracksConfig]);
            d.SetId(a.id);
            d.SetTags(a.tags);
            d.SetInitialValueMode(a.initialValueMode);
            d.SetDestroyInstanceOnComplete(a.releaseOnComplete);
            d.SetLoop(a.loop);
            d.SetPingPong(a.pingPong);
            d.SetTotalTime(a.time);
            d.SetStep(0);
            d.SetInterpolationMode("default");
            d.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c = d.AddTrack();
            c.SetInstanceUID(a.instance.GetUID());
            c.SetInterpolationMode("default");
            c.SetResultMode(a.propertyTracksConfig[0].resultMode);
            c.SetEnable(!0);
            c.SetObjectClassIndex(a.instance.GetObjectClass().GetIndex());
            var h = a.instance.GetSdkInstance(),
                g = h.IsOriginalSizeKnown() ? h.GetOriginalWidth() : a.instance.GetWorldInfo().GetWidth();
            h = h.IsOriginalSizeKnown() ? h.GetOriginalHeight() : a.instance.GetWorldInfo().GetHeight();
            c.SetOriginalWidth(g);
            c.SetOriginalHeight(h);
            g = c.AddKeyframe();
            g.SetTime(0);
            g.SetEase("noease");
            g.SetEnable(!0);
            g.SetTags("");
            g = c.AddKeyframe();
            g.SetTime(a.time);
            g.SetEase("noease");
            g.SetEnable(!0);
            g.SetTags("");
            for(f of a.propertyTracksConfig) g =
                c.AddPropertyTrack(), g.SetSourceAdapterId(f.sourceId), g.SetSourceAdapterArgs(f.sourceArgs), g.SetPropertyName(f.property), g.SetPropertyType(f.type), g.SetMin(NaN), g.SetMax(NaN), g.SetInterpolationMode("default"), g.SetResultMode(f.resultMode), g.SetEnable(!0), h = g.AddPropertyKeyframe(), h.SetType(f.valueType), h.SetTime(0), h.SetEase(f.ease), h.SetEnable(!0), h.SetValue(f.startValue), h.SetAbsoluteValue(f.startValue), g = g.AddPropertyKeyframe(), g.SetType(f.valueType), g.SetTime(a.time), g.SetEase(f.ease), g.SetEnable(!0),
                g.SetValue(f.endValue), g.SetAbsoluteValue(f.endValue);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.Ease;
    e.Transition = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._name = a[0];
            this._transitionKeyframes = [];
            for(const d of a[1]) a = e.TransitionKeyframe.Create(this, d), this._transitionKeyframes.push(a);
            this._precalculatedSamples = new Map;
            this._transitionKeyframeCache = new Map;
            this._PreCalcSamples();
            b.AddCustomEase(this._name, (d, c, f, h) => this.Interpolate(d, c, f, h))
        }
        static Create(a) {
            return e.New(e.Transition, a)
        }
        Release() {
            for(const a of this._transitionKeyframes) a.Release();
            e.clearArray(this._transitionKeyframes);
            this._transitionKeyframes = null;
            this._precalculatedSamples.clear();
            this._precalculatedSamples = null;
            this._transitionKeyframeCache.clear();
            this._transitionKeyframeCache = null
        }
        GetTransitionKeyFrameAt(a) {
            const d = this._transitionKeyframeCache.get(a);
            if(d) return d;
            for(const c of this._transitionKeyframes)
                if(c.GetValueX() === a) return this._transitionKeyframeCache.set(a, c), c
        }
        GetFirstTransitionKeyFrameHigherThan(a) {
            for(const d of this._transitionKeyframes)
                if(d.GetValueX() >
                    a) return d
        }
        GetFirstTransitionKeyFrameHigherOrEqualThan(a) {
            for(const d of this._transitionKeyframes)
                if(d.GetValueX() >= a) return d
        }
        GetFirstTransitionKeyFrameLowerOrEqualThan(a) {
            for(let d = this._transitionKeyframes.length - 1; 0 <= d; d--) {
                const c = this._transitionKeyframes[d];
                if(c.GetValueX() <= a) return c
            }
        }
        Interpolate(a, d, c, f) {
            var h = a / f;
            (a = this.GetTransitionKeyFrameAt(h)) ? f = this.GetFirstTransitionKeyFrameHigherThan(h): (a = this.GetFirstTransitionKeyFrameLowerOrEqualThan(h), f = this.GetFirstTransitionKeyFrameHigherOrEqualThan(h));
            var g = f.GetValueX() - a.GetValueX();
            h = e.mapToRange(h, a.GetValueX(), f.GetValueX(), 0, g);
            g = a.GetValueX();
            const k = a.GetValueY(),
                m = a.GetValueX() + a.GetStartAnchorX(),
                p = a.GetValueY() + a.GetStartAnchorY(),
                x = f.GetValueX() + f.GetEndAnchorX(),
                t = f.GetValueY() + f.GetEndAnchorY(),
                q = f.GetValueX();
            f = f.GetValueY();
            f = b.GetRuntimeEase("spline")(h, g, k, m, p, x, t, q, f, this._precalculatedSamples.get(a));
            f += a.GetValueY();
            return (1 - f) * d + f * (d + c)
        }
        _PreCalcSamples() {
            this._precalculatedSamples.clear();
            for(let c = 0; c < this._transitionKeyframes.length -
                1; c++) {
                var a = this._transitionKeyframes[c];
                if(!a.GetStartEnable()) continue;
                var d = this._transitionKeyframes[c + 1];
                const f = a.GetValueX(),
                    h = a.GetValueX() + a.GetStartAnchorX(),
                    g = d.GetValueX() + d.GetEndAnchorX();
                d = d.GetValueX();
                this._precalculatedSamples.set(a, b.GetBezierSamples(f, h, g, d))
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TransitionKeyframe = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._transition = b;
            this._valueX = a[0];
            this._valueY = a[1];
            this._startAnchorX = a[2];
            this._startAnchorY = a[3];
            this._endAnchorX = a[4];
            this._endAnchorY = a[5];
            this._startEnable = a[6];
            this._endEnable = a[7]
        }
        Release() {
            this._transition = null
        }
        static Create(b, a) {
            return e.New(e.TransitionKeyframe, b, a)
        }
        GetValueX() {
            return this._valueX
        }
        GetValueY() {
            return this._valueY
        }
        GetStartAnchorX() {
            return this._startAnchorX
        }
        GetStartAnchorY() {
            return this._startAnchorY
        }
        GetEndAnchorX() {
            return this._endAnchorX
        }
        GetEndAnchorY() {
            return this._endAnchorY
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndEnable() {
            return this._endEnable
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.TransitionManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._transitions = []
        }
        Release() {
            for(const b of this._transitions) b.Release();
            e.clearArray(this._transitions);
            this._transitions = null
        }
        Create(b) {
            this._transitions.push(e.Transition.Create(b))
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SolStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._stack = [];
            this._stack.push(e.New(e.Sol, this));
            this._index = 0;
            this._current = this._stack[0]
        }
        Release() {
            for(const b of this._stack) b.Release();
            e.clearArray(this._stack);
            this._objectClass = this._current = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetCurrentSol() {
            return this._current
        }
        Clear() {
            this.GetCurrentSol().Clear()
        }
        PushClean() {
            var b = this._stack,
                a = ++this._index;
            a === b.length ? (a = e.New(e.Sol,
                this), b.push(a), this._current = a) : (b = b[a], b.Reset(), this._current = b)
        }
        PushCopy() {
            const b = this._stack,
                a = ++this._index;
            a === b.length && b.push(e.New(e.Sol, this));
            const d = b[a];
            d.Copy(b[a - 1]);
            this._current = d
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
        RemoveInstances(b) {
            const a = this._stack;
            for(let d = 0, c = a.length; d < c; ++d) a[d].RemoveInstances(b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Sol = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._stack = b;
            this._objectClass = this._stack.GetObjectClass();
            this._eventStack = this._objectClass.GetRuntime().GetEventStack();
            this._selectAll = !0;
            this._instances = [];
            this._elseInstances = []
        }
        Release() {
            this.ClearArrays();
            this._eventStack = this._objectClass = this._stack = null
        }
        ClearArrays() {
            e.clearArray(this._instances);
            e.clearArray(this._elseInstances)
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsSelectAll() {
            return this._selectAll
        }
        HasAnyInstances() {
            return this._selectAll ?
                !!this._objectClass.GetInstanceCount() : !!this._instances.length
        }
        GetInstances() {
            return this._selectAll ? this._objectClass.GetInstances() : this._instances
        }
        HasAnyElseInstances() {
            return !!this._elseInstances.length
        }
        GetElseInstances() {
            return this._elseInstances
        }
        GetExpressionInstances() {
            const b = this.GetInstances();
            return b.length ? b : this._elseInstances
        }
        Reset() {
            this._selectAll = !0;
            e.clearArray(this._elseInstances)
        }
        Clear() {
            this._selectAll = !0
        }
        Copy(b) {
            b.IsSelectAll() ? this.Reset() : (this._selectAll = !1, e.shallowAssignArray(this._instances,
                b._instances), e.clearArray(this._elseInstances))
        }
        _PushInstance(b) {
            this._instances.push(b)
        }
        _PushElseInstance(b) {
            this._elseInstances.push(b)
        }
        _SetSelectAll(b) {
            this._selectAll = !!b
        }
        _GetOwnInstances() {
            return this._instances
        }
        _GetOwnElseInstances() {
            return this._elseInstances
        }
        SetSinglePicked(b) {
            this._selectAll = !1;
            e.clearArray(this._instances);
            this._instances.push(b)
        }
        SetArrayPicked(b) {
            this._selectAll = !1;
            e.shallowAssignArray(this._instances, b)
        }
        SetSetPicked(b) {
            this._selectAll = !1;
            e.clearArray(this._instances);
            for(const a of b) this._instances.push(a)
        }
        AddElseInstances(b, a) {
            for(const d of a) b.has(d) || this._elseInstances.push(d)
        }
        TransferElseInstancesToOwn(b) {
            for(const a of b) this._instances.push(a);
            e.arrayRemoveAllInSet(this._elseInstances, b)
        }
        PickOne(b) {
            b && (this._eventStack.GetCurrentStackFrame().GetCurrentEvent().IsOrBlock() ? (this.IsSelectAll() && (e.clearArray(this._instances), e.shallowAssignArray(this._elseInstances, b.GetObjectClass().GetInstances()), this._selectAll = !1), b = this._elseInstances.indexOf(b), -1 !==
                b && (this._instances.push(this._elseInstances[b]), this._elseInstances.splice(b, 1))) : this.SetSinglePicked(b))
        }
        RemoveInstances(b) {
            e.arrayRemoveAllInSet(this._instances, b);
            e.arrayRemoveAllInSet(this._elseInstances, b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._stack.push(e.New(e.EventStackFrame, this, null));
            this._index = 0;
            this._expFuncStack = []
        }
        Release() {
            for(const b of this._stack) b.Release();
            e.clearArray(this._stack);
            e.clearArray(this._expFuncStack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrentStackFrame() {
            return this._stack[this._index]
        }
        Push(b) {
            var a =
                this._stack;
            const d = ++this._index;
            if(d === a.length) return b = e.New(e.EventStackFrame, this, b), a.push(b), b;
            a = a[d];
            a.Reset(b);
            return a
        }
        Pop() {
            --this._index
        }
        PushExpFunc(b) {
            this._expFuncStack.push(b)
        }
        PopExpFunc() {
            this._expFuncStack.pop()
        }
        GetCurrentExpFuncStackFrame() {
            const b = this._expFuncStack;
            return 0 === b.length ? null : b[b.length - 1]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventStackFrame = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._stack = b;
            this._runtime = this._stack.GetRuntime();
            this._currentEvent = a;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1;
            this._expressionObjectClass = null;
            this._functionReturnValue = this._functionReturnType = 0
        }
        Release() {
            this.Reset(null);
            this._runtime = this._stack = null
        }
        Reset(b) {
            this._currentEvent = b;
            this._actIndex = this._cndIndex = 0;
            this._elseBranchRan = this._lastEventTrue = !1
        }
        _Restore(b,
            a) {
            this._currentEvent = b;
            this._cndIndex = 0;
            this._actIndex = a
        }
        ResetQuick() {
            this._actIndex = this._cndIndex = 0
        }
        GetCurrentEvent() {
            return this._currentEvent
        }
        SetCurrentEvent(b) {
            this._currentEvent = b
        }
        GetConditionIndex() {
            return this._cndIndex
        }
        SetConditionIndex(b) {
            this._cndIndex = b
        }
        GetActionIndex() {
            return this._actIndex
        }
        SetActionIndex(b) {
            this._actIndex = b
        }
        SetLastEventTrue(b) {
            this._lastEventTrue = !!b
        }
        GetLastEventTrue() {
            return this._lastEventTrue
        }
        SetElseBranchRan(b) {
            this._elseBranchRan = !!b
        }
        GetElseBranchRan() {
            return this._elseBranchRan
        }
        SetExpressionObjectClass(b) {
            this._expressionObjectClass =
                b
        }
        GetExpressionObjectClass() {
            return this._expressionObjectClass
        }
        InitCallFunctionExpression(b, a) {
            this._functionReturnType = b;
            this._functionReturnValue = a
        }
        GetFunctionReturnType() {
            return this._functionReturnType
        }
        SetFunctionReturnValue(b) {
            this._functionReturnValue = b
        }
        GetFunctionReturnValue() {
            return this._functionReturnValue
        }
        IsSolModifierAfterCnds() {
            const b = this._currentEvent;
            return b.IsSolWriterAfterCnds() ? !0 : this._cndIndex < b.GetConditionCount() - 1 ? !!b.GetSolModifiers().length : !1
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LocalVarStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1;
            this._current = null;
            this._initialValues = []
        }
        Release() {
            e.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        _SetInitialValues(b) {
            this._initialValues = b;
            b = this._initialValues.slice(0);
            this._stack.push(b);
            this._index = 0;
            this._current = b
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrent() {
            return this._current
        }
        Push() {
            const b =
                ++this._index,
                a = this._stack;
            b === a.length ? a.push(this._initialValues.slice(0)) : e.shallowAssignArray(a[b], this._initialValues);
            this._current = a[b]
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.LoopStack = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1
        }
        Release() {
            e.clearArray(this._stack);
            this._runtime = this._eventSheetManager = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        IsInLoop() {
            return 0 <= this._index
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if(this._index === this._stack.length) {
                var b =
                    e.New(e.Loop, this);
                this._stack.push(b);
                return b
            }
            b = this._stack[this._index];
            b.Reset();
            return b
        }
        Pop() {
            --this._index
        }
        FindByName(b) {
            const a = this._stack;
            for(let d = this._index; 0 <= d; --d) {
                const c = a[d];
                if(c.GetName() === b) return c
            }
            return null
        }
        _GetStack() {
            return this._stack.slice(0, this._index + 1)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Loop = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._loopStack = b;
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        Reset() {
            this._name = "";
            this._index = 0;
            this._isStopped = !1;
            this._end = NaN
        }
        SetName(b) {
            this._name = b
        }
        GetName() {
            return this._name
        }
        SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        Stop() {
            this._isStopped = !0
        }
        IsStopped() {
            return this._isStopped
        }
        SetEnd(b) {
            this._end = b
        }
        GetEnd() {
            return this._end
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ArrayStack = class extends e.DefendedBase {
        constructor() {
            super();
            this._stack = [];
            this._index = -1
        }
        Release() {
            e.clearArray(this._stack)
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if(this._index === this._stack.length) {
                const b = [];
                this._stack.push(b);
                return b
            }
            return this._stack[this._index]
        }
        Pop() {
            --this._index
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(d, c) {
        return d.GetIndex() - c.GetIndex()
    }

    function a(d, c) {
        for(let f = 0, h = d.length; f < h; ++f)
            if(d[f] !== c[f]) return !1;
        return !0
    }
    e.EventSheetManager = class extends e.DefendedBase {
        constructor(d) {
            super();
            this._runtime = d;
            this._allSheets = [];
            this._sheetsByName = new Map;
            this._allGroups = [];
            this._groupsByName = new Map;
            this._blocksBySid = new Map;
            this._cndsBySid = new Map;
            this._actsBySid = new Map;
            this._allUniqueSolModifiers = new Map;
            this._eventVarsBySid = new Map;
            this._nextLocalVarIndex =
                0;
            this._allGlobalVars = [];
            this._allLocalVars = [];
            this._localVarInitialValues = [];
            this._functionBlocksByName = new Map;
            this._eventStack = e.New(e.EventStack, this);
            this._localVarStack = e.New(e.LocalVarStack, this);
            this._loopStack = e.New(e.LoopStack, this);
            this._triggersToPostInit = [];
            this._queuedTriggers = [];
            this._queuedDebugTriggers = [];
            this._blockFlushingDepth = this._executingTriggerDepth = this._runningEventsDepth = 0;
            this._scheduledWaits = [];
            this._asyncActionPromises = [];
            self.c3_callFunction = (c, f) => this._InvokeFunctionFromJS(c,
                f)
        }
        Release() {
            this.ClearAllScheduledWaits();
            this._eventStack.Release();
            this._eventStack = null;
            this._localVarStack.Release();
            this._localVarStack = null;
            e.clearArray(this._queuedTriggers);
            e.clearArray(this._queuedDebugTriggers);
            this._runtime = null;
            e.clearArray(this._allSheets);
            this._sheetsByName.clear()
        }
        Create(d) {
            d = e.New(e.EventSheet, this, d);
            this._allSheets.push(d);
            this._sheetsByName.set(d.GetName().toLowerCase(), d)
        }
        _AddTriggerToPostInit(d) {
            this._triggersToPostInit.push(d)
        }
        _PostInit() {
            for(const d of this._functionBlocksByName.values()) d._PostInit(!1);
            for(const d of this._allSheets) d._PostInit();
            for(const d of this._allSheets) d._UpdateDeepIncludes();
            for(const d of this._triggersToPostInit) d._PostInit(!1);
            e.clearArray(this._triggersToPostInit);
            this._localVarStack._SetInitialValues(this._localVarInitialValues)
        }
        GetRuntime() {
            return this._runtime
        }
        GetEventSheetByName(d) {
            return this._sheetsByName.get(d.toLowerCase()) || null
        }
        _RegisterGroup(d) {
            this._allGroups.push(d);
            this._groupsByName.set(d.GetGroupName(), d)
        }
        _RegisterEventBlock(d) {
            this._blocksBySid.set(d.GetSID(),
                d)
        }
        _RegisterCondition(d) {
            this._cndsBySid.set(d.GetSID(), d)
        }
        _RegisterAction(d) {
            this._actsBySid.set(d.GetSID(), d)
        }
        _RegisterFunctionBlock(d) {
            this._functionBlocksByName.set(d.GetFunctionName().toLowerCase(), d)
        }
        _RegisterEventVariable(d) {
            this._eventVarsBySid.set(d.GetSID(), d);
            d.IsGlobal() ? this._allGlobalVars.push(d) : this._allLocalVars.push(d)
        }
        _DeduplicateSolModifierList(d) {
            2 <= d.length && d.sort(b);
            let c = this._allUniqueSolModifiers.get(d.length);
            c || (c = [], this._allUniqueSolModifiers.set(d.length, c));
            for(let f =
                    0, h = c.length; f < h; ++f) {
                const g = c[f];
                if(a(d, g)) return g
            }
            c.push(d);
            return d
        }
        _GetNextLocalVarIndex(d) {
            this._localVarInitialValues.push(d.GetInitialValue());
            return this._nextLocalVarIndex++
        }
        GetEventStack() {
            return this._eventStack
        }
        GetCurrentEventStackFrame() {
            return this.GetEventStack().GetCurrentStackFrame()
        }
        GetCurrentEvent() {
            return this.GetCurrentEventStackFrame().GetCurrentEvent()
        }
        GetCurrentCondition() {
            const d = this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetConditionAt(d.GetConditionIndex())
        }
        GetCurrentAction() {
            const d =
                this.GetCurrentEventStackFrame();
            return d.GetCurrentEvent().GetActionAt(d.GetActionIndex())
        }
        GetLocalVarStack() {
            return this._localVarStack
        }
        GetLoopStack() {
            return this._loopStack
        }
        GetAllLocalVariablesInScope(d) {
            const c = [];
            for(d = d.GetScopeParent(); d;) e.appendArray(c, d._GetAllLocalVariablesInScope()), d = d.GetScopeParent();
            return c
        }
        _GetLocalVariablesScriptInterface(d) {
            const c = {};
            for(const f of this.GetAllLocalVariablesInScope(d)) c[f.GetJsPropName()] = f._GetScriptInterfaceDescriptor();
            return Object.create(Object.prototype,
                c)
        }
        GetEventVariableBySID(d) {
            return this._eventVarsBySid.get(d) || null
        }
        GetEventBlockBySID(d) {
            return this._blocksBySid.get(d) || null
        }
        GetConditionBySID(d) {
            return this._cndsBySid.get(d) || null
        }
        GetActionBySID(d) {
            return this._actsBySid.get(d) || null
        }
        GetFunctionBlockByName(d) {
            return this._functionBlocksByName.get(d.toLowerCase()) || null
        }
        GetAllGlobalVariables() {
            return this._allGlobalVars
        }
        GetAllLocalVariables() {
            return this._allLocalVars
        }
        ResetAllGlobalsToInitialValue() {
            for(const d of this._allGlobalVars) d.ResetToInitialValue()
        }
        GetEventGroupByName(d) {
            return this._groupsByName.get(d.toLowerCase()) ||
                null
        }
        GetEventGroupBySID(d) {
            return (d = this._blocksBySid.get(d)) && d.IsGroup() ? d : null
        }
        GetAllGroups() {
            return this._allGroups
        }
        ResetAllGroupsInitialActivation() {
            for(const d of this._allGroups) d.ResetInitialActivation()
        }
        _ResetAllHasRunFlags() {
            for(const d of this._allSheets) d._ResetHasRunFlag()
        }
        RunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for(const c of d.runningLayouts())
                if(d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), d.Run(), this._runtime.PopCurrentLayout();
            this._runningEventsDepth--
        }
        async DebugRunEvents(d) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for(const c of this._DebugRunEventsGen(d)) await this._runtime.DebugBreak(c);
            this._runningEventsDepth--
        }* _DebugRunEventsGen(d) {
            for(const c of d.runningLayouts())
                if(d = c.GetEventSheet()) this._runtime.PushCurrentLayout(c), yield* d.DebugRun(), this._runtime.PopCurrentLayout()
        }
        _Trigger(d, c, f, h) {
            let g = !1;
            if(!d.GetMainRunningLayout()) return this.QueueTrigger(c, f, h);
            this._executingTriggerDepth++;
            for(const k of d.runningLayouts())
                if(d = k.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(k);
                    for(const m of d.deepIncludes()) {
                        const p = m._Trigger(c, f, h);
                        g = g || p
                    }
                    d = d._Trigger(c, f, h);
                    g = g || d;
                    this._runtime.PopCurrentLayout()
                } this._executingTriggerDepth--;
            return g
        }* _DebugTrigger(d, c, f, h) {
            let g = !1;
            if(!d.GetMainRunningLayout()) return this.QueueTrigger(c, f, h);
            this._executingTriggerDepth++;
            for(const k of d.runningLayouts())
                if(d = k.GetEventSheet()) {
                    this._runtime.PushCurrentLayout(k);
                    for(const m of d.deepIncludes()) {
                        const p = yield* m._DebugTrigger(c, f, h);
                        g = g || p
                    }
                    d = yield* d._DebugTrigger(c, f, h);
                    g = g || d;
                    this._runtime.PopCurrentLayout()
                } this._executingTriggerDepth--;
            return g
        }
        QueueTrigger(d, c, f) {
            this._queuedTriggers.push([d, c, f]);
            return !1
        }
        QueueDebugTrigger(d, c, f) {
            let h = null;
            const g = new Promise(k => h = k);
            this._queuedDebugTriggers.push([d, c, f, h]);
            return g
        }* _RunQueuedDebugTriggersGen() {
            if(this._runtime.HitBreakpoint()) throw Error("should not be in breakpoint");
            const d = this._runtime.GetLayoutManager();
            for(; this._queuedDebugTriggers.length;) {
                const [c, f, h, g] = this._queuedDebugTriggers.shift(), k = yield* this._DebugTrigger(d, c, f, h);
                g(k)
            }
        }
        async RunQueuedDebugTriggersAsync() {
            for(const d of this._RunQueuedDebugTriggersGen()) await this._runtime.DebugBreak(d)
        }
        _FastTrigger(d,
            c, f, h) {
            let g = !1;
            var k = d.GetMainRunningLayout();
            if(d = k.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(k);
                k = d.deepIncludes();
                for(let m = 0, p = k.length; m < p; ++m) {
                    const x = k[m]._FastTrigger(c, f, h);
                    g = g || x
                }
                c = d._FastTrigger(c, f, h);
                g = g || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return g
            }
        }* _DebugFastTrigger(d, c, f, h) {
            let g = !1;
            var k = d.GetMainRunningLayout();
            if(d = k.GetEventSheet()) {
                this._executingTriggerDepth++;
                this._runtime.PushCurrentLayout(k);
                k = d.deepIncludes();
                for(let m = 0, p = k.length; m < p; ++m) {
                    const x = yield* k[m]._DebugFastTrigger(c, f, h);
                    g = g || x
                }
                c = yield* d._DebugFastTrigger(c, f, h);
                g = g || c;
                this._runtime.PopCurrentLayout();
                this._executingTriggerDepth--;
                return g
            }
        }
        GetTriggerDepth() {
            return this._executingTriggerDepth
        }
        IsInTrigger() {
            return 0 < this.GetTriggerDepth()
        }
        _IncTriggerDepth() {
            return ++this._executingTriggerDepth
        }
        _DecTriggerDepth() {
            --this._executingTriggerDepth
        }
        IsRunningEvents() {
            return 0 < this._runningEventsDepth
        }
        IsInEventEngine() {
            return this.IsRunningEvents() ||
                this.IsInTrigger()
        }
        _RunQueuedTriggers(d) {
            for(const [c, f, h] of this._queuedTriggers) this._Trigger(d, c, f, h);
            e.clearArray(this._queuedTriggers)
        }
        BlockFlushingInstances(d) {
            d ? this._blockFlushingDepth++ : this._blockFlushingDepth--
        }
        IsFlushingBlocked() {
            return 0 < this._blockFlushingDepth
        }
        ClearSol(d) {
            for(let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().Clear()
        }
        PushCleanSol(d) {
            for(let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().PushClean()
        }
        PushCopySol(d) {
            for(let c = 0, f = d.length; c < f; ++c) d[c].GetSolStack().PushCopy()
        }
        PopSol(d) {
            for(let c =
                    0, f = d.length; c < f; ++c) d[c].GetSolStack().Pop()
        }
        AddScheduledWait() {
            const d = e.New(e.ScheduledWait, this);
            this._scheduledWaits.push(d);
            return d
        }
        scheduledWaits() {
            return this._scheduledWaits
        }
        RunScheduledWaits() {
            if(this._scheduledWaits.length) {
                var d = this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for(let f = 0, h = this._scheduledWaits.length; f < h; ++f) {
                    const g = this._scheduledWaits[f];
                    g._ShouldRun() && g._Run(d);
                    g.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        async DebugRunScheduledWaits() {
            if(this._scheduledWaits.length) {
                var d =
                    this.GetCurrentEventStackFrame(),
                    c = !1;
                this._runningEventsDepth++;
                for(let f = 0, h = this._scheduledWaits.length; f < h; ++f) {
                    const g = this._scheduledWaits[f];
                    g._ShouldRun() && await g._DebugRun(d);
                    g.ShouldRelease() && (c = !0)
                }
                c && this._FilterScheduledWaitsToRelease();
                this._runningEventsDepth--
            }
        }
        _FilterScheduledWaitsToRelease() {
            const d = e.arrayFilterOut(this._scheduledWaits, c => c.ShouldRelease());
            for(const c of d) c.Release()
        }
        ClearAllScheduledWaits() {
            for(const d of this._scheduledWaits) d.Release();
            e.clearArray(this._scheduledWaits)
        }
        RemoveInstancesFromScheduledWaits(d) {
            for(const c of this._scheduledWaits) c.RemoveInstances(d)
        }
        AddAsyncActionPromise(d) {
            this._asyncActionPromises.push(d)
        }
        ClearAsyncActionPromises() {
            e.clearArray(this._asyncActionPromises)
        }
        GetPromiseForAllAsyncActions() {
            const d =
                Promise.all(this._asyncActionPromises);
            this._asyncActionPromises = [];
            return d
        }
        _SaveToJson() {
            return {
                groups: this._SaveGroupsToJson(),
                cnds: this._SaveCndsToJson(),
                acts: this._SaveActsToJson(),
                vars: this._SaveVarsToJson(),
                waits: this._SaveScheduledWaitsToJson()
            }
        }
        _LoadFromJson(d) {
            this._LoadGroupsFromJson(d.groups);
            this._LoadCndsFromJson(d.cnds);
            this._LoadActsFromJson(d.acts);
            this._LoadVarsFromJson(d.vars);
            this._LoadScheduledWaitsFromJson(d.waits)
        }
        _SaveGroupsToJson() {
            const d = {};
            for(const c of this.GetAllGroups()) d[c.GetSID().toString()] =
                c.IsGroupActive();
            return d
        }
        _LoadGroupsFromJson(d) {
            for(const [c, f] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventGroupBySID(d)) && d.SetGroupActive(f)
        }
        _SaveCndsToJson() {
            const d = {};
            for(const [c, f] of this._cndsBySid) {
                const h = f._SaveToJson();
                h && (d[c.toString()] = h)
            }
            return d
        }
        _LoadCndsFromJson(d) {
            const c = new Map;
            for(const [f, h] of Object.entries(d)) c.set(parseInt(f, 10), h);
            for(const [f, h] of this._cndsBySid) h._LoadFromJson(c.get(f) || null)
        }
        _SaveActsToJson() {
            const d = {};
            for(const [c, f] of this._actsBySid) {
                const h =
                    f._SaveToJson();
                h && (d[c.toString()] = h)
            }
            return d
        }
        _LoadActsFromJson(d) {
            const c = new Map;
            for(const [f, h] of Object.entries(d)) c.set(parseInt(f, 10), h);
            for(const [f, h] of this._actsBySid) h._LoadFromJson(c.get(f) || null)
        }
        _SaveVarsToJson() {
            const d = {};
            for(const [c, f] of this._eventVarsBySid) f.IsConstant() || !f.IsGlobal() && !f.IsStatic() || (d[c.toString()] = f.GetValue());
            return d
        }
        _LoadVarsFromJson(d) {
            for(const [c, f] of Object.entries(d)) d = parseInt(c, 10), (d = this.GetEventVariableBySID(d)) && d.SetValue(f)
        }
        _SaveScheduledWaitsToJson() {
            return this._scheduledWaits.filter(d =>
                !d.IsPromise()).map(d => d._SaveToJson())
        }
        _LoadScheduledWaitsFromJson(d) {
            this.ClearAllScheduledWaits();
            for(const c of d)(d = e.ScheduledWait._CreateFromJson(this, c)) && this._scheduledWaits.push(d)
        }
        _GetPerfRecords() {
            return [...this._runtime.GetLayoutManager().runningLayouts()].map(d => d.GetEventSheet()).filter(d => d).map(d => d._GetPerfRecord())
        }
        FindFirstFunctionBlockParent(d) {
            for(; d;)
                if(d = d.GetScopeParent(), d instanceof e.FunctionBlock) return d;
            return null
        }
        _InvokeFunctionFromJS(d, c) {
            Array.isArray(c) || (c = []);
            d = this.GetFunctionBlockByName(d.toLowerCase());
            if(!d) return null;
            if(!d.IsEnabled()) return d.GetDefaultReturnValue();
            var f = d.GetFunctionParameters();
            if(c.length < f.length) {
                c = c.slice(0);
                do c.push(f[c.length].GetInitialValue()); while(c.length < f.length)
            }
            f = d.GetEventBlock();
            return f.RunAsExpressionFunctionCall(f.GetSolModifiersIncludingParents(), d.GetReturnType(), d.GetDefaultReturnValue(), ...c)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EventSheet = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._eventSheetManager = b;
            this._runtime = b.GetRuntime();
            this._name = a[0];
            this._events = [];
            this._triggers = new Map;
            this._fastTriggers = new Map;
            this._eventsByDisplayNumber = new Map;
            this._hasRun = !1;
            this._shallowIncludes = [];
            this._deepIncludes = [];
            this._alreadyIncludedSheets = new Set;
            for(const d of a[1]) this._CreateEvent(d, null, this._events);
            this._perfRecord = this._runtime.IsDebug() ? {
                type: "sheet",
                name: this._name,
                totalTimeCounter: 0,
                children: []
            } : null
        }
        Release() {
            this._runtime = this._eventSheetManager = null
        }
        _CreateEvent(b, a, d) {
            switch(b[0]) {
                case 0:
                case 3:
                    this._CreateEventBlock(b, a, d);
                    break;
                case 1:
                    this._CreateEventVariable(b, a, d);
                    break;
                case 2:
                    this._CreateInclude(b, a, d);
                    break;
                case 4:
                    this._CreateFunctionBlock(b, a);
                    break;
                case 5:
                    this._CreateScriptBlock(b, a, d);
                    break;
                default:
                    throw Error("invalid event type");
            }
        }
        _CreateEventBlock(b, a, d) {
            b = e.EventBlock.Create(this, a, b);
            if(b.IsOrBlock()) {
                d.push(b);
                d = b.GetConditions();
                for(let c = 0, f = d.length; c <
                    f; ++c) d[c].IsTrigger() && this._InitTrigger(b, c)
            } else b.IsTrigger() ? this._InitTrigger(b, 0) : d.push(b)
        }
        _CreateFunctionBlock(b, a) {
            b = e.FunctionBlock.Create(this, a, b);
            this._eventSheetManager._RegisterFunctionBlock(b)
        }
        _CreateEventVariable(b, a, d) {
            b = e.EventVariable.Create(this, a, b);
            d.push(b)
        }
        _CreateInclude(b, a, d) {
            b = e.EventInclude.Create(this, a, b);
            d.push(b)
        }
        _CreateScriptBlock(b, a, d) {
            b = e.EventScript.Create(this, a, b);
            d.push(b)
        }
        _InitTrigger(b, a) {
            b.IsOrBlock() || this._eventSheetManager._AddTriggerToPostInit(b);
            var d =
                b.GetConditionAt(a),
                c = d._GetFunc(),
                f = d.GetObjectClass();
            if(d.IsFastTrigger()) {
                var h = this._fastTriggers.get(f);
                h || (h = new Map, this._fastTriggers.set(f, h));
                d = d.GetFastTriggerValue().toLowerCase();
                f = h.get(c);
                f || (f = new Map, h.set(c, f));
                c = f.get(d);
                c || (c = [], f.set(d, c));
                c.push([b, a])
            } else h = this._triggers.get(f), h || (h = {
                    methodMap: new Map,
                    behaviors: new Map
                }, this._triggers.set(f, h)), (f = d.GetBehaviorType()) ? (d = h.behaviors.get(f), d || (d = new Map, h.behaviors.set(f, d))) : d = h.methodMap, h = d.get(c), h || (h = [], d.set(c, h)),
                h.push([b, a])
        }
        _PostInit() {
            const b = this._events;
            for(let a = 0, d = b.length; a < d; ++a) {
                const c = a < d - 1 && b[a + 1] instanceof e.EventBlock && b[a + 1].IsElseBlock();
                b[a]._PostInit(c)
            }
        }
        _AddShallowInclude(b) {
            this._shallowIncludes.push(b)
        }
        _UpdateDeepIncludes() {
            e.clearArray(this._deepIncludes);
            this._AddDeepIncludes(this);
            this._alreadyIncludedSheets.clear()
        }
        _AddDeepIncludes(b) {
            const a = b._deepIncludes,
                d = b._alreadyIncludedSheets;
            for(const c of this._shallowIncludes) {
                const f = c.GetIncludeSheet();
                c.IsActive() && b !== f && !d.has(f) &&
                    (d.add(f), f._AddDeepIncludes(b), a.push(f))
            }
        }
        deepIncludes() {
            return this._deepIncludes
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        _RegisterEventByDisplayNumber(b, a) {
            this._eventsByDisplayNumber.set(a, b)
        }
        _GetEventByDisplayNumber(b) {
            return this._eventsByDisplayNumber.get(b) || null
        }
        _ResetHasRunFlag() {
            this._hasRun = !1
        }
        Run() {
            if(!this._hasRun) {
                var b = this._runtime,
                    a = b.IsCPUProfiling(),
                    d = a ? performance.now() : 0;
                this._hasRun = !0;
                var c = this.GetEventSheetManager(),
                    f = c.GetCurrentEventStackFrame();
                for(const h of this._events) h.Run(f), c.ClearSol(h.GetSolModifiers()), c.ClearAsyncActionPromises(), b.FlushPendingInstances();
                f.Reset(null);
                a && (this._perfRecord.totalTimeCounter += performance.now() - d)
            }
        }* DebugRun() {
            if(!this._hasRun) {
                this._hasRun = !0;
                var b = this._runtime,
                    a = this.GetEventSheetManager(),
                    d = a.GetCurrentEventStackFrame();
                for(const c of this._events) yield* c.DebugRun(d), a.ClearSol(c.GetSolModifiers()), a.ClearAsyncActionPromises(), b.FlushPendingInstances();
                d.Reset(null)
            }
        }
        _Trigger(b,
            a, d) {
            if(a) {
                const c = a.GetObjectClass();
                this._TriggerForClass(b, a, c, d);
                for(const f of c.GetFamilies()) this._TriggerForClass(b, a, f, d)
            } else return this._TriggerForClass(b, a, null, null)
        }
        _TriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if(!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if(!c) return !1;
            c = c.get(b);
            if(!c) return !1;
            b = !1;
            for(const [f, h] of c) c = this._ExecuteTrigger(a, f, h), b = b || c;
            return b
        }* _DebugTrigger(b, a, d) {
            if(a) {
                const c = a.GetObjectClass();
                yield* this._DebugTriggerForClass(b, a, c, d);
                for(const f of c.GetFamilies()) yield* this._DebugTriggerForClass(b,
                    a, f, d)
            } else return yield* this._DebugTriggerForClass(b, a, null, null)
        }* _DebugTriggerForClass(b, a, d, c) {
            d = this._triggers.get(d);
            if(!d) return !1;
            c = c ? d.behaviors.get(c) : d.methodMap;
            if(!c) return !1;
            c = c.get(b);
            if(!c) return !1;
            b = !1;
            for(const [f, h] of c) c = f.DebugCanRunFast() ? this._ExecuteTrigger(a, f, h) : yield* this._DebugExecuteTrigger(a, f, h), b = b || c;
            return b
        }
        _FastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if(!a) return !1;
            b = a.get(b);
            if(!b) return !1;
            d = b.get(d);
            if(!d) return !1;
            b = !1;
            for(let c = 0, f = d.length; c <
                f; ++c) a = d[c], a = this._ExecuteTrigger(null, a[0], a[1]), b = b || a;
            return b
        }* _DebugFastTrigger(b, a, d) {
            a = a.GetObjectClass();
            a = this._fastTriggers.get(a);
            if(!a) return !1;
            b = a.get(b);
            if(!b) return !1;
            d = b.get(d);
            if(!d) return !1;
            b = !1;
            for(let f = 0, h = d.length; f < h; ++f) {
                var c = d[f];
                a = c[0];
                c = c[1];
                a = a.DebugCanRunFast() ? this._ExecuteTrigger(null, a, c) : yield* this._DebugExecuteTrigger(null, a, c);
                b = b || a
            }
            return b
        }
        _ExecuteTrigger(b, a, d) {
            const c = this._runtime,
                f = this._eventSheetManager,
                h = f.GetCurrentEvent(),
                g = f.GetEventStack(),
                k = f.GetTriggerDepth();
            let m = !1;
            h && f.PushCleanSol(h.GetSolModifiersIncludingParents());
            f.PushCleanSol(a.GetSolModifiersIncludingParents());
            const p = 1 < k;
            p && f.GetLocalVarStack().Push();
            const x = g.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if(a.GetParent()) {
                const t = a.GetTriggerParents();
                for(let q = 0, r = t.length; q < r; ++q)
                    if(!t[q].RunPreTrigger(x)) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? a.RunOrBlockTrigger(x, d) : a.Run(x), m =
                x.GetLastEventTrue());
            g.Pop();
            p && f.GetLocalVarStack().Pop();
            f.PopSol(a.GetSolModifiersIncludingParents());
            h && f.PopSol(h.GetSolModifiersIncludingParents());
            h || 1 !== k || (f.ClearAsyncActionPromises(), f.IsFlushingBlocked() || c.FlushPendingInstances());
            return m
        }* _DebugExecuteTrigger(b, a, d) {
            const c = this._runtime,
                f = this._eventSheetManager,
                h = f.GetCurrentEvent(),
                g = f.GetEventStack(),
                k = f.GetTriggerDepth();
            let m = !1;
            h && f.PushCleanSol(h.GetSolModifiersIncludingParents());
            f.PushCleanSol(a.GetSolModifiersIncludingParents());
            const p = 1 < k;
            p && f.GetLocalVarStack().Push();
            const x = g.Push(a);
            b && (a.GetConditions()[d].GetObjectClass().GetCurrentSol().SetSinglePicked(b), b.IsInContainer() && b.SetSiblingsSinglePicked());
            b = !0;
            if(a.GetParent()) {
                const t = a.GetTriggerParents();
                for(let q = 0, r = t.length; q < r; ++q)
                    if(!(yield* t[q].DebugRunPreTrigger(x))) {
                        b = !1;
                        break
                    }
            }
            b && (c.IncrementExecCount(), a.IsOrBlock() ? yield* a.DebugRunOrBlockTrigger(x, d): yield* a.DebugRun(x), m = x.GetLastEventTrue());
            g.Pop();
            p && f.GetLocalVarStack().Pop();
            f.PopSol(a.GetSolModifiersIncludingParents());
            h && f.PopSol(h.GetSolModifiersIncludingParents());
            h || 1 !== k || (f.ClearAsyncActionPromises(), f.IsFlushingBlocked() || c.FlushPendingInstances());
            return m
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];

    function a(c, f) {
        return !0
    }

    function* d(c, f) {
        return !0
    }
    e.EventBlock = class extends e.DefendedBase {
        constructor(c, f, h) {
            super();
            this._eventSheet = c;
            this._runtime = c.GetRuntime();
            this._parent = f;
            this._scopeParent = null;
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._solModifiers = [];
            this._solModifiersIncludingParents = [];
            this._hasElseBlock = this._isTopLevelGroup = this._isSolWriterAfterCnds = this._hasGotSolModifiersIncludingParents = !1;
            this._isOrBlock = !!h[2];
            this._isElseBlock = !1;
            this._triggerParents = null;
            this._conditions = [];
            this._actions = [];
            this._subEvents = [];
            this._RunActions = a;
            this._DebugRunActions = d;
            this._isInitiallyActive = this._isGroup = !1;
            this._groupName = "";
            this._isGroupActive = !1;
            this._perfRecord = this._containedIncludes = null;
            this._sid = h[4];
            this._displayNumber = h[5];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: h[3][0],
                isBreakable: h[3][1],
                canRunAllConditionsFast: !1,
                canRunAllActionsFast: !1,
                canRunAllSubEventsFast: !1,
                canRunSelfFast: !1
            } : null;
            this.GetEventSheetManager()._RegisterEventBlock(this);
            3 === h[0] && this._InitGroup(h[1]);
            c = 0;
            for(var g of h[6]) f = e.Condition.Create(this, g, c++), this._conditions.push(f), this._AddSolModifier(f.GetObjectClass());
            c = 0;
            for(const k of h[7]) g = e.Action.Create(this, k, c++), this._actions.push(g);
            if(9 === h.length) {
                h = h[8];
                for(const k of h) this._eventSheet._CreateEvent(k, this, this._subEvents)
            }
            this._conditions.length && (this._isElseBlock = null === this._conditions[0].GetObjectClass() &&
                this._conditions[0]._GetFunc() === e.Plugins.System.Cnds.Else);
            0 === this._conditions.length && (this._conditions = b);
            0 === this._actions.length && (this._actions = b);
            0 === this._subEvents.length && (this._subEvents = b)
        }
        static Create(c, f, h) {
            return e.New(e.EventBlock, c, f, h)
        }
        _InitGroup(c) {
            this._isGroup = !0;
            this._isGroupActive = this._isInitiallyActive = !!c[0];
            this._groupName = c[1].toLowerCase();
            this._containedIncludes = [];
            this.GetEventSheetManager()._RegisterGroup(this);
            this._runtime.IsDebug() && (this._perfRecord = {
                type: "group",
                name: c[1],
                totalTimeCounter: 0,
                children: []
            })
        }
        _AddContainedInclude(c) {
            this._containedIncludes.push(c)
        }
        _AddContainerSolModifierToList(c, f) {
            for(const h of c.GetContainer().objectTypes()) f.includes(h) || f.push(h)
        }
        _AddSolModifierToList(c, f) {
            if(c)
                if(f.includes(c) || f.push(c), c.IsFamily())
                    for(const h of c.GetFamilyMembers()) h.IsInContainer() && this._AddContainerSolModifierToList(h, f);
                else c.IsInContainer() && this._AddContainerSolModifierToList(c, f)
        }
        _AddSolModifier(c) {
            this._AddSolModifierToList(c, this._solModifiers)
        }
        _AddParentSolModifier(c) {
            this._AddSolModifierToList(c,
                this._solModifiersIncludingParents)
        }
        SetAllSolModifiers() {
            this._solModifiers = this._runtime.GetAllObjectClasses()
        }
        _PostInit(c) {
            this._hasElseBlock = !!c;
            this._IdentifyTopLevelGroup();
            this._IdentifyTriggerParents();
            for(const h of this._conditions) h._PostInit();
            if(0 < this._actions.length) {
                c = !1;
                for(var f of this._actions) f._PostInit(), f.HasReturnType() && (c = !0);
                c ? (this._RunActions = this._RunActions_ReturnValue, this._DebugRunActions = this._DebugRunActions_ReturnValue) : (this._RunActions = this._RunActions_Fast, this._DebugRunActions =
                    this._DebugRunActions_Fast)
            }
            f = this._subEvents;
            for(let h = 0, g = f.length; h < g; ++h) c = h < g - 1 && f[h + 1] instanceof e.EventBlock && f[h + 1].IsElseBlock(), f[h]._PostInit(c);
            this._debugData && this._UpdateCanRunFast();
            this._perfRecord && this._GetPerfRecordParent()._GetPerfRecord().children.push(this._perfRecord)
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
        _GetPerfRecordParent() {
            let c = this.GetParent();
            for(; c;) {
                if(c.IsGroup()) return c;
                c = c.GetParent()
            }
            return this._eventSheet
        }
        _UpdateCanRunFast() {
            const c = this._debugData;
            c.canRunAllConditionsFast =
                this._conditions.every(f => f.DebugCanRunFast());
            c.canRunAllActionsFast = this._actions.every(f => f.DebugCanRunFast());
            c.canRunAllSubEventsFast = this._subEvents.every(f => f.DebugCanRunFast());
            c.canRunSelfFast = c.canRunAllConditionsFast && c.canRunAllActionsFast && c.canRunAllSubEventsFast
        }
        _UpdateCanRunFastRecursive() {
            let c = this;
            do c._UpdateCanRunFast(), c = c.GetParent(); while(c)
        }
        _IdentifyTopLevelGroup() {
            if(this.IsGroup()) {
                var c = this.GetParent();
                for(this._isTopLevelGroup = !0; c;) {
                    if(!c.IsGroup()) {
                        this._isTopLevelGroup = !1;
                        break
                    }
                    c = c.GetParent()
                }
            }
        }
        _IdentifySolModifiersIncludingParents() {
            var c = this._runtime.GetAllObjectClasses();
            if(this._solModifiers === c) this._solModifiersIncludingParents = c;
            else {
                this._solModifiersIncludingParents = e.cloneArray(this._solModifiers);
                for(c = this.GetParent(); c;) {
                    for(var f of c._solModifiers) this._AddParentSolModifier(f);
                    c = c.GetParent()
                }
                f = this.GetEventSheetManager();
                this._solModifiers = f._DeduplicateSolModifierList(this._solModifiers);
                this._solModifiersIncludingParents = f._DeduplicateSolModifierList(this._solModifiersIncludingParents)
            }
        }
        _IdentifyTriggerParents() {
            if(this.HasAnyTriggeredCondition()) {
                this._triggerParents = [];
                for(var c = this.GetParent(); c;) this._triggerParents.push(c), c = c.GetParent();
                this._triggerParents.reverse()
            }
        }
        SetSolWriterAfterCnds() {
            this._isSolWriterAfterCnds = !0;
            this._parent && this._parent.SetSolWriterAfterCnds()
        }
        IsSolWriterAfterCnds() {
            return this._isSolWriterAfterCnds
        }
        GetSolModifiers() {
            return this._solModifiers
        }
        GetSolModifiersIncludingParents() {
            this._hasGotSolModifiersIncludingParents || (this._hasGotSolModifiersIncludingParents = !0, this._IdentifySolModifiersIncludingParents());
            return this._solModifiersIncludingParents
        }
        HasSolModifier(c) {
            return this._solModifiers.includes(c)
        }
        GetTriggerParents() {
            return this._triggerParents
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetEventSheetManager() {
            return this._eventSheet.GetEventSheetManager()
        }
        GetRuntime() {
            return this._runtime
        }
        GetParent() {
            return this._parent
        }
        _SetScopeParent(c) {
            this._scopeParent =
                c
        }
        GetScopeParent() {
            return this._scopeParent || this._parent
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._UpdateCanRunFastRecursive()
        }
        IsGroup() {
            return this._isGroup
        }
        IsTopLevelGroup() {
            return this._isTopLevelGroup
        }
        IsElseBlock() {
            return this._isElseBlock
        }
        HasElseBlock() {
            return this._hasElseBlock
        }
        GetGroupName() {
            return this._groupName
        }
        IsGroupActive() {
            return this._isGroupActive
        }
        ResetInitialActivation() {
            this.SetGroupActive(this._isInitiallyActive)
        }
        SetGroupActive(c) {
            c = !!c;
            if(!this._isGroup) throw Error("not a group");
            if(this._isGroupActive !== c) {
                this._isGroupActive = c;
                for(const f of this._containedIncludes) f.UpdateActive();
                this._containedIncludes.length && (c = this._runtime.GetCurrentLayout().GetEventSheet()) && c._UpdateDeepIncludes()
            }
        }
        GetSID() {
            return this._sid
        }
        IsOrBlock() {
            return this._isOrBlock
        }
        IsTrigger() {
            return this._conditions.length && this._conditions[0].IsTrigger()
        }
        IsForFunctionBlock() {
            return this._scopeParent && this._scopeParent instanceof e.FunctionBlock
        }
        HasAnyTriggeredCondition() {
            return this.IsForFunctionBlock() ||
                this._conditions.some(c => c.IsTrigger())
        }
        GetConditions() {
            return this._conditions
        }
        GetConditionCount() {
            return this._conditions.length
        }
        GetConditionAt(c) {
            c = Math.floor(c);
            if(0 > c || c >= this._conditions.length) throw new RangeError("invalid condition index");
            return this._conditions[c]
        }
        GetConditionByDebugIndex(c) {
            return this.GetConditionAt(c)
        }
        IsFirstConditionOfType(c) {
            let f = c.GetIndex();
            if(0 === f) return !0;
            for(--f; 0 <= f; --f)
                if(this._conditions[f].GetObjectClass() === c.GetObjectClass()) return !1;
            return !0
        }
        GetActions() {
            return this._actions
        }
        GetActionCount() {
            return this._actions.length
        }
        GetActionAt(c) {
            c =
                Math.floor(c);
            if(0 > c || c >= this._actions.length) throw new RangeError("invalid action index");
            return this._actions[c]
        }
        GetActionByDebugIndex(c) {
            c = Math.floor(c);
            const f = this._actions.find(h => h.GetDebugIndex() === c);
            if(!f) throw new RangeError("invalid action debug index");
            return f
        }
        _HasActionIndex(c) {
            c = Math.floor(c);
            return 0 <= c && c < this._actions.length
        }
        GetSubEvents() {
            return this._subEvents
        }
        _GetAllLocalVariablesInScope() {
            return this._subEvents.filter(c => c instanceof e.EventVariable)
        }
        RunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let f = !1;
            const h = this._conditions;
            for(let g = 0, k = h.length; g < k; ++g) {
                const m = h[g];
                c.SetConditionIndex(g);
                if(m.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if(m.Run()) f = !0;
                else if(!this._isOrBlock) return !1
            }
            return this._isOrBlock ? f : !0
        }
        RunOrBlockTrigger(c, f) {
            c.SetCurrentEvent(this);
            this._conditions[f].Run() && (this._RunActions(c, 0) && this._RunSubEvents(c), c.SetLastEventTrue(!0))
        }* DebugRunPreTrigger(c) {
            c.SetCurrentEvent(this);
            let f = !1;
            const h = this._conditions;
            for(let g = 0, k = h.length; g <
                k; ++g) {
                const m = h[g];
                c.SetConditionIndex(g);
                if(m.IsLooping()) throw Error("trigger cannot be used as sub-event to a loop");
                if(m.DebugCanRunFast() ? m.Run() : yield* m.DebugRun()) f = !0;
                else if(!this._isOrBlock) return !1
            }
            return this._isOrBlock ? f : !0
        }* DebugRunOrBlockTrigger(c, f) {
            c.SetCurrentEvent(this);
            f = this._conditions[f];
            if(f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun())(this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() :
                yield* this._DebugRunSubEvents()), c.SetLastEventTrue(!0)
        }
        Run(c) {
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? this._RunOrBlock(c) : this._RunAndBlock(c)
        }* DebugRun(c) {
            if(this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            c.SetCurrentEvent(this);
            this._isElseBlock || c.SetElseBranchRan(!1);
            this._isOrBlock ? yield* this._DebugRunOrBlock(c): yield* this._DebugRunAndBlock(c)
        }
        _RunOrBlock(c) {
            const f = this._conditions;
            let h = 0 === f.length;
            for(let k = 0, m = f.length; k < m; ++k) {
                var g =
                    f[k];
                g.IsTrigger() || (c.SetConditionIndex(k), g = g.Run(), h = h || g)
            }
            c.SetLastEventTrue(h);
            h && (this._RunActions(c, 0) && this._RunSubEvents(c), this._hasElseBlock && c.SetElseBranchRan(!0))
        }* _DebugRunOrBlock(c) {
            const f = this._conditions;
            let h = 0 === f.length;
            for(let k = 0, m = f.length; k < m; ++k) {
                var g = f[k];
                g.IsTrigger() || (c.SetConditionIndex(k), g = g.DebugCanRunFast() ? g.Run() : yield* g.DebugRun(), h = h || g)
            }
            c.SetLastEventTrue(h);
            h && ((this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ?
                this._RunSubEvents() : yield* this._DebugRunSubEvents()), this._hasElseBlock && c.SetElseBranchRan(!0))
        }
        _RunAndBlock(c) {
            const f = this._conditions;
            for(let h = 0, g = f.length; h < g; ++h) {
                const k = f[h];
                c.SetConditionIndex(h);
                if(!k.Run()) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            this._RunActions(c, 0) && this._RunSubEvents(c);
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }* _DebugRunAndBlock(c) {
            const f = this._conditions;
            for(let h = 0, g = f.length; h < g; ++h) {
                const k = f[h];
                c.SetConditionIndex(h);
                if(k.DebugCanRunFast() ?
                    !k.Run() : !(yield* k.DebugRun())) {
                    c.SetLastEventTrue(!1);
                    return
                }
            }
            c.SetLastEventTrue(!0);
            (this.DebugCanRunActionsFast() ? this._RunActions(c, 0) : yield* this._DebugRunActions(c, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            c.GetLastEventTrue() && this._hasElseBlock && c.SetElseBranchRan(!0)
        }
        _RunActions_Fast(c, f) {
            const h = this._actions;
            for(let g = f, k = h.length; g < k; ++g) f = h[g], c.SetActionIndex(g), f.Run();
            return !0
        }* _DebugRunActions_Fast(c, f) {
            const h = this._actions;
            for(let g =
                    f, k = h.length; g < k; ++g) f = h[g], c.SetActionIndex(g), f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun();
            return !0
        }
        _RunActions_ReturnValue(c, f) {
            const h = this.GetEventSheetManager(),
                g = this._actions;
            for(let k = f, m = g.length; k < m; ++k) {
                f = g[k];
                c.SetActionIndex(k);
                const p = f.Run();
                if(f.CanBailOut() && !0 === p) return !1;
                f.IsAsync() && p instanceof Promise && h.AddAsyncActionPromise(p)
            }
            return !0
        }* _DebugRunActions_ReturnValue(c, f) {
            const h = this.GetEventSheetManager(),
                g = this._actions;
            for(let k = f, m = g.length; k < m; ++k) {
                f = g[k];
                c.SetActionIndex(k);
                let p;
                p = f.DebugCanRunFast() ? f.Run() : yield* f.DebugRun();
                if(f.CanBailOut() && !0 === p) return !1;
                f.IsAsync() && p instanceof Promise && h.AddAsyncActionPromise(p)
            }
            return !0
        }
        _ResumeActionsAndSubEvents(c) {
            this._RunActions(c, c.GetActionIndex()) && this._RunSubEvents()
        }* _DebugResumeActionsAndSubEvents(c) {
            if(yield* this._DebugRunActions(c, c.GetActionIndex())) yield* this._DebugRunSubEvents()
        }
        _RunSubEvents() {
            if(this._subEvents.length) {
                var c = this.IsGroup() && this._runtime.IsCPUProfiling(),
                    f = c ? performance.now() : 0,
                    h = this._eventStack,
                    g = h.Push(this);
                this._isSolWriterAfterCnds ? this._RunSubEvents_SolWriterAfterCnds(g) : this._RunSubEvents_Fast(g);
                h.Pop();
                c && (this._perfRecord.totalTimeCounter += performance.now() - f)
            }
        }
        _RunSubEvents_SolWriterAfterCnds(c) {
            const f = this._isGroup,
                h = this._isTopLevelGroup,
                g = this.GetEventSheetManager(),
                k = this._subEvents;
            for(let m = 0, p = k.length, x = p - 1; m < p; ++m) {
                const t = k[m],
                    q = t.GetSolModifiers(),
                    r = !h || !f && m < x;
                r && g.PushCopySol(q);
                t.Run(c);
                r ? g.PopSol(q) : g.ClearSol(q)
            }
        }
        _RunSubEvents_Fast(c) {
            const f = this._subEvents;
            for(let h =
                    0, g = f.length; h < g; ++h) f[h].Run(c)
        }* _DebugRunSubEvents() {
            if(this._subEvents.length) {
                var c = this._eventStack,
                    f = c.Push(this);
                this._isSolWriterAfterCnds ? yield* this._DebugRunSubEvents_SolWriterAfterCnds(f): yield* this._DebugRunSubEvents_Fast(f);
                c.Pop()
            }
        }* _DebugRunSubEvents_SolWriterAfterCnds(c) {
            const f = this._isGroup,
                h = this._isTopLevelGroup,
                g = this.GetEventSheetManager(),
                k = this._subEvents;
            for(let m = 0, p = k.length, x = p - 1; m < p; ++m) {
                const t = k[m],
                    q = t.GetSolModifiers(),
                    r = !h || !f && m < x;
                r && g.PushCopySol(q);
                yield* t.DebugRun(c);
                r ? g.PopSol(q) : g.ClearSol(q)
            }
        }* _DebugRunSubEvents_Fast(c) {
            const f = this._subEvents;
            for(let h = 0, g = f.length; h < g; ++h) yield* f[h].DebugRun(c)
        }
        Retrigger(c, f) {
            this._runtime.IncrementExecCount();
            f.ResetQuick();
            const h = this._conditions;
            if(!this.IsOrBlock())
                for(let g = c.GetConditionIndex() + 1, k = h.length; g < k; ++g)
                    if(c = h[g], f.SetConditionIndex(g), !c.Run()) return !1;
            this._RunActions(f, 0) && this._RunSubEvents(f);
            return !0
        }* DebugRetrigger(c, f) {
            this._runtime.IncrementExecCount();
            f.ResetQuick();
            const h = this._conditions;
            if(!this.IsOrBlock())
                for(let g =
                        c.GetConditionIndex() + 1, k = h.length; g < k; ++g)
                    if(c = h[g], f.SetConditionIndex(g), c.DebugCanRunFast() ? !c.Run() : !(yield* c.DebugRun())) return !1;
            (this.DebugCanRunActionsFast() ? this._RunActions(f, 0) : yield* this._DebugRunActions(f, 0)) && (this.DebugCanRunSubEventsFast() ? this._RunSubEvents() : yield* this._DebugRunSubEvents());
            return !0
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext() && this._debugData.canRunSelfFast
        }
        DebugCanRunActionsFast() {
            return !this._runtime.DebugBreakNext() && this._debugData.canRunAllActionsFast
        }
        DebugCanRunSubEventsFast() {
            return !this._runtime.DebugBreakNext() &&
                this._debugData.canRunAllSubEventsFast
        }
        _CheckParentsOKToRun(c) {
            if(this.GetParent()) {
                const f = this.GetTriggerParents();
                for(let h = 0, g = f.length; h < g; ++h)
                    if(!f[h].RunPreTrigger(c)) return !1
            }
            return !0
        }* _DebugCheckParentsOKToRun(c) {
            if(this.GetParent()) {
                const f = this.GetTriggerParents();
                for(let h = 0, g = f.length; h < g; ++h)
                    if(!(yield* f[h].DebugRunPreTrigger(c))) return !1
            }
            return !0
        }
        _EvaluateFunctionCallParameters(c, f, h) {
            0 < f.length ? h ? (f = f.map(g => g.Get(0)), c.GetLocalVarStack().Push(), this._scopeParent.SetFunctionParameters(f)) :
                this._scopeParent.EvaluateFunctionParameters(f) : h && c.GetLocalVarStack().Push()
        }
        RunAsFunctionCall(c, f) {
            let h, g;
            const k = 0 < c.length;
            var m = this._runtime;
            const p = this._eventStack,
                x = m.GetEventSheetManager(),
                t = 1 < x._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(x, f, t);
            k && x.PushCleanSol(c);
            f = p.Push(this);
            this._CheckParentsOKToRun(f) && (m.IncrementExecCount(), f.SetCurrentEvent(this), (m = this._scopeParent.IsAsync()) && ([g, h] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(f), m && this._scopeParent.MaybeFinishAsyncFunctionCall(g));
            p.Pop();
            t && x.GetLocalVarStack().Pop();
            k && x.PopSol(c);
            x._DecTriggerDepth();
            return h
        }* DebugRunAsFunctionCall(c, f) {
            let h, g;
            if(this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const k = 0 < c.length;
            var m = this._runtime;
            const p = this._eventStack,
                x = m.GetEventSheetManager(),
                t = 1 < x._IncTriggerDepth();
            this._EvaluateFunctionCallParameters(x, f, t);
            k && x.PushCleanSol(c);
            f = p.Push(this);
            if(yield* this._DebugCheckParentsOKToRun(f)) m.IncrementExecCount(), f.SetCurrentEvent(this), (m = this._scopeParent.IsAsync()) &&
                ([g, h] = this._scopeParent.StartAsyncFunctionCall()), yield* this._DebugRunAndBlock(f), m && this._scopeParent.MaybeFinishAsyncFunctionCall(g);
            p.Pop();
            t && x.GetLocalVarStack().Pop();
            k && x.PopSol(c);
            x._DecTriggerDepth();
            return h
        }
        RunAsMappedFunctionCall(c) {
            const f = this.GetSolModifiersIncludingParents(),
                h = 0 < f.length,
                g = this._runtime,
                k = this._eventStack,
                m = g.GetEventSheetManager(),
                p = 1 < m._IncTriggerDepth();
            p && m.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            h && m.PushCleanSol(f);
            c = k.Push(this);
            this._CheckParentsOKToRun(c) && (g.IncrementExecCount(), c.SetCurrentEvent(this), this._RunAndBlock(c));
            k.Pop();
            p && m.GetLocalVarStack().Pop();
            h && m.PopSol(f);
            m._DecTriggerDepth()
        }* DebugRunAsMappedFunctionCall(c) {
            if(this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const f = this.GetSolModifiersIncludingParents(),
                h = 0 < f.length,
                g = this._runtime,
                k = this._eventStack,
                m = g.GetEventSheetManager(),
                p = 1 < m._IncTriggerDepth();
            p && m.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(c);
            h &&
                m.PushCleanSol(f);
            c = k.Push(this);
            if(yield* this._DebugCheckParentsOKToRun(c)) g.IncrementExecCount(), c.SetCurrentEvent(this), yield* this._DebugRunAndBlock(c);
            k.Pop();
            p && m.GetLocalVarStack().Pop();
            h && m.PopSol(f);
            m._DecTriggerDepth()
        }
        RunAsExpressionFunctionCall(c, f, h, ...g) {
            let k, m;
            const p = 0 < c.length,
                x = this._runtime,
                t = this._eventStack,
                q = x.GetEventSheetManager(),
                r = 1 < q._IncTriggerDepth();
            r && q.GetLocalVarStack().Push();
            0 < g.length && this._scopeParent.SetFunctionParameters(g);
            p && q.PushCleanSol(c);
            g = t.Push(this);
            g.InitCallFunctionExpression(f, h);
            t.PushExpFunc(g);
            x.SetDebuggingEnabled(!1);
            this._CheckParentsOKToRun(g) && (x.IncrementExecCount(), g.SetCurrentEvent(this), (f = this._scopeParent.IsAsync()) && ([m, k] = this._scopeParent.StartAsyncFunctionCall()), this._RunAndBlock(g), f && this._scopeParent.MaybeFinishAsyncFunctionCall(m));
            x.SetDebuggingEnabled(!0);
            t.Pop();
            t.PopExpFunc();
            r && q.GetLocalVarStack().Pop();
            p && q.PopSol(c);
            q._DecTriggerDepth();
            return k || g.GetFunctionReturnValue()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    let a = !1;
    e.EventScript = class extends e.DefendedBase {
        constructor(d, c, f) {
            super();
            const h = d.GetRuntime(),
                g = d.GetEventSheetManager();
            this._eventSheet = d;
            this._eventSheetManager = g;
            this._runtime = d.GetRuntime();
            this._parent = c;
            this._func = h.GetObjectReference(f[1]);
            this._displayNumber = f[2];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = h.IsDebug() ? {
                isBreakpoint: f[3][0],
                isBreakable: f[3][1]
            } : null
        }
        static Create(d, c, f) {
            return e.New(e.EventScript,
                d, c, f)
        }
        _PostInit() {
            const d = this._func,
                c = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this);
            this._func = d.bind(null, this._runtime.GetIRuntime(), c)
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(d) {
            this._debugData.isBreakpoint = !!d
        }
        IsElseBlock() {
            return !1
        }
        GetSolModifiers() {
            return b
        }
        GetSolModifiersIncludingParents() {
            return this._parent ? this._parent.GetSolModifiersIncludingParents() : b
        }
        Run(d) {
            d.SetCurrentEvent(this);
            this._eventSheetManager.AddAsyncActionPromise(this._RunUserScript())
        }
        async _RunUserScript() {
            try {
                await this._func()
            } catch (d) {
                console.error(`Unhandled exception running script %c${this.GetEventSheet().GetName()}, event ${this.GetDisplayNumber()}:`, "font-size: 1.2em; font-weight: bold;", d), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    a || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), a = !0)
            }
        }* DebugRun(d) {
            d.SetCurrentEvent(this);
            if(this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            this.Run(d)
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext()
        }
        static HadUserScriptException() {
            return a
        }
        static SetHadUserScriptException() {
            a = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.FunctionBlock = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._eventSheet = b;
            this._runtime = b.GetRuntime();
            this._parent = a;
            const c = d[1];
            this._functionName = c[0];
            this._returnType = c[1];
            this._functionParameters = c[2].map(f => e.EventVariable.Create(b, this, f));
            this._isEnabled = c[3];
            this._innerLocalVariables = [];
            this._isAsync = c[4];
            this._nextAsyncId = 0;
            this._currentAsyncId = -1;
            this._asyncMap = new Map;
            this._eventBlock = e.EventBlock.Create(b, a, d);
            this._eventBlock._SetScopeParent(this)
        }
        static Create(b,
            a, d) {
            return e.New(e.FunctionBlock, b, a, d)
        }
        _PostInit() {
            for(const b of this._functionParameters) b._PostInit();
            this._eventBlock._PostInit(!1)
        }
        _GetAllLocalVariablesInScope() {
            return this._functionParameters
        }
        GetFunctionParameters() {
            return this._functionParameters
        }
        GetFunctionParameterCount() {
            return this._functionParameters.length
        }
        _RegisterLocalVariable(b) {
            this._innerLocalVariables.push(b)
        }
        _GetAllInnerLocalVariables() {
            return this._innerLocalVariables
        }
        EvaluateFunctionParameters(b) {
            const a = this._functionParameters;
            for(let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d].Get(0))
        }
        SetFunctionParameters(b) {
            const a = this._functionParameters;
            for(let d = 0, c = a.length; d < c; ++d) a[d].SetValue(b[d])
        }
        CaptureFunctionParameters() {
            return this._functionParameters.map(b => b.GetValue())
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetFunctionName() {
            return this._functionName
        }
        GetReturnType() {
            return this._returnType
        }
        IsEnabled() {
            return this._isEnabled
        }
        GetDefaultReturnValue() {
            switch(this._returnType) {
                case 0:
                    return null;
                case 2:
                    return "";
                default:
                    return 0
            }
        }
        GetEventBlock() {
            return this._eventBlock
        }
        IsAsync() {
            return this._isAsync
        }
        StartAsyncFunctionCall() {
            const b = this._nextAsyncId++;
            this._currentAsyncId = b;
            let a;
            const d = new Promise(c => a = c);
            this._asyncMap.set(b, {
                resolve: a,
                pauseCount: 0
            });
            return [b, d]
        }
        MaybeFinishAsyncFunctionCall(b) {
            const a = this._asyncMap.get(b);
            0 === a.pauseCount && (a.resolve(), this._asyncMap.delete(b));
            this._currentAsyncId = -1
        }
        PauseCurrentAsyncFunction() {
            this._asyncMap.get(this._currentAsyncId).pauseCount++;
            return this._currentAsyncId
        }
        ResumeAsyncFunction(b) {
            this._currentAsyncId =
                b;
            this._asyncMap.get(b).pauseCount--
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.EventVariable = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            const f = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = f;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._localVarStack = f.GetLocalVarStack();
            this._name = c[1];
            this._type = c[2];
            this._initialValue = c[3];
            this._isStatic = !!c[4];
            this._isConstant = !!c[5];
            this._isFunctionParameter = d instanceof e.FunctionBlock;
            this._sid = c[6];
            this._jsPropName = this._runtime.GetJsPropName(c[8]);
            this._scriptSetter =
                h => this.SetValue(h);
            this._scriptGetter = () => this.GetValue();
            this._hasSingleValue = !this._parent || this._isStatic || this._isConstant;
            this._value = this._initialValue;
            this._localIndex = -1;
            this.IsBoolean() && (this._value = this._value ? 1 : 0);
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || (this._localIndex = f._GetNextLocalVarIndex(this));
            f._RegisterEventVariable(this)
        }
        static Create(a, d, c) {
            return e.New(e.EventVariable, a, d, c)
        }
        _PostInit() {
            if(this.IsLocal() && !this.IsStatic() && !this.IsConstant() && !this.IsFunctionParameter()) {
                const a =
                    this._eventSheetManager.FindFirstFunctionBlockParent(this);
                a && a._RegisterLocalVariable(this)
            }
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this.GetParent()
        }
        IsGlobal() {
            return !this.GetParent()
        }
        IsLocal() {
            return !this.IsGlobal()
        }
        IsFunctionParameter() {
            return this._isFunctionParameter
        }
        IsStatic() {
            return this._isStatic
        }
        IsConstant() {
            return this._isConstant
        }
        IsNumber() {
            return 0 === this._type
        }
        IsString() {
            return 1 === this._type
        }
        IsBoolean() {
            return 2 ===
                this._type
        }
        IsElseBlock() {
            return !1
        }
        GetSID() {
            return this._sid
        }
        GetInitialValue() {
            return this._initialValue
        }
        GetSolModifiers() {
            return b
        }
        Run(a) {
            !this.IsLocal() || this.IsStatic() || this.IsConstant() || this.SetValue(this.GetInitialValue())
        }
        DebugCanRunFast() {
            return !0
        }* DebugRun(a) {
            this.Run(a)
        }
        SetValue(a) {
            this.IsNumber() ? "number" !== typeof a && (a = parseFloat(a)) : this.IsString() ? "string" !== typeof a && (a = a.toString()) : this.IsBoolean() && (a = a ? 1 : 0);
            this._hasSingleValue ? this._value = a : this._localVarStack.GetCurrent()[this._localIndex] =
                a
        }
        GetValue() {
            return this._hasSingleValue ? this._value : this._localVarStack.GetCurrent()[this._localIndex]
        }
        GetTypedValue() {
            let a = this.GetValue();
            this.IsBoolean() && (a = !!a);
            return a
        }
        ResetToInitialValue() {
            this._value = this._initialValue
        }
        _GetScriptInterfaceDescriptor() {
            return {
                configurable: !1,
                enumerable: !0,
                get: this._scriptGetter,
                set: this._scriptSetter
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.EventInclude = class extends e.DefendedBase {
        constructor(a, d, c) {
            super();
            const f = a.GetEventSheetManager();
            this._eventSheet = a;
            this._eventSheetManager = f;
            this._runtime = a.GetRuntime();
            this._parent = d;
            this._includeSheet = null;
            this._includeSheetName = c[1];
            this._isActive = !0
        }
        static Create(a, d, c) {
            return e.New(e.EventInclude, a, d, c)
        }
        _PostInit() {
            this._includeSheet = this._eventSheetManager.GetEventSheetByName(this._includeSheetName);
            this._eventSheet._AddShallowInclude(this);
            let a =
                this.GetParent();
            for(; a;) a instanceof e.EventBlock && a.IsGroup() && a._AddContainedInclude(this), a = a.GetParent();
            this.UpdateActive();
            this._runtime.IsDebug() && this._eventSheet._GetPerfRecord().children.push(this._includeSheet._GetPerfRecord())
        }
        GetParent() {
            return this._parent
        }
        GetSolModifiers() {
            return b
        }
        GetIncludeSheet() {
            return this._includeSheet
        }
        Run(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            this._includeSheet.Run();
            a && this._eventSheetManager.PopSol(d)
        }* DebugRun(a) {
            a = !!this.GetParent();
            const d = this._runtime.GetAllObjectClasses();
            a && this._eventSheetManager.PushCleanSol(d);
            yield* this._includeSheet.DebugRun();
            a && this._eventSheetManager.PopSol(d)
        }
        DebugCanRunFast() {
            return !1
        }
        IsActive() {
            return this._isActive
        }
        UpdateActive() {
            let a = this.GetParent();
            for(; a;) {
                if(a instanceof e.EventBlock && a.IsGroup() && !a.IsGroupActive()) {
                    this._isActive = !1;
                    return
                }
                a = a.GetParent()
            }
            this._isActive = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ExpNode = class extends e.DefendedBase {
        constructor(k) {
            super();
            this._owner = k;
            this._runtime = k.GetRuntime()
        }
        _PostInit() {}
        static CreateNode(k, m) {
            return e.New([h, c, f, g, b, a][m[0]], k, m)
        }
    };
    class b extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._systemPlugin = this._runtime.GetSystemPlugin();
            this._func = this._runtime.GetObjectReference(m[1]);
            this._func !== e.Plugins.System.Exps.random && this._func !== e.Plugins.System.Exps.choose || this._owner.SetVariesPerInstance()
        }
        GetBoundMethod() {
            return this._systemPlugin._GetBoundACEMethod(this._func,
                this._systemPlugin)
        }
    }
    class a extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._functionBlock = null;
            this._functionName = m[1];
            this._owner.SetVariesPerInstance()
        }
        _PostInit() {
            const k = this._runtime.GetEventSheetManager();
            this._functionBlock = k.GetFunctionBlockByName(this._functionName);
            this._functionName = null;
            const m = this._owner.GetEventBlock(),
                p = this._functionBlock.GetEventBlock();
            this._combinedSolModifiers = [...new Set([...m.GetSolModifiersIncludingParents(), ...p.GetSolModifiersIncludingParents()])];
            this._combinedSolModifiers =
                k._DeduplicateSolModifierList(this._combinedSolModifiers)
        }
        GetBoundMethod() {
            const k = this._functionBlock;
            if(k.IsEnabled()) {
                const m = k.GetEventBlock();
                return e.EventBlock.prototype.RunAsExpressionFunctionCall.bind(m, this._combinedSolModifiers, k.GetReturnType(), k.GetDefaultReturnValue())
            } {
                const m = k.GetDefaultReturnValue();
                return () => m
            }
        }
    }

    function d(k, m) {
        if(k >= m) return k % m;
        0 > k && (k <= -m && (k %= m), 0 > k && (k += m));
        return k
    }
    class c extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._func = this._runtime.GetObjectReference(m[2]);
            this._returnsString = !!m[3];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        GetBoundMethod() {
            return this._objectClass.GetPlugin()._GetBoundACEMethod(this._func, this._objectClass.GetSingleGlobalInstance().GetSdkInstance())
        }
        ExpObject(...k) {
            const m = this._objectClass,
                p = m.GetCurrentSol().GetExpressionInstances();
            var x = p.length;
            if(0 === x) return this._returnsString ? "" : 0;
            x = d(this._owner.GetSolIndex(),
                x);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            return this._func.apply(p[x].GetSdkInstance(), k)
        }
        ExpObject_InstExpr(k, ...m) {
            const p = this._objectClass,
                x = p.GetInstances(),
                t = x.length;
            if(0 === t) return this._returnsString ? "" : 0;
            k = d(k, t);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(p);
            return this._func.apply(x[k].GetSdkInstance(), m)
        }
    }
    class f extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._varIndex = m[3];
            this._returnsString = !!m[2];
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpInstVar() {
            const k = this._objectClass.GetCurrentSol().GetExpressionInstances();
            var m = k.length;
            if(0 === m) return this._returnsString ? "" : 0;
            m = d(this._owner.GetSolIndex(), m);
            return k[m]._GetInstanceVariableValueUnchecked(this._varIndex)
        }
        ExpInstVar_Family() {
            var k = this._objectClass,
                m = k.GetCurrentSol().GetExpressionInstances(),
                p = m.length;
            if(0 === p) return this._returnsString ? "" : 0;
            p = d(this._owner.GetSolIndex(), p);
            m = m[p];
            k = m.GetObjectClass().GetFamilyInstanceVariableOffset(k.GetFamilyIndex());
            return m._GetInstanceVariableValueUnchecked(this._varIndex + k)
        }
        ExpInstVar_InstExpr(k) {
            const m = this._objectClass;
            var p = m.GetInstances();
            const x = p.length;
            if(0 === x) return this._returnsString ? "" : 0;
            k = d(k, x);
            p = p[k];
            k = 0;
            m.IsFamily() && (k = p.GetObjectClass().GetFamilyInstanceVariableOffset(m.GetFamilyIndex()));
            return p._GetInstanceVariableValueUnchecked(this._varIndex + k)
        }
    }
    class h extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._objectClass = this._runtime.GetObjectClassByIndex(m[1]);
            this._behaviorType = this._objectClass.GetBehaviorTypeByName(m[2]);
            this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(m[2]);
            this._func = this._runtime.GetObjectReference(m[3]);
            this._returnsString = !!m[4];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpBehavior(...k) {
            const m = this._objectClass;
            var p = m.GetCurrentSol().GetExpressionInstances(),
                x = p.length;
            if(0 === x) return this._returnsString ? "" : 0;
            x = d(this._owner.GetSolIndex(), x);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(m);
            p = p[x];
            x = 0;
            m.IsFamily() && (x = p.GetObjectClass().GetFamilyBehaviorOffset(m.GetFamilyIndex()));
            return this._func.apply(p.GetBehaviorInstances()[this._behaviorIndex + x].GetSdkInstance(), k)
        }
        ExpBehavior_InstExpr(k, ...m) {
            const p = this._objectClass;
            var x = p.GetInstances();
            const t = x.length;
            if(0 === t) return this._returnsString ? "" : 0;
            k = d(k, t);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(p);
            x = x[k];
            k = 0;
            p.IsFamily() && (k = x.GetObjectClass().GetFamilyBehaviorOffset(p.GetFamilyIndex()));
            return this._func.apply(x.GetBehaviorInstances()[this._behaviorIndex +
                k].GetSdkInstance(), m)
        }
    }
    class g extends e.ExpNode {
        constructor(k, m) {
            super(k);
            this._eventVar = null;
            this._eventVarSid = m[1]
        }
        _PostInit() {
            this._eventVar = this._runtime.GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetVar() {
            return this._eventVar
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Parameter = class extends e.DefendedBase {
        constructor(v, u, A) {
            super();
            this._owner = v;
            this._index = A;
            this._type = u;
            this.Get = null;
            this._isConstant = this._variesPerInstance = !1
        }
        static Create(v, u, A) {
            const z = u[0];
            return e.New([a, d, p, f, g, c, k, a, f, f, x, t, p, r, d, m, h, q, y][z], v, z, A, u)
        }
        _PostInit() {}
        SetVariesPerInstance() {
            this._variesPerInstance = !0
        }
        _MaybeVaryFor(v) {
            this._variesPerInstance || !v || v.GetPlugin().IsSingleGlobal() || (this._variesPerInstance = !0)
        }
        VariesPerInstance() {
            return this._variesPerInstance
        }
        GetIndex() {
            return this._index
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        GetEventBlock() {
            return this._owner.GetEventBlock()
        }
        IsConstant() {
            return this._isConstant
        }
    };

    function b(v) {
        v = self.C3_ExpressionFuncs[v];
        if(!v) throw Error("invalid expression number");
        return v
    }
    class a extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._solIndex = 0;
            v = z[1];
            this._expressionNumber = v[0];
            this._numberedNodes = [];
            this._expressionFunc = null;
            for(let C = 1, E = v.length; C < E; ++C) this._numberedNodes.push(e.ExpNode.CreateNode(this, v[C]));
            this._numberedNodes.length ? this.Get = this.GetExpression : (this.Get = b(this._expressionNumber), this._isConstant = !0)
        }
        _GetNode(v) {
            if(0 > v || v >= this._numberedNodes.length) throw new RangeError("invalid numbered node");
            return this._numberedNodes[v]
        }
        _PostInit() {
            for(var v of this._numberedNodes) v._PostInit();
            v = b(this._expressionNumber);
            this._expressionFunc = this._numberedNodes.length ? v(this) : v
        }
        GetSolIndex() {
            return this._solIndex
        }
        GetExpression(v) {
            this._solIndex = v;
            return this._expressionFunc()
        }
    }
    class d extends a {
        constructor(v, u, A, z) {
            super(v, u, A, z);
            this.Get = this.GetStringExpression;
            14 === u && (this.GetEventBlock().SetAllSolModifiers(), this._owner instanceof e.Action && this.GetEventBlock().SetSolWriterAfterCnds())
        }
        GetStringExpression(v) {
            this._solIndex =
                v;
            v = this._expressionFunc();
            return "string" === typeof v ? v : ""
        }
        _GetFastTriggerValue() {
            return b(this._expressionNumber)()
        }
    }
    class c extends a {
        constructor(v, u, A, z) {
            super(v, u, A, z);
            this.Get = this.GetLayer;
            this._isConstant = !1
        }
        GetLayer(v) {
            this._solIndex = v;
            v = this._expressionFunc();
            return this.GetRuntime().GetCurrentLayout().GetLayer(v)
        }
    }
    class f extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._combo = z[1];
            this.Get = this.GetCombo;
            this._isConstant = !0
        }
        GetCombo() {
            return this._combo
        }
    }
    class h extends e.Parameter {
        constructor(v,
            u, A, z) {
            super(v, u, A);
            this._bool = z[1];
            this.Get = this.GetBoolean;
            this._isConstant = !0
        }
        GetBoolean() {
            return this._bool
        }
    }
    class g extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._objectClass = this.GetRuntime().GetObjectClassByIndex(z[1]);
            this.Get = this.GetObjectClass;
            v = this.GetEventBlock();
            v._AddSolModifier(this._objectClass);
            this._owner instanceof e.Action ? v.SetSolWriterAfterCnds() : v.GetParent() && v.GetParent().SetSolWriterAfterCnds();
            this._isConstant = !0
        }
        GetObjectClass() {
            return this._objectClass
        }
    }
    class k extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._layout = this.GetRuntime().GetLayoutManager().GetLayoutByName(z[1]);
            this.Get = this.GetLayout;
            this._isConstant = !0
        }
        GetLayout() {
            return this._layout
        }
    }
    class m extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._timeline = this.GetRuntime().GetTimelineManager().GetTimelineByName(z[1]);
            this.Get = this.GetTimeline;
            this._isConstant = !0
        }
        GetTimeline() {
            return this._timeline
        }
    }
    class p extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._fileInfo =
                z[1];
            this.Get = this.GetFile;
            this._isConstant = !0
        }
        GetFile() {
            return this._fileInfo
        }
    }
    class x extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._instVarIndex = z[1];
            (v = this._owner.GetObjectClass()) && v.IsFamily() ? (this.Get = this.GetFamilyInstanceVariable, this.SetVariesPerInstance()) : (this.Get = this.GetInstanceVariable, this._isConstant = !0)
        }
        GetInstanceVariable() {
            return this._instVarIndex
        }
        GetFamilyInstanceVariable(v) {
            v = v || 0;
            const u = this._owner.GetObjectClass();
            var A = u.GetCurrentSol();
            const z = A.GetInstances();
            if(z.length) v = z[v % z.length].GetObjectClass();
            else if(A.HasAnyElseInstances()) A = A.GetElseInstances(), v = A[v % A.length].GetObjectClass();
            else if(0 < u.GetInstanceCount()) A = u.GetInstances(), v = A[v % A.length].GetObjectClass();
            else return 0;
            return this._instVarIndex + v.GetFamilyInstanceVariableOffset(u.GetFamilyIndex())
        }
    }
    class t extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._eventVarSid = z[1];
            this._eventVar = null;
            this.Get = this.GetEventVariable;
            this._isConstant = !0
        }
        _PostInit() {
            this._eventVar = this.GetRuntime().GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetEventVariable() {
            return this._eventVar
        }
    }
    class q extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._functionBlockName = z[1];
            this._functionBlock = null;
            this.Get = this.GetFunction;
            this._isConstant = !0
        }
        _PostInit() {
            this._functionBlock = this.GetRuntime().GetEventSheetManager().GetFunctionBlockByName(this._functionBlockName);
            this._functionBlockName = null
        }
        GetFunction() {
            return this._functionBlock
        }
    }
    class r extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._subParams = [];
            this._variadicRet = [];
            this._isConstant = !0;
            for(let C = 1, E = z.length; C <
                E; ++C) v = e.Parameter.Create(this._owner, z[C], 0), this._subParams.push(v), this._variadicRet.push(0), v.IsConstant() || (this._isConstant = !1);
            this.Get = this.GetVariadic
        }
        _PostInit() {
            for(const v of this._subParams) v._PostInit()
        }
        GetVariadic() {
            const v = this._subParams,
                u = this._variadicRet;
            for(let A = 0, z = v.length; A < z; ++A) u[A] = v[A].Get(0);
            return u
        }
    }
    class y extends e.Parameter {
        constructor(v, u, A, z) {
            super(v, u, A);
            this._easeIndex = z[1];
            this.Get = this.GetEase;
            this._isConstant = !0
        }
        GetEase() {
            return this._easeIndex
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(c, f) {
        for(let h = 0, g = c.length; h < g; ++h) f[h] = c[h].Get(0)
    }
    const a = [],
        d = function() {};
    e.Condition = class extends e.DefendedBase {
        constructor(c, f, h) {
            super();
            this._eventBlock = c;
            this._runtime = c.GetRuntime();
            this._index = h;
            this._func = this._runtime.GetObjectReference(f[1]);
            this._isTrigger = 0 < f[3];
            this._isFastTrigger = 2 === f[3];
            this._isLooping = !!f[4];
            this._isInverted = !!f[5];
            this._isStatic = !!f[6];
            this._sid = f[7];
            this._isInOrBlock = this._eventBlock.IsOrBlock();
            this._behaviorType =
                this._objectClass = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: f[8][0],
                canDebug: f[8][1]
            } : null; - 1 === f[0] ? this._systemPlugin = this._runtime.GetSystemPlugin() : (this._objectClass = this._runtime.GetObjectClassByIndex(f[0]), f[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(f[2]), this._behaviorIndex =
                this._objectClass.GetBehaviorIndexByName(f[2])), this._eventBlock.GetParent() && this._eventBlock.GetParent().SetSolWriterAfterCnds());
            if(10 === f.length) {
                c = f[9];
                for(let g of c) this._parameters.push(e.Parameter.Create(this, g, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterCondition(this)
        }
        static Create(c, f, h) {
            return e.New(e.Condition, c, f, h)
        }
        _PostInit() {
            for(const c of this._parameters) c._PostInit(),
                c.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            this._isFastTrigger ? (this.Run = this._RunFastTrigger, this.DebugRun = this._DebugRunFastTrigger) : this._systemPlugin ? (this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this._isStatic ? (this.Run = this._RunStatic, this.DebugRun = this._DebugRunStatic) : (this.Run = this._RunObject, this.DebugRun = this._DebugRunObject)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const c = this._objectClass.GetPlugin(),
                f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(c, f, this._RunSingleGlobal)
        }
        _SetRunMethodForBoundFunc(c, f, h) {
            const g = this._func,
                k = this._isInverted,
                m = this._parameters;
            if(0 === m.length) {
                const p = c._GetBoundACEMethod(g, f);
                this.Run = k ? function() {
                    return e.xor(p(), k)
                } : p
            } else if(1 === m.length) {
                const p = m[0];
                if(!k && p.IsConstant()) this.Run = c._GetBoundACEMethod_1param(g,
                    f, p.Get(0));
                else {
                    const x = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(x(p.Get(0)), k)
                    }
                }
            } else if(2 === m.length) {
                const p = m[0],
                    x = m[1];
                if(!k && p.IsConstant() && x.IsConstant()) this.Run = c._GetBoundACEMethod_2params(g, f, p.Get(0), x.Get(0));
                else {
                    const t = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(t(p.Get(0), x.Get(0)), k)
                    }
                }
            } else if(3 === m.length) {
                const p = m[0],
                    x = m[1],
                    t = m[2];
                if(!k && p.IsConstant() && x.IsConstant() && t.IsConstant()) this.Run = c._GetBoundACEMethod_3params(g, f, p.Get(0), x.Get(0),
                    t.Get(0));
                else {
                    const q = c._GetBoundACEMethod(g, f);
                    this.Run = function() {
                        return e.xor(q(p.Get(0), x.Get(0), t.Get(0)), k)
                    }
                }
            } else this.Run = h
        }
        GetSID() {
            return this._sid
        }
        _GetFunc() {
            return this._func
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this.GetIndex()
        }
        IsTrigger() {
            return this._isTrigger
        }
        IsFastTrigger() {
            return this._isFastTrigger
        }
        IsInverted() {
            return this._isInverted
        }
        IsLooping() {
            return this._isLooping
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(c) {
            this._debugData.isBreakpoint = !!c;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const c = this._results;
            b(this._parameters, c);
            return e.xor(this._func.apply(this._systemPlugin, c),
                this._isInverted)
        }* _DebugRunSystem() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._systemPlugin, c);
                e.IsIterator(c) && (c = yield* c);
                return e.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunSingleGlobal() {
            const c = this._results;
            b(this._parameters, c);
            const f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            return e.xor(this._func.apply(f, c), this._isInverted)
        }* _DebugRunSingleGlobal() {
            if(this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                const f = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
                c = this._func.apply(f, c);
                e.IsIterator(c) && (c = yield* c);
                return e.xor(c, this._isInverted)
            }
            return this.Run()
        }
        _RunFastTrigger() {
            return !0
        }* _DebugRunFastTrigger() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return !0
        }
        _RunStatic() {
            var c = this._results;
            b(this._parameters, c);
            c = this._func.apply(this._behaviorType ||
                this._objectClass, c);
            this._objectClass.ApplySolToContainer();
            return c
        }* _DebugRunStatic() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                var c = this._results;
                b(this._parameters, c);
                c = this._func.apply(this._behaviorType || this._objectClass, c);
                e.IsIterator(c) && (c = yield* c);
                this._objectClass.ApplySolToContainer();
                return c
            }
            return this.Run()
        }
        _RunObject() {
            const c = this._parameters,
                f = this._results,
                h = this._objectClass.GetCurrentSol();
            for(let g = 0, k = c.length; g <
                k; ++g) {
                const m = c[g];
                m.VariesPerInstance() || (f[g] = m.Get(0))
            }
            return h.IsSelectAll() ? this._RunObject_FirstFilter(h) : this._RunObject_NextFilter(h)
        }* _DebugRunObject() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this._RunObject()
        }
        _EvaluateVaryingParameters(c) {
            const f = this._parameters,
                h = this._results;
            for(let g = 0, k = f.length; g < k; ++g) {
                const m = f[g];
                m.VariesPerInstance() && (h[g] = m.Get(c))
            }
        }
        _RunObject_FirstFilter(c) {
            const f = this._objectClass,
                h = f.IsFamily(),
                g = f.GetFamilyIndex(),
                k = this._behaviorIndex,
                m = 0 <= k,
                p = f.GetInstances(),
                x = this._anyParamVariesPerInstance,
                t = this._results,
                q = this._func,
                r = this._isInverted,
                y = this._isInOrBlock && !this._isTrigger;
            c.ClearArrays();
            for(let u = 0, A = p.length; u < A; ++u) {
                const z = p[u];
                x && this._EvaluateVaryingParameters(u);
                var v = void 0;
                m ? (v = h ? z.GetObjectClass().GetFamilyBehaviorOffset(g) : 0, v = q.apply(z.GetBehaviorInstances()[k + v].GetSdkInstance(), t)) : v = q.apply(z.GetSdkInstance(), t);
                e.xor(v, r) ? c._PushInstance(z) : y && c._PushElseInstance(z)
            }
            f.FinishCondition(!0);
            c._SetSelectAll(!1);
            f.ApplySolToContainer();
            return c.HasAnyInstances()
        }
        _RunObject_NextFilter(c) {
            const f = this._objectClass;
            var h = f.IsFamily();
            const g = f.GetFamilyIndex(),
                k = f.IsInContainer(),
                m = this._behaviorIndex,
                p = 0 <= m,
                x = this._anyParamVariesPerInstance,
                t = this._results,
                q = this._func,
                r = this._isInverted,
                y = this._isInOrBlock && !this._isTrigger,
                v = c._GetOwnInstances(),
                u = c._GetOwnElseInstances(),
                A = y && !this._eventBlock.IsFirstConditionOfType(this),
                z = A ? u : v;
            let C = 0,
                E = !1;
            for(let F = 0, H = z.length; F < H; ++F) {
                const K = z[F];
                x && this._EvaluateVaryingParameters(F);
                var J = void 0;
                p ? (J = h ? K.GetObjectClass().GetFamilyBehaviorOffset(g) : 0, J = q.apply(K.GetBehaviorInstances()[m + J].GetSdkInstance(), t)) : J = q.apply(K.GetSdkInstance(), t);
                e.xor(J, r) ? (E = !0, A ? (v.push(K), k && K._PushSiblingsToSolInstances()) : (z[C] = K, k && K._SetSiblingsToSolInstancesIndex(C), ++C)) : A ? (z[C] = K, k && K._SetSiblingsToSolElseInstancesIndex(C), ++C) : y && (u.push(K), k && K._PushSiblingsToSolElseInstances())
            }
            e.truncateArray(z, C);
            k && f._TruncateContainerSols(A, C);
            h = E;
            A && !E && (E = this._OrBlockCheckInstances(v));
            f.FinishCondition(h ||
                y);
            return y ? E : c.HasAnyInstances()
        }
        _OrBlockCheckInstances(c) {
            var f = this._objectClass;
            const h = f.IsFamily();
            f = f.GetFamilyIndex();
            const g = this._anyParamVariesPerInstance,
                k = this._behaviorIndex,
                m = 0 <= k,
                p = this._results,
                x = this._func,
                t = this._isInverted;
            for(let r = 0, y = c.length; r < y; ++r) {
                var q = c[r];
                g && this._EvaluateVaryingParameters(r);
                if(m) {
                    const v = h ? q.GetObjectClass().GetFamilyBehaviorOffset(f) : 0;
                    q = x.apply(q.GetBehaviorInstances()[k + v].GetSdkInstance(), p)
                } else q = x.apply(q.GetSdkInstance(), p);
                if(e.xor(q, t)) return !0
            }
            return !1
        }
        ReevaluateParameter(c,
            f) {
            return this._parameters[c].Get(f)
        }
        GetFastTriggerValue() {
            const c = this._parameters;
            if(!c.length) throw Error("no parameters");
            return c[0]._GetFastTriggerValue()
        }
        _SaveToJson() {
            if(!this._savedData || !this._savedData.size) return null;
            const c = {};
            for(const [f, h] of this._savedData.entries()) {
                let g = h;
                "collmemory" === f && (g = [...h.entries()].map(k => [k[0].GetUID(), k[1].GetUID(), k[2]]));
                c[f] = g
            }
            return {
                ex: c
            }
        }
        _LoadFromJson(c) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            if(c) {
                var f = this._runtime,
                    h = c.ex;
                if(h) {
                    c = this.GetSavedDataMap();
                    c.clear();
                    for(const [g, k] of Object.entries(h)) h = k, "collmemory" === g && (h = e.New(e.PairMap, k.map(m => [f.GetInstanceByUID(m[0]), f.GetInstanceByUID(m[1]), m[2]]).filter(m => m[0] && m[1]))), c.set(g, h)
                }
            }
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(f, h) {
        for(let g = 0, k = f.length; g < k; ++g) h[g] = f[g].Get(0)
    }
    const a = [],
        d = function() {},
        c = function*() {};
    e.Action = class extends e.DefendedBase {
        constructor(f, h, g) {
            super();
            this._eventBlock = f;
            this._runtime = f = f.GetRuntime();
            this._index = g;
            this._sid = 4 <= h.length ? h[3] : -1;
            this._actionReturnType = 5 <= h.length ? h[4] : 0;
            this._behaviorType = this._objectClass = this._func = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this._callFunctionName = "";
            this._combinedSolModifiers = this._callEventBlock =
                null;
            this.DebugRun = this.Run = d;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = !1;
            this._unsavedData = this._savedData = null;
            const k = (g = -3 === h[0]) ? h[2] : h[5];
            this._debugData = f.IsDebug() || g ? {
                isBreakpoint: k[0],
                canDebug: k[1],
                index: k[2]
            } : null; - 1 === h[0] ? (this._systemPlugin = f.GetSystemPlugin(), this._func = f.GetObjectReference(h[1])) : -2 === h[0] ? this._callFunctionName = h[1] : g ? (this._func = f.GetObjectReference(h[1]), this.Run = this.RunUserScript, this.DebugRun = this.DebugRunUserScript, this._actionReturnType =
                1) : (this._func = f.GetObjectReference(h[1]), this._objectClass = f.GetObjectClassByIndex(h[0]), h[2] && (this._behaviorType = this._objectClass.GetBehaviorTypeByName(h[2]), this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(h[2])));
            if(7 === h.length) {
                h = h[6];
                for(const m of h) this._parameters.push(e.Parameter.Create(this, m, this._parameters.length)), this._results.push(0)
            }
            0 === this._parameters.length && (this._results = this._parameters = a);
            this._eventBlock.GetEventSheetManager()._RegisterAction(this)
        }
        static Create(f,
            h, g) {
            return e.New(e.Action, f, h, g)
        }
        _PostInit() {
            for(var f of this._parameters) f._PostInit(), f.VariesPerInstance() && (this._anyParamVariesPerInstance = !0);
            if(this._systemPlugin) this._SetSystemRunMethod(), this.DebugRun = this._DebugRunSystem;
            else if(this._callFunctionName) this._SetCallFunctionRunMethod(), this._callFunctionName = "";
            else if(this.Run === this.RunUserScript) {
                f = this._func;
                const h = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this._eventBlock);
                this._func = f.bind(null, this._runtime.GetIRuntime(),
                    h)
            } else this._behaviorType ? this.IsAsync() ? (this.Run = this._RunBehavior_Async, this.DebugRun = this._DebugRunBehavior_Async) : (this.Run = this._RunBehavior, this.DebugRun = this._DebugRunBehavior) : this._objectClass.GetPlugin().IsSingleGlobal() ? (this._SetSingleGlobalRunMethod(), this.DebugRun = this._DebugRunSingleGlobal) : this.IsAsync() ? (this.Run = this._RunObject_Async, this.DebugRun = this._DebugRunObject_Async) : this._parameters.length ? this._parameters.every(h => h.VariesPerInstance()) ? (this.Run = this._RunObject_AllParamsVary,
                this.DebugRun = this._DebugRunObject_AllParamsVary) : this._anyParamVariesPerInstance ? (this.Run = this._RunObject_SomeParamsVary, this.DebugRun = this._DebugRunObject_SomeParamsVary) : this._parameters.every(h => h.IsConstant()) ? (b(this._parameters, this._results), this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst) : (this.Run = this._RunObject_ParamsDontVary, this.DebugRun = this._DebugRunObject_ParamsDontVary) : (this.Run = this._RunObject_ParamsConst, this.DebugRun = this._DebugRunObject_ParamsConst)
        }
        _SetSystemRunMethod() {
            this._SetRunMethodForBoundFunc(this._systemPlugin,
                this._systemPlugin, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const f = this._objectClass.GetPlugin(),
                h = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(f, h, this._RunSingleGlobal)
        }
        _SetCallFunctionRunMethod() {
            const f = this._eventBlock.GetEventSheetManager(),
                h = f.GetFunctionBlockByName(this._callFunctionName);
            h.IsEnabled() ? (this._callEventBlock = h.GetEventBlock(), this._combinedSolModifiers = [...new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents()])],
                this._combinedSolModifiers = f._DeduplicateSolModifierList(this._combinedSolModifiers), this.Run = e.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, this._combinedSolModifiers, this._parameters), this.DebugRun = this._DebugRunCallFunction) : (this.Run = d, this.DebugRun = c)
        }
        _SetRunMethodForBoundFunc(f, h, g) {
            const k = this._func,
                m = this._parameters;
            if(0 === m.length) this.Run = f._GetBoundACEMethod(k, h);
            else if(1 === m.length) {
                const p = m[0];
                if(p.IsConstant()) this.Run = f._GetBoundACEMethod_1param(k, h, p.Get(0));
                else {
                    const x = f._GetBoundACEMethod(k, h);
                    this.Run = function() {
                        return x(p.Get(0))
                    }
                }
            } else if(2 === m.length) {
                const p = m[0],
                    x = m[1];
                if(p.IsConstant() && x.IsConstant()) this.Run = f._GetBoundACEMethod_2params(k, h, p.Get(0), x.Get(0));
                else {
                    const t = f._GetBoundACEMethod(k, h);
                    this.Run = function() {
                        return t(p.Get(0), x.Get(0))
                    }
                }
            } else if(3 === m.length) {
                const p = m[0],
                    x = m[1],
                    t = m[2];
                if(p.IsConstant() && x.IsConstant() && t.IsConstant()) this.Run = f._GetBoundACEMethod_3params(k, h, p.Get(0), x.Get(0), t.Get(0));
                else {
                    const q = f._GetBoundACEMethod(k,
                        h);
                    this.Run = function() {
                        return q(p.Get(0), x.Get(0), t.Get(0))
                    }
                }
            } else this.Run = g
        }
        GetSID() {
            return this._sid
        }
        IsAsync() {
            return 1 === this._actionReturnType
        }
        CanBailOut() {
            return 2 === this._actionReturnType
        }
        HasReturnType() {
            return 0 !== this._actionReturnType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this._debugData.index
        }
        GetCombinedSolModifiers() {
            return this._combinedSolModifiers
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(f) {
            this._debugData.isBreakpoint = !!f;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        _RunSystem() {
            const f = this._results;
            b(this._parameters, f);
            return this._func.apply(this._systemPlugin, f)
        }* _DebugRunSystem() {
            if(this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                return yield* this._func.apply(this._systemPlugin, f)
            }
            return this.Run()
        }* _DebugRunCallFunction() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return yield* this._callEventBlock.DebugRunAsFunctionCall(this._combinedSolModifiers, this._parameters)
        }
        _RunSingleGlobal() {
            const f = this._results;
            b(this._parameters, f);
            return this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(),
                f)
        }* _DebugRunSingleGlobal() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                return yield* this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), f)
            }
            return this.Run()
        }
        _RunObject_ParamsConst() {
            const f = this._results,
                h = this._objectClass.GetCurrentSol().GetInstances();
            for(let g = 0, k = h.length; g < k; ++g) this._func.apply(h[g].GetSdkInstance(), f)
        }* _DebugRunObject_ParamsConst() {
            if(this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._results,
                    h = this._objectClass.GetCurrentSol().GetInstances();
                for(let g = 0, k = h.length; g < k; ++g) yield* this._func.apply(h[g].GetSdkInstance(), f)
            } else this._RunObject_ParamsConst()
        }
        _RunObject_ParamsDontVary() {
            const f = this._results;
            b(this._parameters, f);
            const h = this._objectClass.GetCurrentSol().GetInstances();
            for(let g = 0, k = h.length; g < k; ++g) this._func.apply(h[g].GetSdkInstance(), f)
        }* _DebugRunObject_ParamsDontVary() {
            if(this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._results;
                b(this._parameters, f);
                const h = this._objectClass.GetCurrentSol().GetInstances();
                for(let g = 0, k = h.length; g < k; ++g) yield* this._func.apply(h[g].GetSdkInstance(), f)
            } else this._RunObject_ParamsDontVary()
        }
        _RunObject_AllParamsVary() {
            const f = this._parameters,
                h = this._results,
                g = this._func,
                k = this._objectClass.GetCurrentSol().GetInstances();
            for(let m = 0, p = k.length; m < p; ++m) {
                const x = k[m];
                for(let t = 0, q = f.length; t < q; ++t) h[t] =
                    f[t].Get(m);
                g.apply(x.GetSdkInstance(), h)
            }
        }* _DebugRunObject_AllParamsVary() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._parameters,
                    h = this._results,
                    g = this._func,
                    k = this._objectClass.GetCurrentSol().GetInstances();
                for(let m = 0, p = k.length; m < p; ++m) {
                    const x = k[m];
                    for(let t = 0, q = f.length; t < q; ++t) h[t] = f[t].Get(m);
                    yield* g.apply(x.GetSdkInstance(), h)
                }
            } else this._RunObject_AllParamsVary()
        }
        _RunObject_SomeParamsVary() {
            const f = this._parameters,
                h = this._results,
                g = this._func,
                k = this._objectClass.GetCurrentSol().GetInstances();
            for(let p = 0, x = f.length; p < x; ++p) {
                var m = f[p];
                m.VariesPerInstance() || (h[p] = m.Get(0))
            }
            for(let p = 0, x = k.length; p < x; ++p) {
                m = k[p];
                for(let t = 0, q = f.length; t < q; ++t) {
                    const r = f[t];
                    r.VariesPerInstance() && (h[t] = r.Get(p))
                }
                g.apply(m.GetSdkInstance(), h)
            }
        }* _DebugRunObject_SomeParamsVary() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const h = this._parameters,
                    g = this._results,
                    k = this._func,
                    m = this._objectClass.GetCurrentSol().GetInstances();
                for(let p = 0, x = h.length; p < x; ++p) {
                    var f = h[p];
                    f.VariesPerInstance() || (g[p] = f.Get(0))
                }
                for(let p = 0, x = m.length; p < x; ++p) {
                    f = m[p];
                    for(let t = 0, q = h.length; t < q; ++t) {
                        const r = h[t];
                        r.VariesPerInstance() && (g[t] = r.Get(p))
                    }
                    yield* k.apply(f.GetSdkInstance(), g)
                }
            } else this._RunObject_SomeParamsVary()
        }
        _RunBehavior() {
            var f = this._objectClass;
            const h = f.IsFamily(),
                g = f.GetFamilyIndex(),
                k = this._parameters,
                m = this._anyParamVariesPerInstance,
                p = this._results,
                x = this._func,
                t = this._behaviorIndex;
            f = f.GetCurrentSol().GetInstances();
            for(let y = 0, v = k.length; y < v; ++y) {
                var q = k[y];
                q.VariesPerInstance() || (p[y] = q.Get(0))
            }
            for(let y = 0, v = f.length; y < v; ++y) {
                q = f[y];
                if(m)
                    for(let u = 0, A = k.length; u < A; ++u) {
                        var r = k[u];
                        r.VariesPerInstance() && (p[u] = r.Get(y))
                    }
                r = h ? q.GetObjectClass().GetFamilyBehaviorOffset(g) : 0;
                x.apply(q.GetBehaviorInstances()[t + r].GetSdkInstance(), p)
            }
        }* _DebugRunBehavior() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                var f = this._objectClass;
                const k =
                    f.IsFamily(),
                    m = f.GetFamilyIndex(),
                    p = this._parameters,
                    x = this._anyParamVariesPerInstance,
                    t = this._results,
                    q = this._func,
                    r = this._behaviorIndex;
                f = f.GetCurrentSol().GetInstances();
                for(let y = 0, v = p.length; y < v; ++y) {
                    var h = p[y];
                    h.VariesPerInstance() || (t[y] = h.Get(0))
                }
                for(let y = 0, v = f.length; y < v; ++y) {
                    h = f[y];
                    if(x)
                        for(let u = 0, A = p.length; u < A; ++u) {
                            var g = p[u];
                            g.VariesPerInstance() && (t[u] = g.Get(y))
                        }
                    g = k ? h.GetObjectClass().GetFamilyBehaviorOffset(m) : 0;
                    yield* q.apply(h.GetBehaviorInstances()[r + g].GetSdkInstance(), t)
                }
            } else this._RunBehavior()
        }
        _RunObject_Async() {
            const f =
                this._parameters,
                h = this._results,
                g = this._func,
                k = this._objectClass.GetCurrentSol().GetInstances(),
                m = [];
            for(let p = 0, x = k.length; p < x; ++p) {
                const t = k[p];
                for(let q = 0, r = f.length; q < r; ++q) h[q] = f[q].Get(p);
                m.push(g.apply(t.GetSdkInstance(), h))
            }
            return Promise.all(m)
        }* _DebugRunObject_Async() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                const f = this._parameters,
                    h = this._results,
                    g = this._func,
                    k = this._objectClass.GetCurrentSol().GetInstances(),
                    m = [];
                for(let p = 0,
                        x = k.length; p < x; ++p) {
                    const t = k[p];
                    for(let q = 0, r = f.length; q < r; ++q) h[q] = f[q].Get(p);
                    m.push(yield* g.apply(t.GetSdkInstance(), h))
                }
                return Promise.all(m)
            }
            return this._RunObject_Async()
        }
        _RunBehavior_Async() {
            var f = this._objectClass;
            const h = f.IsFamily(),
                g = f.GetFamilyIndex(),
                k = this._parameters,
                m = this._results,
                p = this._func,
                x = this._behaviorIndex;
            f = f.GetCurrentSol().GetInstances();
            const t = [];
            for(let q = 0, r = f.length; q < r; ++q) {
                const y = f[q];
                for(let u = 0, A = k.length; u < A; ++u) m[u] = k[u].Get(q);
                const v = h ? y.GetObjectClass().GetFamilyBehaviorOffset(g) :
                    0;
                t.push(p.apply(y.GetBehaviorInstances()[x + v].GetSdkInstance(), m))
            }
            return Promise.all(t)
        }* _DebugRunBehavior_Async() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if(this._DebugReturnsGenerator()) {
                var f = this._objectClass;
                const h = f.IsFamily(),
                    g = f.GetFamilyIndex(),
                    k = this._parameters,
                    m = this._results,
                    p = this._func,
                    x = this._behaviorIndex;
                f = f.GetCurrentSol().GetInstances();
                const t = [];
                for(let q = 0, r = f.length; q < r; ++q) {
                    const y = f[q];
                    for(let u = 0, A = k.length; u < A; ++u) m[u] = k[u].Get(q);
                    const v = h ?
                        y.GetObjectClass().GetFamilyBehaviorOffset(g) : 0;
                    t.push(yield* p.apply(y.GetBehaviorInstances()[x + v].GetSdkInstance(), m))
                }
                return Promise.all(t)
            }
            return this._RunBehavior_Async()
        }
        async RunUserScript() {
            try {
                await this._func()
            } catch (f) {
                console.error(`Unhandled exception running script %c${this._eventBlock.GetEventSheet().GetName()}, event ${this._eventBlock.GetDisplayNumber()}, action ${this.GetDebugIndex()+1}:`, "font-size: 1.2em; font-weight: bold;", f), self.C3Debugger && self.C3Debugger._SetLastErrorScript(this),
                    e.EventScript.HadUserScriptException() || (console.info("%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()", "font-weight: bold; text-decoration: underline", "", "font-weight: bold"), e.EventScript.SetHadUserScriptException())
            }
        }* DebugRunUserScript() {
            if(this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this.RunUserScript()
        }
        _SaveToJson() {
            return this._savedData && this._savedData.size ? {
                ex: e.ToSuperJSON(this._savedData)
            } : null
        }
        _LoadFromJson(f) {
            this._savedData &&
                (this._savedData.clear(), this._savedData = null);
            f && (f = f.ex) && (this._savedData = e.FromSuperJSON(f))
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Color;

    function a(O, Q) {
        return e.compare(this.GetWorldInfo().GetX(), O, Q)
    }

    function d(O, Q) {
        return e.compare(this.GetWorldInfo().GetY(), O, Q)
    }

    function c() {
        const O = this.GetWorldInfo();
        return O.IsInViewport(O.GetLayer().GetViewport(), O.GetLayout().HasVanishingPointOutsideViewport())
    }

    function f() {
        var O = this.GetWorldInfo();
        const Q = O.GetLayout();
        O = O.GetBoundingBox();
        return 0 > O.getRight() || 0 > O.getBottom() || O.getLeft() > Q.GetWidth() || O.getTop() > Q.GetHeight()
    }

    function h(O, Q,
        Y) {
        const ba = this.GetCurrentSol(),
            fa = ba.GetInstances();
        if(!fa.length) return !1;
        let ha = fa[0];
        var ea = ha.GetWorldInfo();
        let ua = ha,
            sa = e.distanceSquared(ea.GetX(), ea.GetY(), Q, Y);
        for(let xa = 1, Ha = fa.length; xa < Ha; ++xa)
            if(ha = fa[xa], ea = ha.GetWorldInfo(), ea = e.distanceSquared(ea.GetX(), ea.GetY(), Q, Y), 0 === O && ea < sa || 1 === O && ea > sa) sa = ea, ua = ha;
        ba.PickOne(ua);
        return !0
    }

    function g(O) {
        const Q = this.GetWorldInfo();
        Q.GetX() !== O && (Q.SetX(O), Q.SetBboxChanged())
    }

    function k(O) {
        const Q = this.GetWorldInfo();
        Q.GetY() !== O && (Q.SetY(O),
            Q.SetBboxChanged())
    }

    function m(O, Q) {
        const Y = this.GetWorldInfo();
        Y.EqualsXY(O, Q) || (Y.SetXY(O, Q), Y.SetBboxChanged())
    }

    function p(O, Q) {
        if(O && (O = O.GetPairedInstance(this._inst))) {
            var [Y, ba] = O.GetImagePoint(Q);
            Q = this.GetWorldInfo();
            if(Q.GetX() !== Y || Q.GetY() !== ba) Q.SetXY(Y, ba), Q.SetBboxChanged()
        }
    }

    function x(O) {
        if(0 !== O) {
            var Q = this.GetWorldInfo();
            Q.OffsetXY(Q.GetCosAngle() * O, Q.GetSinAngle() * O);
            Q.SetBboxChanged()
        }
    }

    function t(O, Q) {
        if(0 !== Q) {
            var Y = this.GetWorldInfo();
            O = e.toRadians(O);
            Y.OffsetXY(Math.cos(O) *
                Q, Math.sin(O) * Q);
            Y.SetBboxChanged()
        }
    }

    function q() {
        return this.GetWorldInfo().GetX()
    }

    function r() {
        return this.GetWorldInfo().GetY()
    }

    function y() {
        return this._runtime.GetDt(this._inst)
    }

    function v(O, Q) {
        return e.compare(this.GetWorldInfo().GetWidth(), O, Q)
    }

    function u(O, Q) {
        return e.compare(this.GetWorldInfo().GetHeight(), O, Q)
    }

    function A(O) {
        const Q = this.GetWorldInfo();
        Q.GetWidth() !== O && (Q.SetWidth(O), Q.SetBboxChanged())
    }

    function z(O) {
        const Q = this.GetWorldInfo();
        Q.GetHeight() !== O && (Q.SetHeight(O), Q.SetBboxChanged())
    }

    function C(O, Q) {
        const Y = this.GetWorldInfo();
        if(Y.GetWidth() !== O || Y.GetHeight() !== Q) Y.SetSize(O, Q), Y.SetBboxChanged()
    }

    function E() {
        return this.GetWorldInfo().GetWidth()
    }

    function J() {
        return this.GetWorldInfo().GetHeight()
    }

    function F() {
        return this.GetWorldInfo().GetBoundingBox().getLeft()
    }

    function H() {
        return this.GetWorldInfo().GetBoundingBox().getTop()
    }

    function K() {
        return this.GetWorldInfo().GetBoundingBox().getRight()
    }

    function N() {
        return this.GetWorldInfo().GetBoundingBox().getBottom()
    }

    function S(O,
        Q) {
        return e.angleDiff(this.GetWorldInfo().GetAngle(), e.toRadians(Q)) <= e.toRadians(O)
    }

    function V(O) {
        return e.angleClockwise(this.GetWorldInfo().GetAngle(), e.toRadians(O))
    }

    function U(O, Q) {
        O = e.toRadians(O);
        Q = e.toRadians(Q);
        const Y = this.GetWorldInfo().GetAngle();
        return e.angleClockwise(Q, O) ? e.angleClockwise(Y, O) && !e.angleClockwise(Y, Q) : !(!e.angleClockwise(Y, O) && e.angleClockwise(Y, Q))
    }

    function X(O) {
        const Q = this.GetWorldInfo();
        O = e.clampAngle(e.toRadians(O));
        isNaN(O) || Q.GetAngle() === O || (Q.SetAngle(O), Q.SetBboxChanged())
    }

    function ia(O) {
        if(!isNaN(O) && 0 !== O) {
            var Q = this.GetWorldInfo();
            Q.SetAngle(Q.GetAngle() + e.toRadians(O));
            Q.SetBboxChanged()
        }
    }

    function ka(O) {
        if(!isNaN(O) && 0 !== O) {
            var Q = this.GetWorldInfo();
            Q.SetAngle(Q.GetAngle() - e.toRadians(O));
            Q.SetBboxChanged()
        }
    }

    function ya(O, Q) {
        const Y = this.GetWorldInfo(),
            ba = Y.GetAngle();
        O = e.angleRotate(ba, e.toRadians(Q), e.toRadians(O));
        isNaN(O) || ba === O || (Y.SetAngle(O), Y.SetBboxChanged())
    }

    function ta(O, Q, Y) {
        const ba = this.GetWorldInfo(),
            fa = ba.GetAngle();
        Q -= ba.GetX();
        Y -= ba.GetY();
        O =
            e.angleRotate(fa, Math.atan2(Y, Q), e.toRadians(O));
        isNaN(O) || fa === O || (ba.SetAngle(O), ba.SetBboxChanged())
    }

    function Ba(O, Q) {
        const Y = this.GetWorldInfo(),
            ba = Y.GetAngle();
        O -= Y.GetX();
        Q -= Y.GetY();
        Q = Math.atan2(Q, O);
        isNaN(Q) || ba === Q || (Y.SetAngle(Q), Y.SetBboxChanged())
    }

    function Ea() {
        return e.toDegrees(this.GetWorldInfo().GetAngle())
    }

    function Ca(O, Q) {
        return e.compare(e.round6dp(100 * this.GetWorldInfo().GetOpacity()), O, Q)
    }

    function Aa() {
        return this.GetWorldInfo().IsVisible()
    }

    function ja(O) {
        const Q = this.GetWorldInfo();
        O = 2 === O ? !Q.IsVisible() : 0 !== O;
        Q.IsVisible() !== O && (Q.SetVisible(O), this._runtime.UpdateRender())
    }

    function Fa(O) {
        O = e.clamp(O / 100, 0, 1);
        const Q = this.GetWorldInfo();
        Q.GetOpacity() !== O && (Q.SetOpacity(O), this._runtime.UpdateRender())
    }

    function wa(O) {
        b.setFromRgbValue(O);
        O = this.GetWorldInfo();
        O.GetUnpremultipliedColor().equalsIgnoringAlpha(b) || (O.SetUnpremultipliedColor(b), this._runtime.UpdateRender())
    }

    function Da() {
        const O = this.GetWorldInfo().GetUnpremultipliedColor();
        return e.PackRGBAEx(O.getR(), O.getG(),
            O.getB(), O.getA())
    }

    function Pa() {
        return e.round6dp(100 * this.GetWorldInfo().GetOpacity())
    }

    function Qa(O) {
        return O ? this.GetWorldInfo().GetLayer() === O : !1
    }

    function Ra(O) {
        const Q = this.GetCurrentSol(),
            Y = Q.GetInstances();
        if(!Y.length) return !1;
        let ba = Y[0];
        for(let fa = 1, ha = Y.length; fa < ha; ++fa) {
            const ea = Y[fa],
                ua = ea.GetWorldInfo(),
                sa = ba.GetWorldInfo(),
                xa = ua.GetLayer().GetIndex(),
                Ha = sa.GetLayer().GetIndex();
            if(0 === O) {
                if(xa > Ha || xa === Ha && ua.GetZIndex() > sa.GetZIndex()) ba = ea
            } else if(xa < Ha || xa === Ha && ua.GetZIndex() <
                sa.GetZIndex()) ba = ea
        }
        Q.PickOne(ba);
        return !0
    }

    function Ja(O, Q, Y) {
        const ba = this.GetWorldInfo();
        O = 0 === O ? ba.GetZElevation() : ba.GetTotalZElevation();
        return e.compare(O, Q, Y)
    }

    function Sa() {
        this.GetWorldInfo().ZOrderMoveToTop()
    }

    function Ta() {
        this.GetWorldInfo().ZOrderMoveToBottom()
    }

    function Ua(O) {
        O && this.GetWorldInfo().ZOrderMoveToLayer(O)
    }

    function Va(O, Q) {
        O = 0 === O;
        Q && (Q = Q.GetFirstPicked(this.GetInstance())) && this.GetWorldInfo().ZOrderMoveAdjacentToInstance(Q, O)
    }

    function Wa(O) {
        const Q = this.GetWorldInfo();
        Q.GetZElevation() !==
            O && (Q.SetZElevation(O), this._runtime.UpdateRender())
    }

    function Xa() {
        return this.GetWorldInfo().GetLayer().GetIndex()
    }

    function Ya() {
        return this.GetWorldInfo().GetLayer().GetName()
    }

    function Ka() {
        return this.GetWorldInfo().GetZIndex()
    }

    function Za() {
        return this.GetWorldInfo().GetZElevation()
    }

    function $a() {
        return this.GetWorldInfo().GetTotalZElevation()
    }

    function ab(O, Q) {
        if(Q = this.GetObjectClass().GetEffectList().GetEffectTypeByName(Q)) {
            Q = Q.GetIndex();
            O = 1 === O;
            var Y = this.GetWorldInfo().GetInstanceEffectList();
            Y.IsEffectIndexActive(Q) !== O && (Y.SetEffectIndexActive(Q, O), Y.UpdateActiveEffects(), this._runtime.UpdateRender())
        }
    }

    function bb(O, Q, Y) {
        var ba = this.GetObjectClass().GetEffectList().GetEffectTypeByName(O);
        if(ba) {
            O = ba.GetIndex();
            var fa = this.GetWorldInfo().GetInstanceEffectList(),
                ha = fa.GetEffectParametersForIndex(O);
            Q = Math.floor(Q);
            if(!(0 > Q || Q >= ha.length)) {
                ba = ba.GetShaderProgram().GetParameterType(Q);
                if("color" === ba) {
                    b.setFromRgbValue(Y);
                    Q = ha[Q];
                    if(b.equalsIgnoringAlpha(Q)) return;
                    Q.copyRgb(b)
                } else {
                    "percent" ===
                    ba && (Y /= 100);
                    if(ha[Q] === Y) return;
                    ha[Q] = Y
                }
                fa.IsEffectIndexActive(O) && this._runtime.UpdateRender()
            }
        }
    }

    function cb() {
        return this.GetWorldInfo().HasParent()
    }

    function db() {
        return this.GetWorldInfo().HasChildren()
    }

    function eb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if(0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if(0 === fa.length) return !1;
        fa = new Set(fa);
        const ha = new Set;
        for(let ua = 0, sa = Y.length; ua < sa; ++ua) {
            var ea = Y[ua];
            if(1 === Q)
                for(const xa of ea.parents()) xa.BelongsToObjectClass(O) &&
                    fa.has(xa) && ha.add(xa);
            else {
                if(0 === Q) {
                    if(ea = ea.GetParent(), null === ea) continue
                } else ea = ea.GetTopParent();
                ea.BelongsToObjectClass(O) && fa.has(ea) && ha.add(ea)
            }
        }
        if(0 === ha.size) return !1;
        ba.SetSetPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function fb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if(0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if(ba.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(O)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if(0 === fa.length) return !1;
        fa = new Set(fa);
        ha = new Set;
        for(let ea = 0, ua = Y.length; ea < ua; ++ea) {
            const sa = Y[ea];
            2 === Q && !sa.HasChildren() && sa.BelongsToObjectClass(O) && fa.has(sa) && ha.add(sa);
            for(const xa of 0 === Q ? sa.children() : sa.allChildren()) 2 === Q && xa.HasChildren() || xa.BelongsToObjectClass(O) && fa.has(xa) && ha.add(xa)
        }
        if(0 === ha.size) return !1;
        ba.SetSetPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function gb(O, Q) {
        const Y = this.GetCurrentSol().GetInstances();
        if(0 === Y.length) return !1;
        const ba = O.GetCurrentSol();
        var fa = ba.GetInstances();
        if(ba.IsSelectAll()) {
            var ha = [...this._runtime.instancesPendingCreateForObjectClass(O)];
            0 < ha.length && (fa = fa.concat(ha))
        }
        if(0 === fa.length) return !1;
        fa = new Set(fa);
        ha = [];
        for(let ea = 0, ua = Y.length; ea < ua; ++ea) {
            const sa = Y[ea].GetChildAt(Q);
            null !== sa && sa.BelongsToObjectClass(O) && fa.has(sa) && ha.push(sa)
        }
        if(0 === ha.length) return !1;
        ba.SetArrayPicked(ha);
        O.ApplySolToContainer();
        return !0
    }

    function hb(O, Q) {
        return e.compare(this._inst.GetChildCount(), O, Q)
    }

    function ib(O, Q, Y, ba, fa, ha, ea, ua) {
        const sa = this._inst,
            xa = this._runtime.GetCurrentAction().GetObjectClass();
        for(const Ha of O.allCorrespondingInstances(sa, xa)) {
            if(!Ha.GetPlugin().SupportsSceneGraph()) break;
            sa.AddChild(Ha, {
                transformX: Q,
                transformY: Y,
                transformWidth: ba,
                transformHeight: fa,
                transformAngle: ha,
                transformZElevation: ea,
                destroyWithParent: ua
            })
        }
    }

    function jb(O) {
        const Q = this._inst,
            Y = this._runtime.GetCurrentAction().GetObjectClass();
        for(const ba of O.allCorrespondingInstances(Q, Y)) Q.RemoveChild(ba)
    }

    function na() {
        this._inst.HasParent() && this._inst.GetParent().RemoveChild(this._inst)
    }

    function Ga() {
        return this._inst.GetChildCount()
    }

    function kb(O, Q) {
        O = Math.floor(O);
        Q = Math.floor(Q);
        const Y = this.GetWorldInfo();
        2 > O || 2 > Q || !isFinite(O) || !isFinite(Q) ? (Y.ReleaseMesh(), Y.SetBboxChanged()) : Y.CreateMesh(O, Q)
    }

    function lb(O, Q, Y, ba, fa, ha, ea, ua) {
        const sa = this.GetWorldInfo();
        sa.SetMeshPoint(O, Q, {
            mode: 0 === Y ? "absolute" : "relative",
            x: ba,
            y: fa,
            zElevation: ha,
            u: ea,
            v: ua
        }) && sa.SetBboxChanged()
    }

    function mb() {
        const O = this.GetWorldInfo();
        return O.HasMesh() ? O.GetSourceMesh().GetHSize() : 0
    }

    function nb() {
        const O = this.GetWorldInfo();
        return O.HasMesh() ? O.GetSourceMesh().GetVSize() :
            0
    }

    function ob(O) {
        const Q = this.GetWorldInfo();
        O = 2 === O ? !Q.IsVisible() : 0 !== O;
        Q.IsVisible() !== O && Q.SetVisible(O)
    }

    function pb(O, Q) {
        this.SetElementCSSStyle(O, Q)
    }

    function La(O, Q) {
        this.SetElementAttribute(O, "" + Q)
    }

    function Ma(O) {
        this.RemoveElementAttribute(O)
    }

    function Na() {
        this.FocusElement()
    }

    function Oa() {
        this.BlurElement()
    }

    function Ia() {
        return this.IsElementFocused()
    }

    function l(O) {
        this._SetEnabled(0 !== O)
    }

    function n() {
        return this._IsEnabled()
    }

    function w(O, Q, Y) {
        return e.compare(this.GetInstance().GetInstanceVariableValue(O),
            Q, Y)
    }

    function B(O) {
        return !!this.GetInstance().GetInstanceVariableValue(O)
    }

    function D(O, Q) {
        const Y = this.GetCurrentSol(),
            ba = Y.GetInstances();
        if(!ba.length) return !1;
        let fa = ba[0],
            ha = fa,
            ea = fa.GetInstanceVariableValue(Q);
        for(let ua = 1, sa = ba.length; ua < sa; ++ua) {
            fa = ba[ua];
            const xa = fa.GetInstanceVariableValue(Q);
            if(0 === O && xa < ea || 1 === O && xa > ea) ea = xa, ha = fa
        }
        Y.PickOne(ha);
        return !0
    }

    function G(O) {
        return this._runtime.GetCurrentCondition().IsInverted() ? L(this, O) : I(this, O)
    }

    function I(O, Q) {
        Q = O.GetRuntime().GetInstanceByUID(Q);
        if(!Q) return !1;
        const Y = O.GetCurrentSol();
        if(!Y.IsSelectAll() && !Y._GetOwnInstances().includes(Q)) return !1;
        if(O.IsFamily()) {
            if(Q.GetObjectClass().BelongsToFamily(O)) return Y.PickOne(Q), O.ApplySolToContainer(), !0
        } else if(Q.GetObjectClass() === O) return Y.PickOne(Q), O.ApplySolToContainer(), !0;
        return !1
    }

    function L(O, Q) {
        const Y = O.GetCurrentSol();
        if(Y.IsSelectAll()) {
            Y._SetSelectAll(!1);
            Y.ClearArrays();
            var ba = O.GetInstances();
            for(let ha = 0, ea = ba.length; ha < ea; ++ha) {
                var fa = ba[ha];
                fa.GetUID() === Q ? Y._PushElseInstance(fa) :
                    Y._PushInstance(fa)
            }
            O.ApplySolToContainer();
            return !!Y._GetOwnInstances().length
        }
        ba = Y._GetOwnInstances();
        fa = 0;
        for(let ha = 0, ea = ba.length; ha < ea; ++ha) {
            const ua = ba[ha];
            ba[fa] = ua;
            ua.GetUID() === Q ? Y._PushElseInstance(ua) : ++fa
        }
        e.truncateArray(ba, fa);
        O.ApplySolToContainer();
        return !!ba.length
    }

    function M() {
        this._runtime.DestroyInstance(this._inst)
    }

    function P() {
        return !0
    }

    function R() {
        return !0
    }

    function T(O, Q) {
        this.GetInstance().SetInstanceVariableValue(O, Q)
    }

    function Z(O, Q) {
        const Y = this.GetInstance(),
            ba = Y.GetInstanceVariableValue(O);
        "number" === typeof ba && "number" !== typeof Q ? Q = parseFloat(Q) : "string" === typeof ba && "string" !== typeof Q && (Q = Q.toString());
        Y.SetInstanceVariableValue(O, ba + Q)
    }

    function W(O, Q) {
        const Y = this.GetInstance(),
            ba = Y.GetInstanceVariableValue(O);
        "number" === typeof ba && ("number" !== typeof Q && (Q = parseFloat(Q)), Y.SetInstanceVariableValue(O, ba - Q))
    }

    function da(O, Q) {
        this.GetInstance().SetInstanceVariableValue(O, Q ? 1 : 0)
    }

    function ca(O) {
        const Q = this.GetInstance();
        Q.SetInstanceVariableValue(O, 0 === Q.GetInstanceVariableValue(O) ?
            1 : 0)
    }

    function aa(O) {
        let Q;
        try {
            Q = JSON.parse(O)
        } catch (Y) {
            console.error("Failed to load from JSON string: ", Y);
            return
        }
        O = this.GetInstance();
        O._OnBeforeLoad("state");
        O.LoadFromJson(Q, "state")
    }

    function ra() {
        return JSON.stringify(this.GetInstance().SaveToJson("state"))
    }

    function ma() {
        return this.GetInstance().GetObjectClass().GetName()
    }

    function pa() {
        const O = this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass();
        let Q = O.GetInstanceCount();
        for(const Y of this._runtime.instancesPendingCreateForObjectClass(O)) ++Q;
        return Q
    }

    function qa() {
        return this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass().GetCurrentSol().GetInstances().length
    }

    function oa() {
        return this._inst.GetIID()
    }

    function za() {
        return this._inst.GetUID()
    }
    e.AddCommonACEs = function(O, Q) {
        const Y = O[1],
            ba = O[4],
            fa = O[5],
            ha = O[6],
            ea = O[7],
            ua = O[8],
            sa = O[10],
            xa = O[11],
            Ha = O[12],
            qb = O[13],
            rb = O[14],
            va = Q.Cnds,
            la = Q.Acts;
        Q = Q.Exps;
        O[3] && (va.CompareX = a, va.CompareY = d, va.IsOnScreen = c, va.IsOutsideLayout = f, va.PickDistance = h, la.SetX = g, la.SetY = k, la.SetPos = m, la.SetPosToObject =
            p, la.MoveForward = x, la.MoveAtAngle = t, Q.X = q, Q.Y = r, Q.dt = y);
        ba && (va.CompareWidth = v, va.CompareHeight = u, la.SetWidth = A, la.SetHeight = z, la.SetSize = C, Q.Width = E, Q.Height = J, Q.BBoxLeft = F, Q.BBoxTop = H, Q.BBoxRight = K, Q.BBoxBottom = N);
        fa && (va.AngleWithin = S, va.IsClockwiseFrom = V, va.IsBetweenAngles = U, la.SetAngle = X, la.RotateClockwise = ia, la.RotateCounterclockwise = ka, la.RotateTowardAngle = ya, la.RotateTowardPosition = ta, la.SetTowardPosition = Ba, Q.Angle = Ea);
        ha && (va.IsVisible = Aa, va.CompareOpacity = Ca, la.SetVisible = ja, la.SetOpacity =
            Fa, la.SetDefaultColor = wa, Q.Opacity = Pa, Q.ColorValue = Da);
        ea && (va.IsOnLayer = Qa, va.PickTopBottom = Ra, va.CompareZElevation = Ja, la.MoveToTop = Sa, la.MoveToBottom = Ta, la.MoveToLayer = Ua, la.ZMoveToObject = Va, la.SetZElevation = Wa, Q.LayerNumber = Xa, Q.LayerName = Ya, Q.ZIndex = Ka, Q.ZElevation = Za, Q.TotalZElevation = $a);
        ua && (la.SetEffectEnabled = ab, la.SetEffectParam = bb);
        qb && (va.HasParent = cb, va.HasChildren = db, va.PickParent = eb, va.PickChildren = fb, va.PickNthChild = gb, va.CompareChildCount = hb, la.AddChild = ib, la.RemoveChild = jb, la.RemoveFromParent =
            na, Q.ChildCount = Ga);
        rb && (la.SetMeshSize = kb, la.SetMeshPoint = lb, Q.MeshColumns = mb, Q.MeshRows = nb);
        sa && (va.IsVisible = Aa, la.SetVisible = ob, la.SetCSSStyle = pb, la.SetElemAttribute = La, la.RemoveElemAttribute = Ma);
        xa && (va.IsFocused = Ia, la.SetFocus = Na, la.SetBlur = Oa);
        Ha && (va.IsEnabled = n, la.SetEnabled = l);
        Y || (va.CompareInstanceVar = w, va.IsBoolInstanceVarSet = B, va.PickInstVarHiLow = D, va.PickByUID = G, la.SetInstanceVar = T, la.AddInstanceVar = Z, la.SubInstanceVar = W, la.SetBoolInstanceVar = da, la.ToggleBoolInstanceVar = ca, va.OnCreated =
            P, va.OnDestroyed = R, la.Destroy = M, la.LoadFromJsonString || (la.LoadFromJsonString = aa), Q.AsJSON || (Q.AsJSON = ra), Q.Count = pa, Q.PickedCount = qa, Q.IID = oa, Q.UID = za, Q.ObjectTypeName = ma)
    }
} {
    "use strict";
    const e = self.C3;
    e.ScheduledWait = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._eventSheetManager = b;
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._isSignalled = !1;
            this._event = null;
            this._actIndex = 0;
            this._solModifiers = [];
            this._sols = new Map;
            this._callingFunctionBlock = null;
            this._asyncId = -1;
            this._functionInnerLocalVars = this._functionParameters = null;
            this._shouldRelease = !1
        }
        Release() {
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._functionInnerLocalVars = this._functionParameters =
                this._callingFunctionBlock = this._event = null;
            this._asyncId = -1;
            e.clearArray(this._solModifiers);
            for(const b of this._sols.values()) b.Release();
            this._sols.clear()
        }
        _Init() {
            var b = this._eventSheetManager,
                a = b.GetRuntime().GetAllObjectClasses();
            const d = b.GetCurrentEventStackFrame();
            this._event = d.GetCurrentEvent();
            this._actIndex = d.GetActionIndex() + 1;
            if(b = b.FindFirstFunctionBlockParent(this._event)) this._callingFunctionBlock = b, this._functionParameters = b.CaptureFunctionParameters(), this._functionInnerLocalVars =
                b._GetAllInnerLocalVariables().map(c => c.GetValue()), b.IsAsync() && (this._asyncId = b.PauseCurrentAsyncFunction());
            for(const c of a)
                if(a = c.GetCurrentSol(), !a.IsSelectAll() || this._event.HasSolModifier(c)) this._solModifiers.push(c), this._sols.set(c, e.New(e.SolState, a))
        }
        InitTimer(b) {
            this._type = "timer";
            this._Init();
            this._time = this._eventSheetManager.GetRuntime().GetGameTime() + b
        }
        InitSignal(b) {
            this._type = "signal";
            this._Init();
            this._signalTag = b.toLowerCase()
        }
        InitPromise(b) {
            this._type = "promise";
            this._Init();
            b.then(() => this.SetSignalled()).catch(a => {
                console.warn("[C3 runtime] Promise rejected in 'Wait for previous actions to complete': ", a);
                this.SetSignalled()
            })
        }
        IsTimer() {
            return "timer" === this._type
        }
        IsSignal() {
            return "signal" === this._type
        }
        IsPromise() {
            return "promise" === this._type
        }
        GetSignalTag() {
            return this._signalTag
        }
        IsSignalled() {
            return this._isSignalled
        }
        SetSignalled() {
            this._isSignalled = !0
        }
        _ShouldRun() {
            return this.IsTimer() ? this._time <= this._eventSheetManager.GetRuntime().GetGameTime() : this.IsSignalled()
        }
        _RestoreState(b) {
            b._Restore(this._event,
                this._actIndex);
            for(const [a, d] of this._sols.entries()) b = a.GetCurrentSol(), d._Restore(b);
            if(b = this._callingFunctionBlock) b.SetFunctionParameters(this._functionParameters), b._GetAllInnerLocalVariables().map((a, d) => a.SetValue(this._functionInnerLocalVars[d])), b.IsAsync() && b.ResumeAsyncFunction(this._asyncId)
        }
        _Run(b) {
            this._RestoreState(b);
            this._event._ResumeActionsAndSubEvents(b);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        async _DebugRun(b) {
            this._RestoreState(b);
            for(const a of this._event._DebugResumeActionsAndSubEvents(b)) await this._eventSheetManager.GetRuntime().DebugBreak(a);
            this._callingFunctionBlock && this._callingFunctionBlock.IsAsync() && this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = !0
        }
        ShouldRelease() {
            return this._shouldRelease
        }
        RemoveInstances(b) {
            for(const a of this._sols.values()) a.RemoveInstances(b)
        }
        _SaveToJson() {
            const b = {},
                a = {
                    t: this._time,
                    st: this._signalTag,
                    s: this._isSignalled,
                    ev: this._event.GetSID(),
                    sm: this._solModifiers.map(d => d.GetSID()),
                    sols: b
                };
            this._event._HasActionIndex(this._actIndex) && (a.act = this._event.GetActionAt(this._actIndex).GetSID());
            for(const [d, c] of this._sols) b[d.GetSID().toString()] = c._SaveToJson();
            return a
        }
        static _CreateFromJson(b, a) {
            const d = b.GetRuntime();
            var c = b.GetEventBlockBySID(a.ev);
            if(!c) return null;
            let f = 0;
            if(a.hasOwnProperty("act")) {
                var h = b.GetActionBySID(a.act);
                if(!h) return null;
                f = h.GetIndex()
            }
            h =
                e.New(e.ScheduledWait, b);
            h._time = a.t;
            h._type = -1 === h._time ? "signal" : "timer";
            h._signalTag = a.st;
            h._isSignalled = a.s;
            h._event = c;
            h._actIndex = f;
            for(var g of a.sm)(c = d.GetObjectClassBySID(g)) && h._solModifiers.push(c);
            for(const [k, m] of Object.entries(a.sols))
                if(a = parseInt(k, 10), a = d.GetObjectClassBySID(a)) g = e.New(e.SolState, null), g._LoadFromJson(b, m), h._sols.set(a, g);
            return h
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SolState = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = null;
            this._isSelectAll = !0;
            this._instances = [];
            b && (this._objectClass = b.GetObjectClass(), this._isSelectAll = b.IsSelectAll(), e.shallowAssignArray(this._instances, b._GetOwnInstances()))
        }
        Release() {
            this._objectClass = null;
            e.clearArray(this._instances)
        }
        _Restore(b) {
            b._SetSelectAll(this._isSelectAll);
            e.shallowAssignArray(b._GetOwnInstances(), this._instances)
        }
        RemoveInstances(b) {
            e.arrayRemoveAllInSet(this._instances,
                b)
        }
        _SaveToJson() {
            return {
                sa: this._isSelectAll,
                insts: this._instances.map(b => b.GetUID())
            }
        }
        _LoadFromJson(b, a) {
            b = b.GetRuntime();
            this._isSelectAll = !!a.sa;
            e.clearArray(this._instances);
            for(const d of a.insts)(a = b.GetInstanceByUID(d)) && this._instances.push(a)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        let c = a.get(d);
        c || (c = new Map, a.set(d, c));
        return c
    }
    e.SDKPluginBase = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._isSingleGlobal = !!a.isSingleGlobal;
            this._isWorldType = !!a.isWorld;
            this._isRotatable = !!a.isRotatable;
            this._mustPredraw = !!a.mustPredraw;
            this._hasEffects = !!a.hasEffects;
            this._supportsSceneGraph = !!a.supportsSceneGraph;
            this._supportsMesh = !!a.supportsMesh;
            this._singleGlobalObjectClass = null;
            this._boundACEMethodCache =
                new Map;
            this._boundACEMethodCache_1param = new Map;
            this._boundACEMethodCache_2params = new Map;
            this._boundACEMethodCache_3params = new Map
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        IsSingleGlobal() {
            return this._isSingleGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        IsRotatable() {
            return this._isRotatable
        }
        MustPreDraw() {
            return this._mustPredraw
        }
        HasEffects() {
            return this._hasEffects
        }
        SupportsSceneGraph() {
            return this._supportsSceneGraph
        }
        SupportsMesh() {
            return this._supportsMesh
        }
        _GetBoundACEMethod(a,
            d) {
            if(!d) throw Error("missing 'this' binding");
            let c = this._boundACEMethodCache.get(a);
            if(c) return c;
            c = a.bind(d);
            this._boundACEMethodCache.set(a, c);
            return c
        }
        _GetBoundACEMethod_1param(a, d, c) {
            if(!d) throw Error("missing 'this' binding");
            const f = b(this._boundACEMethodCache_1param, a);
            let h = f.get(c);
            if(h) return h;
            h = a.bind(d, c);
            f.set(c, h);
            return h
        }
        _GetBoundACEMethod_2params(a, d, c, f) {
            if(!d) throw Error("missing 'this' binding");
            var h = b(this._boundACEMethodCache_2params, a);
            h = b(h, c);
            let g = h.get(f);
            if(g) return g;
            g = a.bind(d, c, f);
            h.set(f, g);
            return g
        }
        _GetBoundACEMethod_3params(a, d, c, f, h) {
            if(!d) throw Error("missing 'this' binding");
            var g = b(this._boundACEMethodCache_3params, a);
            g = b(g, c);
            g = b(g, f);
            let k = g.get(h);
            if(k) return k;
            k = a.bind(d, c, f, h);
            g.set(h, k);
            return k
        }
        _SetSingleGlobalObjectClass(a) {
            if(!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            this._singleGlobalObjectClass = a
        }
        GetSingleGlobalObjectClass() {
            if(!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass
        }
        GetSingleGlobalInstance() {
            if(!this.IsSingleGlobal()) throw Error("must be single-global plugin");
            return this._singleGlobalObjectClass.GetSingleGlobalInstance()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKDOMPluginBase = class extends e.SDKPluginBase {
        constructor(b, a) {
            super(b);
            this._domComponentId = a;
            this._nextElementId = 0;
            this._instMap = new Map;
            this.AddElementMessageHandler("elem-focused", d => d._OnElemFocused());
            this.AddElementMessageHandler("elem-blurred", d => {
                d && d._OnElemBlurred()
            })
        }
        Release() {
            super.Release()
        }
        _AddElement(b) {
            const a = this._nextElementId++;
            this._instMap.set(a, b);
            return a
        }
        _RemoveElement(b) {
            this._instMap.delete(b)
        }
        AddElementMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, d => {
                    const c = this._instMap.get(d.elementId);
                    a(c, d)
                })
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKTypeBase = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetImageInfo() {
            return this._objectClass.GetImageInfo()
        }
        FinishCondition(b) {}
        LoadTextures(b) {}
        ReleaseTextures() {}
        OnDynamicTextureLoadComplete() {}
        PreloadTexturesWithInstances(b) {}
        LoadTilemapData() {}
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKInstanceBase = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._domComponentId = a;
            this._runtime = b.GetRuntime();
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._tick2Func = this._tickFunc = null;
            this._isTicking2 = this._isTicking = !1;
            this._disposables = null;
            this._wasReleased = !1
        }
        Release() {
            this._wasReleased = !0;
            this._StopTicking();
            this._StopTicking2();
            this._tick2Func = this._tickFunc = null;
            this._disposables &&
                (this._disposables.Release(), this._disposables = null);
            this._sdkType = this._objectClass = this._runtime = this._inst = null
        }
        WasReleased() {
            return this._wasReleased
        }
        GetInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetPlugin() {
            return this._sdkType.GetPlugin()
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._inst.GetInterfaceClass()
        }
        Trigger(b) {
            return this._runtime.Trigger(b, this._inst, null)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b,
                this._inst, null)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, null)
        }
        FastTrigger(b, a) {
            return this._runtime.FastTrigger(b, this._inst, a)
        }
        DebugFastTrigger(b, a) {
            return this._runtime.DebugFastTrigger(b, this._inst, a)
        }
        ScheduleTriggers(b) {
            return this._runtime.ScheduleTriggers(b)
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, b, a)
        }
        AddDOMMessageHandlers(b) {
            for(const [a, d] of b) this.AddDOMMessageHandler(a, d)
        }
        PostToDOM(b, a) {
            this._runtime.PostComponentMessageToDOM(this._domComponentId,
                b, a)
        }
        PostToDOMAsync(b, a) {
            return this._runtime.PostComponentMessageToDOMAsync(this._domComponentId, b, a)
        }
        _PostToDOMMaybeSync(b, a) {
            if(this._runtime.IsInWorker()) this.PostToDOM(b, a);
            else return window.c3_runtimeInterface._OnMessageFromRuntime({
                type: "event",
                component: this._domComponentId,
                handler: b,
                data: a,
                responseId: null
            })
        }
        Tick() {}
        Tick2() {}
        _StartTicking() {
            this._isTicking || (this._tickFunc || (this._tickFunc = () => this.Tick()), this._runtime.Dispatcher().addEventListener("tick", this._tickFunc), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime.Dispatcher().removeEventListener("tick", this._tickFunc), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._tick2Func || (this._tick2Func = () => this.Tick2()), this._runtime.Dispatcher().addEventListener("tick2", this._tick2Func), this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime.Dispatcher().removeEventListener("tick2", this._tick2Func), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        GetDebuggerProperties() {
            return []
        }
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b,
            a) {}
        OffsetPropertyValueByIndex(b, a) {
            if(0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKWorldInstanceBase = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, a);
            this._worldInfo = b.GetWorldInfo();
            this._webglcontextrestored_handler = this._webglcontextlost_handler = null
        }
        Release() {
            if(this._webglcontextlost_handler) {
                const b = this._runtime.Dispatcher();
                b.removeEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.removeEventListener("webglcontextrestored", this._webglcontextrestored_handler);
                this._webglcontextrestored_handler = this._webglcontextlost_handler =
                    null
            }
            this._worldInfo = null;
            super.Release()
        }
        HandleWebGLContextLoss() {
            if(!this._webglcontextlost_handler) {
                this._webglcontextlost_handler = () => this.OnWebGLContextLost();
                this._webglcontextrestored_handler = () => this.OnWebGLContextRestored();
                var b = this._runtime.Dispatcher();
                b.addEventListener("webglcontextlost", this._webglcontextlost_handler);
                b.addEventListener("webglcontextrestored", this._webglcontextrestored_handler)
            }
        }
        OnWebGLContextLost() {}
        OnWebGLContextRestored() {}
        GetWorldInfo() {
            return this._worldInfo
        }
        IsOriginalSizeKnown() {
            return !1
        }
        GetOriginalWidth() {
            if(!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if(b) return b.GetWidth()
        }
        GetOriginalHeight() {
            if(!this.IsOriginalSizeKnown()) throw Error("original size not known");
            const b = this.GetCurrentImageInfo();
            if(b) return b.GetHeight()
        }
        GetCurrentImageInfo() {
            return null
        }
        GetCurrentSurfaceSize() {
            var b = this.GetCurrentImageInfo();
            return b && (b = b.GetTexture()) ? [b.GetWidth(), b.GetHeight()] : [100, 100]
        }
        GetCurrentTexRect() {
            const b = this.GetCurrentImageInfo();
            return b ? b.GetTexRect() : null
        }
        GetImagePoint(b) {
            b = this._inst.GetWorldInfo();
            return [b.GetX(),
                b.GetY()
            ]
        }
        LoadTilemapData(b, a, d) {}
        TestPointOverlapTile(b, a) {}
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect);
    e.SDKDOMInstanceBase = class extends e.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a, d);
            this._elementId = this.GetPlugin()._AddElement(this);
            this._isElementShowing = !0;
            this._autoFontSize = this._elemHasFocus = !1;
            this._lastRect = e.New(e.Rect, 0, 0, -1, -1);
            a = this._runtime.GetCanvasManager();
            this._lastWindowWidth = a.GetLastWidth();
            this._lastWindowHeight = a.GetLastHeight();
            this._isPendingUpdateState = !1;
            this._StartTicking()
        }
        Release() {
            this.GetPlugin()._RemoveElement(this._elementId);
            this.PostToDOMElement("destroy");
            this._elementId = -1;
            super.Release()
        }
        _GetElementInDOMMode() {
            if(this._runtime.IsInWorker()) throw Error("not valid in worker mode");
            return this._PostToDOMElementMaybeSync("get-element")
        }
        PostToDOMElement(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            this.PostToDOM(a, d)
        }
        _PostToDOMElementMaybeSync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this._PostToDOMMaybeSync(a, d)
        }
        PostToDOMElementAsync(a, d) {
            d || (d = {});
            d.elementId = this._elementId;
            return this.PostToDOMAsync(a, d)
        }
        CreateElement(a) {
            a || (a = {});
            const d =
                this.GetWorldInfo().IsVisible();
            a.elementId = this._elementId;
            a.isVisible = d;
            Object.assign(a, this.GetElementState());
            this._isElementShowing = !!a.isVisible;
            this._PostToDOMMaybeSync("create", a);
            this._UpdatePosition(!0)
        }
        SetElementVisible(a) {
            a = !!a;
            this._isElementShowing !== a && (this._isElementShowing = a, this.PostToDOMElement("set-visible", {
                isVisible: a
            }))
        }
        Tick() {
            this._UpdatePosition(!1)
        }
        _ShouldPreserveElement() {
            const a = this._runtime.GetCanvasManager().GetFullscreenMode();
            return "Android" === e.Platform.OS && ("scale-inner" ===
                a || "scale-outer" === a || "crop" === a)
        }
        _UpdatePosition(a) {
            var d = this.GetWorldInfo();
            const c = d.GetLayer();
            var f = d.GetX(),
                h = d.GetY();
            let [g, k] = c.LayerToCanvasCss(f, h), [m, p] = c.LayerToCanvasCss(f + d.GetWidth(), h + d.GetHeight());
            f = this._runtime.GetCanvasManager();
            h = f.GetCssWidth();
            const x = f.GetCssHeight();
            if(d.IsVisible() && c.IsVisible()) {
                if(!this._ShouldPreserveElement()) {
                    if(0 >= m || 0 >= p || g >= h || k >= x) {
                        this.SetElementVisible(!1);
                        return
                    }
                    1 > g && (g = 1);
                    1 > k && (k = 1);
                    m >= h && (m = h - 1);
                    p >= x && (p = x - 1)
                }
                b.set(g, k, m, p);
                d = f.GetLastWidth();
                h = f.GetLastHeight();
                !a && b.equals(this._lastRect) && this._lastWindowWidth === d && this._lastWindowHeight === h ? this.SetElementVisible(!0) : (this._lastRect.copy(b), this._lastWindowWidth = d, this._lastWindowHeight = h, this.SetElementVisible(!0), a = null, this._autoFontSize && (a = c.GetDisplayScale() - .2), this.PostToDOMElement("update-position", {
                    left: Math.round(this._lastRect.getLeft()) + f.GetCanvasClientX(),
                    top: Math.round(this._lastRect.getTop()) + f.GetCanvasClientY(),
                    width: Math.round(this._lastRect.width()),
                    height: Math.round(this._lastRect.height()),
                    fontSize: a
                }))
            } else this.SetElementVisible(!1)
        }
        FocusElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !0
            })
        }
        BlurElement() {
            this._PostToDOMElementMaybeSync("focus", {
                focus: !1
            })
        }
        _OnElemFocused() {
            this._elemHasFocus = !0
        }
        _OnElemBlurred() {
            this._elemHasFocus = !1
        }
        IsElementFocused() {
            return this._elemHasFocus
        }
        SetElementCSSStyle(a, d) {
            this.PostToDOMElement("set-css-style", {
                prop: e.CSSToCamelCase(a),
                val: d
            })
        }
        SetElementAttribute(a, d) {
            this.PostToDOMElement("set-attribute", {
                name: a,
                val: d
            })
        }
        RemoveElementAttribute(a) {
            this.PostToDOMElement("remove-attribute", {
                name: a
            })
        }
        UpdateElementState() {
            this._isPendingUpdateState || (this._isPendingUpdateState = !0, Promise.resolve().then(() => {
                this._isPendingUpdateState = !1;
                this.PostToDOMElement("update-state", this.GetElementState())
            }))
        }
        GetElementState() {}
        GetElementId() {
            return this._elementId
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.IBehavior;
    e.SDKBehaviorBase = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._myObjectClasses = e.New(e.ArraySet);
            this._myInstances = e.New(e.ArraySet);
            this._iBehavior = null;
            this._scriptInterfaceClass = a.scriptInterfaceClass || null
        }
        Release() {
            this._myInstances.Release();
            this._myObjectClasses.Release();
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        _AddObjectClass(a) {
            this._myObjectClasses.Add(a)
        }
        GetObjectClasses() {
            return this._myObjectClasses.GetArray()
        }
        _AddInstance(a) {
            this._myInstances.Add(a)
        }
        _RemoveInstance(a) {
            this._myInstances.Delete(a)
        }
        GetInstances() {
            return this._myInstances.GetArray()
        }
        GetIBehavior() {
            if(null ===
                this._iBehavior) {
                const a = this._scriptInterfaceClass;
                if(a) {
                    if(this._iBehavior = new a(this), !(this._iBehavior instanceof b)) throw new TypeError("script interface class must derive from IBehavior");
                } else this._iBehavior = new b(this)
            }
            return this._iBehavior
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKBehaviorTypeBase = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b.GetRuntime();
            this._behaviorType = b;
            this._objectClass = b.GetObjectClass();
            this._behavior = b.GetBehavior();
            this._behavior._AddObjectClass(this._objectClass)
        }
        Release() {
            this._behavior = this._objectClass = this._behaviorType = this._runtime = null
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehavior() {
            return this._behavior
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SDKBehaviorInstanceBase = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._behInst = b;
            this._domComponentId = a;
            this._inst = b.GetObjectInstance();
            this._runtime = b.GetRuntime();
            this._behaviorType = b.GetBehaviorType();
            this._sdkType = this._behaviorType.GetSdkType();
            this._isPostTicking = this._isTicking2 = this._isTicking = !1;
            this._disposables = null
        }
        Release() {
            this._StopTicking();
            this._StopTicking2();
            this._StopPostTicking();
            this._disposables && (this._disposables.Release(), this._disposables =
                null);
            this._sdkType = this._behaviorType = this._runtime = this._inst = this._behInst = null
        }
        GetBehavior() {
            return this._behaviorType.GetBehavior()
        }
        GetBehaviorInstance() {
            return this._behInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetObjectClass() {
            return this._inst.GetObjectClass()
        }
        GetWorldInfo() {
            return this._inst.GetWorldInfo()
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._behInst.GetScriptInterface()
        }
        Trigger(b) {
            return this._runtime.Trigger(b,
                this._inst, this._behaviorType)
        }
        DebugTrigger(b) {
            return this._runtime.DebugTrigger(b, this._inst, this._behaviorType)
        }
        TriggerAsync(b) {
            return this._runtime.TriggerAsync(b, this._inst, this._behaviorType)
        }
        PostCreate() {}
        Tick() {}
        Tick2() {}
        PostTick() {}
        _StartTicking() {
            this._isTicking || (this._runtime._AddBehInstToTick(this), this._isTicking = !0)
        }
        _StopTicking() {
            this._isTicking && (this._runtime._RemoveBehInstToTick(this), this._isTicking = !1)
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            this._isTicking2 || (this._runtime._AddBehInstToTick2(this),
                this._isTicking2 = !0)
        }
        _StopTicking2() {
            this._isTicking2 && (this._runtime._RemoveBehInstToTick2(this), this._isTicking2 = !1)
        }
        IsTicking2() {
            return this._isTicking2
        }
        _StartPostTicking() {
            this._isPostTicking || (this._runtime._AddBehInstToPostTick(this), this._isPostTicking = !0)
        }
        _StopPostTicking() {
            this._isPostTicking && (this._runtime._RemoveBehInstToPostTick(this), this._isPostTicking = !1)
        }
        IsPostTicking() {
            return this._isPostTicking
        }
        GetDebuggerProperties() {
            return []
        }
        AddDOMMessageHandler(b, a) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                b, a)
        }
        OnSpriteFrameChanged(b, a) {}
        SaveToJson() {
            return null
        }
        LoadFromJson(b) {}
        GetPropertyValueByIndex(b) {}
        SetPropertyValueByIndex(b, a) {}
        OffsetPropertyValueByIndex(b, a) {
            if(0 !== a) {
                var d = this.GetPropertyValueByIndex(b);
                if("number" !== typeof d) throw Error("expected number");
                this.SetPropertyValueByIndex(b, d + a)
            }
        }
        SetPropertyColorOffsetValueByIndex(b, a, d, c) {}
        CallAction(b, ...a) {
            b.call(this, ...a)
        }
        CallExpression(b, ...a) {
            return b.call(this, ...a)
        }
        GetScriptInterfaceClass() {
            return null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins = {};
    e.Behaviors = {};
    e.PluginManager = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._runtime = b;
            this._allPlugins = [];
            this._pluginsByCtor = new Map;
            this._systemPlugin = null;
            this._allBehaviors = [];
            this._behaviorsByCtor = new Map;
            this._jumpthruBehavior = this._solidBehavior = null
        }
        CreatePlugin(b) {
            const a = this._runtime.GetObjectReference(b[0]);
            if(!a) throw Error("missing plugin");
            e.AddCommonACEs(b, a);
            b = e.New(a, {
                runtime: this._runtime,
                isSingleGlobal: b[1],
                isWorld: b[2],
                isRotatable: b[5],
                hasEffects: b[8],
                mustPredraw: b[9],
                supportsSceneGraph: b[13],
                supportsMesh: b[14]
            });
            b.OnCreate();
            this._allPlugins.push(b);
            this._pluginsByCtor.set(a, b)
        }
        CreateSystemPlugin() {
            this._systemPlugin = e.New(e.Plugins.System, {
                runtime: this._runtime,
                isSingleGlobal: !0
            });
            this._systemPlugin.OnCreate()
        }
        CreateBehavior(b) {
            b = this._runtime.GetObjectReference(b[1]);
            if(!b) throw Error("missing behavior");
            const a = e.New(b, {
                runtime: this._runtime
            });
            a.OnCreate();
            this._allBehaviors.push(a);
            this._behaviorsByCtor.set(b, a);
            !this._solidBehavior &&
                e.Behaviors.solid && a instanceof e.Behaviors.solid ? this._solidBehavior = a : !this._jumpthruBehavior && e.Behaviors.jumpthru && a instanceof e.Behaviors.jumpthru && (this._jumpthruBehavior = a)
        }
        GetPluginByConstructorFunction(b) {
            return this._pluginsByCtor.get(b) || null
        }
        HasBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.has(b)
        }
        GetBehaviorByConstructorFunction(b) {
            return this._behaviorsByCtor.get(b) || null
        }
        GetSystemPlugin() {
            return this._systemPlugin
        }
        GetSolidBehavior() {
            return this._solidBehavior
        }
        GetJumpthruBehavior() {
            return this._jumpthruBehavior
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set;
    e.ImageInfo = class extends e.DefendedBase {
        constructor() {
            super();
            this._url = "";
            this._height = this._width = this._offsetY = this._offsetX = this._pixelFormat = this._size = 0;
            this._hasMetaData = !1;
            this._imageAsset = null;
            this._textureState = "";
            this._rcTex = e.New(e.Rect);
            b.add(this)
        }
        Release() {
            this.ReleaseTexture();
            this._imageAsset = null;
            b.delete(this)
        }
        static OnWebGLContextLost() {
            for(const a of b) a._textureState = "", a._rcTex.set(0, 0, 0, 0)
        }
        LoadData(a) {
            this._url = a[0];
            this._size = a[1];
            this._pixelFormat = a[2];
            this._offsetX = a[3];
            this._offsetY = a[4];
            this._width = a[5];
            this._height = a[6];
            this._hasMetaData = !0
        }
        LoadAnimationFrameData(a) {
            this._url = a[0];
            this._size = a[1];
            this._offsetX = a[2];
            this._offsetY = a[3];
            this._width = a[4];
            this._height = a[5];
            this._pixelFormat = a[11];
            this._hasMetaData = !0
        }
        LoadDynamicAsset(a, d) {
            if(this._imageAsset) throw Error("already loaded asset");
            this._url = d;
            const c = {};
            e.IsAbsoluteURL(d) && (c.loadPolicy = "remote");
            this.LoadAsset(a, c);
            return this._imageAsset.Load()
        }
        ReplaceWith(a) {
            if(a ===
                this) throw Error("cannot replace with self");
            this.ReleaseTexture();
            this._url = a._url;
            this._size = a._size;
            this._pixelFormat = a._pixelFormat;
            this._offsetX = a._offsetX;
            this._offsetY = a._offsetY;
            this._width = a._width;
            this._height = a._height;
            this._hasMetaData = a._hasMetaData;
            this._imageAsset = a._imageAsset;
            this._textureState = a._textureState;
            this._rcTex = a._rcTex
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        GetPixelFormat() {
            return this._pixelFormat
        }
        GetOffsetX() {
            return this._offsetX
        }
        GetOffsetY() {
            return this._offsetY
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetSheetWidth() {
            return this._imageAsset.GetWidth()
        }
        GetSheetHeight() {
            return this._imageAsset.GetHeight()
        }
        LoadAsset(a,
            d) {
            if(this._imageAsset) throw Error("already got asset");
            d = Object.assign({}, d, {
                url: this.GetURL(),
                size: this.GetSize()
            });
            this._imageAsset = a.LoadImage(d)
        }
        IsLoaded() {
            return this._imageAsset && this._imageAsset.IsLoaded()
        }
        async LoadStaticTexture(a, d) {
            if(!this._imageAsset) throw Error("no asset");
            if(this._textureState) throw Error("already loaded texture");
            this._textureState = "loading";
            a = await this._imageAsset.LoadStaticTexture(a, d);
            if(!a) return this._textureState = "", null;
            this._textureState = "loaded";
            this._hasMetaData ||
                (this._width = a.GetWidth(), this._height = a.GetHeight(), this._hasMetaData = !0);
            this._rcTex.set(this._offsetX, this._offsetY, this._offsetX + this._width, this._offsetY + this._height);
            this._rcTex.divide(a.GetWidth(), a.GetHeight());
            return a
        }
        ReleaseTexture() {
            this._textureState && (this._imageAsset && this._imageAsset.ReleaseTexture(), this._textureState = "", this._rcTex.set(0, 0, 0, 0))
        }
        GetTexture() {
            return this._imageAsset ? this._imageAsset.GetTexture() : null
        }
        GetTexRect() {
            return this._rcTex
        }
        async ExtractImageToCanvas() {
            const a =
                await this._imageAsset.LoadToDrawable(),
                d = e.CreateCanvas(this._width, this._height);
            d.getContext("2d").drawImage(a, this._offsetX, this._offsetY, this._width, this._height, 0, 0, this._width, this._height);
            return d
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.AnimationInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._name = b[0];
            this._speed = b[1];
            this._isLooping = !!b[2];
            this._repeatCount = b[3];
            this._repeatTo = b[4];
            this._isPingPong = !!b[5];
            this._sid = b[6];
            this._frames = b[7].map(a => e.New(e.AnimationFrameInfo, a))
        }
        Release() {
            for(const b of this._frames) b.Release();
            e.clearArray(this._frames)
        }
        LoadAllAssets(b) {
            for(const a of this._frames) a.GetImageInfo().LoadAsset(b)
        }
        LoadAllTextures(b, a) {
            return Promise.all(this._frames.map(d =>
                d.GetImageInfo().LoadStaticTexture(b, a)))
        }
        ReleaseAllTextures() {
            for(const b of this._frames) b.GetImageInfo().ReleaseTexture()
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetFrameCount() {
            return this._frames.length
        }
        GetFrames() {
            return this._frames
        }
        GetFrameAt(b) {
            b = Math.floor(b);
            if(0 > b || b >= this._frames.length) throw new RangeError("invalid frame");
            return this._frames[b]
        }
        GetSpeed() {
            return this._speed
        }
        IsLooping() {
            return this._isLooping
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        GetRepeatTo() {
            return this._repeatTo
        }
        IsPingPong() {
            return this._isPingPong
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.AnimationFrameInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._imageInfo = e.New(e.ImageInfo);
            this._imageInfo.LoadAnimationFrameData(b);
            this._duration = b[6];
            this._origin = e.New(e.Vector2, b[7], b[8]);
            this._imagePoints = b[9].map(a => e.New(e.ImagePoint, this, a));
            this._imagePointsByName = new Map;
            for(const a of this._imagePoints) this._imagePointsByName.set(a.GetName().toLowerCase(), a);
            this._collisionPoly = null;
            b = b[10];
            6 <= b.length && (this._collisionPoly = e.New(e.CollisionPoly,
                b))
        }
        Release() {
            this._collisionPoly && (this._collisionPoly.Release(), this._collisionPoly = null);
            this._imageInfo.Release();
            this._imageInfo = null
        }
        GetImageInfo() {
            return this._imageInfo
        }
        GetDuration() {
            return this._duration
        }
        GetOriginX() {
            return this._origin.getX()
        }
        GetOriginY() {
            return this._origin.getY()
        }
        GetCollisionPoly() {
            return this._collisionPoly
        }
        GetImagePointByName(b) {
            return this._imagePointsByName.get(b.toLowerCase()) || null
        }
        GetImagePointByIndex(b) {
            b = Math.floor(b);
            return 0 > b || b >= this._imagePoints.length ? null :
                this._imagePoints[b]
        }
        GetImagePointCount() {
            return this._imagePoints.length
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.ImagePoint = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._afi = b;
            this._name = a[0];
            this._pos = e.New(e.Vector2, a[1], a[2])
        }
        Release() {}
        GetName() {
            return this._name
        }
        GetX() {
            return this._pos.getX()
        }
        GetY() {
            return this._pos.getY()
        }
        GetVec2() {
            return this._pos
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = self.IObjectClass;
    e.ObjectClass = class extends e.DefendedBase {
        constructor(d, c, f) {
            super();
            const h = d.GetObjectReference(f[1]);
            this._runtime = d;
            this._plugin = d.GetPluginManager().GetPluginByConstructorFunction(h);
            this._sdkType = null;
            this._instSdkCtor = h.Instance;
            this._index = c;
            this._sid = f[11];
            this._name = f[0];
            this._jsPropName = this._runtime.GetJsPropName(f[14]);
            this._isGlobal = !!f[9];
            this._isFamily = !!f[2];
            this._isOnLoaderLayout = !!f[10];
            this._instVars = f[3].map(g =>
                ({
                    sid: g[0],
                    type: g[1],
                    name: g[2],
                    jsPropName: d.GetJsPropName(g[3])
                }));
            this._behaviorsCount = f[4];
            this._effectsCount = f[5];
            this._isWorldType = this._plugin.IsWorldType();
            this._effectList = null;
            this._collisionGrid = e.New(e.SparseGrid, d.GetOriginalViewportWidth(), d.GetOriginalViewportHeight());
            this._anyCollisionCellChanged = !0;
            this._anyInstanceParallaxed = !1;
            this._familyMembersSet = this._familyMembers = null;
            this._familyIndex = -1;
            this._familyEffectMap = this._familyBehaviorMap = this._familyInstVarMap = this._familiesSet =
                this._families = null;
            this._isInContainer = !1;
            this._container = null;
            this._behaviorTypes = f[8].map(g => e.BehaviorType.Create(this, g));
            this._behaviorTypesIncludingInherited = [];
            this._behaviorsByName = new Map;
            this._behaviorNameToIndex = new Map;
            this._usedBehaviorCtors = new Set;
            this._solStack = e.New(e.SolStack, this);
            this._defaultInstanceData = null;
            this._defaultLayerIndex = 0;
            this._isContained = !1;
            this._animationsBySid = this._animationsByName = this._animations = this._imageInfo = this._container = null;
            this._textureRefCount =
                0;
            this._savedData = new Map;
            this._unsavedData = new Map;
            this._instances = [];
            this._iidsStale = !0;
            this._plugin.HasEffects() && (this._effectList = e.New(e.EffectList, this, f[12]));
            f[6] && (this._imageInfo = e.New(e.ImageInfo), this._imageInfo.LoadData(f[6]));
            if(f[7]) {
                this._animations = f[7].map(g => e.New(e.AnimationInfo, g));
                this._animationsByName = new Map;
                this._animationsBySid = new Map;
                for(const g of this._animations) this._animationsByName.set(g.GetName().toLowerCase(), g), this._animationsBySid.set(g.GetSID(), g)
            }
            this._isFamily ?
                (this._familyMembers = [], this._familyMembersSet = new Set, this._familyIndex = this._runtime._GetNextFamilyIndex()) : (this._families = [], this._familiesSet = new Set, this._familyInstVarMap = [], this._familyBehaviorMap = [], this._familyEffectMap = []);
            this._sdkType = e.New(h.Type, this, f[15]);
            this._instanceUserScriptClass = this._iObjectClass = null;
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            if(c = this._sdkType.GetScriptInterfaceClass()) {
                if(this._iObjectClass = new c(this), !(this._iObjectClass instanceof a)) throw new TypeError("script interface class must derive from IObjectClass");
            } else this._iObjectClass = new a(this);
            f[13] && (c = f[13]) && this._sdkType.LoadTilemapData(c[0], c[1]);
            this._runtime.UsesLoaderLayout() && !this._isFamily && !this._isOnLoaderLayout && this._isWorldType || this.OnCreate();
            this._plugin.IsSingleGlobal() && (this._plugin._SetSingleGlobalObjectClass(this), this._CreateSingleGlobalInstance(f))
        }
        static Create(d, c, f) {
            return e.New(e.ObjectClass, d, c, f)
        }
        Release() {
            this._imageInfo && (this._imageInfo.Release(), this._imageInfo = null);
            if(this._animations) {
                for(const d of this._animations) d.Release();
                e.clearArray(this._animations);
                this._animationsByName.clear();
                this._animationsBySid.clear()
            }
            this._solStack.Release();
            this._solStack = null;
            this._savedData.clear();
            this._unsavedData.clear();
            this._runtime = this._container = null
        }
        _LoadFamily(d) {
            for(let c = 1, f = d.length; c < f; ++c) {
                const h = this._runtime.GetObjectClassByIndex(d[c]);
                this._familyMembers.push(h);
                this._familyMembersSet.add(h);
                h._families.push(this);
                h._familiesSet.add(this)
            }
        }
        _SetContainer(d) {
            this._isInContainer = !0;
            this._container = d
        }
        IsInContainer() {
            return this._isInContainer
        }
        GetContainer() {
            return this._container
        }
        _OnAfterCreate() {
            var d =
                0;
            if(!this._isFamily)
                for(var c of this._families)
                    for(var f of c.GetBehaviorTypes()) {
                        const k = f.GetName().toLowerCase();
                        this._behaviorsByName.set(k, f);
                        this._behaviorNameToIndex.set(k, d);
                        this._behaviorTypesIncludingInherited.push(f);
                        ++d
                    }
            for(var h of this.GetBehaviorTypes()) c = h.GetName().toLowerCase(), this._behaviorsByName.set(c, h), this._behaviorNameToIndex.set(c, d), this._behaviorTypesIncludingInherited.push(h), ++d;
            for(var g of this._behaviorTypesIncludingInherited) this._usedBehaviorCtors.add(g.GetBehavior().constructor);
            if(!this._isFamily && this._families.length) {
                d = this._runtime.GetFamilyCount();
                e.extendArray(this._familyInstVarMap, d, 0);
                e.extendArray(this._familyBehaviorMap, d, 0);
                e.extendArray(this._familyEffectMap, d, 0);
                d = [];
                c = g = h = 0;
                for(const k of this._families)
                    if(f = k.GetFamilyIndex(), this._familyInstVarMap[f] = h, h += k.GetInstanceVariablesCount(), this._familyBehaviorMap[f] = g, g += k.GetBehaviorTypesCount(), this._familyEffectMap[f] = c, c += k.GetEffectTypesCount(), (f = k.GetEffectList()) && this._effectList)
                        for(const m of f.GetAllEffectTypes()) d.push(m.Clone(this._effectList));
                this._effectList && this._effectList.PrependEffectTypes(d)
            }
        }
        _CreateSingleGlobalInstance(d) {
            const c = this._runtime._GetNewUID(),
                f = e.New(e.Instance, {
                    runtime: this._runtime,
                    objectType: this,
                    uid: c
                });
            f._CreateSdkInstance(d[16], []);
            this._runtime._MapInstanceByUID(c, f);
            this._instances.push(f)
        }
        GetSdkType() {
            return this._sdkType
        }
        IsOnLoaderLayout() {
            return this._isOnLoaderLayout
        }
        OnCreate() {
            this._isFamily || this._sdkType.OnCreate()
        }
        HasLoadedTextures() {
            return 0 < this._textureRefCount
        }
        LoadTextures(d) {
            if(this._isFamily) return Promise.resolve();
            this._textureRefCount++;
            return 1 === this._textureRefCount ? this._sdkType.LoadTextures(d) || Promise.resolve() : Promise.resolve()
        }
        ReleaseTextures() {
            if(!this._isFamily) {
                this._textureRefCount--;
                if(0 > this._textureRefCount) throw Error("released textures too many times");
                0 === this._textureRefCount && this._sdkType.ReleaseTextures()
            }
        }
        OnDynamicTextureLoadComplete() {
            if(this._isFamily) throw Error("not applicable to family");
            this._sdkType.OnDynamicTextureLoadComplete()
        }
        PreloadTexturesWithInstances(d) {
            return this._isFamily ?
                Promise.resolve() : this._sdkType.PreloadTexturesWithInstances(d)
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        IsFamily() {
            return this._isFamily
        }
        IsGlobal() {
            return this._isGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        GetFamilyIndex() {
            return this._familyIndex
        }
        GetBehaviorTypes() {
            return this._behaviorTypes
        }
        GetBehaviorTypesCount() {
            return this._behaviorsCount
        }
        UsesBehaviorByCtor(d) {
            return d &&
                this._usedBehaviorCtors.has(d)
        }
        GetInstanceVariablesCount() {
            return this._instVars.length
        }
        GetInstanceVariableSIDs() {
            return this._instVars.map(d => d.sid)
        }
        GetInstanceVariableIndexBySID(d) {
            return this._instVars.findIndex(c => c.sid === d)
        }
        GetInstanceVariableIndexByName(d) {
            return this._instVars.findIndex(c => c.name === d)
        }
        _GetAllInstanceVariableNames() {
            return this._instVars.map(d => d.name)
        }
        _GetAllInstanceVariableJsPropNames() {
            return this._instVars.map(d => d.jsPropName)
        }
        GetInstanceVariableType(d) {
            d = Math.floor(d);
            if(0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].type
        }
        GetInstanceVariableName(d) {
            d = Math.floor(d);
            if(0 > d || d >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[d].name
        }
        GetEffectTypesCount() {
            return this._effectsCount
        }
        GetBehaviorTypesIncludingInherited() {
            return this._behaviorTypesIncludingInherited
        }
        GetBehaviorTypeByName(d) {
            return this._behaviorsByName.get(d.toLowerCase()) || null
        }
        GetBehaviorIndexByName(d) {
            d =
                this._behaviorNameToIndex.get(d.toLowerCase());
            return "undefined" === typeof d ? -1 : d
        }
        GetEffectList() {
            return this._effectList
        }
        HasEffects() {
            return this._plugin.HasEffects()
        }
        UsesEffects() {
            return this._effectList && this._effectList.HasAnyEffectType()
        }
        GetSolStack() {
            return this._solStack
        }
        GetCurrentSol() {
            return this._solStack.GetCurrentSol()
        }
        GetImageInfo() {
            return this._imageInfo
        }
        SetDefaultInstanceData(d) {
            this._defaultInstanceData = d
        }
        GetDefaultInstanceData() {
            return this._defaultInstanceData
        }
        _SetDefaultLayerIndex(d) {
            this._defaultLayerIndex =
                d
        }
        GetDefaultLayerIndex() {
            return this._defaultLayerIndex
        }
        GetAnimations() {
            return this._animations
        }
        GetAnimationCount() {
            return this._animations.length
        }
        GetFamilies() {
            return this._families
        }
        BelongsToFamily(d) {
            return this._familiesSet.has(d)
        }
        GetFamilyMembers() {
            return this._familyMembers
        }
        FamilyHasMember(d) {
            return this._familyMembersSet.has(d)
        }
        GetFamilyBehaviorOffset(d) {
            return this._familyBehaviorMap[d]
        }
        GetFamilyInstanceVariableOffset(d) {
            return this._familyInstVarMap[d]
        }
        GetAnimationByName(d) {
            if(!this._animations) throw Error("no animations");
            return this._animationsByName.get(d.toLowerCase()) || null
        }
        GetAnimationBySID(d) {
            if(!this._animations) throw Error("no animations");
            return this._animationsBySid.get(d) || null
        }
        GetFirstAnimationFrame() {
            if(!this._animations) throw Error("no animations");
            return this._animations[0].GetFrameAt(0)
        }
        GetDefaultInstanceSize() {
            if(this._animations) {
                const d = this.GetFirstAnimationFrame().GetImageInfo();
                return [d.GetWidth(), d.GetHeight()]
            }
            return this._imageInfo ? [this._imageInfo.GetWidth(), this._imageInfo.GetHeight()] : [100,
                100
            ]
        }
        GetSingleGlobalInstance() {
            if(!this._plugin.IsSingleGlobal()) throw Error("not a single-global plugin");
            return this._instances[0]
        }
        GetInstances() {
            return this._instances
        }* instances() {
            yield* this._instances
        }* instancesIncludingPendingCreate() {
            yield* this._instances;
            for(const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && (yield d)
        }
        GetInstanceCount() {
            return this._instances.length
        }
        _AddInstance(d) {
            this._instances.push(d)
        }
        _SetIIDsStale() {
            this._iidsStale = !0
        }
        _UpdateIIDs() {
            if(this._iidsStale &&
                !this._isFamily) {
                var d = this._instances,
                    c = 0;
                for(let f = d.length; c < f; ++c) d[c]._SetIID(c);
                d = this._runtime._GetInstancesPendingCreate();
                for(const f of d) f.GetObjectClass() === this && f._SetIID(c++);
                this._iidsStale = !1
            }
        }
        GetInstanceByIID(d) {
            var c = this._instances;
            if(d < c.length) return c[d];
            d -= c.length;
            c = this._runtime._GetInstancesPendingCreate();
            for(const f of c)
                if(f.GetObjectClass() === this) {
                    if(0 === d) return f;
                    --d
                } return null
        }
        GetFirstPicked(d) {
            if(d && d.IsInContainer() && d.GetObjectClass() !== this)
                for(const c of d.siblings())
                    if(c.GetObjectClass() ===
                        this) return c;
            d = this.GetCurrentSol().GetInstances();
            return d.length ? d[0] : null
        }
        GetPairedInstance(d) {
            const c = this.GetCurrentSol().GetInstances();
            return 0 < c.length ? c[d.GetIID() % c.length] : null
        }* allCorrespondingInstances(d, c) {
            const f = this.GetCurrentSol().GetInstances();
            var h = f.length;
            const g = c.GetCurrentSol(),
                k = c.GetCurrentSol().GetInstances(),
                m = k.length;
            var p = d.GetIID();
            if(c.IsFamily() || !g.IsSelectAll()) p = k.indexOf(d);
            d = Math.ceil(h / m);
            h %= m;
            0 === h || p < h ? (p *= d, h = d) : (p = h * d + (p - h) * (d - 1), h = d - 1);
            for(let x = p, t =
                    p + h; x < t; ++x) yield f[x]
        }
        FinishCondition(d) {
            this._sdkType.FinishCondition(d)
        }
        ApplySolToContainer() {
            if(this._isInContainer && !this._isFamily) {
                this._UpdateIIDs();
                var d = this.GetCurrentSol(),
                    c = d._GetOwnInstances(),
                    f = d.IsSelectAll(),
                    h = this._runtime.GetCurrentEventStackFrame();
                h = h && h.GetCurrentEvent() && h.GetCurrentEvent().IsOrBlock();
                for(const m of this._container.objectTypes())
                    if(m !== this) {
                        m._UpdateIIDs();
                        var g = m.GetCurrentSol();
                        g._SetSelectAll(f);
                        if(!f) {
                            var k = g._GetOwnInstances();
                            e.clearArray(k);
                            for(const p of c) k.push(m.GetInstanceByIID(p.GetIID()));
                            if(h) {
                                k = d._GetOwnElseInstances();
                                g = g._GetOwnElseInstances();
                                e.clearArray(g);
                                for(const p of k) g.push(m.GetInstanceByIID(p.GetIID()))
                            }
                        }
                    }
            }
        }
        _TruncateContainerSols(d, c) {
            for(const f of this.GetContainer().objectTypes()) {
                const h = f.GetCurrentSol();
                d ? e.truncateArray(h._GetOwnElseInstances(), c) : e.truncateArray(h._GetOwnInstances(), c)
            }
        }
        _GetCollisionCellGrid() {
            return this._collisionGrid
        }
        _SetAnyCollisionCellChanged(d) {
            this._anyCollisionCellChanged = !!d
        }
        _SetAnyInstanceParallaxed(d) {
            this._anyInstanceParallaxed = !!d
        }
        IsAnyInstanceParallaxed() {
            return this._anyInstanceParallaxed
        }
        _UpdateAllCollisionCells() {
            if(this._anyCollisionCellChanged &&
                this._isWorldType) {
                for(const d of this._instances) d.GetWorldInfo()._UpdateCollisionCell();
                for(const d of this._runtime._GetInstancesPendingCreate()) d.GetObjectClass() === this && d.GetWorldInfo()._UpdateCollisionCell();
                this._anyCollisionCellChanged = !1
            }
        }
        GetSavedDataMap() {
            this._savedData || (this._savedData = new Map);
            return this._savedData
        }
        GetUnsavedDataMap() {
            this._unsavedData || (this._unsavedData = new Map);
            return this._unsavedData
        }
        HasSolidBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.solid)
        }
        HasNoSaveBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.NoSave)
        }
        HasPersistBehavior() {
            return this.UsesBehaviorByCtor(e.Behaviors.Persist)
        }
        _SaveToJson() {
            const d = {
                instances: this._instances.map(c => c.SaveToJson())
            };
            this._savedData && this._savedData.size && (d.ex = e.ToSuperJSON(this._savedData));
            return d
        }
        _LoadFromJson(d) {
            this._savedData && (this._savedData.clear(), this._savedData = null);
            var c = d.ex;
            c && (this._savedData = e.FromSuperJSON(c));
            c = this._instances;
            d = d.instances;
            for(let f = 0, h = Math.min(c.length, d.length); f < h; ++f) c[f].LoadFromJson(d[f]);
            for(let f = d.length, h = c.length; f < h; ++f) this._runtime.DestroyInstance(c[f]);
            for(let f = c.length, h = d.length; f < h; ++f) {
                c = d[f];
                let g =
                    null;
                if(this.IsWorldType() && (g = this._runtime.GetMainRunningLayout().GetLayerBySID(c.w.l), !g)) continue;
                this._runtime.CreateInstanceFromData(this._defaultInstanceData || this, g, !1, 0, 0, !0).LoadFromJson(c)
            }
            this._SetIIDsStale()
        }
        GetIObjectClass() {
            return this._iObjectClass
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        _GetUserScriptInstanceClass() {
            return this._instanceUserScriptClass
        }
        _SetUserScriptInstanceClass(d) {
            this._instanceUserScriptClass = d
        }
        DispatchUserScriptEvent(d) {
            var c = this._runtime;
            (c =
                c.IsDebug() && !c.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(d);
            c && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Container = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._objectTypes = a;
            for(const d of this._objectTypes) d._SetContainer(this)
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectTypes() {
            return this._objectTypes
        }
        objectTypes() {
            return this._objectTypes
        }
        HasAnyWorldType() {
            return this._objectTypes.some(b => b.IsWorldType())
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = self.IInstance,
        d = [];
    let c = 0;
    const f = new WeakMap,
        h = new WeakMap;
    e.Instance = class extends e.DefendedBase {
        constructor(g) {
            super();
            this._runtime = g.runtime;
            this._objectType = g.objectType;
            this._iScriptInterface = this._sdkInst = this._worldInfo = null;
            this._iid = 0;
            this._uid = g.uid;
            this._puid = c++;
            this._flags = 0;
            this._behaviorInstances = this._instVarValues = d;
            var k = this._objectType.GetBehaviorTypesIncludingInherited();
            0 < k.length && (this._behaviorInstances = k.map((m, p) => e.New(e.BehaviorInstance, {
                runtime: this._runtime,
                behaviorType: m,
                instance: this,
                index: p
            })));
            this._siblings = this._objectType.IsInContainer() ? [] : null;
            this._timeScale = -1;
            this._dispatcher = null;
            k = this.GetPlugin();
            k.MustPreDraw() && (this._flags |= 4);
            if(k.IsWorldType())
                if(this._worldInfo = e.New(e.WorldInfo, this, g.layer), g.worldData) this._worldInfo.Init(g.worldData);
                else {
                    this._worldInfo.InitNoData();
                    const [m, p] = this._objectType.GetDefaultInstanceSize();
                    this._worldInfo.SetSize(m, p);
                    this.GetObjectClass().UsesEffects() && this._worldInfo.GetInstanceEffectList().LoadDefaultEffectParameters()
                } g.instVarData ?
                this._LoadInstanceVariableData(g.instVarData) : this._LoadDefaultInstanceVariables()
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            if(0 < this._behaviorInstances.length) {
                for(var g of this._behaviorInstances) g.Release();
                e.clearArray(this._behaviorInstances)
            }
            this._sdkInst.Release();
            this._sdkInst = null;
            if(g = f.get(this)) g.clear(), f.delete(this);
            if(g = h.get(this)) g.clear(), h.delete(this);
            this._siblings && e.clearArray(this._siblings);
            this._dispatcher && (this._dispatcher.Release(),
                this._dispatcher = null);
            this._objectType = this._runtime = null;
            0 < this._instVarValues.length && e.clearArray(this._instVarValues);
            this._worldInfo && (this._worldInfo.Release(), this._worldInfo = null)
        }
        _LoadInstanceVariableData(g) {
            0 < g.length && (this._instVarValues = [], e.shallowAssignArray(this._instVarValues, g))
        }
        _LoadDefaultInstanceVariables() {
            const g = this._objectType.GetInstanceVariablesCount();
            if(0 !== g) {
                this._instVarValues = [];
                var k = [0, 0, ""];
                for(let m = 0; m < g; ++m) this._instVarValues.push(k[this._objectType.GetInstanceVariableType(m)])
            }
        }
        _CreateSdkInstance(g,
            k) {
            if(this._sdkInst) throw Error("already got sdk instance");
            for(let m = 0, p = this._behaviorInstances.length; m < p; ++m) this._behaviorInstances[m]._CreateSdkInstance(k ? k[m] : null);
            this._sdkInst = e.New(this._objectType.GetInstanceSdkCtor(), this, g);
            if(!(this._sdkInst instanceof e.SDKInstanceBase)) throw Error("sdk type must derive from SDKInstanceBase");
            for(let m = 0, p = this._behaviorInstances.length; m < p; ++m) this._behaviorInstances[m].PostCreate();
            this._objectType._GetUserScriptInstanceClass() && this._InitUserScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimeScale() {
            return this._timeScale
        }
        GetActiveTimeScale() {
            const g =
                this._timeScale;
            return -1 === g ? this.GetRuntime().GetTimeScale() : g
        }
        SetTimeScale(g) {
            g = +g;
            if(0 > g || !isFinite(g)) g = 0;
            this._timeScale = g
        }
        RestoreTimeScale() {
            this._timeScale = -1
        }
        Dispatcher() {
            this._dispatcher || (this._dispatcher = e.New(e.Event.Dispatcher));
            return this._dispatcher
        }
        Draw(g) {
            this._sdkInst.Draw(g)
        }
        OnCreate(g) {
            this._sdkInst.OnCreate(g)
        }
        _SetHasTilemap() {
            this._flags |= 2
        }
        HasTilemap() {
            return 0 !== (this._flags & 2)
        }
        _MarkDestroyed() {
            this._flags |= 1
        }
        IsDestroyed() {
            return 0 !== (this._flags & 1)
        }
        MustPreDraw() {
            return 0 !==
                (this._flags & 4)
        }
        _IsSolidEnabled() {
            return 0 !== (this._flags & 8)
        }
        _SetSolidEnabled(g) {
            this._flags = g ? this._flags | 8 : this._flags & -9
        }
        _IsJumpthruEnabled() {
            return 0 !== (this._flags & 16)
        }
        _SetJumpthruEnabled(g) {
            this._flags = g ? this._flags | 16 : this._flags & -17
        }
        SetFlag(g, k) {
            g <<= 16;
            this._flags = k ? this._flags | g : this._flags & ~g
        }
        GetFlag(g) {
            return 0 !== (this._flags & g << 16)
        }
        GetCurrentImageInfo() {
            return this._sdkInst.GetCurrentImageInfo()
        }
        GetCurrentSurfaceSize() {
            return this._sdkInst.GetCurrentSurfaceSize()
        }
        GetCurrentTexRect() {
            return this._sdkInst.GetCurrentTexRect()
        }
        GetImagePoint(g) {
            return this._sdkInst.GetImagePoint(g)
        }
        GetObjectClass() {
            return this._objectType
        }
        BelongsToObjectClass(g) {
            return g.IsFamily() ?
                g.FamilyHasMember(this.GetObjectClass()) : this.GetObjectClass() === g
        }
        VerifySupportsSceneGraph() {
            if(!this.GetPlugin().SupportsSceneGraph()) throw Error("object does not support scene graph");
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            var g = this.GetWorldInfo();
            return g ? (g = g.GetParent()) ? g.GetInstance() : null : null
        }
        GetTopParent() {
            var g = this.GetWorldInfo();
            return g ? (g = g.GetTopParent()) ? g.GetInstance() : null : null
        }* parents() {
            const g = this.GetWorldInfo();
            if(g)
                for(const k of g.parents()) yield k.GetInstance()
        }
        HasChildren() {
            const g =
                this.GetWorldInfo();
            return g ? g.HasChildren() : !1
        }
        GetChildren() {
            const g = this.GetWorldInfo();
            return g ? g.GetChildren().map(k => k.GetInstance()) : []
        }* children() {
            const g = this.GetWorldInfo();
            if(g)
                for(const k of g.children()) yield k.GetInstance()
        }* allChildren() {
            const g = this.GetWorldInfo();
            if(g)
                for(const k of g.allChildren()) yield k.GetInstance()
        }
        GetChildCount() {
            const g = this.GetWorldInfo();
            return g ? g.GetChildCount() : 0
        }
        GetChildAt(g) {
            const k = this.GetWorldInfo();
            return k ? (g = k.GetChildAt(g)) ? g.GetInstance() : null :
                null
        }
        AddChild(g, k) {
            this.VerifySupportsSceneGraph();
            g.VerifySupportsSceneGraph();
            this.GetWorldInfo().AddChild(g.GetWorldInfo(), k || {})
        }
        RemoveChild(g) {
            const k = this.GetWorldInfo();
            k && k.RemoveChild(g.GetWorldInfo())
        }
        GetDestroyWithParent() {
            const g = this.GetWorldInfo();
            return g ? g.GetDestroyWithParent() : !1
        }
        SetupInitialSceneGraphConnections() {
            var g = this.GetWorldInfo();
            if(g && (g = g.GetSceneGraphChildrenExportData()))
                for(const k of g)
                    if(g = this._runtime.GetInstanceByUID(k[2])) {
                        const m = k[3];
                        this.AddChild(g, {
                            transformX: !!(m >>
                                0 & 1),
                            transformY: !!(m >> 1 & 1),
                            transformWidth: !!(m >> 2 & 1),
                            transformHeight: !!(m >> 3 & 1),
                            transformAngle: !!(m >> 4 & 1),
                            destroyWithParent: !!(m >> 5 & 1),
                            transformZElevation: !!(m >> 6 & 1)
                        })
                    }
        }
        IsInContainer() {
            return null !== this._siblings
        }
        _AddSibling(g) {
            this._siblings.push(g)
        }
        GetSiblings() {
            return this._siblings
        }
        HasSibling(g) {
            return !!this.GetSibling(g)
        }
        GetSibling(g) {
            const k = this.siblings();
            if(null === k || 0 === k.length) return !1;
            for(const m of k)
                if(m.GetObjectClass() === g) return m;
            return null
        }
        siblings() {
            return this._siblings
        }
        SetSiblingsSinglePicked() {
            for(const g of this.siblings()) g.GetObjectClass().GetCurrentSol().SetSinglePicked(g)
        }
        _PushSiblingsToSolInstances() {
            for(const g of this.siblings()) g.GetObjectClass().GetCurrentSol()._PushInstance(g)
        }
        _SetSiblingsToSolInstancesIndex(g) {
            for(const k of this.siblings()) k.GetObjectClass().GetCurrentSol()._GetOwnInstances()[g] =
                k
        }
        _PushSiblingsToSolElseInstances() {
            for(const g of this.siblings()) g.GetObjectClass().GetCurrentSol()._PushElseInstance(g)
        }
        _SetSiblingsToSolElseInstancesIndex(g) {
            for(const k of this.siblings()) k.GetObjectClass().GetCurrentSol()._GetOwnElseInstances()[g] = k
        }
        GetPlugin() {
            return this._objectType.GetPlugin()
        }
        _SetIID(g) {
            this._iid = g
        }
        GetIID() {
            this._objectType._UpdateIIDs();
            return this._iid
        }
        GetUID() {
            return this._uid
        }
        GetPUID() {
            return this._puid
        }
        GetBehaviorInstances() {
            return this._behaviorInstances
        }
        GetBehaviorInstanceFromCtor(g) {
            if(!g) return null;
            for(const k of this._behaviorInstances)
                if(k.GetBehavior() instanceof g) return k;
            return null
        }
        GetBehaviorSdkInstanceFromCtor(g) {
            return g ? (g = this.GetBehaviorInstanceFromCtor(g)) ? g.GetSdkInstance() : null : null
        }
        GetBehaviorIndexBySID(g) {
            const k = this._behaviorInstances;
            for(let m = 0, p = k.length; m < p; ++m)
                if(k[m].GetBehaviorType().GetSID() === g) return m;
            return -1
        }
        GetAllInstanceVariableValues() {
            return this._instVarValues
        }
        _GetAllInstanceVariableNames() {
            return this._objectType._GetAllInstanceVariableNames()
        }
        GetInstanceVariableCount() {
            return this._instVarValues.length
        }
        GetInstanceVariableValue(g) {
            g |=
                0;
            const k = this._instVarValues;
            if(0 > g || g >= k.length) throw new RangeError("invalid instance variable");
            return k[g]
        }
        _GetInstanceVariableValueUnchecked(g) {
            return this._instVarValues[g]
        }
        _GetInstanceVariableTypedValue(g) {
            const k = this._instVarValues[g];
            return 0 === this._objectType.GetInstanceVariableType(g) ? !!k : k
        }
        SetInstanceVariableValue(g, k) {
            g |= 0;
            const m = this._instVarValues;
            if(0 > g || g >= m.length) throw new RangeError("invalid instance variable");
            switch(this._objectType.GetInstanceVariableType(g)) {
                case 0:
                    m[g] =
                        k ? 1 : 0;
                    break;
                case 1:
                    m[g] = "number" === typeof k ? k : parseFloat(k);
                    break;
                case 2:
                    m[g] = "string" === typeof k ? k : k.toString();
                    break;
                default:
                    throw Error("unknown instance variable type");
            }
        }
        SetInstanceVariableOffset(g, k) {
            if(0 !== k) {
                g |= 0;
                var m = this._instVarValues;
                if(0 > g || g >= m.length) throw new RangeError("invalid instance variable");
                var p = m[g];
                if("number" === typeof p) m[g] = "number" === typeof k ? m[g] + k : m[g] + parseFloat(k);
                else {
                    if("boolean" === typeof p) throw Error("can not set offset of boolean variable");
                    if("string" === typeof p) throw Error("can not set offset of string variable");
                    throw Error("unknown instance variable type");
                }
            }
        }
        GetSavedDataMap() {
            let g = f.get(this);
            if(g) return g;
            g = new Map;
            f.set(this, g);
            return g
        }
        GetUnsavedDataMap() {
            let g = h.get(this);
            if(g) return g;
            g = new Map;
            h.set(this, g);
            return g
        }
        _HasAnyCreateDestroyHandler(g) {
            const k = this.GetObjectClass();
            if(k.UserScriptDispatcher().HasAnyHandlerFor(g)) return !0;
            for(const m of k.GetFamilies())
                if(m.UserScriptDispatcher().HasAnyHandlerFor(g)) return !0;
            return this._runtime.UserScriptDispatcher().HasAnyHandlerFor(g) ? !0 : !1
        }
        _TriggerOnCreatedOnSelfAndRelated() {
            const g =
                new Set;
            g.add(this);
            const k = this.GetWorldInfo();
            if(k && k.HasChildren())
                for(const m of this.allChildren())
                    if(g.add(m), m.IsInContainer())
                        for(const p of m.siblings()) g.add(p);
            if(this.IsInContainer())
                for(const m of this.siblings()) g.add(m);
            for(const m of g.values()) m._TriggerOnCreated()
        }
        _TriggerOnCreated() {
            if(this._HasAnyCreateDestroyHandler("instancecreate")) {
                const g = this.GetObjectClass(),
                    k = new e.Event("instancecreate");
                k.instance = this.GetInterfaceClass();
                g.DispatchUserScriptEvent(k);
                for(const m of g.GetFamilies()) m.DispatchUserScriptEvent(k);
                this._runtime.DispatchUserScriptEvent(k)
            }
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnCreated, this, null)
        }
        _TriggerOnDestroyed() {
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnDestroyed, this, null)
        }
        _FireDestroyedScriptEvents(g) {
            if(this._iScriptInterface) {
                var k = new e.Event("destroy");
                k.isEndingLayout = g;
                this.DispatchUserScriptEvent(k)
            }
            if(this._HasAnyCreateDestroyHandler("instancedestroy")) {
                k = this.GetObjectClass();
                var m = new e.Event("instancedestroy");
                m.instance = this.GetInterfaceClass();
                m.isEndingLayout = g;
                k.DispatchUserScriptEvent(m);
                for(const p of k.GetFamilies()) p.DispatchUserScriptEvent(m);
                this._runtime.DispatchUserScriptEvent(m)
            }
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson(g = "full") {
            const k = {};
            "full" === g ? k.uid = this.GetUID() : k.c3 = !0;
            if("visual-state" !== g) {
                var m = f.get(this);
                m && m.size && (k.ex = e.ToSuperJSON(m)); - 1 !== this.GetTimeScale() && (k.mts = this.GetTimeScale());
                if(0 < this._objectType.GetInstanceVariablesCount()) {
                    m = {};
                    var p = this._objectType.GetInstanceVariableSIDs();
                    for(let x = 0, t = this._instVarValues.length; x < t; ++x) m[p[x].toString()] = this._instVarValues[x];
                    k.ivs = m
                }
                if(this._behaviorInstances.length) {
                    m = {};
                    for(const x of this._behaviorInstances)(p = x.SaveToJson()) && (m[x.GetBehaviorType().GetSID().toString()] = p);
                    k.behs = m
                }
            }
            this._worldInfo && (k.w = this._worldInfo._SaveToJson(g));
            (g = this._sdkInst.SaveToJson()) && (k.data = g);
            return k
        }
        _OnBeforeLoad(g = "full") {
            this._worldInfo && this._worldInfo._OnBeforeLoad(g)
        }
        LoadFromJson(g, k = "full") {
            if("full" === k) this._uid = g.uid;
            else if(!g.c3) return;
            if("visual-state" !== k) {
                var m = f.get(this);
                m && (m.clear(), f.delete(this));
                if(m = g.ex) m = e.FromSuperJSON(m), f.set(this, m);
                this._timeScale = g.hasOwnProperty("mts") ? g.mts : -1;
                if(m = g.ivs)
                    for(const [t, q] of Object.entries(m))
                        if(m = parseInt(t, 10), m = this._objectType.GetInstanceVariableIndexBySID(m), !(0 > m || m >= this._instVarValues.length)) {
                            var p = q;
                            null === p && (p = NaN);
                            this._instVarValues[m] = p
                        }
            }
            if(this.GetPlugin().IsWorldType()) {
                m = g.w;
                var x = m.l;
                this._worldInfo.GetLayer().GetSID() !== x && (p = this._worldInfo.GetLayer(), (x = p.GetLayout().GetLayerBySID(x)) ?
                    (this._worldInfo._SetLayer(x), p._RemoveInstance(this, !0), x._AddInstance(this, !0), x.SetZIndicesChanged(), this._worldInfo.SetBboxChanged()) : "full" === k && this._runtime.DestroyInstance(this));
                this._worldInfo._LoadFromJson(m, k)
            }
            if("visual-state" !== k && (k = g.behs))
                for(const [t, q] of Object.entries(k)) k = parseInt(t, 10), k = this.GetBehaviorIndexBySID(k), 0 > k || k >= this._behaviorInstances.length || this._behaviorInstances[k].LoadFromJson(q);
            (g = g.data) && this._sdkInst.LoadFromJson(g)
        }
        GetInterfaceClass() {
            return this._iScriptInterface ||
                this._InitUserScriptInterface()
        }
        _InitUserScriptInterface() {
            var g = this._worldInfo ? self.IWorldInstance : a;
            const k = this._sdkInst.GetScriptInterfaceClass(),
                m = this._objectType._GetUserScriptInstanceClass(),
                p = m || k || g;
            a._Init(this);
            this._iScriptInterface = new p;
            a._Init(null);
            if(k && !(this._iScriptInterface instanceof g)) throw new TypeError(`script interface class '${k.name}' does not extend the right base class '${g.name}'`);
            if(m && (g = k || g, !(this._iScriptInterface instanceof g))) throw new TypeError(`setInstanceClass(): class '${m.name}' does not extend the right base class '${g.name}'`);
            return this._iScriptInterface
        }
        _GetInstVarsScriptDescriptor(g) {
            if(0 !== this._instVarValues.length) {
                var k = {},
                    m = this._objectType._GetAllInstanceVariableJsPropNames();
                for(let p = 0, x = m.length; p < x; ++p) k[m[p]] = {
                    configurable: !1,
                    enumerable: !0,
                    get: e.Instance.prototype._GetInstanceVariableTypedValue.bind(this, p),
                    set: e.Instance.prototype.SetInstanceVariableValue.bind(this, p)
                };
                k = Object.create(Object.prototype, k);
                g.instVars = {
                    value: k,
                    writable: !1
                }
            }
        }
        _GetBehaviorsScriptDescriptor(g) {
            var k = this._behaviorInstances;
            if(0 !==
                k.length) {
                var m = {};
                for(const p of k) m[p.GetBehaviorType().GetJsPropName()] = {
                    value: p.GetScriptInterface(),
                    writable: !1
                };
                k = Object.create(Object.prototype, m);
                g.behaviors = {
                    value: k,
                    writable: !1
                }
            }
        }
        DispatchUserScriptEvent(g) {
            g.instance = this.GetInterfaceClass();
            var k = this._runtime;
            (k = k.IsDebug() && !k.GetEventSheetManager().IsInEventEngine()) && b.StartMeasuringScriptTime();
            this.GetInterfaceClass().dispatchEvent(g);
            k && b.AddScriptTime()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SceneGraphInfo = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._owner = b;
            this._parent = null;
            this._children = [];
            this._startWidth = b.GetWidth();
            this._startHeight = b.GetHeight();
            this._startScaleY = this._startScaleX = 1;
            this._parentStartAngle = 0
        }
        Release() {
            this._parent = null;
            e.clearArray(this._children)
        }
        SetParent(b) {
            this._parentStartAngle = (this._parent = b) ? b.GetAngle() : 0
        }
        GetParent() {
            return this._parent
        }
        HasChildren() {
            return 0 < this._children.length
        }
        GetChildren() {
            return this._children
        }
        GetStartScaleX() {
            return this._startScaleX
        }
        SetStartScaleX(b) {
            this._startScaleX =
                b
        }
        GetStartScaleY() {
            return this._startScaleY
        }
        SetStartScaleY(b) {
            this._startScaleY = b
        }
        _GetStartWidth() {
            return this._startWidth
        }
        _GetStartHeight() {
            return this._startHeight
        }
        GetParentScaleX() {
            return this._owner.GetTransformWithParentWidth() ? this._parent.GetWidth() / this._parent._GetSceneGraphInfo()._GetStartWidth() : 1
        }
        GetParentScaleY() {
            return this._owner.GetTransformWithParentHeight() ? this._parent.GetHeight() / this._parent._GetSceneGraphInfo()._GetStartHeight() : 1
        }
        GetParentStartAngle() {
            return this._parentStartAngle
        }
        _SaveToJson() {
            return {
                sw: this._startWidth,
                sh: this._startHeight,
                sx: this._startScaleX,
                sy: this._startScaleY,
                psa: this._parentStartAngle,
                c: this._children.map(b => {
                    let a = "";
                    b.GetTransformWithParentX() && (a += "x");
                    b.GetTransformWithParentY() && (a += "y");
                    b.GetTransformWithParentWidth() && (a += "w");
                    b.GetTransformWithParentHeight() && (a += "h");
                    b.GetTransformWithParentAngle() && (a += "a");
                    b.GetTransformWithParentZElevation() && (a += "z");
                    b.GetDestroyWithParent() && (a += "d");
                    return {
                        uid: b.GetInstance().GetUID(),
                        f: a
                    }
                })
            }
        }
        _LoadFromJson(b) {
            this._startWidth = b.sw;
            this._startHeight =
                b.sh;
            this._startScaleX = b.sx;
            this._startScaleY = b.sy;
            this._parentStartAngle = b.psa
        }
        _OnAfterLoad(b) {
            const a = this._owner,
                d = a.GetRuntime();
            for(const c of b.c) {
                b = d.GetInstanceByUID(c.uid).GetWorldInfo();
                const f = c.f,
                    h = {};
                h.transformX = f.includes("x");
                h.transformY = f.includes("y");
                h.transformWidth = f.includes("w");
                h.transformHeight = f.includes("h");
                h.transformAngle = f.includes("a");
                h.transformZElevation = f.includes("z");
                h.destroyWithParent = f.includes("d");
                a.AddChild(b, h)
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.glMatrix,
        a = b.vec3,
        d = b.vec4,
        c = e.New(e.Rect),
        f = e.New(e.Quad),
        h = e.New(e.Event, "bboxchange", !1),
        g = e.New(e.Color, 0, 0, 0, 0),
        k = e.New(e.CollisionPoly),
        m = e.New(e.Color, 1, 1, 1, 1),
        p = e.New(e.Rect, 0, 0, -1, -1),
        x = e.New(e.Rect, 0, 0, -1, -1),
        t = new Set(["absolute", "relative"]),
        q = [],
        r = a.create(),
        y = d.create();
    let v = !0;
    e.WorldInfo = class extends e.DefendedBase {
        constructor(u, A) {
            super();
            this._inst = u;
            this._objectClass = u.GetObjectClass();
            this._runtime = u.GetRuntime();
            this._layer = A;
            this._zIndex = -1;
            this._flags = 196635;
            this._objectClass.GetPlugin().IsRotatable() && (this._flags |= 128);
            this._oy = this._ox = this._cosA = this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = NaN;
            this._boundingBox = e.New(e.Rect);
            this._boundingQuad = e.New(e.Quad);
            this._collisionCells = x;
            this._renderCells = p;
            this._solidFilterTags = this._transformedPolyInfo = this._sourceCollisionPoly = null;
            this._colorPremultiplied = this._color = m;
            this._instanceEffectList = this._stateGroup = null;
            this._inst.GetObjectClass().UsesEffects() &&
                (this._instanceEffectList = e.New(e.InstanceEffectList, this._inst, this));
            this._sceneGraphInfo = null;
            this._sceneGraphFlagsExportData = NaN;
            this._sceneGraphChildrenExportData = null;
            this._sceneGraphZIndex = this._sceneGraphZIndexExportData = NaN;
            this._meshInfo = null
        }
        _MarkDestroyed() {
            this._flags |= 256
        }
        Release() {
            this._stateGroup && (this._runtime.GetRenderer().ReleaseStateGroup(this._stateGroup), this._stateGroup = null);
            this._sourceCollisionPoly = null;
            this._transformedPolyInfo && (this._transformedPolyInfo.poly.Release(),
                this._transformedPolyInfo = null);
            this._solidFilterTags && (this._solidFilterTags.clear(), this._solidFilterTags = null);
            this.ReleaseMesh();
            this.HasParent() && this.GetParent().RemoveChild(this);
            if(this.HasChildren()) {
                const u = [...this.GetChildren()];
                for(const A of u) this.RemoveChild(A)
            }
            this._ReleaseSceneGraphInfo();
            this._layer = this._runtime = this._objectClass = this._inst = null
        }
        Init(u) {
            v = !1;
            this.SetXY(u[0], u[1]);
            this.SetZElevation(u[2]);
            this.SetSize(u[3], u[4]);
            this._depth = 0;
            this.IsRotatable() ? this.SetAngle(u[6]) :
                this._a = 0;
            g.setFromJSON(u[7]);
            this._SetColor(g);
            this.SetOriginX(u[8]);
            this.SetOriginY(u[9]);
            this.SetBlendMode(u[10]);
            this._instanceEffectList && this._instanceEffectList._LoadEffectParameters(u[12]);
            u[14] && (this._sceneGraphFlagsExportData = u[14][0], this._sceneGraphChildrenExportData = u[14][1], this._sceneGraphZIndexExportData = u[14][2]);
            if(u[15]) {
                var A = u[15];
                this.CreateMesh(A[0], A[1]);
                u = this.GetSourceMesh();
                A = A[2];
                for(let z = 0, C = A.length; z < C; ++z) {
                    const E = A[z];
                    for(let J = 0, F = E.length; J < F; ++J) {
                        const H = E[J],
                            K = u.GetMeshPointAt(J, z);
                        K.SetX(H[0]);
                        K.SetY(H[1]);
                        K.SetZElevation(H[2]);
                        K.SetU(H[3]);
                        K.SetV(H[4])
                    }
                }
            }
            v = !0;
            this._UpdateRendererStateGroup()
        }
        InitNoData() {
            this._sinA = this._a = this._depth = this._h = this._w = this._zElevation = this._y = this._x = 0;
            this._cosA = 1;
            this._oy = this._ox = 0;
            this._UpdateRendererStateGroup()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetInstance() {
            return this._inst
        }
        _GetParentOffsetAngle() {
            return this.GetTransformWithParentAngle() ? this.GetParent().GetAngle() -
                this._sceneGraphInfo.GetParentStartAngle() : 0
        }
        SetX(u) {
            u = +u;
            if(this.GetTransformWithParentX()) {
                const A = this._sceneGraphInfo;
                u -= this.GetX();
                const z = -this._GetParentOffsetAngle();
                0 === z ? this._x += u / A.GetParentScaleX() : (this._x += Math.cos(z) * u / A.GetParentScaleX(), this.GetTransformWithParentY() && (this._y += Math.sin(z) * u / A.GetParentScaleY()))
            } else this._x = u
        }
        OffsetX(u) {
            u = +u;
            this.GetTransformWithParentX() ? this.SetX(this.GetX() + u) : this._x += u
        }
        GetX() {
            if(this.GetTransformWithParentX()) {
                let u = this._x;
                const A = this._sceneGraphInfo,
                    z = this.GetParent(),
                    C = this._GetParentOffsetAngle();
                0 === C ? u *= A.GetParentScaleX() : (u = u * A.GetParentScaleX() * Math.cos(C), this.GetTransformWithParentY() && (u -= this._y * A.GetParentScaleY() * Math.sin(C)));
                return z.GetX() + u
            }
            return this._x
        }
        SetY(u) {
            u = +u;
            if(this.GetTransformWithParentY()) {
                const A = this._sceneGraphInfo;
                u -= this.GetY();
                const z = -this._GetParentOffsetAngle();
                0 === z ? this._y += u / A.GetParentScaleY() : (this.GetTransformWithParentX() && (this._x -= Math.sin(z) * u / A.GetParentScaleX()), this._y += Math.cos(z) * u / A.GetParentScaleY())
            } else this._y =
                u
        }
        OffsetY(u) {
            u = +u;
            this.GetTransformWithParentY() ? this.SetY(this.GetY() + u) : this._y += u
        }
        GetY() {
            if(this.GetTransformWithParentY()) {
                let u = this._y;
                const A = this._sceneGraphInfo,
                    z = this.GetParent(),
                    C = this._GetParentOffsetAngle();
                0 === C ? u *= A.GetParentScaleY() : (u = u * A.GetParentScaleY() * Math.cos(C), this.GetTransformWithParentX() && (u += this._x * A.GetParentScaleX() * Math.sin(C)));
                return z.GetY() + u
            }
            return this._y
        }
        SetXY(u, A) {
            u = +u;
            A = +A;
            if(this.GetTransformWithParentXOrY()) {
                const C = this.GetTransformWithParentX(),
                    E = this.GetTransformWithParentY(),
                    J = this._sceneGraphInfo,
                    F = u - this.GetX(),
                    H = A - this.GetY();
                var z = -this._GetParentOffsetAngle();
                if(0 === z) this._x = C ? this._x + F / J.GetParentScaleX() : u, this._y = E ? this._y + H / J.GetParentScaleY() : A;
                else {
                    const K = Math.sin(z);
                    z = Math.cos(z);
                    this._x = C ? E ? this._x + (z * F - K * H) / J.GetParentScaleX() : this._x + z * F / J.GetParentScaleX() : u;
                    this._y = E ? C ? this._y + (K * F + z * H) / J.GetParentScaleY() : this._y + z * H / J.GetParentScaleY() : A
                }
            } else this._x = u, this._y = A
        }
        OffsetXY(u, A) {
            u = +u;
            A = +A;
            this.GetTransformWithParentXOrY() ? this.SetXY(this.GetX() + u, this.GetY() +
                A) : (this._x += u, this._y += A)
        }
        EqualsXY(u, A) {
            return this.GetX() === u && this.GetY() === A
        }
        SetZElevation(u) {
            u = +u;
            this.GetTransformWithParentZElevation() && (u -= this.GetParent().GetZElevation());
            this._zElevation !== u && (this._zElevation = u, this._UpdateZElevation(), u = this.GetLayer(), 0 !== this._zElevation && u._SetAnyInstanceZElevated(), u.SetZIndicesChanged())
        }
        _UpdateZElevation() {
            this._UpdateRendererStateGroup();
            if(this.HasChildren()) {
                const u = this.GetChildren();
                for(let A = 0, z = u.length; A < z; A++) {
                    const C = u[A];
                    C.GetTransformWithParentZElevation() &&
                        C._UpdateZElevation()
                }
            }
        }
        OffsetZElevation(u) {
            this.SetZElevation(this.GetZElevation() + u)
        }
        GetZElevation() {
            return this.GetTransformWithParentZElevation() ? this.GetParent().GetZElevation() + this._zElevation : this._zElevation
        }
        GetTotalZElevation() {
            return this.GetLayer().GetZElevation() + this.GetZElevation()
        }
        SetWidth(u) {
            u = +u;
            this.GetTransformWithParentWidth() ? this._w *= u / this.GetWidth() : this._w = u
        }
        OffsetWidth(u) {
            u = +u;
            this.GetTransformWithParentWidth() ? this.SetWidth(this.GetWidth() + u) : this._w += u
        }
        GetWidth() {
            return this.GetTransformWithParentWidth() ?
                this.GetParent().GetWidth() * this._w : this._w
        }
        SetHeight(u) {
            u = +u;
            this.GetTransformWithParentHeight() ? this._h *= u / this.GetHeight() : this._h = u
        }
        OffsetHeight(u) {
            u = +u;
            this.GetTransformWithParentHeight() ? this.SetHeight(this.GetHeight() + u) : this._h += u
        }
        GetHeight() {
            return this.GetTransformWithParentHeight() ? this.GetParent().GetHeight() * this._h : this._h
        }
        SetSize(u, A) {
            u = +u;
            A = +A;
            this.GetTransformWithParentWidth() ? this._w *= u / this.GetWidth() : this._w = u;
            this.GetTransformWithParentHeight() ? this._h *= A / this.GetHeight() : this._h =
                A
        }
        GetDepth() {
            return this._depth
        }
        SetDepth(u) {
            if(0 > u) throw new RangeError("invalid depth");
            this._depth = u
        }
        GetSceneGraphScale() {
            if(this.HasParent()) {
                const u = this._sceneGraphInfo;
                return Math.min(u.GetParentScaleX(), u.GetParentScaleY())
            }
            return 1
        }
        IsRotatable() {
            return 0 !== (this._flags & 128)
        }
        SetAngle(u) {
            u = +u;
            this.IsRotatable() && (this.GetTransformWithParentAngle() && (u -= this.GetParent().GetAngle()), u = e.clampAngle(u), this._a !== u && (this._a = u, this._MarkSinCosAngleChanged()))
        }
        OffsetAngle(u) {
            u = +u;
            0 !== u && this.IsRotatable() &&
                (this._a = e.clampAngle(this._a + u), this._MarkSinCosAngleChanged())
        }
        _MarkSinCosAngleChanged() {
            this._flags |= 262144;
            if(this.HasChildren()) {
                const u = this.GetChildren();
                for(let A = 0, z = u.length; A < z; A++) u[A]._MarkSinCosAngleChanged()
            }
        }
        GetAngle() {
            return this.GetTransformWithParentAngle() ? e.clampAngle(this.GetParent().GetAngle() + this._a) : this._a
        }
        _MaybeUpdateSinCosAngle() {
            const u = this._flags;
            if(0 !== (u & 262144)) {
                var A = this.GetAngle();
                this._sinA = Math.sin(A);
                this._cosA = Math.cos(A);
                this._flags = u & -262145
            }
        }
        GetSinAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._sinA
        }
        GetCosAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._cosA
        }
        SetOriginX(u) {
            this._ox = +u
        }
        OffsetOriginX(u) {
            this._ox += +u
        }
        GetOriginX() {
            return this._ox
        }
        SetOriginY(u) {
            this._oy = +u
        }
        OffsetOriginY(u) {
            this._oy += +u
        }
        GetOriginY() {
            return this._oy
        }
        _SetColor(u) {
            this._color.equals(u) || (this._color === m ? (this._color = e.New(e.Color, u), this._colorPremultiplied = e.New(e.Color, u), this._colorPremultiplied.premultiply()) : u.equalsRgba(1, 1, 1, 1) ? this._colorPremultiplied = this._color = m : (this._color.set(u), this._colorPremultiplied.set(u),
                this._colorPremultiplied.premultiply()), this._UpdateRendererStateGroup())
        }
        SetOpacity(u) {
            u = e.clamp(+u, 0, 1);
            this._color.a !== u && (g.copyRgb(this._color), g.a = u, this._SetColor(g))
        }
        OffsetOpacity(u) {
            this.SetOpacity(this.GetOpacity() + u)
        }
        GetOpacity() {
            return this._color.a
        }
        SetUnpremultipliedColor(u) {
            this._color.equalsIgnoringAlpha(u) || (g.copyRgb(u), g.a = this._color.a, this._SetColor(g))
        }
        SetUnpremultipliedColorRGB(u, A, z) {
            g.setRgb(u, A, z);
            this.SetUnpremultipliedColor(g)
        }
        OffsetUnpremultipliedColorRGB(u, A, z) {
            if(0 !==
                u || 0 !== A || 0 !== z) g.copyRgb(this._color), g.r += u, g.g += A, g.b += z, this.SetUnpremultipliedColor(g)
        }
        GetUnpremultipliedColor() {
            return this._color
        }
        GetPremultipliedColor() {
            return this._colorPremultiplied
        }
        GetDestroyWithParent() {
            return 0 !== (this._flags & 512)
        }
        SetDestroyWithParent(u) {
            this._SetFlag(512, u)
        }
        GetTransformWithParentX() {
            return 0 !== (this._flags & 1024)
        }
        SetTransformWithParentX(u) {
            this._SetFlag(1024, u)
        }
        GetTransformWithParentY() {
            return 0 !== (this._flags & 2048)
        }
        GetTransformWithParentXOrY() {
            return 0 !== (this._flags &
                3072)
        }
        SetTransformWithParentY(u) {
            this._SetFlag(2048, u)
        }
        GetTransformWithParentWidth() {
            return 0 !== (this._flags & 4096)
        }
        SetTransformWithParentWidth(u) {
            this._SetFlag(4096, u)
        }
        GetTransformWithParentHeight() {
            return 0 !== (this._flags & 8192)
        }
        SetTransformWithParentHeight(u) {
            this._SetFlag(8192, u)
        }
        GetTransformWithParentAngle() {
            return 0 !== (this._flags & 16384)
        }
        SetTransformWithParentAngle(u) {
            this._SetFlag(16384, u)
        }
        GetTransformWithParentZElevation() {
            return 0 !== (this._flags & 32768)
        }
        SetTransformWithParentZElevation(u) {
            this._SetFlag(32768,
                u)
        }
        _ClearAllSceneGraphFlags() {
            this._flags &= -65025
        }
        AddChild(u, A) {
            if(u !== this && !u.HasParent() && !this._HasChildRecursive(u) && !this._HasAnyParent(u)) {
                var z = u.GetX(),
                    C = u.GetY(),
                    E = u.GetWidth(),
                    J = u.GetHeight(),
                    F = u.GetAngle(),
                    H = u.GetZElevation();
                u._SetParent(this);
                u.SetTransformWithParentX(A.transformX);
                u.SetTransformWithParentY(A.transformY);
                u.SetTransformWithParentWidth(A.transformWidth);
                u.SetTransformWithParentHeight(A.transformHeight);
                u.SetTransformWithParentAngle(A.transformAngle);
                u.SetTransformWithParentZElevation(A.transformZElevation);
                u.SetDestroyWithParent(A.destroyWithParent);
                A.transformX && (u._x = z - this.GetX(), A.transformWidth && (u._x /= this.GetWidth() / this._sceneGraphInfo._GetStartWidth()));
                A.transformY && (u._y = C - this.GetY(), A.transformHeight && (u._y /= this.GetHeight() / this._sceneGraphInfo._GetStartHeight()));
                A.transformWidth && (u._w = E / this.GetWidth(), u._sceneGraphInfo.SetStartScaleX(u._w));
                A.transformHeight && (u._h = J / this.GetHeight(), u._sceneGraphInfo.SetStartScaleY(u._h));
                A.transformAngle && (u._a = F - this.GetAngle());
                A.transformZElevation &&
                    (u._zElevation = H - this.GetZElevation());
                this._AddChildToSceneGraphInfo(u);
                this.SetBboxChanged()
            }
        }
        RemoveChild(u) {
            if(u.GetParent() === this) {
                var A = u.GetX(),
                    z = u.GetY(),
                    C = u.GetWidth(),
                    E = u.GetHeight(),
                    J = u.GetAngle(),
                    F = u.GetZElevation();
                u._SetParent(null);
                u._ClearAllSceneGraphFlags();
                u.SetXY(A, z);
                u.SetSize(C, E);
                u.SetAngle(J);
                u.SetZElevation(F);
                this._RemoveChildFromSceneGraphInfo(u);
                this.SetBboxChanged()
            }
        }
        _ResetAllSceneGraphState() {
            for(var u of this.children()) this.RemoveChild(u);
            (u = this.GetParent()) && u.RemoveChild(this);
            this._ClearAllSceneGraphFlags()
        }
        HasParent() {
            return null !== this.GetParent()
        }
        GetParent() {
            const u = this._sceneGraphInfo;
            return null !== u ? u.GetParent() : null
        }
        GetTopParent() {
            let u = this;
            for(; u.HasParent();) u = u.GetParent();
            return u
        }* parents() {
            let u = this.GetParent();
            for(; u;) yield u, u = u.GetParent()
        }
        HasChild(u) {
            return this.GetChildren().includes(u)
        }
        HasChildren() {
            const u = this._sceneGraphInfo;
            return null !== u ? u.HasChildren() : !1
        }
        GetChildren() {
            const u = this._sceneGraphInfo;
            return null !== u ? u.GetChildren() : q
        }
        children() {
            return this.GetChildren()
        }* allChildren() {
            for(const u of this.children()) yield u,
                yield* u.allChildren()
        }
        GetChildCount() {
            return this.GetChildren().length
        }
        GetChildAt(u) {
            const A = this.GetChildren();
            u = Math.floor(+u);
            return 0 > u || u >= A.length ? null : A[u]
        }
        _CreateSceneGraphInfo(u) {
            this._sceneGraphInfo || (this._sceneGraphInfo = e.New(e.SceneGraphInfo, this));
            u && this._sceneGraphInfo.SetParent(u)
        }
        _GetSceneGraphInfo() {
            return this._sceneGraphInfo
        }
        _ReleaseSceneGraphInfo() {
            this._sceneGraphInfo && (this._sceneGraphInfo.Release(), this._sceneGraphInfo = null)
        }
        _SetParent(u) {
            u ? (u._CreateSceneGraphInfo(null),
                this._CreateSceneGraphInfo(u)) : (this._sceneGraphInfo && this._sceneGraphInfo.SetParent(null), this.HasChildren() || this._ReleaseSceneGraphInfo())
        }
        _HasAnyParent(u) {
            if(!this.HasParent()) return !1;
            const A = this.GetParent();
            return A === u ? !0 : A._HasAnyParent(u)
        }
        _HasChildRecursive(u) {
            if(this.HasChild(u)) return !0;
            for(const A of this.GetChildren())
                if(A._HasChildRecursive(u)) return !0;
            return !1
        }
        _AddChildToSceneGraphInfo(u) {
            this._sceneGraphInfo.GetChildren().push(u)
        }
        _RemoveChildFromSceneGraphInfo(u) {
            const A = this._sceneGraphInfo.GetChildren(),
                z = A.indexOf(u); - 1 !== z && A.splice(z, 1);
            0 !== A.length || this.HasParent() || this._ReleaseSceneGraphInfo();
            u.HasChildren() || u._ReleaseSceneGraphInfo()
        }
        GetSceneGraphChildrenExportData() {
            return this._sceneGraphChildrenExportData
        }
        GetSceneGraphZIndexExportData() {
            return this._sceneGraphZIndexExportData
        }
        GetSceneGraphZIndex() {
            return this._sceneGraphZIndex
        }
        SetSceneGraphZIndex(u) {
            this._sceneGraphZIndex = u
        }
        SetUsePointsShaderProgram() {
            this._SetFlag(524288, !0);
            this._UpdateRendererStateGroup()
        }
        _UpdateRendererStateGroup() {
            if(v) {
                var u =
                    this._runtime.GetRenderer();
                this._stateGroup && u.ReleaseStateGroup(this._stateGroup);
                var A = 0 !== (this._flags & 524288) ? u.GetPointsRenderingProgram() || "<point>" : u.GetTextureFillShaderProgram() || "<default>";
                this._stateGroup = u.AcquireStateGroup(A, this.GetBlendMode(), this._colorPremultiplied, this.GetZElevation())
            }
        }
        GetRendererStateGroup() {
            return this._stateGroup
        }
        HasDefaultColor() {
            return this._color === m
        }
        SetBlendMode(u) {
            u |= 0;
            if(0 > u || 31 < u) throw new RangeError("invalid blend mode");
            this.GetBlendMode() !== u && (this._flags =
                this._flags & -2080374785 | u << 26, this._UpdateRendererStateGroup())
        }
        GetBlendMode() {
            return (this._flags & 2080374784) >> 26
        }
        _SetLayer(u) {
            this._layer = u;
            0 !== this.GetZElevation() && this._layer._SetAnyInstanceZElevated()
        }
        GetLayer() {
            return this._layer
        }
        GetLayout() {
            return this.GetLayer().GetLayout()
        }
        _SetZIndex(u) {
            this._zIndex = u | 0
        }
        GetZIndex() {
            this._layer._UpdateZIndices();
            return this._zIndex
        }
        _GetLastCachedZIndex() {
            return this._zIndex
        }
        _SetFlag(u, A) {
            this._flags = A ? this._flags | u : this._flags & ~u
        }
        IsVisible() {
            return 0 !== (this._flags &
                1)
        }
        SetVisible(u) {
            this._SetFlag(1, u)
        }
        IsCollisionEnabled() {
            return 0 !== (this._flags & 8)
        }
        SetCollisionEnabled(u) {
            u = !!u;
            this.IsCollisionEnabled() !== u && (this._SetFlag(8, u), u ? this.SetBboxChanged() : this._RemoveFromCollisionCells())
        }
        SetSolidCollisionFilter(u, A) {
            this._SetFlag(32, u);
            this._solidFilterTags && this._solidFilterTags.clear();
            if(A.trim()) {
                this._solidFilterTags || (this._solidFilterTags = new Set);
                for(const z of A.split(" ")) z && this._solidFilterTags.add(z.toLowerCase())
            } else this._solidFilterTags = null
        }
        IsSolidCollisionAllowed(u) {
            const A =
                0 !== (this._flags & 32),
                z = this._solidFilterTags;
            if(!u || !z) return !A;
            for(const C of z)
                if(u.has(C)) return A;
            return !A
        }
        SetBboxChanged() {
            this._flags |= 65554;
            this._objectClass._SetAnyCollisionCellChanged(!0);
            this._runtime.UpdateRender();
            this._layer.UsesRenderCells() && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0), this._flags &= -3, this._UpdateRenderCell());
            0 !== (this._flags & 4) && this._inst.Dispatcher().dispatchEvent(h);
            if(null !== this._sceneGraphInfo) {
                const u = this._sceneGraphInfo.GetChildren();
                for(let A =
                        0, z = u.length; A < z; ++A) u[A].SetBboxChanged()
            }
        }
        CalculateBbox(u, A, z) {
            const C = this.GetX(),
                E = this.GetY(),
                J = this.GetWidth(),
                F = this.GetHeight(),
                H = this.GetAngle();
            u.setWH(C - this._ox * J, E - this._oy * F, J, F);
            z && this.HasMesh() && this._ExpandBboxForMesh(u);
            0 === H ? A.setFromRect(u) : (u.offset(-C, -E), A.setFromRotatedRectPrecalc(u, this.GetSinAngle(), this.GetCosAngle()), A.offset(C, E), A.getBoundingBox(u));
            u.normalize()
        }
        _UpdateBbox() {
            const u = this._flags;
            0 !== (u & 2) && (this.CalculateBbox(this._boundingBox, this._boundingQuad, !0),
                this._flags = u & -3)
        }
        GetBoundingBox() {
            this._UpdateBbox();
            return this._boundingBox
        }
        GetBoundingQuad() {
            this._UpdateBbox();
            return this._boundingQuad
        }
        PixelRoundQuad(u) {
            var A = this.GetX(),
                z = this.GetY();
            A = Math.round(A) - A;
            z = Math.round(z) - z;
            if(0 === A && 0 === z) return u;
            f.copy(u);
            f.offset(A, z);
            return f
        }
        OverwriteBoundingBox(u) {
            this._boundingBox.copy(u);
            this._boundingQuad.setFromRect(this._boundingBox);
            this._flags &= -3;
            this._UpdateCollisionCell();
            this._UpdateRenderCell()
        }
        SetBboxChangeEventEnabled(u) {
            this._SetFlag(4, u)
        }
        IsBboxChangeEventEnabled() {
            return 0 !==
                (this._flags & 4)
        }
        IsInViewport(u, A) {
            return A && 0 !== this.GetDepth() ? this._IsInViewport_3D() : 0 === this.GetZElevation() ? u.intersectsRect(this.GetBoundingBox()) : this._IsInViewport_ZElevated()
        }
        _IsInViewport_ZElevated() {
            const u = this.GetLayer(),
                A = this.GetTotalZElevation();
            if(A >= u.GetCameraZ()) return !1;
            u.GetViewportForZ(A, c);
            return c.intersectsRect(this.GetBoundingBox())
        }
        _IsInViewport_3D() {
            var u = this.GetBoundingBox();
            const A = u.getLeft(),
                z = u.getRight(),
                C = u.getTop();
            u = u.getBottom();
            const E = this.GetTotalZElevation(),
                J = E + this.GetDepth();
            return this.GetLayer()._GetViewFrustum().ContainsAABB(A, C, E, z, u, J)
        }
        _ProjectToUnitViewport(u, A, z, C, E) {
            r[0] = NaN;
            r[1] = NaN;
            e.Gfx.Project(z, C, E, A, u, y, r);
            return [r[0], r[1]]
        }
        SetSourceCollisionPoly(u) {
            this._sourceCollisionPoly = u;
            this._DiscardTransformedCollisionPoly();
            this.HasMesh() && (this._meshInfo.meshPoly = null)
        }
        GetSourceCollisionPoly() {
            return this._sourceCollisionPoly
        }
        HasOwnCollisionPoly() {
            return null !== this._sourceCollisionPoly || this.HasMesh()
        }
        GetTransformedCollisionPoly() {
            return this._GetCustomTransformedCollisionPolyPrecalc(this.GetWidth(),
                this.GetHeight(), this.GetAngle(), this.GetSinAngle(), this.GetCosAngle())
        }
        GetCustomTransformedCollisionPoly(u, A, z) {
            let C = 0,
                E = 1;
            0 !== z && (C = Math.sin(z), E = Math.cos(z));
            return this._GetCustomTransformedCollisionPolyPrecalc(u, A, z, C, E)
        }
        _GetCustomTransformedCollisionPolyPrecalc(u, A, z, C, E) {
            let J = this._transformedPolyInfo;
            null === J && (this._transformedPolyInfo = J = {
                poly: e.New(e.CollisionPoly),
                width: NaN,
                height: NaN,
                angle: NaN
            });
            const F = J.poly;
            if(J.width === u && J.height === A && J.angle === z) return F;
            const H = this._sourceCollisionPoly;
            if(this.HasMesh()) {
                const K = this.GetOriginX(),
                    N = this.GetOriginY(),
                    S = this.GetSourceMesh();
                let V = this._meshInfo.meshPoly;
                V || (H ? (k.copy(H), k.offset(K, N)) : k.setDefaultPoints(), V = S.InsertPolyMeshVertices(k), this._meshInfo.meshPoly = V);
                S.TransformCollisionPoly(V, F);
                F.offset(-K, -N);
                F.transformPrecalc(u, A, C, E)
            } else H ? (F.copy(H), F.transformPrecalc(u, A, C, E)) : F.setFromQuad(this.GetBoundingQuad(), -this.GetX(), -this.GetY());
            J.width = u;
            J.height = A;
            J.angle = z;
            return F
        }
        _DiscardTransformedCollisionPoly() {
            this.SetPhysicsBodyChanged(!0);
            const u = this._transformedPolyInfo;
            null !== u && (u.width = NaN)
        }
        CreateMesh(u, A) {
            u = Math.floor(u);
            A = Math.floor(A);
            if(!this.GetInstance().GetPlugin().SupportsMesh()) throw Error("object does not support mesh");
            this.ReleaseMesh();
            this._meshInfo = {
                sourceMesh: e.New(e.Gfx.Mesh, u, A),
                transformedMesh: e.New(e.Gfx.Mesh, u, A),
                meshPoly: null
            }
        }
        HasMesh() {
            return null !== this._meshInfo
        }
        GetSourceMesh() {
            if(!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.sourceMesh
        }
        GetTransformedMesh() {
            if(!this.HasMesh()) throw Error("no mesh");
            return this._meshInfo.transformedMesh
        }
        SetMeshChanged(u) {
            this._SetFlag(65536, u)
        }
        IsMeshChanged() {
            return 0 !== (this._flags & 65536)
        }
        SetPhysicsBodyChanged(u) {
            this._SetFlag(131072, u)
        }
        IsPhysicsBodyChanged() {
            return 0 !== (this._flags & 131072)
        }
        _ExpandBboxForMesh(u) {
            var A = this._meshInfo.sourceMesh;
            const z = Math.min(A.GetMinX(), 0),
                C = Math.min(A.GetMinY(), 0),
                E = Math.max(A.GetMaxX(), 1);
            A = Math.max(A.GetMaxY(), 1);
            const J = u.width(),
                F = u.height();
            u.offsetLeft(z * J);
            u.offsetTop(C * F);
            u.offsetRight((E - 1) * J);
            u.offsetBottom((A -
                1) * F)
        }
        ReleaseMesh() {
            this._meshInfo && (this._meshInfo.sourceMesh.Release(), this._meshInfo.transformedMesh.Release(), this._meshInfo = null, this._DiscardTransformedCollisionPoly())
        }
        SetMeshPoint(u, A, z) {
            u = Math.floor(u);
            A = Math.floor(A);
            var C = z.mode || "absolute";
            if(!t.has(C)) throw Error("invalid mode");
            C = "relative" === C;
            let E = z.x,
                J = z.y;
            const F = z.zElevation;
            let H = "number" === typeof z.u ? z.u : C ? 0 : -1;
            z = "number" === typeof z.v ? z.v : C ? 0 : -1;
            if(!this.HasMesh()) return !1;
            const K = this.GetSourceMesh(),
                N = K.GetMeshPointAt(u, A);
            if(null === N) return !1;
            let S = !1;
            "number" === typeof F && N.GetZElevation() !== F && (N.SetZElevation(F), S = !0);
            C && (E += u / (K.GetHSize() - 1), J += A / (K.GetVSize() - 1)); - 1 !== H || C ? (C && (H += u / (K.GetHSize() - 1)), H = e.clamp(H, 0, 1)) : H = N.GetU(); - 1 !== z || C ? (C && (z += A / (K.GetVSize() - 1)), z = e.clamp(z, 0, 1)) : z = N.GetV();
            if(N.GetX() === E && N.GetY() === J && N.GetU() === H && N.GetV() === z) return S;
            N.SetX(E);
            N.SetY(J);
            N.SetU(H);
            N.SetV(z);
            this._DiscardTransformedCollisionPoly();
            return !0
        }
        HasTilemap() {
            return this._inst.HasTilemap()
        }
        ContainsPoint(u, A) {
            return this.GetBoundingBox().containsPoint(u,
                A) && this.GetBoundingQuad().containsPoint(u, A) ? this.HasTilemap() ? this._inst.GetSdkInstance().TestPointOverlapTile(u, A) : this.HasOwnCollisionPoly() ? this.GetTransformedCollisionPoly().containsPoint(u - this.GetX(), A - this.GetY()) : !0 : !1
        }
        _IsCollisionCellChanged() {
            return 0 !== (this._flags & 16)
        }
        _UpdateCollisionCell() {
            if(this._IsCollisionCellChanged() && this.IsCollisionEnabled() && 0 === (this._flags & 256)) {
                var u = this.GetBoundingBox(),
                    A = this._objectClass._GetCollisionCellGrid(),
                    z = this._collisionCells;
                c.set(A.XToCell(u.getLeft()),
                    A.YToCell(u.getTop()), A.XToCell(u.getRight()), A.YToCell(u.getBottom()));
                z.equals(c) || (u = this._inst, z === x ? (A.Update(u, null, c), this._collisionCells = e.New(e.Rect, c)) : (A.Update(u, z, c), z.copy(c)), this._flags &= -17)
            }
        }
        _RemoveFromCollisionCells() {
            const u = this._collisionCells;
            u !== x && (this._objectClass._GetCollisionCellGrid().Update(this._inst, u, null), this._collisionCells = x)
        }
        _UpdateRenderCell() {
            const u = this.GetLayer();
            if(u.UsesRenderCells() && 0 === (this._flags & 256)) {
                var A = u.GetRenderGrid(),
                    z = this.GetBoundingBox(),
                    C = this._renderCells;
                c.set(A.XToCell(z.getLeft()), A.YToCell(z.getTop()), A.XToCell(z.getRight()), A.YToCell(z.getBottom()));
                C.equals(c) || (z = this._inst, C === p ? (A.Update(z, null, c), this._renderCells = e.New(e.Rect, c)) : (A.Update(z, C, c), C.copy(c)), u.SetRenderListStale())
            }
        }
        _RemoveFromRenderCells() {
            const u = this._renderCells;
            u !== p && (this.GetLayer().GetRenderGrid().Update(this._inst, u, null), this._renderCells = p)
        }
        GetRenderCellRange() {
            return this._renderCells
        }
        ZOrderMoveToTop() {
            const u = this._inst,
                A = this._layer,
                z = A._GetInstances();
            z.length && z[z.length - 1] === u || (A._RemoveInstance(u, !1), A._AddInstance(u, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToBottom() {
            const u = this._inst,
                A = this._layer,
                z = A._GetInstances();
            z.length && z[0] === u || (A._RemoveInstance(u, !1), A._PrependInstance(u, !1), this._runtime.UpdateRender())
        }
        ZOrderMoveToLayer(u) {
            const A = this._inst,
                z = this._layer;
            if(z.GetLayout() !== u.GetLayout()) throw Error("layer from different layout");
            u !== z && (z._RemoveInstance(A, !0), this._SetLayer(u), u._AddInstance(A, !0), this._runtime.UpdateRender())
        }
        ZOrderMoveAdjacentToInstance(u,
            A) {
            const z = this._inst;
            let C = !1;
            const E = this._layer;
            if(u.GetUID() !== z.GetUID()) {
                var J = u.GetWorldInfo();
                if(!J) throw Error("expected world instance");
                J = J.GetLayer();
                E.GetIndex() !== J.GetIndex() && (E._RemoveInstance(z, !0), this._SetLayer(J), J._AddInstance(z, !0), C = !0);
                u = J.MoveInstanceAdjacent(z, u, !!A);
                (C || u) && this._runtime.UpdateRender()
            }
        }
        GetInstanceEffectList() {
            return this._instanceEffectList
        }
        _SetHasAnyActiveEffect(u) {
            this._SetFlag(64, u)
        }
        HasAnyActiveEffect() {
            return 0 !== (this._flags & 64)
        }
        _SaveToJson(u) {
            const A = {
                x: this.GetX(),
                y: this.GetY(),
                w: this.GetWidth(),
                h: this.GetHeight(),
                l: this.GetLayer().GetSID(),
                zi: this.GetZIndex()
            };
            0 !== this.GetZElevation() && (A.ze = this.GetZElevation());
            0 !== this.GetAngle() && (A.a = this.GetAngle());
            this.HasDefaultColor() || (A.c = this._color.toJSON());
            .5 !== this.GetOriginX() && (A.oX = this.GetOriginX());
            .5 !== this.GetOriginY() && (A.oY = this.GetOriginY());
            0 !== this.GetBlendMode() && (A.bm = this.GetBlendMode());
            this.IsVisible() || (A.v = this.IsVisible());
            this.IsCollisionEnabled() || (A.ce = this.IsCollisionEnabled());
            this.IsBboxChangeEventEnabled() && (A.be = this.IsBboxChangeEventEnabled());
            this._instanceEffectList && (A.fx = this._instanceEffectList._SaveToJson());
            const z = 0 !== (this._flags & 32);
            z && (A.sfi = z);
            this._solidFilterTags && (A.sft = [...this._solidFilterTags].join(" "));
            this._sceneGraphInfo && "visual-state" !== u && (A.sgi = this._sceneGraphInfo._SaveToJson());
            this.HasMesh() && (A.mesh = this.GetSourceMesh().SaveToJson());
            return A
        }
        _OnBeforeLoad(u) {
            "visual-state" !== u && this._ResetAllSceneGraphState()
        }
        _LoadFromJson(u, A) {
            v = !1;
            this.SetX(u.x);
            this.SetY(u.y);
            this.SetWidth(u.w);
            this.SetHeight(u.h);
            this._SetZIndex(u.zi);
            this.SetZElevation(u.hasOwnProperty("ze") ? u.ze : 0);
            this.SetAngle(u.hasOwnProperty("a") ? u.a : 0);
            u.hasOwnProperty("c") ? g.setFromJSON(u.c) : u.hasOwnProperty("o") ? (g.copyRgb(this._color), g.a = u.o) : g.setRgba(1, 1, 1, 1);
            this._SetColor(g);
            this.SetOriginX(u.hasOwnProperty("oX") ? u.oX : .5);
            this.SetOriginY(u.hasOwnProperty("oY") ? u.oY : .5);
            this.SetBlendMode(u.hasOwnProperty("bm") ? u.bm : 0);
            this.SetVisible(u.hasOwnProperty("v") ? u.v : !0);
            this.SetCollisionEnabled(u.hasOwnProperty("ce") ?
                u.ce : !0);
            this.SetBboxChangeEventEnabled(u.hasOwnProperty("be") ? u.be : !1);
            this.SetSolidCollisionFilter(u.hasOwnProperty("sfi") ? u.sfi : !1, u.hasOwnProperty("sft") ? u.sft : "");
            this._instanceEffectList && u.hasOwnProperty("fx") && this._instanceEffectList._LoadFromJson(u.fx);
            if(u.hasOwnProperty("sgi") && "visual-state" !== A) {
                this._CreateSceneGraphInfo(null);
                const z = this._sceneGraphInfo,
                    C = u.sgi;
                z._LoadFromJson(C);
                const E = this.GetRuntime().Dispatcher(),
                    J = () => {
                        E.removeEventListener("afterload", J);
                        0 === (this._flags & 256) &&
                            z._OnAfterLoad(C)
                    };
                E.addEventListener("afterload", J)
            }
            u.hasOwnProperty("mesh") ? (u = u.mesh, this.CreateMesh(u.cols, u.rows), this.GetSourceMesh().LoadFromJson(u)) : this.ReleaseMesh();
            this.SetBboxChanged();
            v = !0;
            this._UpdateRendererStateGroup()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.BehaviorType = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            const d = b.GetRuntime(),
                c = d.GetPluginManager(),
                f = d.GetObjectReference(a[1]);
            c.HasBehaviorByConstructorFunction(f) || c.CreateBehavior(a);
            this._runtime = d;
            this._objectClass = b;
            this._behavior = c.GetBehaviorByConstructorFunction(f);
            this._sdkType = null;
            this._instSdkCtor = f.Instance;
            this._sid = a[2];
            this._name = a[0];
            this._jsPropName = this._runtime.GetJsPropName(a[3]);
            this._sdkType = e.New(f.Type, this);
            this.OnCreate()
        }
        static Create(b,
            a) {
            return e.New(e.BehaviorType, b, a)
        }
        Release() {
            this._behavior = this._runtime = null;
            this._sdkType.Release();
            this._instSdkCtor = this._sdkType = null
        }
        GetSdkType() {
            return this._sdkType
        }
        OnCreate() {
            this._sdkType.OnCreate()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehavior() {
            return this._behavior
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetJsPropName() {
            return this._jsPropName
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.IBehaviorInstance;
    e.BehaviorInstance = class extends e.DefendedBase {
        constructor(a) {
            super();
            this._runtime = a.runtime;
            this._behaviorType = a.behaviorType;
            this._behavior = this._behaviorType.GetBehavior();
            this._inst = a.instance;
            this._index = a.index;
            this._iScriptInterface = this._sdkInst = null;
            this._behavior._AddInstance(this._inst)
        }
        Release() {
            this._iScriptInterface && (this._iScriptInterface._Release(), this._iScriptInterface = null);
            this._behavior._RemoveInstance(this._inst);
            this._sdkInst.Release();
            this._inst = this._behavior = this._behaviorType = this._runtime = this._iScriptInterface = this._sdkInst = null
        }
        _CreateSdkInstance(a) {
            if(this._sdkInst) throw Error("already got sdk instance");
            this._sdkInst = e.New(this._behaviorType.GetInstanceSdkCtor(), this, a);
            this._InitScriptInterface()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetBehavior() {
            return this._behavior
        }
        _GetIndex() {
            return this._index
        }
        PostCreate() {
            this._sdkInst.PostCreate()
        }
        OnSpriteFrameChanged(a,
            d) {
            this._sdkInst.OnSpriteFrameChanged(a, d)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson() {
            return this._sdkInst.SaveToJson()
        }
        LoadFromJson(a) {
            return this._sdkInst.LoadFromJson(a)
        }
        static SortByTickSequence(a, d) {
            var c = a.GetObjectInstance(),
                f = d.GetObjectInstance();
            const h = c.GetObjectClass().GetIndex(),
                g = f.GetObjectClass().GetIndex();
            if(h !== g) return h - g;
            c = c.GetPUID();
            f = f.GetPUID();
            return c !== f ? c - f : a.GetBehaviorInstance()._GetIndex() - d.GetBehaviorInstance()._GetIndex()
        }
        _InitScriptInterface() {
            const a =
                this._sdkInst.GetScriptInterfaceClass(),
                d = a || b;
            b._Init(this);
            this._iScriptInterface = new d;
            b._Init(null);
            if(a && !(this._iScriptInterface instanceof b)) throw new TypeError(`script interface class '${a.name}' does not extend the right base class '${b.name}'`);
        }
        GetScriptInterface() {
            return this._iScriptInterface
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EffectList = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._owner = b;
            this._allEffectTypes = [];
            this._activeEffectTypes = [];
            this._effectTypesByName = new Map;
            this._effectParams = [];
            this._preservesOpaqueness = !0;
            for(const d of a) b = e.New(e.EffectType, this, d, this._allEffectTypes.length), this._allEffectTypes.push(b), this._effectTypesByName.set(b.GetName().toLowerCase(), b), 3 <= d.length && this._effectParams.push(this._LoadSingleEffectParameters(d[2]));
            this.GetRuntime()._AddEffectList(this)
        }
        Release() {
            e.clearArray(this._allEffectTypes);
            e.clearArray(this._activeEffectTypes);
            this._effectTypesByName.clear();
            e.clearArray(this._effectParams);
            this._owner = null
        }
        PrependEffectTypes(b) {
            if(b.length) {
                this._allEffectTypes = b.concat(this._allEffectTypes);
                for(const a of b) this._effectTypesByName.set(a.GetName().toLowerCase(), a);
                for(let a = 0, d = this._allEffectTypes.length; a < d; ++a) this._allEffectTypes[a]._SetIndex(a)
            }
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for(let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if(Array.isArray(c)) {
                    const f = e.New(e.Color);
                    f.setFromJSON(c);
                    b[a] = f
                }
            }
            return b
        }
        GetOwner() {
            return this._owner
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        UpdateActiveEffects() {
            e.clearArray(this._activeEffectTypes);
            let b = !0;
            for(const a of this._allEffectTypes) a.IsActive() && (this._activeEffectTypes.push(a), a.GetShaderProgram().PreservesOpaqueness() || (b = !1));
            this._preservesOpaqueness = b
        }
        GetAllEffectTypes() {
            return this._allEffectTypes
        }
        HasAnyEffectType() {
            return 0 < this._allEffectTypes.length
        }
        GetEffectTypeByName(b) {
            return this._effectTypesByName.get(b.toLowerCase()) ||
                null
        }
        GetEffectTypeByIndex(b) {
            b = Math.floor(+b);
            if(0 > b || b >= this._allEffectTypes.length) throw new RangeError("invalid effect type index");
            return this._allEffectTypes[b]
        }
        IsEffectIndexActive(b) {
            return this.GetEffectTypeByIndex(b).IsActive()
        }
        SetEffectIndexActive(b, a) {
            this.GetEffectTypeByIndex(b).SetActive(a)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        HasAnyActiveEffect() {
            return 0 < this._activeEffectTypes.length
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        static SaveFxParamToJson(b) {
            return b &&
                b instanceof e.Color ? {
                    t: "color",
                    v: b.toJSON()
                } : b
        }
        static LoadFxParamFromJson(b) {
            if("object" === typeof b) {
                if("color" === b.t) {
                    const a = e.New(e.Color);
                    a.setFromJSON(b.v);
                    return a
                }
                throw Error("invalid effect parameter type");
            }
            return b
        }
        static SaveFxParamsToJson(b) {
            return b.map(e.EffectList.SaveFxParamToJson)
        }
        static LoadFxParamsFromJson(b) {
            return b.map(e.EffectList.LoadFxParamFromJson)
        }
        SaveToJson() {
            return this._allEffectTypes.map(b => ({
                name: b.GetName(),
                active: b.IsActive(),
                params: e.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        LoadFromJson(b) {
            for(const a of b)
                if(b =
                    this.GetEffectTypeByName(a.name)) b.SetActive(a.active), this._effectParams[b.GetIndex()] = e.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.EffectType = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._effectList = b;
            this._id = a[0];
            this._name = a[1];
            this._index = d;
            this._shaderProgram = null;
            this._isActive = !0
        }
        Release() {
            this._shaderProgram = this._effectList = null
        }
        Clone(b) {
            b = e.New(e.EffectType, b, [this._id, this._name], -1);
            b._shaderProgram = this._shaderProgram;
            b._isActive = this._isActive;
            return b
        }
        _InitRenderer(b) {
            b = b.GetShaderProgramByName(this._id);
            if(!b) throw Error("failed to find shader program '" + this._id +
                "'");
            this._shaderProgram = b
        }
        GetEffectList() {
            return this._effectList
        }
        GetName() {
            return this._name
        }
        _SetIndex(b) {
            this._index = b
        }
        GetIndex() {
            return this._index
        }
        GetOwner() {
            return this._effectList.GetOwner()
        }
        GetRuntime() {
            return this._effectList.GetRuntime()
        }
        SetActive(b) {
            this._isActive = !!b
        }
        IsActive() {
            return this._isActive
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetDefaultParameterValues() {
            const b = [];
            for(let a = 0, d = this._shaderProgram.GetParameterCount(); a < d; ++a) {
                const c = this._shaderProgram.GetParameterType(a);
                if("float" === c || "percent" === c) b.push(0);
                else if("color" === c) b.push(e.New(e.Color, 1, 1, 1, 1));
                else throw new TypeError("unknown effect parameter type");
            }
            return b
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.InstanceEffectList = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._inst = b;
            this._wi = a;
            this._effectList = b.GetObjectClass().GetEffectList();
            this._activeEffectFlags = [];
            this._activeEffectTypes = [];
            this._preservesOpaqueness = !0;
            this._effectParams = [];
            for(const c of this._effectList.GetAllEffectTypes()) this._activeEffectFlags.push(!0);
            this.UpdateActiveEffects()
        }
        Release() {
            e.clearArray(this._activeEffectFlags);
            e.clearArray(this._activeEffectTypes);
            e.clearArray(this._effectParams);
            this._effectList = this._inst = null
        }
        _LoadEffectParameters(b) {
            for(const a of b) this._effectParams.push(this._LoadSingleEffectParameters(a))
        }
        _LoadSingleEffectParameters(b) {
            b = b.slice(0);
            for(let a = 0, d = b.length; a < d; ++a) {
                const c = b[a];
                if(Array.isArray(c)) {
                    const f = e.New(e.Color);
                    f.setFromJSON(c);
                    b[a] = f
                }
            }
            return b
        }
        LoadDefaultEffectParameters() {
            for(const b of this._effectList.GetAllEffectTypes()) this._effectParams.push(b.GetDefaultParameterValues())
        }
        GetOwner() {
            return this._owner
        }
        GetEffectList() {
            return this._effectList
        }
        GetRuntime() {
            return this._inst.GetRuntime()
        }
        UpdateActiveEffects() {
            e.clearArray(this._activeEffectTypes);
            const b = this._effectList.GetAllEffectTypes(),
                a = this._activeEffectTypes,
                d = this._activeEffectFlags;
            let c = !0;
            for(let f = 0, h = b.length; f < h; ++f)
                if(d[f]) {
                    const g = b[f];
                    a.push(g);
                    g.GetShaderProgram().PreservesOpaqueness() || (c = !1)
                } this._preservesOpaqueness = c;
            this._wi._SetHasAnyActiveEffect(!!a.length)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        GetEffectParametersForIndex(b) {
            return this._effectParams[b]
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        HasAnyActiveBackgroundBlendingEffect() {
            return this._activeEffectTypes.some(b =>
                b.GetShaderProgram().UsesDest())
        }
        IsEffectIndexActive(b) {
            return this._activeEffectFlags[b]
        }
        SetEffectIndexActive(b, a) {
            this._activeEffectFlags[b] = !!a
        }
        GetAllEffectTypes() {
            return this._effectList.GetAllEffectTypes()
        }
        _SaveToJson() {
            return this._effectList.GetAllEffectTypes().map(b => ({
                name: b.GetName(),
                active: this._activeEffectFlags[b.GetIndex()],
                params: e.EffectList.SaveFxParamsToJson(this._effectParams[b.GetIndex()])
            }))
        }
        _LoadFromJson(b) {
            for(const a of b)
                if(b = this._effectList.GetEffectTypeByName(a.name)) this._activeEffectFlags[b.GetIndex()] =
                    a.active, this._effectParams[b.GetIndex()] = e.EffectList.LoadFxParamsFromJson(a.params);
            this.UpdateActiveEffects()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [],
        a = [],
        d = [],
        c = e.New(e.CollisionPoly),
        f = e.New(e.CollisionPoly),
        h = e.New(e.Quad),
        g = e.New(e.Rect),
        k = e.New(e.Rect);
    let m = null,
        p = null,
        x = null;
    e.CollisionEngine = class extends e.DefendedBase {
        constructor(t) {
            super();
            this._runtime = t;
            this._registeredCollisions = [];
            this._polyCheckSec = this._polyCheckCount = this._collisionCheckSec = this._collisionCheckCount = 0
        }
        Release() {
            this._runtime = null
        }
        _Update1sStats() {
            this._collisionCheckSec = this._collisionCheckCount;
            this._collisionCheckCount = 0;
            this._polyCheckSec =
                this._polyCheckCount;
            this._polyCheckCount = 0
        }
        Get1secCollisionChecks() {
            return this._collisionCheckSec
        }
        Get1secPolyChecks() {
            return this._polyCheckSec
        }
        RegisterCollision(t, q) {
            const r = t.GetWorldInfo(),
                y = q.GetWorldInfo();
            r && y && r.IsCollisionEnabled() && y.IsCollisionEnabled() && this._registeredCollisions.push([t, q])
        }
        AddRegisteredCollisionCandidates(t, q, r) {
            for(const [y, v] of this._registeredCollisions) {
                let u;
                if(t === y) u = v;
                else if(t === v) u = y;
                else continue;
                u.BelongsToObjectClass(q) && (r.includes(u) || r.push(u))
            }
        }
        CheckRegisteredCollision(t,
            q) {
            if(!this._registeredCollisions.length) return !1;
            for(const [r, y] of this._registeredCollisions)
                if(t === r && q === y || t === y && q === r) return !0;
            return !1
        }
        ClearRegisteredCollisions() {
            e.clearArray(this._registeredCollisions)
        }
        TestOverlap(t, q) {
            if(!t || !q || t === q) return !1;
            t = t.GetWorldInfo();
            q = q.GetWorldInfo();
            if(!t.IsCollisionEnabled() || !q.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            const r = t.GetLayer(),
                y = q.GetLayer();
            return r.IsTransformCompatibleWith(y) ? this._TestOverlap_SameLayers(t, q) : this._TestOverlap_DifferentLayers(t,
                q)
        }
        _TestOverlap_SameLayers(t, q) {
            if(!t.GetBoundingBox().intersectsRect(q.GetBoundingBox())) return !1;
            this._polyCheckCount++;
            if(!t.GetBoundingQuad().intersectsQuad(q.GetBoundingQuad()) || t.HasTilemap() && q.HasTilemap()) return !1;
            if(t.HasTilemap()) return this.TestTilemapOverlap(t, q);
            if(q.HasTilemap()) return this.TestTilemapOverlap(q, t);
            if(!t.HasOwnCollisionPoly() && !q.HasOwnCollisionPoly()) return !0;
            const r = t.GetTransformedCollisionPoly(),
                y = q.GetTransformedCollisionPoly();
            return r.intersectsPoly(y, q.GetX() -
                t.GetX(), q.GetY() - t.GetY())
        }
        _TestOverlap_DifferentLayers(t, q) {
            var r = t.HasTilemap(),
                y = q.HasTilemap();
            if(r && !y) return this.TestTilemapOverlapDifferentLayers(t, q);
            if(y && !r) return this.TestTilemapOverlapDifferentLayers(q, t);
            if(y || r) return !1;
            y = t.GetLayer();
            r = q.GetLayer();
            c.copy(t.GetTransformedCollisionPoly());
            f.copy(q.GetTransformedCollisionPoly());
            var v = c.pointsArr();
            for(let u = 0, A = v.length; u < A; u += 2) {
                const z = u + 1,
                    C = v[z],
                    [E, J] = y.LayerToCanvasCss(v[u] + t.GetX(), C + t.GetY());
                v[u] = E;
                v[z] = J
            }
            t = f.pointsArr();
            for(let u =
                    0, A = t.length; u < A; u += 2) {
                y = u + 1;
                v = t[y];
                const [z, C] = r.LayerToCanvasCss(t[u] + q.GetX(), v + q.GetY());
                t[u] = z;
                t[y] = C
            }
            c.setBboxChanged();
            f.setBboxChanged();
            this._polyCheckCount++;
            return c.intersectsPoly(f, 0, 0)
        }
        TestTilemapOverlapDifferentLayers(t, q) {
            var r = t.GetLayer(),
                y = q.GetLayer();
            m || (m = e.New(e.CollisionPoly));
            p || (p = e.New(e.Rect));
            x || (x = e.New(e.Quad));
            var v = q.GetX(),
                u = q.GetY();
            const [A, z] = y.LayerToCanvasCss(v, u), [C, E] = r.CanvasCssToLayer(A, z);
            r = v - C;
            u -= E;
            p.copy(q.GetBoundingBox());
            p.offset(r, u);
            if(!t.GetBoundingBox().intersectsRect(p)) return !1;
            x.copy(q.GetBoundingQuad());
            x.offset(r, u);
            this._polyCheckCount++;
            if(!t.GetBoundingQuad().intersectsQuad(x)) return !1;
            m.copy(q.GetTransformedCollisionPoly());
            y = m.pointsArr();
            for(let J = 0, F = y.length; J < F; J += 2) v = J + 1, y[J] += r, y[v] += u;
            return this.TestTilemapOverlap(t, q, C, E, m, p, x)
        }
        TestTilemapOverlap(t, q, r, y, v, u, A) {
            u = void 0 !== u ? u : q.GetBoundingBox();
            const z = t.GetX(),
                C = t.GetY();
            var E = t.GetInstance().GetSdkInstance();
            r = void 0 !== r ? r : q.GetX();
            y = void 0 !== y ? y : q.GetY();
            t = q.HasOwnCollisionPoly();
            A = void 0 !== A ? A : q.GetBoundingQuad();
            E.GetCollisionRectCandidates(u, a);
            for(let H = 0, K = a.length; H < K; ++H) {
                var J = a[H];
                E = J.GetRect();
                this._collisionCheckCount++;
                if(u.intersectsRectOffset(E, z, C) && (h.setFromRect(E), h.offset(z, C), h.intersectsQuad(A)))
                    if(t) {
                        var F = void 0 !== v ? v : q.GetTransformedCollisionPoly();
                        if(J = J.GetPoly()) {
                            if(this._polyCheckCount++, J.intersectsPoly(F, r - (z + E.getLeft()), y - (C + E.getTop()))) return e.clearArray(a), !0
                        } else if(c.setFromQuad(h, 0, 0), c.intersectsPoly(F, r, y)) return e.clearArray(a), !0
                    } else if(F = J.GetPoly()) {
                    if(c.setFromQuad(A,
                            0, 0), F.intersectsPoly(c, -(z + E.getLeft()), -(C + E.getTop()))) return e.clearArray(a), !0
                } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestAndSelectCanvasPointOverlap(t, q, r, y) {
            const v = t.GetCurrentSol();
            var u = this._runtime.GetCurrentEvent();
            if(!u) throw Error("cannot call outside event");
            u = u.IsOrBlock();
            if(v.IsSelectAll()) {
                y || (v._SetSelectAll(!1), e.clearArray(v._GetOwnInstances()));
                for(var A of t.GetInstances()) {
                    var z = A.GetWorldInfo(),
                        C = z.GetLayer();
                    const [E, J] = C.CanvasCssToLayer(q, r, z.GetTotalZElevation());
                    if(z.ContainsPoint(E, J)) {
                        if(y) return !1;
                        v._PushInstance(A)
                    } else u && v._PushElseInstance(A)
                }
            } else {
                A = u ? v._GetOwnElseInstances() : v._GetOwnInstances();
                z = 0;
                for(let E = 0, J = A.length; E < J; ++E) {
                    C = A[E];
                    const F = C.GetWorldInfo(),
                        H = F.GetLayer(),
                        [K, N] = H.CanvasCssToLayer(q, r, F.GetTotalZElevation());
                    if(F.ContainsPoint(K, N)) {
                        if(y) return !1;
                        u ? v._PushInstance(C) : A[z++] = C
                    } else u && (A[z++] = C)
                }
                y || (A.length = z)
            }
            t.ApplySolToContainer();
            return y ? !0 : v.HasAnyInstances()
        }
        GetCollisionCandidates(t, q, r, y) {
            t = t ? 1 !== t.GetParallaxX() || 1 !==
                t.GetParallaxY() : !1;
            if(q.IsFamily())
                for(const v of q.GetFamilyMembers()) t || v.IsAnyInstanceParallaxed() ? e.appendArray(y, v.GetInstances()) : (v._UpdateAllCollisionCells(), v._GetCollisionCellGrid().QueryRange(r, y));
            else t || q.IsAnyInstanceParallaxed() ? e.appendArray(y, q.GetInstances()) : (q._UpdateAllCollisionCells(), q._GetCollisionCellGrid().QueryRange(r, y))
        }
        GetObjectClassesCollisionCandidates(t, q, r, y) {
            for(const v of q) this.GetCollisionCandidates(t, v, r, y)
        }
        GetSolidCollisionCandidates(t, q, r) {
            const y = this._runtime.GetSolidBehavior();
            y && this.GetObjectClassesCollisionCandidates(t, y.GetObjectClasses(), q, r)
        }
        GetJumpthruCollisionCandidates(t, q, r) {
            const y = this._runtime.GetJumpthruBehavior();
            y && this.GetObjectClassesCollisionCandidates(t, y.GetObjectClasses(), q, r)
        }
        IsSolidCollisionAllowed(t, q) {
            return t._IsSolidEnabled() && (!q || q.GetWorldInfo().IsSolidCollisionAllowed(t.GetSavedDataMap().get("solidTags")))
        }
        TestOverlapSolid(t) {
            const q = t.GetWorldInfo();
            this.GetSolidCollisionCandidates(q.GetLayer(), q.GetBoundingBox(), b);
            for(const r of b)
                if(this.IsSolidCollisionAllowed(r,
                        t) && this.TestOverlap(t, r)) return e.clearArray(b), r;
            e.clearArray(b);
            return null
        }
        TestRectOverlapSolid(t, q) {
            this.GetSolidCollisionCandidates(null, t, b);
            for(const r of b)
                if(this.IsSolidCollisionAllowed(r, q) && this.TestRectOverlap(t, r)) return e.clearArray(b), r;
            e.clearArray(b);
            return null
        }
        TestOverlapJumpthru(t, q) {
            let r = null;
            q && (r = d, e.clearArray(r));
            const y = t.GetWorldInfo();
            this.GetJumpthruCollisionCandidates(y.GetLayer(), y.GetBoundingBox(), b);
            for(const v of b)
                if(v._IsJumpthruEnabled() && this.TestOverlap(t,
                        v))
                    if(q) r.push(v);
                    else return e.clearArray(b), v;
            e.clearArray(b);
            return r
        }
        PushOut(t, q, r, y, v) {
            y = y || 50;
            const u = t.GetWorldInfo(),
                A = u.GetX(),
                z = u.GetY();
            for(let C = 0; C < y; ++C)
                if(u.SetXY(A + q * C, z + r * C), u.SetBboxChanged(), !this.TestOverlap(t, v)) return !0;
            u.SetXY(A, z);
            u.SetBboxChanged();
            return !1
        }
        PushOutSolid(t, q, r, y, v, u) {
            y = y || 50;
            const A = t.GetWorldInfo(),
                z = A.GetX(),
                C = A.GetY();
            let E = null,
                J = null;
            for(let F = 0; F < y; ++F)
                if(A.SetXY(z + q * F, C + r * F), A.SetBboxChanged(), !this.TestOverlap(t, E))
                    if(E = this.TestOverlapSolid(t)) J = E;
                    else if(v && (E = u ? this.TestOverlap(t, u) ? u : null : this.TestOverlapJumpthru(t)) && (J = E), !E) return J && this.PushInFractional(t, q, r, J, 16, !0), !0;
            A.SetXY(z, C);
            A.SetBboxChanged();
            return !1
        }
        PushOutSolidAxis(t, q, r, y) {
            y = y || 50;
            const v = t.GetWorldInfo(),
                u = v.GetX(),
                A = v.GetY();
            let z = null,
                C = null;
            for(let E = 0; E < y; ++E)
                for(let J = 0; 2 > J; ++J) {
                    const F = 2 * J - 1;
                    v.SetXY(u + q * E * F, A + r * E * F);
                    v.SetBboxChanged();
                    if(!this.TestOverlap(t, z))
                        if(z = this.TestOverlapSolid(t)) C = z;
                        else return C && this.PushInFractional(t, q * F, r * F, C, 16, !0), !0
                }
            v.SetXY(u,
                A);
            v.SetBboxChanged();
            return !1
        }
        PushInFractional(t, q, r, y, v, u) {
            let A = 2,
                z = !1;
            var C = !1;
            const E = t.GetWorldInfo();
            let J = E.GetX(),
                F = E.GetY();
            for(; A <= v;) C = 1 / A, A *= 2, E.OffsetXY(q * C * (z ? 1 : -1), r * C * (z ? 1 : -1)), E.SetBboxChanged(), this.TestOverlap(t, y) || u && this.TestOverlapSolid(t) ? C = z = !0 : (C = z = !1, J = E.GetX(), F = E.GetY());
            C && (E.SetXY(J, F), E.SetBboxChanged())
        }
        PushOutSolidNearest(t, q = 100) {
            let r = 0;
            const y = t.GetWorldInfo(),
                v = y.GetX(),
                u = y.GetY();
            let A = 0,
                z = this.TestOverlapSolid(t);
            if(!z) return !0;
            for(; r <= q;) {
                let C = 0,
                    E = 0;
                switch(A) {
                    case 0:
                        C =
                            0;
                        E = -1;
                        r++;
                        break;
                    case 1:
                        C = 1;
                        E = -1;
                        break;
                    case 2:
                        C = 1;
                        E = 0;
                        break;
                    case 3:
                        E = C = 1;
                        break;
                    case 4:
                        C = 0;
                        E = 1;
                        break;
                    case 5:
                        C = -1;
                        E = 1;
                        break;
                    case 6:
                        C = -1;
                        E = 0;
                        break;
                    case 7:
                        E = C = -1
                }
                A = (A + 1) % 8;
                y.SetXY(Math.floor(v + C * r), Math.floor(u + E * r));
                y.SetBboxChanged();
                if(!this.TestOverlap(t, z) && (z = this.TestOverlapSolid(t), !z)) return !0
            }
            y.SetXY(v, u);
            y.SetBboxChanged();
            return !1
        }
        CalculateBounceAngle(t, q, r, y) {
            const v = t.GetWorldInfo(),
                u = v.GetX(),
                A = v.GetY(),
                z = Math.max(10, e.distanceTo(q, r, u, A));
            var C = e.angleTo(q, r, u, A),
                E = y || this.TestOverlapSolid(t);
            if(!E) return e.clampAngle(C + Math.PI);
            let J = E;
            var F = 0,
                H = 0;
            const K = e.toRadians(5);
            let N;
            for(N = 1; 36 > N; ++N) {
                const S = C - N * K;
                v.SetXY(q + Math.cos(S) * z, r + Math.sin(S) * z);
                v.SetBboxChanged();
                if(!this.TestOverlap(t, J) && (J = y ? null : this.TestOverlapSolid(t), !J)) {
                    F = S;
                    break
                }
            }
            36 === N && (F = e.clampAngle(C + Math.PI));
            J = E;
            for(N = 1; 36 > N; ++N)
                if(E = C + N * K, v.SetXY(q + Math.cos(E) * z, r + Math.sin(E) * z), v.SetBboxChanged(), !this.TestOverlap(t, J) && (J = y ? null : this.TestOverlapSolid(t), !J)) {
                    H = E;
                    break
                } 36 === N && (H = e.clampAngle(C + Math.PI));
            v.SetXY(u,
                A);
            v.SetBboxChanged();
            if(H === F) return H;
            t = e.angleDiff(H, F) / 2;
            t = e.angleClockwise(H, F) ? e.clampAngle(F + t + Math.PI) : e.clampAngle(H + t);
            F = Math.cos(C);
            C = Math.sin(C);
            H = Math.cos(t);
            t = Math.sin(t);
            q = F * H + C * t;
            return e.angleTo(0, 0, F - 2 * q * H, C - 2 * q * t)
        }
        TestSegmentOverlap(t, q, r, y, v) {
            if(!v) return !1;
            const u = v.GetWorldInfo();
            if(!u.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            g.set(Math.min(t, r), Math.min(q, y), Math.max(t, r), Math.max(q, y));
            if(!u.GetBoundingBox().intersectsRect(g)) return !1;
            if(v.HasTilemap()) return this._TestSegmentOverlapTilemap(t,
                q, r, y, v, u);
            this._polyCheckCount++;
            return u.GetBoundingQuad().intersectsSegment(t, q, r, y) ? u.HasOwnCollisionPoly() ? u.GetTransformedCollisionPoly().intersectsSegment(u.GetX(), u.GetY(), t, q, r, y) : !0 : !1
        }
        _TestSegmentOverlapTilemap(t, q, r, y, v, u) {
            const A = u.GetX();
            u = u.GetY();
            v = v.GetSdkInstance();
            k.set(t, q, r, y);
            k.normalize();
            v.GetCollisionRectCandidates(k, a);
            for(let C = 0, E = a.length; C < E; ++C) {
                var z = a[C];
                v = z.GetRect();
                this._collisionCheckCount++;
                if(g.intersectsRectOffset(v, A, u) && (h.setFromRect(v), h.offset(A, u), h.intersectsSegment(t,
                        q, r, y)))
                    if(z = z.GetPoly()) {
                        if(this._polyCheckCount++, z.intersectsSegment(A + v.getLeft(), u + v.getTop(), t, q, r, y)) return e.clearArray(a), !0
                    } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestRectOverlap(t, q) {
            if(!q) return !1;
            const r = q.GetWorldInfo();
            if(!r.IsCollisionEnabled()) return !1;
            this._collisionCheckCount++;
            if(!r.GetBoundingBox().intersectsRect(t)) return !1;
            if(q.HasTilemap()) return this._TestRectOverlapTilemap(t, q, r);
            this._polyCheckCount++;
            h.setFromRect(t);
            if(!r.GetBoundingQuad().intersectsQuad(h)) return !1;
            if(!r.HasOwnCollisionPoly()) return !0;
            c.setFromRect(t, r.GetX(), r.GetY());
            t = r.GetTransformedCollisionPoly();
            return c.intersectsPoly(t, 0, 0)
        }
        _TestRectOverlapTilemap(t, q, r) {
            const y = r.GetX();
            r = r.GetY();
            q.GetSdkInstance().GetCollisionRectCandidates(t, a);
            for(let u = 0, A = a.length; u < A; ++u) {
                var v = a[u];
                q = v.GetRect();
                this._collisionCheckCount++;
                if(t.intersectsRectOffset(q, y, r))
                    if(v = v.GetPoly()) {
                        if(this._polyCheckCount++, c.setFromRect(t, 0, 0), v.intersectsPoly(c, -(y + q.getLeft()), -(r + q.getTop()))) return e.clearArray(a),
                            !0
                    } else return e.clearArray(a), !0
            }
            e.clearArray(a);
            return !1
        }
        TestRayIntersectsInstance(t, q) {
            if(t) {
                var r = t.GetWorldInfo();
                r.IsCollisionEnabled() && (this._collisionCheckCount++, r.GetBoundingBox().intersectsRect(q.rect) && (t.HasTilemap() ? this._TestRayIntersectsTilemap(t, r, q) : (this._polyCheckCount++, r.HasOwnCollisionPoly() ? q.TestInstancePoly(t, r.GetX(), r.GetY(), r.GetTransformedCollisionPoly()) : q.TestInstanceQuad(t, r.GetBoundingQuad()))))
            }
        }
        _TestRayIntersectsTilemap(t, q, r) {
            const y = q.GetX(),
                v = q.GetY();
            t.GetSdkInstance().GetCollisionRectCandidates(r.rect,
                a);
            for(let A = 0, z = a.length; A < z; A++) {
                var u = a[A];
                const C = u.GetRect();
                this._collisionCheckCount++;
                r.rect.intersectsRectOffset(C, y, v) && (u = u.GetPoly(), this._polyCheckCount++, u ? r.TestInstancePoly(t, y + C.getLeft(), v + C.getTop(), u) : r.TestInstanceRect(t, q.GetX(), q.GetY(), C))
            }
            e.clearArray(a)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.SparseGrid = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._cellWidth = b;
            this._cellHeight = a;
            this._cells = e.New(e.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(b, a, d) {
            let c = this._cells.Get(b, a);
            return c ? c : d ? (c = e.New(e.GridCell, this, b, a), this._cells.Set(b, a, c), c) : null
        }
        XToCell(b) {
            b = Math.floor(b / this._cellWidth);
            return isFinite(b) ? b : 0
        }
        YToCell(b) {
            b = Math.floor(b / this._cellHeight);
            return isFinite(b) ? b : 0
        }
        Update(b, a, d) {
            if(a)
                for(let c = a.getLeft(),
                        f = a.getRight(); c <= f; ++c)
                    for(let h = a.getTop(), g = a.getBottom(); h <= g; ++h) {
                        if(d && d.containsPoint(c, h)) continue;
                        const k = this.GetCell(c, h, !1);
                        k && (k.Remove(b), k.IsEmpty() && this._cells.Delete(c, h))
                    }
            if(d)
                for(let c = d.getLeft(), f = d.getRight(); c <= f; ++c)
                    for(let h = d.getTop(), g = d.getBottom(); h <= g; ++h) a && a.containsPoint(c, h) || this.GetCell(c, h, !0).Insert(b)
        }
        QueryRange(b, a) {
            let d = this.XToCell(b.getLeft());
            const c = this.YToCell(b.getTop()),
                f = this.XToCell(b.getRight());
            b = this.YToCell(b.getBottom());
            if(isFinite(f) && isFinite(b))
                for(; d <=
                    f; ++d)
                    for(let h = c; h <= b; ++h) {
                        const g = this.GetCell(d, h, !1);
                        g && g.Dump(a)
                    }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.GridCell = class extends e.DefendedBase {
        constructor(b, a, d) {
            super();
            this._grid = b;
            this._x = a;
            this._y = d;
            this._instances = e.New(e.ArraySet)
        }
        Release() {
            this._instances.Release();
            this._grid = this._instances = null
        }
        IsEmpty() {
            return this._instances.IsEmpty()
        }
        Insert(b) {
            this._instances.Add(b)
        }
        Remove(b) {
            this._instances.Delete(b)
        }
        Dump(b) {
            e.appendArray(b, this._instances.GetArray())
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Ray = class {
        constructor() {
            this.dy = this.dx = this.y2 = this.x2 = this.y1 = this.x1 = 0;
            this.rect = new e.Rect;
            this.hitFraction = 2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0
        }
        DidCollide() {
            return 1.000001 > this.hitFraction
        }
        Set(b, a, d, c) {
            this.x1 = b;
            this.y1 = a;
            this.x2 = d;
            this.y2 = c;
            this.dx = d - b;
            this.dy = c - a;
            this.rect.set(b, a, d, c);
            this.rect.normalize();
            this.hitFraction =
                2;
            this.hitUid = null;
            this.distance = this.hitY = this.hitX = this.hitNormalDy = this.hitNormalDx = this.hitNormal = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0;
            return this
        }
        Complete() {
            if(!1 !== this.DidCollide()) {
                var b = this.dx * this.hitFraction,
                    a = this.dy * this.hitFraction,
                    d = Math.sqrt(b * b + a * a);
                b /= d;
                a /= d;
                this.distance = d - 1E-6;
                this.hitX = this.x1 + b * this.distance;
                this.hitY = this.y1 + a * this.distance;
                this.hitNormal = Math.atan2(this.hitNormalDy, this.hitNormalDx) + Math.PI / 2;
                this.normalX = Math.cos(this.hitNormal);
                this.normalY = Math.sin(this.hitNormal);
                d = b * this.normalX + a * this.normalY;
                this.reflectionX = b - 2 * this.normalX * d;
                this.reflectionY = a - 2 * this.normalY * d;
                0 < d && (this.hitNormal = e.clampAngle(this.hitNormal + Math.PI), this.normalX = -this.normalX, this.normalY = -this.normalY)
            }
        }
        TestInstanceSegment(b, a, d, c, f) {
            const h = e.rayIntersect(this.x1, this.y1, this.x2, this.y2, a, d, c, f);
            0 <= h && h < this.hitFraction && (this.hitFraction = h, this.hitUid = b.GetUID(), this.hitNormalDx = a - c, this.hitNormalDy = d - f)
        }
        TestInstanceRect(b, a, d, c) {
            const f = a + c.getLeft();
            a += c.getRight();
            const h = d + c.getTop();
            d += c.getBottom();
            this.TestInstanceSegment(b, f, h, a, h);
            this.TestInstanceSegment(b, a, h, a, d);
            this.TestInstanceSegment(b, a, d, f, d);
            this.TestInstanceSegment(b, f, d, f, h)
        }
        TestInstanceQuad(b, a) {
            const d = a.getTlx(),
                c = a.getTly(),
                f = a.getTrx(),
                h = a.getTry(),
                g = a.getBrx(),
                k = a.getBry(),
                m = a.getBlx();
            a = a.getBly();
            this.TestInstanceSegment(b, d, c, f, h);
            this.TestInstanceSegment(b, f, h, g, k);
            this.TestInstanceSegment(b, g, k, m, a);
            this.TestInstanceSegment(b, m, a, d, c)
        }
        TestInstancePoly(b, a, d, c) {
            c =
                c.pointsArr();
            for(let f = 0, h = c.length; f < h; f += 2) {
                const g = (f + 2) % h;
                this.TestInstanceSegment(b, c[f] + a, c[f + 1] + d, c[g] + a, c[g + 1] + d)
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new Set("off crop scale-inner scale-outer letterbox-scale letterbox-integer-scale".split(" ")),
        a = new Set(["high", "low"]),
        d = e.New(e.Quad),
        c = e.New(e.Rect);
    e.CanvasManager = class extends e.DefendedBase {
        constructor(f) {
            super();
            this._runtime = f;
            this._canvas = null;
            this._isWebGPUEnabled = !1;
            this._webgpuRenderer = this._webglRenderer = null;
            this._gpuPreference = "high-performance";
            this._canvasCssOffsetY = this._canvasCssOffsetX = this._canvasDeviceHeight = this._canvasDeviceWidth = this._canvasCssHeight =
                this._canvasCssWidth = this._windowInnerHeight = this._windowInnerWidth = 0;
            this._enableMipmaps = !0;
            this._drawHeight = this._drawWidth = this._textureAnisotropy = 0;
            this._documentFullscreenMode = this._fullscreenMode = "letterbox-scale";
            this._deviceTransformOffY = this._deviceTransformOffX = 0;
            this._fullscreenScalingQuality = this._wantFullscreenScalingQuality = "high";
            this._isDocumentFullscreen = !1;
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets = new Set;
            this._shaderData = null;
            this._gpuLastUtilisation =
                this._gpuTimeEndFrame = this._gpuTimeStartFrame = 0;
            this._gpuFrameTimingsBuffer = null;
            this._layersGpuProfile = new Map;
            this._gpuCurUtilisation = NaN;
            this._webgpuFrameTimings = new Map;
            this._snapshotFormat = "";
            this._snapshotQuality = 1;
            this._snapshotArea = e.New(e.Rect);
            this._snapshotUrl = "";
            this._snapshotResolve = this._snapshotPromise = null;
            this._loaderStartTime = this._isPastingToDrawingCanvas = 0;
            this._rafId = -1;
            this._loadingProgress = 0;
            this._loadingprogress_handler = h => this._loadingProgress = h.progress;
            this._percentText =
                null;
            this._splashTextures = {
                logo: null,
                powered: null,
                website: null
            };
            this._splashFadeOutStartTime = this._splashFadeInFinishTime = this._splashFrameNumber = 0;
            this._splashState = "fade-in";
            this._splashDoneResolve = null;
            this._splashDonePromise = new Promise(h => this._splashDoneResolve = h)
        }
        _SetGPUPowerPreference(f) {
            this._gpuPreference = f
        }
        _SetWebGPUEnabled(f) {
            this._isWebGPUEnabled = !!f
        }
        async CreateCanvas(f) {
            this._canvas = f.canvas;
            this._runtime.AddDOMComponentMessageHandler("runtime", "window-resize", h => this._OnWindowResize(h));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenchange", h => this._OnFullscreenChange(h));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenerror", h => this._OnFullscreenError(h));
            this._isDocumentFullscreen = !!f.isFullscreen;
            if(this._isWebGPUEnabled)
                if(navigator.gpu) try {
                    await this._InitWebGPU(f)
                } catch (h) {
                    this._webgpuRenderer = null, console.error("Failed to initialise WebGPU, switching to WebGL: ", h)
                } else console.warn("WebGPU was enabled but is not supported, falling back to WebGL");
            this._webgpuRenderer || await this._InitWebGL(f)
        }
        async _InitWebGPU(f) {
            const h = {
                powerPreference: this._gpuPreference,
                depth: this._runtime.Uses3DFeatures()
            };
            this._webgpuRenderer = e.New(e.Gfx.WebGPURenderer);
            await this._webgpuRenderer.Create(this._canvas, h);
            this._webgpuRenderer.SupportsGPUProfiling() || (this._gpuLastUtilisation = NaN);
            this.SetSize(f.windowInnerWidth, f.windowInnerHeight, !0)
        }
        async _InitWebGL(f) {
            this._canvas.addEventListener("webglcontextlost", g => this._OnWebGLContextLost(g));
            this._canvas.addEventListener("webglcontextrestored",
                g => this._OnWebGLContextRestored(g));
            const h = {
                powerPreference: this._gpuPreference,
                enableGpuProfiling: !0,
                depth: this._runtime.Uses3DFeatures()
            };
            "Android" === e.Platform.OS && "Chromium" === e.Platform.BrowserEngine && 75 > e.Platform.BrowserVersionNumber && (console.warn("[Construct 3] Disabling WebGL 2 because this device appears to be affected by crbug.com/934823. Install software updates to avoid this."), h.maxWebGLVersion = 1);
            "standard" === this._runtime.GetCompositingMode() ? h.alpha = !0 : (h.alpha = !1, h.lowLatency = !0);
            this._webglRenderer = e.New(e.Gfx.WebGLRenderer, this._canvas, h);
            await this._webglRenderer.InitState();
            this._webglRenderer.SupportsGPUProfiling() || (this._gpuLastUtilisation = NaN);
            this.SetSize(f.windowInnerWidth, f.windowInnerHeight, !0);
            this._shaderData = self.C3_Shaders;
            await this._LoadShaderPrograms();
            f = !1;
            for(const g of this._runtime._GetAllEffectLists()) {
                for(const k of g.GetAllEffectTypes()) k._InitRenderer(this._webglRenderer), k.GetShaderProgram().UsesDest() && (f = !0);
                g.UpdateActiveEffects()
            }
            this._runtime._SetUsesAnyBackgroundBlending(f);
            this._webglRenderer.SupportsGPUProfiling() && (this._gpuFrameTimingsBuffer = e.New(e.Gfx.WebGLQueryResultBuffer, this._webglRenderer));
            this._webglRenderer.SetMipmapsEnabled(this._enableMipmaps)
        }
        async _LoadShaderPrograms() {
            if(this._shaderData) {
                var f = [];
                for(const [h, g] of Object.entries(this._shaderData)) {
                    const k = e.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource();
                    f.push(this._webglRenderer.CreateShaderProgram(g, k, h))
                }
                await Promise.all(f);
                this._webglRenderer.ResetLastProgram();
                this._webglRenderer.SetTextureFillMode()
            }
        }
        Release() {
            this._canvas =
                this._webglRenderer = this._runtime = null
        }
        _OnWindowResize(f) {
            const h = this._runtime,
                g = f.devicePixelRatio;
            h.IsInWorker() && (self.devicePixelRatio = g);
            h._SetDevicePixelRatio(g);
            this._isDocumentFullscreen = !!f.isFullscreen;
            this.SetSize(f.innerWidth, f.innerHeight);
            h.UpdateRender();
            h.IsDebug() && (h.HitBreakpoint() || self.C3Debugger.IsDebuggerPaused()) && h.Render()
        }
        _OnFullscreenChange(f) {
            this._isDocumentFullscreen = !!f.isFullscreen;
            this.SetSize(f.innerWidth, f.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        _OnFullscreenError(f) {
            this._isDocumentFullscreen = !!f.isFullscreen;
            this.SetSize(f.innerWidth, f.innerHeight, !0);
            this._runtime.UpdateRender()
        }
        SetSize(f, h, g = !1) {
            f = Math.floor(f);
            h = Math.floor(h);
            if(0 >= f || 0 >= h) throw Error("invalid size");
            if(this._windowInnerWidth !== f || this._windowInnerHeight !== h || g) {
                this._windowInnerWidth = f;
                this._windowInnerHeight = h;
                g = this.GetCurrentFullscreenMode();
                "letterbox-scale" === g ? this._CalculateLetterboxScale(f, h) : "letterbox-integer-scale" === g ? this._CalculateLetterboxIntegerScale(f, h) : "off" === g ? this._CalculateFixedSizeCanvas(f,
                    h) : this._CalculateFullsizeCanvas(f, h);
                this._UpdateFullscreenScalingQuality(g);
                this._canvas.width = this._canvasDeviceWidth;
                this._canvas.height = this._canvasDeviceHeight;
                this._runtime.PostComponentMessageToDOM("canvas", "update-size", {
                    marginLeft: this._canvasCssOffsetX,
                    marginTop: this._canvasCssOffsetY,
                    styleWidth: this._canvasCssWidth,
                    styleHeight: this._canvasCssHeight
                });
                f = this.GetRenderer();
                f.SetSize(this._canvasDeviceWidth, this._canvasDeviceHeight, !0);
                for(var k of this._availableAdditionalRenderTargets) f.DeleteRenderTarget(k);
                e.clearArray(this._availableAdditionalRenderTargets);
                k = this._runtime.GetLayoutManager();
                k.SetAllLayerProjectionChanged();
                k.SetAllLayerMVChanged()
            }
        }
        _CalculateLetterboxScale(f, h) {
            const g = this._runtime.GetDevicePixelRatio(),
                k = this._runtime.GetOriginalViewportWidth(),
                m = this._runtime.GetOriginalViewportHeight(),
                p = k / m;
            f / h > p ? (this._canvasCssWidth = Math.round(h * p), this._canvasCssHeight = h, this._canvasCssOffsetX = Math.floor((f - this._canvasCssWidth) / 2), this._canvasCssOffsetY = 0) : (this._canvasCssWidth = f, this._canvasCssHeight =
                Math.round(f / p), this._canvasCssOffsetX = 0, this._canvasCssOffsetY = Math.floor((h - this._canvasCssHeight) / 2));
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * g);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * g);
            this._runtime.SetViewportSize(k, m)
        }
        _CalculateLetterboxIntegerScale(f, h) {
            const g = this._runtime.GetDevicePixelRatio();
            1 !== g && (f += 1, h += 1);
            const k = this._runtime.GetOriginalViewportWidth(),
                m = this._runtime.GetOriginalViewportHeight();
            var p = k / m;
            p = f / h > p ? h * p * g / k : f / p * g / m;
            1 < p ? p = Math.floor(p) :
                1 > p && (p = 1 / Math.ceil(1 / p));
            this._canvasDeviceWidth = Math.round(k * p);
            this._canvasDeviceHeight = Math.round(m * p);
            this._canvasCssWidth = this._canvasDeviceWidth / g;
            this._canvasCssHeight = this._canvasDeviceHeight / g;
            this._canvasCssOffsetX = Math.max(Math.floor((f - this._canvasCssWidth) / 2), 0);
            this._canvasCssOffsetY = Math.max(Math.floor((h - this._canvasCssHeight) / 2), 0);
            this._runtime.SetViewportSize(k, m)
        }
        _CalculateFullsizeCanvas(f, h) {
            const g = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = f;
            this._canvasCssHeight =
                h;
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * g);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * g);
            this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            f = this.GetDisplayScale();
            this._runtime.SetViewportSize(this._canvasCssWidth / f, this._canvasCssHeight / f)
        }
        _CalculateFixedSizeCanvas(f, h) {
            const g = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = this._runtime.GetViewportWidth();
            this._canvasCssHeight = this._runtime.GetViewportHeight();
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth *
                g);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * g);
            this.IsDocumentFullscreen() ? (this._canvasCssOffsetX = Math.floor((f - this._canvasCssWidth) / 2), this._canvasCssOffsetY = Math.floor((h - this._canvasCssHeight) / 2)) : this._canvasCssOffsetY = this._canvasCssOffsetX = 0;
            this._runtime.SetViewportSize(this._runtime.GetViewportWidth(), this._runtime.GetViewportHeight())
        }
        _UpdateFullscreenScalingQuality(f) {
            if("high" === this._wantFullscreenScalingQuality) this._drawWidth = this._canvasDeviceWidth, this._drawHeight =
                this._canvasDeviceHeight, this._fullscreenScalingQuality = "high";
            else {
                let g;
                if("off" === this.GetCurrentFullscreenMode()) {
                    var h = this._runtime.GetViewportWidth();
                    g = this._runtime.GetViewportHeight()
                } else h = this._runtime.GetOriginalViewportWidth(), g = this._runtime.GetOriginalViewportHeight();
                this._canvasDeviceWidth < h && this._canvasDeviceHeight < g ? (this._drawWidth = this._canvasDeviceWidth, this._drawHeight = this._canvasDeviceHeight, this._fullscreenScalingQuality = "high") : (this._drawWidth = h, this._drawHeight = g, this._fullscreenScalingQuality =
                    "low", "scale-inner" === f ? (f = h / g, h = this._windowInnerWidth / this._windowInnerHeight, h < f ? this._drawWidth = this._drawHeight * h : h > f && (this._drawHeight = this._drawWidth / h)) : "scale-outer" === f && (f = h / g, h = this._windowInnerWidth / this._windowInnerHeight, h > f ? this._drawWidth = this._drawHeight * h : h < f && (this._drawHeight = this._drawWidth / h)))
            }
        }
        IsDocumentFullscreen() {
            return this._isDocumentFullscreen
        }
        SetFullscreenMode(f) {
            if(!b.has(f)) throw Error("invalid fullscreen mode");
            this._fullscreenMode = f;
            f = this._runtime.GetLayoutManager();
            f.SetAllLayerProjectionChanged();
            f.SetAllLayerMVChanged()
        }
        GetFullscreenMode() {
            return this._fullscreenMode
        }
        SetDocumentFullscreenMode(f) {
            if(!b.has(f)) throw Error("invalid fullscreen mode");
            this._documentFullscreenMode = f;
            f = this._runtime.GetLayoutManager();
            f.SetAllLayerProjectionChanged();
            f.SetAllLayerMVChanged()
        }
        GetDocumentFullscreenMode() {
            return this._documentFullscreenMode
        }
        GetCurrentFullscreenMode() {
            return this.IsDocumentFullscreen() ? this.GetDocumentFullscreenMode() : this.GetFullscreenMode()
        }
        SetFullscreenScalingQuality(f) {
            if(!a.has(f)) throw Error("invalid fullscreen scaling quality");
            this._wantFullscreenScalingQuality = f;
            this._runtime.GetLayoutManager().SetAllLayerProjectionChanged()
        }
        GetSetFullscreenScalingQuality() {
            return this._wantFullscreenScalingQuality
        }
        GetCurrentFullscreenScalingQuality() {
            return this._fullscreenScalingQuality
        }
        static _FullscreenModeNumberToString(f) {
            switch(f) {
                case 0:
                    return "off";
                case 1:
                    return "crop";
                case 2:
                    return "scale-inner";
                case 3:
                    return "scale-outer";
                case 4:
                    return "letterbox-scale";
                case 5:
                    return "letterbox-integer-scale";
                default:
                    throw Error("invalid fullscreen mode");
            }
        }
        GetLastWidth() {
            return this._windowInnerWidth
        }
        GetLastHeight() {
            return this._windowInnerHeight
        }
        GetDrawWidth() {
            return this._drawWidth
        }
        GetDrawHeight() {
            return this._drawHeight
        }
        SetMipmapsEnabled(f) {
            this._enableMipmaps = !!f
        }
        _SetTextureAnisotropy(f) {
            this._textureAnisotropy = f
        }
        GetTextureAnisotropy() {
            return this._textureAnisotropy
        }
        IsRendererContextLost() {
            return this.GetRenderer().IsContextLost()
        }
        _OnWebGLContextLost(f) {
            console.log("[Construct 3] WebGL context lost");
            f.preventDefault();
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._webglRenderer.OnContextLost();
            this._runtime._OnWebGLContextLost()
        }
        async _OnWebGLContextRestored(f) {
            await this._webglRenderer.OnContextRestored();
            await this._LoadShaderPrograms();
            for(const h of this._runtime._GetAllEffectLists())
                for(const g of h.GetAllEffectTypes()) g._InitRenderer(this._webglRenderer);
            await this._runtime._OnWebGLContextRestored();
            console.log("[Construct 3] WebGL context restored")
        }
        GetWebGLRenderer() {
            return this._webglRenderer
        }
        GetWebGPURenderer() {
            return this._webgpuRenderer
        }
        GetRenderer() {
            return this._webgpuRenderer ||
                this._webglRenderer
        }
        GetRenderScale() {
            return "low" === this._fullscreenScalingQuality ? 1 / this._runtime.GetDevicePixelRatio() : this.GetDisplayScale()
        }
        GetDisplayScale() {
            const f = this.GetCurrentFullscreenMode();
            if("off" === f || "crop" === f) return 1;
            const h = this._runtime.GetOriginalViewportWidth(),
                g = this._runtime.GetOriginalViewportHeight(),
                k = h / g,
                m = this._canvasDeviceWidth / this._canvasDeviceHeight;
            return "scale-inner" !== f && m > k || "scale-inner" === f && m < k ? this._canvasCssHeight / g : this._canvasCssWidth / h
        }
        SetDeviceTransformOffset(f,
            h) {
            this._deviceTransformOffX = f;
            this._deviceTransformOffY = h
        }
        SetDeviceTransform(f, h, g) {
            h = (h || this._drawWidth) / 2 + this._deviceTransformOffX;
            const k = (g || this._drawHeight) / 2 + this._deviceTransformOffY;
            g = f.CalculateLookAtModelView2(h, k, f.GetDefaultCameraZ() * this._runtime.GetDevicePixelRatio(), h, k, 0, g || this._drawHeight);
            f.SetModelViewMatrix(g)
        }
        SetCssTransform(f) {
            var h = this._canvasCssWidth / 2;
            const g = this._canvasCssHeight / 2;
            h = f.CalculateLookAtModelView2(h, g, f.GetDefaultCameraZ(), h, g, 0);
            f.SetModelViewMatrix(h)
        }
        GetDeviceWidth() {
            return this._canvasDeviceWidth
        }
        GetDeviceHeight() {
            return this._canvasDeviceHeight
        }
        GetCssWidth() {
            return this._canvasCssWidth
        }
        GetCssHeight() {
            return this._canvasCssHeight
        }
        GetCanvasClientX() {
            return this._canvasCssOffsetX
        }
        GetCanvasClientY() {
            return this._canvasCssOffsetY
        }
        GetAdditionalRenderTarget(f) {
            f.depth =
                this._runtime.Uses3DFeatures();
            const h = this._availableAdditionalRenderTargets,
                g = h.findIndex(m => m.IsCompatibleWithOptions(f));
            let k; - 1 !== g ? (k = h[g], h.splice(g, 1)) : k = this.GetRenderer().CreateRenderTarget(f);
            this._usedAdditionalRenderTargets.add(k);
            return k
        }
        ReleaseAdditionalRenderTarget(f) {
            if(!this._usedAdditionalRenderTargets.has(f)) throw Error("render target not in use");
            this._usedAdditionalRenderTargets.delete(f);
            this._availableAdditionalRenderTargets.push(f)
        }* activeLayersGpuProfiles() {
            for(const f of this._runtime.GetLayoutManager().runningLayouts())
                for(const h of f.GetLayers()) {
                    const g =
                        this._layersGpuProfile.get(h);
                    g && (yield g)
                }
        }
        GetLayerTimingsBuffer(f) {
            if(!this.GetRenderer().SupportsGPUProfiling()) return null;
            let h = this._layersGpuProfile.get(f);
            h || (h = {
                name: f.GetName(),
                timingsBuffer: e.New(e.Gfx.WebGLQueryResultBuffer, this._webglRenderer),
                curUtilisation: 0,
                lastUtilisation: 0
            }, this._layersGpuProfile.set(f, h));
            return h.timingsBuffer
        }
        _Update1sFrameRange() {
            const f = this.GetRenderer();
            if(f.SupportsGPUProfiling() && 0 === this._gpuTimeEndFrame) {
                this._gpuTimeEndFrame = f.GetFrameNumber();
                this._gpuCurUtilisation =
                    NaN;
                for(const h of this.activeLayersGpuProfiles()) h.curUtilisation = NaN
            }
        }
        _UpdateTick() {
            this._webglRenderer && this._webglRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGL();
            this._webgpuRenderer && this._webgpuRenderer.SupportsGPUProfiling() && this._UpdateTick_WebGPU()
        }
        _UpdateTick_WebGL() {
            if(isNaN(this._gpuCurUtilisation) && (this._gpuCurUtilisation = this._gpuFrameTimingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), !isNaN(this._gpuCurUtilisation))) {
                if(this._runtime.IsDebug())
                    for(const f of this.activeLayersGpuProfiles())
                        if(f.curUtilisation =
                            f.timingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame), isNaN(f.curUtilisation)) return;
                this._gpuFrameTimingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
                this._gpuLastUtilisation = Math.min(this._gpuCurUtilisation, 1);
                if(this._runtime.IsDebug()) {
                    for(const f of this.activeLayersGpuProfiles()) f.timingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame), f.lastUtilisation = Math.min(f.curUtilisation, 1);
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation,
                        [...this.activeLayersGpuProfiles()])
                }
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        GetGPUFrameTimingsBuffer() {
            return this._gpuFrameTimingsBuffer
        }
        _UpdateTick_WebGPU() {
            if(0 !== this._gpuTimeEndFrame) {
                for(var f = this._gpuTimeStartFrame; f < this._gpuTimeEndFrame; ++f) {
                    var h = this._webgpuFrameTimings.get(f);
                    if(h && !h.HasResult()) return
                }
                h = this._runtime.GetMainRunningLayout();
                f = e.MakeFilledArray(h.GetLayerCount() + 1, 0);
                for(var g = this._gpuTimeStartFrame; g < this._gpuTimeEndFrame; ++g) {
                    var k =
                        this._webgpuFrameTimings.get(g);
                    if(k) {
                        k = k.GetResult();
                        for(let m = 0, p = Math.min(f.length, k.length / 2); m < p; ++m) {
                            const x = k[2 * m],
                                t = k[2 * m + 1];
                            f[m] = 0 === Number(x) || 0 === Number(t) ? NaN : f[m] + Number(t - x) / 1E9
                        }
                    }
                }
                this._gpuLastUtilisation = e.clamp(f[0], 0, 1);
                if(this._runtime.IsDebug()) {
                    g = [];
                    h = h.GetLayers();
                    for(let m = 0, p = Math.min(h.length, f.length - 1); m < p; ++m) g.push({
                        name: h[m].GetName(),
                        lastUtilisation: e.clamp(f[m + 1], 0, 1)
                    });
                    self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, g)
                }
                for(f = this._gpuTimeStartFrame; f < this._gpuTimeEndFrame; ++f) this._webgpuFrameTimings.delete(f);
                this._gpuTimeStartFrame = this._gpuTimeEndFrame;
                this._gpuTimeEndFrame = 0
            }
        }
        _AddWebGPUFrameTiming(f) {
            this._webgpuFrameTimings.set(this._webgpuRenderer.GetFrameNumber(), f)
        }
        GetGPUUtilisation() {
            return this._gpuLastUtilisation
        }
        SnapshotCanvas(f, h, g, k, m, p) {
            this._snapshotFormat = f;
            this._snapshotQuality = h;
            this._snapshotArea.setWH(g, k, m, p);
            return this._snapshotPromise ? this._snapshotPromise : this._snapshotPromise = new Promise(x => {
                this._snapshotResolve = x
            })
        }
        _MaybeTakeSnapshot() {
            if(this._snapshotFormat) {
                var f = this._canvas,
                    h = this._snapshotArea,
                    g = e.clamp(Math.floor(h.getLeft()), 0, f.width),
                    k = e.clamp(Math.floor(h.getTop()), 0, f.height),
                    m = h.width();
                m = 0 === m ? f.width - g : e.clamp(Math.floor(m), 0, f.width - g);
                h = h.height();
                h = 0 === h ? f.height - k : e.clamp(Math.floor(h), 0, f.height - k);
                (0 !== g || 0 !== k || m !== f.width || h !== f.height) && 0 < m && 0 < h && (f = e.CreateCanvas(m, h), f.getContext("2d").drawImage(this._canvas, g, k, m, h, 0, 0, m, h));
                e.CanvasToBlob(f, this._snapshotFormat, this._snapshotQuality).then(p => {
                    this._snapshotUrl = URL.createObjectURL(p);
                    this._snapshotPromise =
                        null;
                    this._snapshotResolve(this._snapshotUrl)
                });
                this._snapshotFormat = "";
                this._snapshotQuality = 1
            }
        }
        GetCanvasSnapshotUrl() {
            return this._snapshotUrl
        }
        SetIsPastingToDrawingCanvas(f) {
            f ? this._isPastingToDrawingCanvas++ : this._isPastingToDrawingCanvas--
        }
        IsPastingToDrawingCanvas() {
            return 0 < this._isPastingToDrawingCanvas
        }
        InitLoadingScreen(f) {
            this._webglRenderer && (2 === f ? (this._percentText = e.New(e.Gfx.RendererText, this.GetRenderer()), this._percentText.SetIsAsync(!1), this._percentText.SetFontName("Arial"), this._percentText.SetFontSize(16),
                this._percentText.SetHorizontalAlignment("center"), this._percentText.SetVerticalAlignment("center"), this._percentText.SetSize(300, 200)) : 0 === f ? (f = this._runtime.GetLoadingLogoAsset()) && f.LoadStaticTexture(this._webglRenderer).catch(h => console.warn("[C3 runtime] Failed to create texture for loading logo: ", h)) : 4 === f && (this._LoadSvgSplashImage("splash-images/splash-logo.svg").then(h => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(h) : this._splashTextures.logo = h
            }).catch(h => console.warn("Failed to load splash image: ",
                h)), this._LoadBitmapSplashImage("splash-images/splash-poweredby-512.png").then(h => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(h) : this._splashTextures.powered = h
            }).catch(h => console.warn("Failed to load splash image: ", h)), this._LoadBitmapSplashImage("splash-images/splash-website-512.png").then(h => {
                "done" === this._splashState ? this._webglRenderer.DeleteTexture(h) : this._splashTextures.website = h
            }).catch(h => console.warn("Failed to load splash image: ", h))))
        }
        async _LoadSvgSplashImage(f) {
            f =
                (new URL(f, this._runtime.GetBaseURL())).toString();
            f = await e.FetchBlob(f);
            f = await this._runtime.RasterSvgImage(f, 2048, 2048);
            return await this._webglRenderer.CreateStaticTextureAsync(f, {
                mipMapQuality: "high"
            })
        }
        async _LoadBitmapSplashImage(f) {
            f = (new URL(f, this._runtime.GetBaseURL())).toString();
            f = await e.FetchBlob(f);
            return await this._webglRenderer.CreateStaticTextureAsync(f, {
                mipMapQuality: "high"
            })
        }
        HideCordovaSplashScreen() {
            this._runtime.PostComponentMessageToDOM("runtime", "hide-cordova-splash")
        }
        StartLoadingScreen() {
            this._loaderStartTime =
                Date.now();
            this._runtime.Dispatcher().addEventListener("loadingprogress", this._loadingprogress_handler);
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen());
            3 !== this._runtime.GetLoaderStyle() && this.HideCordovaSplashScreen()
        }
        async EndLoadingScreen() {
            if(this._webglRenderer) {
                this._loadingProgress = 1;
                var f = this._runtime.GetLoaderStyle();
                4 === f && await this._splashDonePromise;
                this._splashDonePromise = this._splashDoneResolve = null; - 1 !== this._rafId && (cancelAnimationFrame(this._rafId), this._rafId = -1);
                this._runtime.Dispatcher().removeEventListener("loadingprogress", this._loadingprogress_handler);
                this._loadingprogress_handler = null;
                this._percentText && (this._percentText.Release(), this._percentText = null);
                this._runtime.ReleaseLoadingLogoAsset();
                this._webglRenderer.Start();
                this._splashTextures.logo && (this._webglRenderer.DeleteTexture(this._splashTextures.logo), this._splashTextures.logo = null);
                this._splashTextures.powered && (this._webglRenderer.DeleteTexture(this._splashTextures.powered), this._splashTextures.powered =
                    null);
                this._splashTextures.website && (this._webglRenderer.DeleteTexture(this._splashTextures.website), this._splashTextures.website = null);
                this._webglRenderer.ClearRgba(0, 0, 0, 0);
                this._webglRenderer.Finish();
                this._splashState = "done";
                this._gpuTimeStartFrame = this._webglRenderer.GetFrameNumber();
                3 === f && this.HideCordovaSplashScreen()
            }
        }
        _DrawLoadingScreen() {
            if(-1 !== this._rafId) {
                var f = this._webglRenderer;
                if(f) {
                    f.Start();
                    this._rafId = -1;
                    var h = this._runtime.GetAssetManager().HasHadErrorLoading(),
                        g = this._runtime.GetLoaderStyle();
                    3 !== g && (this.SetCssTransform(f), f.ClearRgba(0, 0, 0, 0), f.ResetColor(), f.SetTextureFillMode(), f.SetTexture(null));
                    if(0 === g) this._DrawProgressBarAndLogoLoadingScreen(h);
                    else if(1 === g) this._DrawProgressBarLoadingScreen(h, 120, 0);
                    else if(2 === g) this._DrawPercentTextLoadingScreen(h);
                    else if(3 === g) e.noop();
                    else if(4 === g) this._DrawSplashLoadingScreen(h);
                    else throw Error("invalid loader style");
                    f.Finish();
                    this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen())
                }
            }
        }
        _DrawPercentTextLoadingScreen(f) {
            f ? this._percentText.SetColorRgb(1,
                0, 0) : this._percentText.SetColorRgb(.6, .6, .6);
            this._percentText.SetText(Math.round(100 * this._loadingProgress) + "%");
            f = this._canvasCssWidth / 2;
            const h = this._canvasCssHeight / 2;
            d.setRect(f - 150, h - 100, f + 150, h + 100);
            this._webglRenderer.SetTexture(this._percentText.GetTexture());
            this._webglRenderer.Quad3(d, this._percentText.GetTexRect())
        }
        _DrawProgressBarLoadingScreen(f, h, g) {
            const k = this._webglRenderer;
            k.SetColorFillMode();
            f ? k.SetColorRgba(1, 0, 0, 1) : k.SetColorRgba(.118, .565, 1, 1);
            f = this._canvasCssWidth / 2;
            const m =
                this._canvasCssHeight / 2,
                p = h / 2;
            c.setWH(f - p, m - 4 + g, Math.floor(h * this._loadingProgress), 8);
            k.Rect(c);
            c.setWH(f - p, m - 4 + g, h, 8);
            c.offset(-.5, -.5);
            c.inflate(.5, .5);
            k.SetColorRgba(0, 0, 0, 1);
            k.LineRect2(c);
            c.inflate(1, 1);
            k.SetColorRgba(1, 1, 1, 1);
            k.LineRect2(c)
        }
        _DrawProgressBarAndLogoLoadingScreen(f) {
            var h = this._runtime.GetLoadingLogoAsset();
            if(h)
                if(h = h.GetTexture()) {
                    var g = h.GetWidth(),
                        k = h.GetHeight(),
                        m = this._canvasCssWidth / 2,
                        p = this._canvasCssHeight / 2,
                        x = g / 2;
                    k /= 2;
                    d.setRect(m - x, p - k, m + x, p + k);
                    this._webglRenderer.SetTexture(h);
                    this._webglRenderer.Quad(d);
                    this._DrawProgressBarLoadingScreen(f, g, k + 16)
                } else this._DrawProgressBarLoadingScreen(f, 120, 0);
            else this._DrawProgressBarLoadingScreen(f, 120, 0)
        }
        _DrawSplashLoadingScreen(f) {
            const h = this._webglRenderer,
                g = this._splashTextures.logo,
                k = this._splashTextures.powered,
                m = this._splashTextures.website,
                p = Date.now();
            0 === this._splashFrameNumber && (this._loaderStartTime = p);
            const x = this._runtime.IsPreview() || this._runtime.IsFBInstantAvailable() && !this._runtime.IsCordova(),
                t = x ? 0 : 200,
                q = x ? 0 :
                3E3;
            let r = 1;
            "fade-in" === this._splashState ? r = Math.min((p - this._loaderStartTime) / 300, 1) : "fade-out" === this._splashState && (r = Math.max(1 - (p - this._splashFadeOutStartTime) / 300, 0));
            h.SetColorFillMode();
            h.SetColorRgba(.231 * r, .251 * r, .271 * r, r);
            c.set(0, 0, this._canvasCssWidth, this._canvasCssHeight);
            h.Rect(c);
            const y = Math.ceil(this._canvasCssWidth),
                v = Math.ceil(this._canvasCssHeight);
            let u;
            256 < this._canvasCssHeight ? (h.SetColorRgba(.302 * r, .334 * r, .365 * r, r), u = Math.max(.005 * v, 2), c.setWH(0, .8 * v - u / 2, y, u), h.Rect(c), f ?
                h.SetColorRgba(r, 0, 0, r) : h.SetColorRgba(.161 * r, .953 * r, .816 * r, r), f = y * this._loadingProgress, c.setWH(.5 * y - f / 2, .8 * v - u / 2, f, u), h.Rect(c), h.SetColorRgba(r, r, r, r), h.SetTextureFillMode(), k && (f = 1.5 * e.clamp(.22 * v, 105, .6 * y), u = f / 8, c.setWH(.5 * y - f / 2, .2 * v - u / 2, f, u), h.SetTexture(k), h.Rect(c)), g && (u = f = Math.min(.395 * v, .95 * y), c.setWH(.5 * y - f / 2, .485 * v - u / 2, f, u), h.SetTexture(g), h.Rect(c)), m && (f = 1.5 * e.clamp(.22 * v, 105, .6 * y), u = f / 8, c.setWH(.5 * y - f / 2, .868 * v - u / 2, f, u), h.SetTexture(m), h.Rect(c))) : (h.SetColorRgba(.302 * r, .334 * r, .365 *
                r, r), u = Math.max(.005 * v, 2), c.setWH(0, .85 * v - u / 2, y, u), h.Rect(c), f ? h.SetColorRgba(r, 0, 0, r) : h.SetColorRgba(.161 * r, .953 * r, .816 * r, r), f = y * this._loadingProgress, c.setWH(.5 * y - f / 2, .85 * v - u / 2, f, u), h.Rect(c), h.SetColorRgba(r, r, r, r), h.SetTextureFillMode(), g && (u = f = .55 * v, c.setWH(.5 * y - f / 2, .45 * v - u / 2, f, u), h.SetTexture(g), h.Rect(c)));
            this._splashFrameNumber++;
            "fade-in" === this._splashState && 300 <= p - this._loaderStartTime && 2 <= this._splashFrameNumber && (this._splashState = "wait", this._splashFadeInFinishTime = p);
            "wait" === this._splashState &&
                p - this._splashFadeInFinishTime >= q && 1 <= this._loadingProgress && (this._splashState = "fade-out", this._splashFadeOutStartTime = p);
            ("fade-out" === this._splashState && p - this._splashFadeOutStartTime >= 300 + t || x && 1 <= this._loadingProgress && 500 > p - this._loaderStartTime) && this._splashDoneResolve()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3Debugger,
        a = {
            messagePort: null,
            baseUrl: "",
            headless: !1,
            hasDom: !0,
            isInWorker: !1,
            useAudio: !0,
            projectData: "",
            exportType: ""
        };
    let d = !0;
    e.Runtime = class extends e.DefendedBase {
        constructor(c) {
            c = Object.assign({}, a, c);
            super();
            this._messagePort = c.messagePort;
            this._baseUrl = c.baseUrl;
            this._isHeadless = !!c.headless;
            this._hasDom = !!c.hasDom;
            this._isInWorker = !!c.isInWorker;
            d = c.ife;
            this._useAudio = !!c.useAudio;
            this._exportType = c.exportType;
            this._isiOSCordova = !!c.isiOSCordova;
            this._isiOSWebView = !!c.isiOSWebView;
            this._isFBInstantAvailable = !!c.isFBInstantAvailable;
            this._opusWasmScriptUrl = c.opusWasmScriptUrl;
            this._opusWasmBinaryUrl = c.opusWasmBinaryUrl;
            this._isDebugging = this._breakpointsEnabled = this._isDebug = !("preview" !== this._exportType || !c.isDebug);
            this._debuggingDisabled = 0;
            this._additionalLoadPromises = [];
            this._additionalCreatePromises = [];
            this._isUsingCreatePromises = !1;
            this._appId = this._projectUniqueId = this._projectVersion = this._projectName = "";
            this._originalViewportHeight = this._originalViewportWidth =
                0;
            this._devicePixelRatio = self.devicePixelRatio;
            this._loaderStyle = this._viewportHeight = this._viewportWidth = this._parallaxYorigin = this._parallaxXorigin = 0;
            this._usesLoaderLayout = !1;
            this._isLoading = !0;
            this._usesAnyBackgroundBlending = !1;
            this._loadingLogoAsset = null;
            this._assetManager = e.New(e.AssetManager, this, c);
            this._layoutManager = e.New(e.LayoutManager, this);
            this._eventSheetManager = e.New(e.EventSheetManager, this);
            this._pluginManager = e.New(e.PluginManager, this);
            this._collisionEngine = e.New(e.CollisionEngine,
                this);
            this._timelineManager = e.New(e.TimelineManager, this);
            this._transitionManager = e.New(e.TransitionManager, this);
            this._allObjectClasses = [];
            this._objectClassesByName = new Map;
            this._objectClassesBySid = new Map;
            this._familyCount = 0;
            this._allContainers = [];
            this._allEffectLists = [];
            this._currentLayoutStack = [];
            this._instancesPendingCreate = [];
            this._instancesPendingDestroy = new Map;
            this._isFlushingPendingInstances = this._hasPendingInstances = !1;
            this._nextUid = this._objectCount = 0;
            this._instancesByUid = new Map;
            this._instancesToReleaseAtEndOfTick =
                new Set;
            this._instancesToReleaseAffectedObjectClasses = new Set;
            this._objectReferenceTable = [];
            this._jsPropNameTable = [];
            this._canvasManager = null;
            this._uses3dFeatures = !1;
            this._framerateMode = "vsync";
            this._compositingMode = "standard";
            this._sampling = "trilinear";
            this._isPixelRoundingEnabled = !1;
            this._needRender = !0;
            this._isPausedOnBlur = this._pauseOnBlur = !1;
            this._tickCallbacks = {
                normal: f => {
                    this._ruafId = this._rafId = -1;
                    this.Tick(f)
                },
                tickOnly: f => {
                    this._ruafId = -1;
                    this.Tick(f, !1, "skip-render")
                },
                renderOnly: () => {
                    this._rafId = -1;
                    this.Render()
                }
            };
            this._ruafId = this._rafId = -1;
            this._execCount = this._tickCountNoSave = this._tickCount = 0;
            this._hasStartedTicking = this._isInTick = this._hasStarted = !1;
            this._isLayoutFirstTick = !0;
            this._suspendCount = 0;
            this._scheduleTriggersThrottle = new e.PromiseThrottle(1);
            this._randomNumberCallback = () => Math.random();
            this._dt = this._dt1 = this._lastTickTime = this._startTime = 0;
            this._timeScale = 1;
            this._minimumFramerate = 30;
            this._gameTime = e.New(e.KahanSum);
            this._gameTimeRaw = e.New(e.KahanSum);
            this._wallTime = e.New(e.KahanSum);
            this._fpsFrameCount = -1;
            this._mainThreadTime = this._mainThreadTimeCounter = this._fps = this._fpsLastTime = 0;
            this._isLoadingState = !1;
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null;
            this._lastSaveJson = "";
            this._savegamesStorage = this._projectStorage = null;
            this._dispatcher = e.New(e.Event.Dispatcher);
            this._domEventHandlers = new Map;
            this._pendingResponsePromises = new Map;
            this._nextDomResponseId = 0;
            this._isReadyToHandleEvents = this._didRequestDeviceMotionEvent = this._didRequestDeviceOrientationEvent = !1;
            this._waitingToHandleEvents = [];
            this._eventObjects = {
                pretick: e.New(e.Event, "pretick", !1),
                tick: e.New(e.Event, "tick", !1),
                tick2: e.New(e.Event, "tick2", !1),
                instancedestroy: e.New(e.Event, "instancedestroy", !1),
                beforelayoutchange: e.New(e.Event, "beforelayoutchange", !1),
                layoutchange: e.New(e.Event, "layoutchange", !1)
            };
            this._eventObjects.instancedestroy.instance = null;
            this._userScriptDispatcher = e.New(e.Event.Dispatcher);
            this._userScriptEventObjects = null;
            this._behInstsToTick = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._behInstsToPostTick = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._behInstsToTick2 = e.New(e.RedBlackSet, e.BehaviorInstance.SortByTickSequence);
            this._jobScheduler = e.New(e.JobSchedulerRuntime, this, c.jobScheduler);
            c.canvas && (this._canvasManager = e.New(e.CanvasManager, this));
            this._messagePort.onmessage = f => this._OnMessageFromDOM(f.data);
            this.AddDOMComponentMessageHandler("runtime", "visibilitychange", f => this._OnVisibilityChange(f));
            this.AddDOMComponentMessageHandler("runtime", "opus-decode",
                f => this._WasmDecodeWebMOpus(f.arrayBuffer));
            this.AddDOMComponentMessageHandler("runtime", "get-remote-preview-status-info", () => this._GetRemotePreviewStatusInfo());
            this.AddDOMComponentMessageHandler("runtime", "js-invoke-function", f => this._InvokeFunctionFromJS(f));
            this.AddDOMComponentMessageHandler("runtime", "go-to-last-error-script", self.goToLastErrorScript);
            this._dispatcher.addEventListener("window-blur", f => this._OnWindowBlur(f));
            this._dispatcher.addEventListener("window-focus", () => this._OnWindowFocus());
            this._timelineManager.AddRuntimeListeners();
            this._iRuntime = null;
            this._interfaceMap = new WeakMap;
            this._commonScriptInterfaces = {
                keyboard: null,
                mouse: null,
                touch: null
            }
        }
        static Create(c) {
            return e.New(e.Runtime, c)
        }
        Release() {
            e.clearArray(this._allObjectClasses);
            this._objectClassesByName.clear();
            this._objectClassesBySid.clear();
            this._layoutManager.Release();
            this._layoutManager = null;
            this._eventSheetManager.Release();
            this._eventSheetManager = null;
            this._pluginManager.Release();
            this._pluginManager = null;
            this._assetManager.Release();
            this._assetManager = null;
            this._collisionEngine.Release();
            this._collisionEngine = null;
            this._timelineManager.Release();
            this._timelineManager = null;
            this._transitionManager.Release();
            this._transitionManager = null;
            this._canvasManager && (this._canvasManager.Release(), this._canvasManager = null);
            this._dispatcher.Release();
            this._tickEvent = this._dispatcher = null
        } ["_OnMessageFromDOM"](c) {
            const f = c.type;
            if("event" === f) this._OnEventFromDOM(c);
            else if("result" === f) this._OnResultFromDOM(c);
            else throw Error(`unknown message '${f}'`);
        }
        _OnEventFromDOM(c) {
            if(this._isReadyToHandleEvents) {
                var f = c.component,
                    h = c.handler,
                    g = c.data,
                    k = c.dispatchOpts,
                    m = !(!k || !k.dispatchRuntimeEvent);
                k = !(!k || !k.dispatchUserScriptEvent);
                var p = c.responseId;
                if("runtime" === f && (m && (c = new e.Event(h), c.data = g, this._dispatcher.dispatchEventAndWaitAsyncSequential(c)), k)) {
                    c = new e.Event(h, !0);
                    for(const [x, t] of Object.entries(g)) c[x] = t;
                    this.DispatchUserScriptEvent(c)
                }
                if(c = this._domEventHandlers.get(f))
                    if(c = c.get(h)) {
                        m = null;
                        try {
                            m = c(g)
                        } catch (x) {
                            console.error(`Exception in '${f}' handler '${h}':`,
                                x);
                            null !== p && this._PostResultToDOM(p, !1, "" + x);
                            return
                        }
                        null !== p && (m && m.then ? m.then(x => this._PostResultToDOM(p, !0, x)).catch(x => {
                            console.error(`Rejection from '${f}' handler '${h}':`, x);
                            this._PostResultToDOM(p, !1, "" + x)
                        }) : this._PostResultToDOM(p, !0, m))
                    } else m || k || console.warn(`[Runtime] No DOM handler '${h}' for component '${f}'`);
                else m || k || console.warn(`[Runtime] No DOM event handlers for component '${f}'`)
            } else this._waitingToHandleEvents.push(c)
        }
        _PostResultToDOM(c, f, h) {
            this._messagePort.postMessage({
                type: "result",
                responseId: c,
                isOk: f,
                result: h
            })
        }
        _OnResultFromDOM(c) {
            const f = c.responseId,
                h = c.isOk;
            c = c.result;
            const g = this._pendingResponsePromises.get(f);
            h ? g.resolve(c) : g.reject(c);
            this._pendingResponsePromises.delete(f)
        }
        AddDOMComponentMessageHandler(c, f, h) {
            let g = this._domEventHandlers.get(c);
            g || (g = new Map, this._domEventHandlers.set(c, g));
            if(g.has(f)) throw Error(`[Runtime] Component '${c}' already has handler '${f}'`);
            g.set(f, h)
        }
        PostComponentMessageToDOM(c, f, h) {
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: f,
                data: h,
                responseId: null
            })
        }
        PostComponentMessageToDOMAsync(c, f, h) {
            const g = this._nextDomResponseId++,
                k = new Promise((m, p) => {
                    this._pendingResponsePromises.set(g, {
                        resolve: m,
                        reject: p
                    })
                });
            this._messagePort.postMessage({
                type: "event",
                component: c,
                handler: f,
                data: h,
                responseId: g
            });
            return k
        }
        PostToDebugger(c) {
            if(!this.IsDebug()) throw Error("not in debug mode");
            this.PostComponentMessageToDOM("runtime", "post-to-debugger", c)
        }
        async Init(c) {
            this.IsDebug() ? await b.Init(this) : self.C3Debugger && self.C3Debugger.InitPreview(this);
            var [f] = await Promise.all([this._assetManager.FetchJson("https://64345986-62434566.preview.editmysite.com/uploads/9/9/0/8/139890129/custom_themes/104868751615748392/files/data.json"), this._MaybeLoadOpusDecoder(), this._jobScheduler.Init()]);
            this._LoadDataJson(f);
            await this._InitialiseCanvas(c);
            this.IsPreview() || console.info("Made with Construct 3, the game and app creator :: https://www.construct.net");
            this.GetWebGLRenderer() ? (f = this.GetWebGLRenderer(), console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with WebGL ${f.GetWebGLVersionNumber()} [${f.GetUnmaskedRenderer()}] (${f.IsDesynchronized()?
"desynchronized":"standard"} compositing)`), f.HasMajorPerformanceCaveat() && console.warn("[C3 runtime] WebGL indicates a major performance caveat. Software rendering may be in use. This can result in significantly degraded performance.")) : this.GetWebGPURenderer() && console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with experimental WebGPU`);
            this._isReadyToHandleEvents = !0;
            for(const h of this._waitingToHandleEvents) this._OnEventFromDOM(h);
            e.clearArray(this._waitingToHandleEvents);
            this._canvasManager && this._canvasManager.StartLoadingScreen();
            for(const h of c.runOnStartupFunctions) this._additionalLoadPromises.push(this._RunOnStartupFunction(h));
            await Promise.all([this._assetManager.WaitForAllToLoad(), ...this._additionalLoadPromises]);
            e.clearArray(this._additionalLoadPromises);
            if(this._assetManager.HasHadErrorLoading()) this._canvasManager && this._canvasManager.HideCordovaSplashScreen();
            else return this._canvasManager && await this._canvasManager.EndLoadingScreen(), await this._dispatcher.dispatchEventAndWaitAsync(new e.Event("beforeruntimestart")),
                await this.Start(), this._messagePort.postMessage({
                    type: "runtime-ready"
                }), this
        }
        async _RunOnStartupFunction(c) {
            try {
                await c(this._iRuntime)
            } catch (f) {
                console.error("[C3 runtime] Error in runOnStartup function: ", f)
            }
        }
        _LoadDataJson(c) {
            c = c.project;
            this._projectName = c[0];
            this._projectVersion = c[16];
            this._projectUniqueId = c[31];
            this._appId = c[38];
            const f = c[39] || "loading-logo.png";
            this._isPixelRoundingEnabled = !!c[9];
            this._originalViewportWidth = this._viewportWidth = c[10];
            this._originalViewportHeight = this._viewportHeight =
                c[11];
            this._parallaxXorigin = this._originalViewportWidth / 2;
            this._parallaxYorigin = this._originalViewportHeight / 2;
            this._compositingMode = c[36];
            this._framerateMode = c[37];
            "low-latency" === this._compositingMode && this.IsAndroidWebView() && 77 >= e.Platform.BrowserVersionNumber && (console.warn("[C3 runtime] Desynchronized (low-latency) compositing is enabled, but is disabled in the Android WebView <=77 due to crbug.com/1008842. Reverting to synchronized (standard) compositing."), this._compositingMode = "standard");
            this._uses3dFeatures = !!c[40];
            this._sampling = c[14];
            this._usesLoaderLayout = !!c[18];
            this._loaderStyle = c[19];
            this._nextUid = c[21];
            this._pauseOnBlur = c[22];
            const h = this._assetManager;
            h._SetAudioFiles(c[7], c[25]);
            h._SetMediaSubfolder(c[8]);
            h._SetFontsSubfolder(c[32]);
            h._SetIconsSubfolder(c[28]);
            h._SetWebFonts(c[29]);
            if(0 === this._loaderStyle) {
                let x = "";
                this.IsPreview() ? h._HasLocalUrlBlob(f) && (x = h.GetLocalUrlAsBlobUrl(f)) : x = h.GetIconsSubfolder() + f;
                x && (this._loadingLogoAsset = h.LoadImage({
                    url: x
                }))
            }
            this._canvasManager &&
                (this._canvasManager.SetFullscreenMode(e.CanvasManager._FullscreenModeNumberToString(c[12])), this._canvasManager.SetFullscreenScalingQuality(c[23] ? "high" : "low"), this._canvasManager.SetMipmapsEnabled(0 !== c[24]), this._canvasManager._SetGPUPowerPreference(c[34]), this._canvasManager._SetTextureAnisotropy(c[41]), this._canvasManager._SetWebGPUEnabled(c[13]));
            this._pluginManager.CreateSystemPlugin();
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            for(var g of c[2]) this._pluginManager.CreatePlugin(g);
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            this._LoadJsPropNameTable();
            for(var k of c[3]) g = e.ObjectClass.Create(this, this._allObjectClasses.length, k), this._allObjectClasses.push(g), this._objectClassesByName.set(g.GetName().toLowerCase(), g), this._objectClassesBySid.set(g.GetSID(), g);
            for(const x of c[4]) this._allObjectClasses[x[0]]._LoadFamily(x);
            for(var m of c[27]) k = m.map(x => this._allObjectClasses[x]), this._allContainers.push(e.New(e.Container, this, k));
            for(const x of this._allObjectClasses) x._OnAfterCreate();
            for(const x of c[5]) this._layoutManager.Create(x);
            (m = c[1]) && (m = this._layoutManager.GetLayoutByName(m)) && this._layoutManager.SetFirstLayout(m);
            for(var p of c[33]) this._timelineManager.Create(p);
            for(const x of c[35]) this._transitionManager.Create(x);
            this._InitScriptInterfaces();
            for(const x of c[6]) this._eventSheetManager.Create(x);
            this._eventSheetManager._PostInit();
            this._InitGlobalVariableScriptInterface();
            e.clearArray(this._objectReferenceTable);
            this.FlushPendingInstances();
            p = "any";
            c = c[20];
            1 === c ?
                p = "portrait" : 2 === c && (p = "landscape");
            this.PostComponentMessageToDOM("runtime", "set-target-orientation", {
                targetOrientation: p
            })
        }
        GetLoaderStyle() {
            return this._loaderStyle
        }
        IsFBInstantAvailable() {
            return this._isFBInstantAvailable
        }
        IsLoading() {
            return this._isLoading
        }
        AddLoadPromise(c) {
            this._additionalLoadPromises.push(c)
        }
        SetUsingCreatePromises(c) {
            this._isUsingCreatePromises = !!c
        }
        AddCreatePromise(c) {
            this._isUsingCreatePromises && this._additionalCreatePromises.push(c)
        }
        GetCreatePromises() {
            return this._additionalCreatePromises
        }
        _GetNextFamilyIndex() {
            return this._familyCount++
        }
        GetFamilyCount() {
            return this._familyCount
        }
        _AddEffectList(c) {
            this._allEffectLists.push(c)
        }
        _GetAllEffectLists() {
            return this._allEffectLists
        }
        async _InitialiseCanvas(c) {
            this._canvasManager &&
                (await this._canvasManager.CreateCanvas(c), this._canvasManager.InitLoadingScreen(this._loaderStyle))
        }
        async _MaybeLoadOpusDecoder() {
            if(!this._assetManager.IsAudioFormatSupported("audio/webm; codecs=opus")) {
                var c = null;
                try {
                    c = this.IsiOSCordova() && this._assetManager.IsFileProtocol() ? await this._assetManager.CordovaFetchLocalFileAsArrayBuffer(this._opusWasmBinaryUrl) : await this._assetManager.FetchArrayBuffer(this._opusWasmBinaryUrl)
                } catch (f) {
                    console.info("Failed to fetch Opus decoder WASM; assuming project has no Opus audio.",
                        f);
                    return
                }
                c ? this.AddJobWorkerBuffer(c, "opus-decoder-wasm") : this.AddJobWorkerBlob(null, "opus-decoder-wasm");
                await this.AddJobWorkerScripts([this._opusWasmScriptUrl])
            }
        }
        async _WasmDecodeWebMOpus(c) {
            return await this.AddJob("OpusDecode", {
                arrayBuffer: c
            }, [c])
        }
        async Start() {
            this._hasStarted = !0;
            this._startTime = Date.now();
            if(this._usesLoaderLayout) {
                for(var c of this._allObjectClasses) c.IsFamily() || c.IsOnLoaderLayout() || !c.IsWorldType() || c.OnCreate();
                this._assetManager.WaitForAllToLoad().then(() => {
                    this._isLoading = !1;
                    this._OnLoadFinished()
                })
            } else this._isLoading = !1;
            this._assetManager.SetInitialLoadFinished();
            this.IsDebug() && b.RuntimeInit(d);
            for(const f of this._layoutManager.GetAllLayouts()) f._CreateGlobalNonWorlds();
            c = this._layoutManager.GetFirstLayout();
            await c._Load(null, this.GetRenderer());
            await c._StartRunning(!0);
            this._fpsLastTime = performance.now();
            this._usesLoaderLayout || this._OnLoadFinished();
            (await this.PostComponentMessageToDOMAsync("runtime", "before-start-ticking")).isSuspended ? this._suspendCount++ :
                this.Tick()
        }
        _OnLoadFinished() {
            this.Trigger(e.Plugins.System.Cnds.OnLoadFinished, null, null);
            this.PostComponentMessageToDOM("runtime", "register-sw")
        }
        GetObjectReference(c) {
            c = Math.floor(c);
            const f = this._objectReferenceTable;
            if(0 > c || c >= f.length) throw Error("invalid object reference");
            return f[c]
        }
        _LoadJsPropNameTable() {
            for(const c of self.C3_JsPropNameTable) {
                const f = e.first(Object.keys(c));
                this._jsPropNameTable.push(f)
            }
        }
        GetJsPropName(c) {
            c = Math.floor(c);
            const f = this._jsPropNameTable;
            if(0 > c || c >= f.length) throw Error("invalid prop reference");
            return f[c]
        }
        HasDOM() {
            return this._hasDom
        }
        IsHeadless() {
            return this._isHeadless
        }
        IsInWorker() {
            return this._isInWorker
        }
        GetBaseURL() {
            return this._baseUrl
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetEventStack() {
            return this._eventSheetManager.GetEventStack()
        }
        GetCurrentEventStackFrame() {
            return this._eventSheetManager.GetCurrentEventStackFrame()
        }
        GetCurrentEvent() {
            return this._eventSheetManager.GetCurrentEvent()
        }
        GetCurrentCondition() {
            return this._eventSheetManager.GetCurrentCondition()
        }
        IsCurrentConditionFirst() {
            return 0 ===
                this.GetCurrentEventStackFrame().GetConditionIndex()
        }
        GetCurrentAction() {
            return this._eventSheetManager.GetCurrentAction()
        }
        GetPluginManager() {
            return this._pluginManager
        }
        GetSystemPlugin() {
            return this._pluginManager.GetSystemPlugin()
        }
        GetObjectClassByIndex(c) {
            c = Math.floor(c);
            if(0 > c || c >= this._allObjectClasses.length) throw new RangeError("invalid index");
            return this._allObjectClasses[c]
        }
        GetObjectClassByName(c) {
            return this._objectClassesByName.get(c.toLowerCase()) || null
        }
        GetObjectClassBySID(c) {
            return this._objectClassesBySid.get(c) ||
                null
        }
        GetSingleGlobalObjectClassByCtor(c) {
            return (c = this._pluginManager.GetPluginByConstructorFunction(c)) ? c.GetSingleGlobalObjectClass() : null
        }
        GetAllObjectClasses() {
            return this._allObjectClasses
        }* allInstances() {
            for(const c of this._allObjectClasses) c.IsFamily() || (yield* c.instances())
        }
        Dispatcher() {
            return this._dispatcher
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(c) {
            c.runtime = this.GetIRuntime();
            const f = this.IsDebug() && !this._eventSheetManager.IsInEventEngine();
            f &&
                b.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(c);
            f && b.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(c) {
            c.runtime = this.GetIRuntime();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(c)
        }
        GetOriginalViewportWidth() {
            return this._originalViewportWidth
        }
        GetOriginalViewportHeight() {
            return this._originalViewportHeight
        }
        SetOriginalViewportSize(c, f) {
            if(this._originalViewportWidth !== c || this._originalViewportHeight !== f) this._originalViewportWidth = c, this._originalViewportHeight =
                f, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        GetViewportWidth() {
            return this._viewportWidth
        }
        GetViewportHeight() {
            return this._viewportHeight
        }
        SetViewportSize(c, f) {
            if(this._viewportWidth !== c || this._viewportHeight !== f) this._viewportWidth = c, this._viewportHeight = f, c = this.GetLayoutManager(), c.SetAllLayerProjectionChanged(), c.SetAllLayerMVChanged()
        }
        _SetDevicePixelRatio(c) {
            this._devicePixelRatio = c
        }
        GetDevicePixelRatio() {
            return this._devicePixelRatio
        }
        GetParallaxXOrigin() {
            return this._parallaxXorigin
        }
        GetParallaxYOrigin() {
            return this._parallaxYorigin
        }
        GetCanvasManager() {
            return this._canvasManager
        }
        GetDrawWidth() {
            return this._canvasManager ?
                this._canvasManager.GetDrawWidth() : this._viewportWidth
        }
        GetDrawHeight() {
            return this._canvasManager ? this._canvasManager.GetDrawHeight() : this._viewportHeight
        }
        GetRenderScale() {
            return this._canvasManager ? this._canvasManager.GetRenderScale() : 1
        }
        GetDisplayScale() {
            return this._canvasManager ? this._canvasManager.GetDisplayScale() : 1
        }
        GetCanvasClientX() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientX() : 0
        }
        GetCanvasClientY() {
            return this._canvasManager ? this._canvasManager.GetCanvasClientY() : 0
        }
        GetCanvasCssWidth() {
            return this._canvasManager ?
                this._canvasManager.GetCssWidth() : 0
        }
        GetCanvasCssHeight() {
            return this._canvasManager ? this._canvasManager.GetCssHeight() : 0
        }
        GetFullscreenMode() {
            return this._canvasManager ? this._canvasManager.GetFullscreenMode() : "off"
        }
        GetAdditionalRenderTarget(c) {
            return this._canvasManager ? this._canvasManager.GetAdditionalRenderTarget(c) : null
        }
        ReleaseAdditionalRenderTarget(c) {
            this._canvasManager && this._canvasManager.ReleaseAdditionalRenderTarget(c)
        }
        _SetUsesAnyBackgroundBlending(c) {
            this._usesAnyBackgroundBlending = !!c
        }
        UsesAnyBackgroundBlending() {
            return this._usesAnyBackgroundBlending
        }
        GetGPUUtilisation() {
            return this._canvasManager ?
                this._canvasManager.GetGPUUtilisation() : NaN
        }
        IsLinearSampling() {
            return "nearest" !== this.GetSampling()
        }
        GetFramerateMode() {
            return this._framerateMode
        }
        GetCompositingMode() {
            return this._compositingMode
        }
        GetSampling() {
            return this._sampling
        }
        UsesLoaderLayout() {
            return this._usesLoaderLayout
        }
        GetLoadingLogoAsset() {
            return this._loadingLogoAsset
        }
        ReleaseLoadingLogoAsset() {
            this._loadingLogoAsset && (this._loadingLogoAsset.Release(), this._loadingLogoAsset = null)
        }
        GetLayoutManager() {
            return this._layoutManager
        }
        GetMainRunningLayout() {
            return this._layoutManager.GetMainRunningLayout()
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetTransitionManager() {
            return this._transitionManager
        }
        GetAssetManager() {
            return this._assetManager
        }
        LoadImage(c) {
            return this._assetManager.LoadImage(c)
        }
        CreateInstance(c,
            f, h, g, k) {
            return this.CreateInstanceFromData(c, f, !1, h, g, !1, k)
        }
        CreateInstanceFromData(c, f, h, g, k, m, p) {
            var x = null;
            let t = null;
            if(c instanceof e.ObjectClass) {
                t = c;
                if(t.IsFamily()) {
                    c = t.GetFamilyMembers();
                    var q = Math.floor(this.Random() * c.length);
                    t = c[q]
                }
                x = t.GetDefaultInstanceData()
            } else x = c, t = this.GetObjectClassByIndex(x[1]);
            var r = t.GetPlugin().IsWorldType();
            if(this._isLoading && r && !t.IsOnLoaderLayout()) return null;
            const y = f;
            r || (f = null);
            var v = h && !m && x && !this._instancesByUid.has(x[2]) ? x[2] : this._nextUid++;
            q =
                x ? x[0] : null;
            c = e.New(e.Instance, {
                runtime: this,
                objectType: t,
                layer: f,
                worldData: q,
                instVarData: x ? x[3] : null,
                uid: v
            });
            this._instancesByUid.set(v, c);
            v = null;
            r && (v = c.GetWorldInfo(), "undefined" !== typeof g && "undefined" !== typeof k && (v.SetX(g), v.SetY(k)), t._SetAnyCollisionCellChanged(!0));
            f && (p || f._AddInstance(c, !0), 1 === f.GetParallaxX() && 1 === f.GetParallaxY() || t._SetAnyInstanceParallaxed(!0), f.GetLayout().MaybeLoadTexturesFor(t));
            this._objectCount++;
            if(t.IsInContainer() && !h && !m) {
                for(var u of t.GetContainer().objectTypes()) {
                    if(u ===
                        t) continue;
                    const C = this.CreateInstanceFromData(u, y, !1, v ? v.GetX() : g, v ? v.GetY() : k, !0, !1);
                    c._AddSibling(C)
                }
                for(var A of c.siblings()) {
                    A._AddSibling(c);
                    for(var z of c.siblings()) A !== z && A._AddSibling(z)
                }
            }
            r && !h && p && this._CreateChildInstancesFromData(c, q, v, f, g, k);
            if(t.IsInContainer() && !h && !m && p)
                for(const C of c.siblings())
                    if(u = C.GetWorldInfo()) A = C.GetPlugin(), z = C.GetObjectClass().GetDefaultInstanceData()[0], A.IsWorldType() ? this._CreateChildInstancesFromData(C, z, u, f, u.GetX(), u.GetY()) : this._CreateChildInstancesFromData(C,
                        z, u, f);
            if(p && !m && !h && c.IsInContainer())
                for(const C of c.siblings())
                    for(const E of C.siblings()) c === E && y._RemoveInstance(C, !0);
            !m && p && ("undefined" === typeof g && (g = q[0]), "undefined" === typeof k && (k = q[1]), f = v.GetTopParent(), g = g - v.GetX() + f.GetX(), k = k - v.GetY() + f.GetY(), f.SetXY(g, k));
            t._SetIIDsStale();
            k = x ? e.cloneArray(x[5]) : null;
            x = x ? x[4].map(C => e.cloneArray(C)) : null;
            (r = r && q && q[13]) && c._SetHasTilemap();
            c._CreateSdkInstance(k, x);
            r && (q = q[13], c.GetSdkInstance().LoadTilemapData(q[2], q[0], q[1]));
            this._instancesPendingCreate.push(c);
            this._hasPendingInstances = !0;
            this.IsDebug() && b.InstanceCreated(c);
            return c
        }
        _CreateChildInstancesFromData(c, f, h, g, k, m) {
            var p = h.GetSceneGraphZIndexExportData(),
                x = h.GetSceneGraphChildrenExportData();
            c.GetWorldInfo().SetSceneGraphZIndex(p);
            if(x) {
                "undefined" === typeof k && (k = f[0]);
                "undefined" === typeof m && (m = f[1]);
                p = new Set;
                h = f[0];
                f = f[1];
                for(const v of x) {
                    var t = v[1],
                        q = v[2];
                    x = v[3];
                    var r = !!v[4];
                    const u = v[5];
                    q = this._layoutManager.GetLayoutBySID(v[0]).GetLayer(t).GetInitialInstanceData(q);
                    t = this.GetObjectClassByIndex(q[1]);
                    var y = c.HasSibling(t);
                    const A = p.has(t);
                    y && !A && r ? (r = c.GetSibling(t), y = k + q[0][0] - h, q = m + q[0][1] - f, r.GetWorldInfo().SetXY(y, q), r.GetWorldInfo().SetSceneGraphZIndex(u), c.AddChild(r, {
                        transformX: !!(x >> 0 & 1),
                        transformY: !!(x >> 1 & 1),
                        transformWidth: !!(x >> 2 & 1),
                        transformHeight: !!(x >> 3 & 1),
                        transformAngle: !!(x >> 4 & 1),
                        destroyWithParent: !!(x >> 5 & 1),
                        transformZElevation: !!(x >> 6 & 1)
                    }), p.add(t)) : (t = this.CreateInstanceFromData(q, g, !1, k + q[0][0] - h, m + q[0][1] - f, !1, !0), t.GetWorldInfo().SetSceneGraphZIndex(u), c.AddChild(t, {
                        transformX: !!(x >>
                            0 & 1),
                        transformY: !!(x >> 1 & 1),
                        transformWidth: !!(x >> 2 & 1),
                        transformHeight: !!(x >> 3 & 1),
                        transformAngle: !!(x >> 4 & 1),
                        destroyWithParent: !!(x >> 5 & 1),
                        transformZElevation: !!(x >> 6 & 1)
                    }))
                }
            }
        }
        DestroyInstance(c) {
            if(!this._instancesToReleaseAtEndOfTick.has(c)) {
                var f = c.GetObjectClass(),
                    h = this._instancesPendingDestroy.get(f);
                if(h) {
                    if(h.has(c)) return;
                    h.add(c)
                } else h = new Set, h.add(c), this._instancesPendingDestroy.set(f, h);
                this.IsDebug() && b.InstanceDestroyed(c);
                c._MarkDestroyed();
                this._hasPendingInstances = !0;
                if(c.IsInContainer())
                    for(const g of c.siblings()) this.DestroyInstance(g);
                for(const g of c.children()) g.GetDestroyWithParent() && this.DestroyInstance(g);
                this._layoutManager.IsEndingLayout() || this._isLoadingState || (f = this.GetEventSheetManager(), f.BlockFlushingInstances(!0), c._TriggerOnDestroyed(), f.BlockFlushingInstances(!1));
                c._FireDestroyedScriptEvents(this._layoutManager.IsEndingLayout())
            }
        }
        FlushPendingInstances() {
            this._hasPendingInstances && (this._isFlushingPendingInstances = !0, this._FlushInstancesPendingCreate(), this._FlushInstancesPendingDestroy(), this._hasPendingInstances =
                this._isFlushingPendingInstances = !1, this.UpdateRender())
        }
        _FlushInstancesPendingCreate() {
            for(const c of this._instancesPendingCreate) {
                const f = c.GetObjectClass();
                f._AddInstance(c);
                for(const h of f.GetFamilies()) h._AddInstance(c), h._SetIIDsStale()
            }
            e.clearArray(this._instancesPendingCreate)
        }
        _FlushInstancesPendingDestroy() {
            this._dispatcher.SetDelayRemoveEventsEnabled(!0);
            for(const [c, f] of this._instancesPendingDestroy.entries()) this._FlushInstancesPendingDestroyForObjectClass(c, f), f.clear();
            this._instancesPendingDestroy.clear();
            this._dispatcher.SetDelayRemoveEventsEnabled(!1)
        }
        _FlushInstancesPendingDestroyForObjectClass(c, f) {
            for(const g of f) {
                var h = this._eventObjects.instancedestroy;
                h.instance = g;
                this._dispatcher.dispatchEvent(h);
                this._instancesByUid.delete(g.GetUID());
                if(h = g.GetWorldInfo()) h._RemoveFromCollisionCells(), h._RemoveFromRenderCells(), h._MarkDestroyed();
                this._instancesToReleaseAtEndOfTick.add(g);
                this._objectCount--
            }
            e.arrayRemoveAllInSet(c.GetInstances(), f);
            c._SetIIDsStale();
            this._instancesToReleaseAffectedObjectClasses.add(c);
            0 === c.GetInstances().length && c._SetAnyInstanceParallaxed(!1);
            for(const g of c.GetFamilies()) e.arrayRemoveAllInSet(g.GetInstances(), f), g._SetIIDsStale(), this._instancesToReleaseAffectedObjectClasses.add(g);
            if(c.GetPlugin().IsWorldType()) {
                c = new Set([...f].map(g => g.GetWorldInfo().GetLayer()));
                for(const g of c) g._RemoveAllInstancesInSet(f)
            }
        }
        _GetInstancesPendingCreate() {
            return this._instancesPendingCreate
        }* instancesPendingCreateForObjectClass(c) {
            for(const f of this._GetInstancesPendingCreate()) c.IsFamily() ?
                f.GetObjectClass().BelongsToFamily(c) && (yield f) : f.GetObjectClass() === c && (yield f)
        }
        _GetNewUID() {
            return this._nextUid++
        }
        _MapInstanceByUID(c, f) {
            this._instancesByUid.set(c, f)
        }
        _OnWebGLContextLost() {
            this._dispatcher.dispatchEvent(e.New(e.Event, "webglcontextlost"));
            this.SetSuspended(!0);
            for(var c of this._allObjectClasses) !c.IsFamily() && c.HasLoadedTextures() && c.ReleaseTextures();
            (c = this.GetMainRunningLayout()) && c._OnWebGLContextLost();
            e.ImageInfo.OnWebGLContextLost();
            e.ImageAsset.OnWebGLContextLost()
        }
        async _OnWebGLContextRestored() {
            await this.GetMainRunningLayout()._Load(null,
                this.GetWebGLRenderer());
            this._dispatcher.dispatchEvent(e.New(e.Event, "webglcontextrestored"));
            this.SetSuspended(!1);
            this.UpdateRender()
        }
        _OnVisibilityChange(c) {
            this.SetSuspended(c.hidden)
        }
        _OnWindowBlur(c) {
            this.IsPreview() && this._pauseOnBlur && !e.Platform.IsMobile && !c.data.parentHasFocus && (this.SetSuspended(!0), this._isPausedOnBlur = !0)
        }
        _OnWindowFocus() {
            this._isPausedOnBlur && (this.SetSuspended(!1), this._isPausedOnBlur = !1)
        }
        _RequestAnimationFrame() {
            const c = this._tickCallbacks;
            "vsync" === this._framerateMode ?
                -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.normal)) : "unlimited-tick" === this._framerateMode ? (-1 === this._ruafId && (this._ruafId = e.RequestUnlimitedAnimationFrame(c.tickOnly)), -1 === this._rafId && (this._rafId = self.requestAnimationFrame(c.renderOnly))) : -1 === this._ruafId && (this._ruafId = e.RequestUnlimitedAnimationFrame(c.normal))
        }
        _CancelAnimationFrame() {
            -1 !== this._rafId && (self.cancelAnimationFrame(this._rafId), this._rafId = -1); - 1 !== this._ruafId && (e.CancelUnlimitedAnimationFrame(this._ruafId),
                this._ruafId = -1)
        }
        IsSuspended() {
            return 0 < this._suspendCount
        }
        SetSuspended(c) {
            var f = this.IsSuspended();
            this._suspendCount += c ? 1 : -1;
            0 > this._suspendCount && (this._suspendCount = 0);
            c = this.IsSuspended();
            !f && c ? (console.log("[Construct 3] Suspending"), this._CancelAnimationFrame(), this._dispatcher.dispatchEvent(e.New(e.Event, "suspend")), this.Trigger(e.Plugins.System.Cnds.OnSuspend, null, null)) : f && !c && (console.log("[Construct 3] Resuming"), this._fpsLastTime = this._lastTickTime = f = performance.now(), this._mainThreadTimeCounter =
                this._mainThreadTime = this._fps = this._fpsFrameCount = 0, this._dispatcher.dispatchEvent(e.New(e.Event, "resume")), this.Trigger(e.Plugins.System.Cnds.OnResume, null, null), this.HitBreakpoint() || this.Tick(f))
        }
        _AddBehInstToTick(c) {
            this._behInstsToTick.Add(c)
        }
        _AddBehInstToPostTick(c) {
            this._behInstsToPostTick.Add(c)
        }
        _AddBehInstToTick2(c) {
            this._behInstsToTick2.Add(c)
        }
        _RemoveBehInstToTick(c) {
            this._behInstsToTick.Remove(c)
        }
        _RemoveBehInstToPostTick(c) {
            this._behInstsToPostTick.Remove(c)
        }
        _RemoveBehInstToTick2(c) {
            this._behInstsToTick2.Remove(c)
        }
        _BehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for(const c of this._behInstsToTick) c.Tick();
            this._behInstsToTick.SetQueueingEnabled(!1)
        }
        _BehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for(const c of this._behInstsToPostTick) c.PostTick();
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }
        _BehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for(const c of this._behInstsToTick2) c.Tick2();
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(!0);
            for(const c of this._behInstsToTick) {
                const f =
                    c.Tick();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(!0);
            for(const c of this._behInstsToPostTick) {
                const f = c.PostTick();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToPostTick.SetQueueingEnabled(!1)
        }* _DebugBehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(!0);
            for(const c of this._behInstsToTick2) {
                const f = c.Tick2();
                e.IsIterator(f) && (yield* f)
            }
            this._behInstsToTick2.SetQueueingEnabled(!1)
        }
        async Tick(c, f,
            h) {
            this._hasStartedTicking = !0;
            const g = "background-wake" === h;
            h = "background-wake" !== h && "skip-render" !== h;
            this._hasStarted && (!this.IsSuspended() || f || g) && (f = performance.now(), this._isInTick = !0, this._MeasureDt(c || 0), c = this.Step_BeforePreTick(), this.IsDebugging() && await c, c = this._dispatcher.dispatchEventAndWait_AsyncOptional(this._eventObjects.pretick), c instanceof Promise && await c, c = this.Step_AfterPreTick(), this.IsDebugging() && await c, this._NeedsHandleSaveOrLoad() && await this._HandleSaveOrLoad(), this.GetLayoutManager().IsPendingChangeMainLayout() &&
                await this._MaybeChangeLayout(), c = this.Step_RunEventsEtc(), this.IsDebugging() && await c, h && this.Render(), this.IsSuspended() || g || this._RequestAnimationFrame(), this._tickCount++, this._tickCountNoSave++, this._execCount++, this._isInTick = !1, this._mainThreadTimeCounter += performance.now() - f)
        }
        async Step_BeforePreTick() {
            const c = this._eventSheetManager,
                f = this.IsDebug();
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0);
            this.PushCurrentLayout(this.GetMainRunningLayout());
            f && b.StartMeasuringTime();
            this.IsDebugging() ?
                await c.DebugRunScheduledWaits() : c.RunScheduledWaits();
            f && b.AddEventsTime();
            this.PopCurrentLayout();
            c.BlockFlushingInstances(!1);
            this.FlushPendingInstances();
            c.BlockFlushingInstances(!0)
        }
        async Step_AfterPreTick() {
            const c = this.IsDebug(),
                f = this.IsDebugging(),
                h = this._dispatcher,
                g = this._eventObjects,
                k = this._userScriptEventObjects;
            c && b.StartMeasuringTime();
            f ? await this.DebugIterateAndBreak(this._DebugBehaviorTick()) : this._BehaviorTick();
            f ? await this.DebugIterateAndBreak(this._DebugBehaviorPostTick()) :
                this._BehaviorPostTick();
            c && b.AddBehaviorTickTime();
            c && b.StartMeasuringTime();
            f ? await this.DebugFireGeneratorEventAndBreak(g.tick) : h.dispatchEvent(g.tick);
            c && b.AddPluginTickTime();
            this._eventSheetManager.BlockFlushingInstances(!1);
            this.DispatchUserScriptEvent(k.tick)
        }
        async Step_RunEventsEtc() {
            const c = this._eventSheetManager,
                f = this._dispatcher,
                h = this._eventObjects,
                g = this.IsDebug(),
                k = this.IsDebugging();
            g && b.StartMeasuringTime();
            k ? await c.DebugRunEvents(this._layoutManager) : c.RunEvents(this._layoutManager);
            g && b.AddEventsTime();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            this._isLayoutFirstTick = !1;
            c.BlockFlushingInstances(!0);
            g && b.StartMeasuringTime();
            k ? await this.DebugIterateAndBreak(this._DebugBehaviorTick2()) : this._BehaviorTick2();
            g && b.AddBehaviorTickTime();
            g && b.StartMeasuringTime();
            k ? await this.DebugFireGeneratorEventAndBreak(h.tick2) : f.dispatchEvent(h.tick2);
            g && b.AddPluginTickTime();
            c.BlockFlushingInstances(!1);
            k && await c.RunQueuedDebugTriggersAsync()
        }
        _ReleaseInstancesAtEndOfTick() {
            if(0 !==
                this._instancesToReleaseAtEndOfTick.size) {
                var c = this._dispatcher;
                c.SetDelayRemoveEventsEnabled(!0);
                for(const f of this._instancesToReleaseAffectedObjectClasses) f.GetSolStack().RemoveInstances(this._instancesToReleaseAtEndOfTick);
                this._instancesToReleaseAffectedObjectClasses.clear();
                this._eventSheetManager.RemoveInstancesFromScheduledWaits(this._instancesToReleaseAtEndOfTick);
                for(const f of this._instancesToReleaseAtEndOfTick) f.Release();
                this._instancesToReleaseAtEndOfTick.clear();
                c.SetDelayRemoveEventsEnabled(!1)
            }
        }
        async _MaybeChangeLayout() {
            const c =
                this.GetLayoutManager();
            let f = 0;
            for(; c.IsPendingChangeMainLayout() && 10 > f++;) await this._DoChangeLayout(c.GetPendingChangeMainLayout())
        }
        _MeasureDt(c) {
            let f = 0;
            0 !== this._lastTickTime && (f = Math.max(c - this._lastTickTime, 0) / 1E3, .5 < f && (f = 0), this._dt1 = Math.min(f, 1 / this._minimumFramerate));
            this._lastTickTime = c;
            this._dt = this._dt1 * this._timeScale;
            this._gameTime.Add(this._dt);
            this._gameTimeRaw.Add(f * this._timeScale);
            this._wallTime.Add(this._dt1);
            this._canvasManager && this._canvasManager._UpdateTick();
            1E3 <= c - this._fpsLastTime &&
                (this._fpsLastTime += 1E3, 1E3 <= c - this._fpsLastTime && (this._fpsLastTime = c), this._fps = this._fpsFrameCount, this._fpsFrameCount = 0, this._mainThreadTime = Math.min(this._mainThreadTimeCounter / 1E3, 1), this._mainThreadTimeCounter = 0, this._canvasManager && this._canvasManager._Update1sFrameRange(), this._collisionEngine._Update1sStats(), this.IsDebug() && b.Update1sPerfStats());
            this._fpsFrameCount++
        }
        async _DoChangeLayout(c) {
            const f = this._dispatcher,
                h = this.GetLayoutManager().GetMainRunningLayout();
            await h._StopRunning();
            h._Unload(c, this.GetRenderer());
            h === c && this._eventSheetManager.ClearAllScheduledWaits();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            f.dispatchEvent(this._eventObjects.beforelayoutchange);
            e.Asyncify.SetHighThroughputMode(!0);
            await c._Load(h, this.GetRenderer());
            e.Asyncify.SetHighThroughputMode(!1);
            await c._StartRunning(!1);
            f.dispatchEvent(this._eventObjects.layoutchange);
            this.UpdateRender();
            this._isLayoutFirstTick = !0;
            this.FlushPendingInstances()
        }
        UpdateRender() {
            this._needRender = !0
        }
        GetWebGLRenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGLRenderer() : null
        }
        GetWebGPURenderer() {
            return this._canvasManager ? this._canvasManager.GetWebGPURenderer() : null
        }
        GetRenderer() {
            return this._canvasManager ? this._canvasManager.GetRenderer() : null
        }
        Render() {
            const c = this._canvasManager;
            if(c && !c.IsRendererContextLost()) {
                var f = this.GetRenderer(),
                    h = f.SupportsGPUProfiling(),
                    g = h && f.IsWebGL();
                h = h && f.IsWebGPU();
                g && f.CheckForQueryResults();
                if(this._needRender) {
                    var k = this._layoutManager.GetMainRunningLayout();
                    f.Start();
                    var m = this.IsDebug();
                    m && b.StartMeasuringTime();
                    this._needRender = !1;
                    var p = null;
                    g && (p = c.GetGPUFrameTimingsBuffer().AddTimeElapsedQuery(), f.StartQuery(p));
                    g = null;
                    h && (g = f.StartFrameTiming(2 * (1 + k.GetLayerCount())), f.WriteTimestamp(0));
                    this.Uses3DFeatures() && "low" === c.GetCurrentFullscreenScalingQuality() ? f.SetFixedSizeDepthBuffer(c.GetDrawWidth(), c.GetDrawHeight()) : f.SetAutoSizeDepthBuffer();
                    this._Render(this.GetRenderer(), k);
                    p && f.EndQuery(p);
                    h && (f.WriteTimestamp(1), this._canvasManager._AddWebGPUFrameTiming(g));
                    f.Finish();
                    m && (b.AddDrawCallsTime(), b.UpdateInspectHighlight());
                    c && c._MaybeTakeSnapshot()
                } else f.IncrementFrameNumber()
            }
        }
        _Render(c, f) {
            c.SetTextureFillMode();
            c.SetAlphaBlend();
            c.SetColorRgba(1, 1, 1, 1);
            c.SetRenderTarget(null);
            c.SetTexture(null);
            c.SetDepthEnabled(this.Uses3DFeatures());
            f.Draw(c)
        }
        Trigger(c, f, h) {
            if(!this._hasStarted) return !1;
            var g = !this._isInTick && !this._eventSheetManager.IsInTrigger();
            let k = 0;
            g && (k = performance.now());
            const m = this.IsDebug();
            m && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._Trigger(this._layoutManager,
                c, f, h);
            g && (g = performance.now() - k, this._mainThreadTimeCounter += g, m && b.AddTriggersTime(g));
            m && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugTrigger(c, f, h) {
            if(!this.IsDebug()) return this.Trigger(c, f, h);
            if(this.HitBreakpoint()) throw Error("called DebugTrigger() while stopped on breakpoint");
            if(!this._isInTick && !this._eventSheetManager.IsInTrigger()) throw Error("called DebugTrigger() outside of event code - use TriggerAsync() instead");
            return this._eventSheetManager._DebugTrigger(this._layoutManager, c, f,
                h)
        }
        async TriggerAsync(c, f, h) {
            if(!this.IsDebugging()) return this.Trigger(c, f, h);
            if(!this._hasStarted) return !1;
            if(this.HitBreakpoint()) return this._eventSheetManager.QueueDebugTrigger(c, f, h);
            if(!this.GetMainRunningLayout()) return this._eventSheetManager.QueueTrigger(c, f, h);
            const g = performance.now();
            c = this._eventSheetManager._DebugTrigger(this._layoutManager, c, f, h);
            for(f = c.next(); !f.done;) await this.DebugBreak(f.value), f = c.next();
            this.IsSuspended() || this._eventSheetManager.IsInTrigger() || (await this._eventSheetManager.RunQueuedDebugTriggersAsync(),
                this._hasStartedTicking && !this._isInTick && this._RequestAnimationFrame());
            this._mainThreadTimeCounter += performance.now() - g;
            return f.value
        }
        FastTrigger(c, f, h) {
            const g = this.IsDebug();
            g && this.SetDebuggingEnabled(!1);
            c = this._eventSheetManager._FastTrigger(this._layoutManager, c, f, h);
            g && this.SetDebuggingEnabled(!0);
            return c
        }
        DebugFastTrigger(c, f, h) {
            return this._eventSheetManager._DebugFastTrigger(this._layoutManager, c, f, h)
        }
        ScheduleTriggers(c) {
            return this._scheduleTriggersThrottle.Add(c)
        }
        PushCurrentLayout(c) {
            this._currentLayoutStack.push(c)
        }
        PopCurrentLayout() {
            if(!this._currentLayoutStack.length) throw Error("layout stack empty");
            this._currentLayoutStack.pop()
        }
        GetCurrentLayout() {
            return this._currentLayoutStack.length ? this._currentLayoutStack[this._currentLayoutStack.length - 1] : this.GetMainRunningLayout()
        }
        GetDt(c) {
            return c && -1 !== c.GetTimeScale() ? this._dt1 * c.GetTimeScale() : this._dt
        }
        _GetDtFast() {
            return this._dt
        }
        GetDt1() {
            return this._dt1
        }
        GetTimeScale() {
            return this._timeScale
        }
        SetTimeScale(c) {
            if(isNaN(c) || 0 > c) c = 0;
            this._timeScale = c
        }
        SetMinimumFramerate(c) {
            this._minimumFramerate = e.clamp(c, 1, 120)
        }
        GetMinimumFramerate() {
            return this._minimumFramerate
        }
        GetFPS() {
            return this._fps
        }
        GetMainThreadTime() {
            return this._mainThreadTime
        }
        GetStartTime() {
            return this._startTime
        }
        GetGameTime() {
            return this._gameTime.Get()
        }
        GetGameTimeRaw() {
            return this._gameTimeRaw.Get()
        }
        GetWallTime() {
            return this._wallTime.Get()
        }
        GetTickCount() {
            return this._tickCount
        }
        GetTickCountNoSave() {
            return this._tickCountNoSave
        }
        IncrementExecCount() {
            ++this._execCount
        }
        GetExecCount() {
            return this._execCount
        }
        GetObjectCount() {
            return this._objectCount
        }
        GetProjectName() {
            return this._projectName
        }
        GetProjectVersion() {
            return this._projectVersion
        }
        GetProjectUniqueId() {
            return this._projectUniqueId
        }
        GetAppId() {
            return this._appId
        }
        GetInstanceByUID(c) {
            if(this._isLoadingState) throw Error("cannot call while loading state - wait until afterload event");
            return this._instancesByUid.get(c) || null
        }
        _RefreshUidMap() {
            this._instancesByUid.clear();
            for(const c of this._allObjectClasses)
                if(!c.IsFamily())
                    for(const f of c.GetInstances()) this._instancesByUid.set(f.GetUID(), f)
        }
        IsPreview() {
            return "preview" === this._exportType
        }
        IsDebug() {
            return this._isDebug
        }
        GetExportType() {
            return this._exportType
        }
        IsCordova() {
            return "cordova" === this._exportType
        }
        IsAndroidWebView() {
            return "Android" === e.Platform.OS && ("cordova" === this._exportType || "playable-ad" === this._exportType || "instant-games" ===
                this._exportType)
        }
        IsiOSCordova() {
            return this._isiOSCordova
        }
        IsiOSWebView() {
            return this._isiOSWebView
        }
        GetCollisionEngine() {
            return this._collisionEngine
        }
        GetSolidBehavior() {
            return this._pluginManager.GetSolidBehavior()
        }
        GetJumpthruBehavior() {
            return this._pluginManager.GetJumpthruBehavior()
        }
        Uses3DFeatures() {
            return this._uses3dFeatures
        }
        IsLayoutFirstTick() {
            return this._isLayoutFirstTick
        }
        SetPixelRoundingEnabled(c) {
            c = !!c;
            this._isPixelRoundingEnabled !== c && (this._isPixelRoundingEnabled = c, this.GetLayoutManager().SetAllLayerMVChanged(),
                this.UpdateRender())
        }
        IsPixelRoundingEnabled() {
            return this._isPixelRoundingEnabled
        }
        SaveToSlot(c) {
            this._saveToSlotName = c
        }
        LoadFromSlot(c) {
            this._loadFromSlotName = c
        }
        LoadFromJsonString(c) {
            this._loadFromJson = c
        }
        GetLastSaveJsonString() {
            return this._lastSaveJson
        }
        _NeedsHandleSaveOrLoad() {
            return !(!this._saveToSlotName && !this._loadFromSlotName && null === this._loadFromJson)
        }
        async _HandleSaveOrLoad() {
            this._saveToSlotName && (this.FlushPendingInstances(), await this._DoSaveToSlot(this._saveToSlotName), this._ClearSaveOrLoad());
            this._loadFromSlotName && (await this._DoLoadFromSlot(this._loadFromSlotName), this._ClearSaveOrLoad(), this.IsDebug() && b.StepIfPausedInDebugger());
            if(null !== this._loadFromJson) {
                this.FlushPendingInstances();
                try {
                    await this._DoLoadFromJsonString(this._loadFromJson), this._lastSaveJson = this._loadFromJson, await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadComplete, null), this._lastSaveJson = ""
                } catch (c) {
                    console.error("[Construct 3] Failed to load state from JSON string: ", c), await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadFailed,
                        null)
                }
                this._ClearSaveOrLoad()
            }
        }
        _ClearSaveOrLoad() {
            this._loadFromSlotName = this._saveToSlotName = "";
            this._loadFromJson = null
        }
        _GetProjectStorage() {
            this._projectStorage || (this._projectStorage = localforage.createInstance({
                name: "c3-localstorage-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._projectStorage
        }
        _GetSavegamesStorage() {
            this._savegamesStorage || (this._savegamesStorage = localforage.createInstance({
                name: "c3-savegames-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            }));
            return this._savegamesStorage
        }
        async _DoSaveToSlot(c) {
            const f = await this._SaveToJsonString();
            try {
                await this._GetSavegamesStorage().setItem(c, f), console.log("[Construct 3] Saved state to storage (" + f.length + " chars)"), this._lastSaveJson = f, await this.TriggerAsync(e.Plugins.System.Cnds.OnSaveComplete, null), this._lastSaveJson = ""
            } catch (h) {
                console.error("[Construct 3] Failed to save state to storage: ", h), await this.TriggerAsync(e.Plugins.System.Cnds.OnSaveFailed, null)
            }
        }
        async _DoLoadFromSlot(c) {
            try {
                const f =
                    await this._GetSavegamesStorage().getItem(c);
                if(!f) throw Error("empty slot");
                console.log("[Construct 3] Loaded state from storage (" + f.length + " chars)");
                await this._DoLoadFromJsonString(f);
                this._lastSaveJson = f;
                await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadComplete, null);
                this._lastSaveJson = ""
            } catch (f) {
                console.error("[Construct 3] Failed to load state from storage: ", f), await this.TriggerAsync(e.Plugins.System.Cnds.OnLoadFailed, null)
            }
        }
        async _SaveToJsonString() {
            const c = {
                c3save: !0,
                version: 1,
                rt: {
                    time: this.GetGameTime(),
                    timeRaw: this.GetGameTimeRaw(),
                    walltime: this.GetWallTime(),
                    timescale: this.GetTimeScale(),
                    tickcount: this.GetTickCount(),
                    execcount: this.GetExecCount(),
                    next_uid: this._nextUid,
                    running_layout: this.GetMainRunningLayout().GetSID(),
                    start_time_offset: Date.now() - this._startTime
                },
                types: {},
                layouts: {},
                events: this._eventSheetManager._SaveToJson(),
                timelines: this._timelineManager._SaveToJson(),
                user_script_data: null
            };
            for(var f of this._allObjectClasses) f.IsFamily() || f.HasNoSaveBehavior() || (c.types[f.GetSID().toString()] =
                f._SaveToJson());
            for(const h of this._layoutManager.GetAllLayouts()) c.layouts[h.GetSID().toString()] = h._SaveToJson();
            f = this._CreateUserScriptEvent("save");
            f.saveData = null;
            await this.DispatchUserScriptEventAsyncWait(f);
            c.user_script_data = f.saveData;
            return JSON.stringify(c)
        }
        IsLoadingState() {
            return this._isLoadingState
        }
        async _DoLoadFromJsonString(c) {
            var f = this.GetLayoutManager();
            c = JSON.parse(c);
            if(c.c2save) throw Error("C2 saves are incompatible with C3 runtime");
            if(!c.c3save) throw Error("not valid C3 save data");
            if(1 < c.version) throw Error("C3 save data from future version");
            this._dispatcher.dispatchEvent(e.New(e.Event, "beforeload"));
            for(var h of this.allInstances()) h._OnBeforeLoad();
            this._isLoadingState = !0;
            h = c.rt;
            this._gameTime.Set(h.time);
            h.hasOwnProperty("timeRaw") && this._gameTimeRaw.Set(h.timeRaw);
            this._wallTime.Set(h.walltime);
            this._timeScale = h.timescale;
            this._tickCount = h.tickcount;
            this._execCount = h.execcount;
            this._startTime = Date.now() - h.start_time_offset;
            var g = h.running_layout;
            if(g !== this.GetMainRunningLayout().GetSID())
                if(g =
                    f.GetLayoutBySID(g)) await this._DoChangeLayout(g);
                else return;
            for(const [k, m] of Object.entries(c.types)) g = parseInt(k, 10), g = this.GetObjectClassBySID(g), !g || g.IsFamily() || g.HasNoSaveBehavior() || g._LoadFromJson(m);
            this.FlushPendingInstances();
            this._RefreshUidMap();
            this._isLoadingState = !1;
            this._nextUid = h.next_uid;
            for(const [k, m] of Object.entries(c.layouts)) h = parseInt(k, 10), (h = f.GetLayoutBySID(h)) && h._LoadFromJson(m);
            this._eventSheetManager._LoadFromJson(c.events);
            for(const k of this._allObjectClasses)
                if(!k.IsFamily() &&
                    k.IsInContainer())
                    for(const m of k.GetInstances()) {
                        h = m.GetIID();
                        for(const p of k.GetContainer().objectTypes())
                            if(p !== k) {
                                g = p.GetInstances();
                                if(0 > h || h >= g.length) throw Error("missing sibling instance");
                                m._AddSibling(g[h])
                            }
                    }
            this._timelineManager._LoadFromJson(c.timelines);
            f.SetAllLayerProjectionChanged();
            f.SetAllLayerMVChanged();
            this._dispatcher.dispatchEvent(e.New(e.Event, "afterload"));
            f = this._CreateUserScriptEvent("load");
            f.saveData = c.user_script_data;
            await this.DispatchUserScriptEventAsyncWait(f);
            this.UpdateRender()
        }
        async AddJobWorkerScripts(c) {
            c = (await Promise.all(c.map(f => this._assetManager.FetchBlob(f)))).map(f => URL.createObjectURL(f));
            this._jobScheduler.ImportScriptsToJobWorkers(c)
        }
        AddJobWorkerBlob(c, f) {
            this._jobScheduler.SendBlobToJobWorkers(c, f)
        }
        AddJobWorkerBuffer(c, f) {
            this._jobScheduler.SendBufferToJobWorkers(c, f)
        }
        AddJob(c, f, h) {
            return this._jobScheduler.AddJob(c, f, h)
        }
        BroadcastJob(c, f, h) {
            return this._jobScheduler.BroadcastJob(c, f, h)
        }
        InvokeDownload(c, f) {
            this.PostComponentMessageToDOM("runtime",
                "invoke-download", {
                    url: c,
                    filename: f
                })
        }
        async RasterSvgImage(c, f, h, g, k, m) {
            g = g || f;
            k = k || h;
            if(this.IsInWorker()) return (await this.PostComponentMessageToDOMAsync("runtime", "raster-svg-image", {
                blob: c,
                imageWidth: f,
                imageHeight: h,
                surfaceWidth: g,
                surfaceHeight: k,
                imageBitmapOpts: m
            })).imageBitmap;
            c = await self.C3_RasterSvgImageBlob(c, f, h, g, k);
            return m ? await self.createImageBitmap(c, m) : c
        }
        async GetSvgImageSize(c) {
            return this.IsInWorker() ? await this.PostComponentMessageToDOMAsync("runtime", "get-svg-image-size", {
                    blob: c
                }) :
                await self.C3_GetSvgImageSize(c)
        }
        RequestDeviceOrientationEvent() {
            this._didRequestDeviceOrientationEvent || (this._didRequestDeviceOrientationEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-orientation"))
        }
        RequestDeviceMotionEvent() {
            this._didRequestDeviceMotionEvent || (this._didRequestDeviceMotionEvent = !0, this.PostComponentMessageToDOM("runtime", "enable-device-motion"))
        }
        Random() {
            return this._randomNumberCallback()
        }
        SetRandomNumberGeneratorCallback(c) {
            this._randomNumberCallback = c
        }
        _GetRemotePreviewStatusInfo() {
            const c =
                this.GetWebGLRenderer();
            return {
                fps: this.GetFPS(),
                cpu: this.GetMainThreadTime(),
                gpu: this.GetGPUUtilisation(),
                layout: this.GetMainRunningLayout() ? this.GetMainRunningLayout().GetName() : "",
                renderer: c ? c.GetUnmaskedRenderer() : "<unavailable>"
            }
        }
        HitBreakpoint() {
            return this.IsDebug() ? b.HitBreakpoint() : !1
        }
        DebugBreak(c) {
            return this.IsDebugging() ? b.DebugBreak(c) : Promise.resolve()
        }
        DebugBreakNext() {
            return this.IsDebugging() ? b.BreakNext() : !1
        }
        SetDebugBreakpointsEnabled(c) {
            this._breakpointsEnabled = !!c;
            this._UpdateDebuggingFlag()
        }
        AreDebugBreakpointsEnabled() {
            return this._breakpointsEnabled
        }
        IsDebugging() {
            return this._isDebugging
        }
        SetDebuggingEnabled(c) {
            c ?
                this._debuggingDisabled-- : this._debuggingDisabled++;
            this._UpdateDebuggingFlag()
        }
        _UpdateDebuggingFlag() {
            this._isDebugging = this.IsDebug() && this._breakpointsEnabled && 0 === this._debuggingDisabled
        }
        IsCPUProfiling() {
            return this.IsDebug() && b.IsCPUProfiling()
        }
        IsGPUProfiling() {
            return this.IsDebug() && this.GetRenderer().SupportsGPUProfiling() && b.IsGPUProfiling()
        }
        async DebugIterateAndBreak(c) {
            if(c)
                for(const f of c) await this.DebugBreak(f)
        }
        DebugFireGeneratorEventAndBreak(c) {
            return this.DebugIterateAndBreak(this._dispatcher.dispatchGeneratorEvent(c))
        }
        _InvokeFunctionFromJS(c) {
            return this._eventSheetManager._InvokeFunctionFromJS(c.name,
                c.params)
        }
        GetIRuntime() {
            return this._iRuntime
        }
        _CreateUserScriptEvent(c) {
            c = e.New(e.Event, c, !1);
            c.runtime = this._iRuntime;
            return c
        }
        _InitScriptInterfaces() {
            var c = {};
            for(const f of this._allObjectClasses) c[f.GetJsPropName()] = {
                value: f.GetIObjectClass(),
                enumerable: !0,
                writable: !1
            };
            c = Object.create(Object.prototype, c);
            this._iRuntime = new self.IRuntime(this, c);
            this._userScriptEventObjects = {
                tick: this._CreateUserScriptEvent("tick")
            }
        }
        _InitGlobalVariableScriptInterface() {
            const c = {};
            for(const f of this.GetEventSheetManager().GetAllGlobalVariables()) c[f.GetJsPropName()] =
                f._GetScriptInterfaceDescriptor();
            this._iRuntime._InitGlobalVars(c)
        }
        _GetCommonScriptInterfaces() {
            return this._commonScriptInterfaces
        }
        _MapScriptInterface(c, f) {
            this._interfaceMap.set(c, f)
        }
        _UnwrapScriptInterface(c) {
            return this._interfaceMap.get(c)
        }
        _UnwrapIObjectClass(c) {
            if(!(c instanceof self.IObjectClass)) throw new TypeError("expected IObjectClass");
            c = this._UnwrapScriptInterface(c);
            if(!(c && c instanceof e.ObjectClass)) throw Error("invalid IObjectClass");
            return c
        }
        _UnwrapIWorldInstance(c) {
            if(!(c instanceof self.IWorldInstance)) throw new TypeError("expected IWorldInstance");
            c = this._UnwrapScriptInterface(c);
            if(!(c && c instanceof e.Instance)) throw Error("invalid IInstance");
            return c
        }
    };
    self.C3_CreateRuntime = e.Runtime.Create;
    self.C3_InitRuntime = (c, f) => c.Init(f)
} {
    "use strict";
    const e = self.C3;
    e.JobSchedulerRuntime = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._runtime = b;
            this._jobPromises = new Map;
            this._nextJobId = 0;
            this._inputPort = a.inputPort;
            a.outputPort.onmessage = d => this._OnJobWorkerMessage(d);
            this._maxNumWorkers = a.maxNumWorkers;
            this._jobWorkerCount = 1;
            this._hadErrorCreatingWorker = this._isCreatingWorker = !1
        }
        async Init() {}
        ImportScriptsToJobWorkers(b) {
            this._inputPort.postMessage({
                type: "_import_scripts",
                scripts: b
            })
        }
        SendBlobToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_blob",
                blob: b,
                id: a
            })
        }
        SendBufferToJobWorkers(b, a) {
            this._inputPort.postMessage({
                type: "_send_buffer",
                buffer: b,
                id: a
            }, [b])
        }
        AddJob(b, a, d, c, f) {
            d || (d = []);
            const h = this._nextJobId++;
            b = {
                type: b,
                isBroadcast: !1,
                jobId: h,
                params: a,
                transferables: d
            };
            a = new Promise((g, k) => {
                this._jobPromises.set(h, {
                    resolve: g,
                    progress: c,
                    reject: k,
                    cancelled: !1
                })
            });
            f && f.SetAction(() => this._CancelJob(h));
            this._inputPort.postMessage(b, d);
            this._MaybeCreateExtraWorker();
            return a
        }
        BroadcastJob(b, a, d) {
            d || (d = []);
            const c = this._nextJobId++;
            this._inputPort.postMessage({
                type: b,
                isBroadcast: !0,
                jobId: c,
                params: a,
                transferables: d
            }, d)
        }
        _CancelJob(b) {
            const a = this._jobPromises.get(b);
            a && (a.cancelled = !0, a.resolve = null, a.progress = null, a.reject = null, this._inputPort.postMessage({
                type: "_cancel",
                jobId: b
            }))
        }
        _OnJobWorkerMessage(b) {
            b = b.data;
            const a = b.type,
                d = b.jobId;
            switch(a) {
                case "result":
                    this._OnJobResult(d, b.result);
                    break;
                case "progress":
                    this._OnJobProgress(d, b.progress);
                    break;
                case "error":
                    this._OnJobError(d, b.error);
                    break;
                case "ready":
                    this._OnJobWorkerReady();
                    break;
                default:
                    throw Error(`unknown message from worker '${a}'`);
            }
        }
        _OnJobResult(b, a) {
            const d = this._jobPromises.get(b);
            if(!d) throw Error("invalid job ID");
            d.cancelled || d.resolve(a);
            this._jobPromises.delete(b)
        }
        _OnJobProgress(b, a) {
            b = this._jobPromises.get(b);
            if(!b) throw Error("invalid job ID");
            !b.cancelled && b.progress && b.progress(a)
        }
        _OnJobError(b, a) {
            const d = this._jobPromises.get(b);
            if(!d) throw Error("invalid job ID");
            d.cancelled || d.reject(a);
            this._jobPromises.delete(b)
        }
        _OnJobWorkerReady() {
            this._isCreatingWorker && (this._isCreatingWorker = !1, this._jobWorkerCount++, this._jobWorkerCount <
                this._maxNumWorkers ? this._MaybeCreateExtraWorker() : this._inputPort.postMessage({
                    type: "_no_more_workers"
                }))
        }
        async _MaybeCreateExtraWorker() {
            if(!(this._jobWorkerCount >= this._maxNumWorkers || this._isCreatingWorker || this._hadErrorCreatingWorker || this._jobPromises.size <= this._jobWorkerCount)) try {
                this._isCreatingWorker = !0, (await this._runtime.PostComponentMessageToDOMAsync("runtime", "create-job-worker")).outputPort.onmessage = b => this._OnJobWorkerMessage(b)
            } catch (b) {
                this._hadErrorCreatingWorker = !0, this._isCreatingWorker = !1, console.error(`[Construct 3] Failed to create job worker; stopping creating any more (created ${this._jobWorkerCount} so far)`, b)
            }
        }
    }
}
self.C3_Shaders = {}; {
    "use strict";
    const e = self.C3;
    let b = null,
        a = "",
        d = "",
        c = [],
        f = "",
        h = "",
        g = "";
    const k = e.New(e.ArrayStack);

    function m(p, x) {
        p = p[1];
        x = x[1];
        if("number" === typeof p && "number" === typeof x) return p - x;
        p = "" + p;
        x = "" + x;
        return p < x ? -1 : p > x ? 1 : 0
    }
    e.Plugins.System = class extends e.SDKPluginBase {
        constructor(p) {
            super(p);
            this._loopStack = this._runtime.GetEventSheetManager().GetLoopStack();
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._imagesLoadingComplete = this._imagesLoadingTotal = 0;
            this._functionMaps =
                new Map
        }
        Release() {
            super.Release()
        }
        UpdateRender() {
            this._runtime.UpdateRender()
        }
        Trigger(p) {
            this._runtime.Trigger(p, null, null)
        }
        GetRegex(p, x) {
            b && p === a && x === d || (b = new RegExp(p, x), a = p, d = x);
            b.lastIndex = 0;
            return b
        }
        GetRegexMatches(p, x, t) {
            if(p === f && x === h && t === g) return c;
            const q = this.GetRegex(x, t);
            c = p.match(q);
            f = p;
            h = x;
            g = t;
            return c
        }
        async _LoadTexturesForObjectClasses(p, x) {
            if(x.length) {
                this._imagesLoadingTotal += x.length;
                var t = [];
                for(const q of x) t.push(p.MaybeLoadTexturesFor(q));
                await e.PromiseAllWithProgress(t,
                    () => {
                        this._imagesLoadingComplete++
                    });
                this._imagesLoadingComplete++;
                this._imagesLoadingComplete === this._imagesLoadingTotal && (this._runtime.Trigger(e.Plugins.System.Cnds.OnImageLoadingComplete, null, null), this._imagesLoadingTotal = this._imagesLoadingComplete = 0)
            }
        }
        _UnloadTexturesForObjectClasses(p, x) {
            for(const t of x) 0 === t.GetInstanceCount() && p.MaybeUnloadTexturesFor(t)
        }
        _GetForEachStack() {
            return k
        }
        _Repeat(p) {
            var x = this._runtime.GetEventSheetManager();
            const t = x.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                r = q.GetCurrentEvent(),
                y = r.GetSolModifiers();
            var v = q.IsSolModifierAfterCnds();
            const u = t.Push(r),
                A = x.GetLoopStack(),
                z = A.Push();
            z.SetEnd(p);
            if(v)
                for(v = 0; v < p && !z.IsStopped(); ++v) x.PushCopySol(y), z.SetIndex(v), r.Retrigger(q, u), x.PopSol(y);
            else
                for(x = 0; x < p && !z.IsStopped(); ++x) z.SetIndex(x), r.Retrigger(q, u);
            t.Pop();
            A.Pop();
            return !1
        }* _DebugRepeat(p) {
            var x = this._runtime.GetEventSheetManager();
            const t = x.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                r = q.GetCurrentEvent(),
                y = r.GetSolModifiers();
            var v = q.IsSolModifierAfterCnds();
            const u = t.Push(r),
                A = x.GetLoopStack(),
                z = A.Push();
            z.SetEnd(p);
            if(v)
                for(v = 0; v < p && !z.IsStopped(); ++v) x.PushCopySol(y), z.SetIndex(v), yield* r.DebugRetrigger(q, u), x.PopSol(y);
            else
                for(x = 0; x < p && !z.IsStopped(); ++x) z.SetIndex(x), yield* r.DebugRetrigger(q, u);
            t.Pop();
            A.Pop();
            return !1
        }
        _While() {
            var p = this._runtime.GetEventSheetManager();
            const x = p.GetEventStack(),
                t = x.GetCurrentStackFrame(),
                q = t.GetCurrentEvent(),
                r = q.GetSolModifiers();
            var y = t.IsSolModifierAfterCnds();
            const v = x.Push(q),
                u = p.GetLoopStack(),
                A = u.Push();
            if(y)
                for(y = 0; !A.IsStopped(); ++y) p.PushCopySol(r), A.SetIndex(y), q.Retrigger(t, v) || A.Stop(), p.PopSol(r);
            else
                for(p = 0; !A.IsStopped(); ++p) A.SetIndex(p), q.Retrigger(t, v) || A.Stop();
            x.Pop();
            u.Pop();
            return !1
        }* _DebugWhile() {
            var p = this._runtime.GetEventSheetManager();
            const x = p.GetEventStack(),
                t = x.GetCurrentStackFrame(),
                q = t.GetCurrentEvent(),
                r = q.GetSolModifiers();
            var y = t.IsSolModifierAfterCnds();
            const v = x.Push(q),
                u = p.GetLoopStack(),
                A = u.Push();
            if(y)
                for(y = 0; !A.IsStopped(); ++y) p.PushCopySol(r), A.SetIndex(y), (yield* q.DebugRetrigger(t,
                    v)) || A.Stop(), p.PopSol(r);
            else
                for(p = 0; !A.IsStopped(); ++p) A.SetIndex(p), (yield* q.DebugRetrigger(t, v)) || A.Stop();
            x.Pop();
            u.Pop();
            return !1
        }
        _For(p, x, t) {
            var q = this._runtime.GetEventSheetManager();
            const r = q.GetEventStack(),
                y = r.GetCurrentStackFrame(),
                v = y.GetCurrentEvent(),
                u = v.GetSolModifiers(),
                A = y.IsSolModifierAfterCnds(),
                z = r.Push(v),
                C = q.GetLoopStack(),
                E = C.Push();
            E.SetName(p);
            E.SetEnd(t);
            if(t < x)
                if(A)
                    for(p = x; p >= t && !E.IsStopped(); --p) q.PushCopySol(u), E.SetIndex(p), v.Retrigger(y, z), q.PopSol(u);
                else
                    for(q =
                        x; q >= t && !E.IsStopped(); --q) E.SetIndex(q), v.Retrigger(y, z);
            else if(A)
                for(p = x; p <= t && !E.IsStopped(); ++p) q.PushCopySol(u), E.SetIndex(p), v.Retrigger(y, z), q.PopSol(u);
            else
                for(q = x; q <= t && !E.IsStopped(); ++q) E.SetIndex(q), v.Retrigger(y, z);
            r.Pop();
            C.Pop();
            return !1
        }* _DebugFor(p, x, t) {
            var q = this._runtime.GetEventSheetManager();
            const r = q.GetEventStack(),
                y = r.GetCurrentStackFrame(),
                v = y.GetCurrentEvent(),
                u = v.GetSolModifiers(),
                A = y.IsSolModifierAfterCnds(),
                z = r.Push(v),
                C = q.GetLoopStack(),
                E = C.Push();
            E.SetName(p);
            E.SetEnd(t);
            if(t < x)
                if(A)
                    for(p = x; p >= t && !E.IsStopped(); --p) q.PushCopySol(u), E.SetIndex(p), yield* v.DebugRetrigger(y, z), q.PopSol(u);
                else
                    for(q = x; q >= t && !E.IsStopped(); --q) E.SetIndex(q), yield* v.DebugRetrigger(y, z);
            else if(A)
                for(p = x; p <= t && !E.IsStopped(); ++p) q.PushCopySol(u), E.SetIndex(p), yield* v.DebugRetrigger(y, z), q.PopSol(u);
            else
                for(q = x; q <= t && !E.IsStopped(); ++q) E.SetIndex(q), yield* v.DebugRetrigger(y, z);
            r.Pop();
            C.Pop();
            return !1
        }
        _ForEach(p) {
            var x = this._runtime.GetEventSheetManager();
            const t = x.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                r = q.GetCurrentEvent(),
                y = r.GetSolModifiers();
            var v = q.IsSolModifierAfterCnds();
            const u = t.Push(r),
                A = x.GetLoopStack(),
                z = A.Push(),
                C = p.IsInContainer(),
                E = p.GetCurrentSol(),
                J = k.Push();
            e.shallowAssignArray(J, E.GetInstances());
            z.SetEnd(J.length);
            if(v)
                for(let F = 0, H = J.length; F < H && !z.IsStopped(); ++F) x.PushCopySol(y), v = J[F], p.GetCurrentSol().SetSinglePicked(v), C && v.SetSiblingsSinglePicked(), z.SetIndex(F), r.Retrigger(q, u), x.PopSol(y);
            else {
                E._SetSelectAll(!1);
                p = E._GetOwnInstances();
                e.clearArray(p);
                p.push(null);
                for(let F =
                        0, H = J.length; F < H && !z.IsStopped(); ++F) x = J[F], p[0] = x, C && x.SetSiblingsSinglePicked(), z.SetIndex(F), r.Retrigger(q, u)
            }
            t.Pop();
            A.Pop();
            e.clearArray(J);
            k.Pop();
            return !1
        }* _DebugForEach(p) {
            var x = this._runtime.GetEventSheetManager();
            const t = x.GetEventStack(),
                q = t.GetCurrentStackFrame(),
                r = q.GetCurrentEvent(),
                y = r.GetSolModifiers();
            var v = q.IsSolModifierAfterCnds();
            const u = t.Push(r),
                A = x.GetLoopStack(),
                z = A.Push(),
                C = p.IsInContainer(),
                E = p.GetCurrentSol(),
                J = k.Push();
            e.shallowAssignArray(J, E.GetInstances());
            z.SetEnd(J.length);
            if(v)
                for(let F = 0, H = J.length; F < H && !z.IsStopped(); ++F) x.PushCopySol(y), v = J[F], p.GetCurrentSol().SetSinglePicked(v), C && v.SetSiblingsSinglePicked(), z.SetIndex(F), yield* r.DebugRetrigger(q, u), x.PopSol(y);
            else {
                E._SetSelectAll(!1);
                p = E._GetOwnInstances();
                e.clearArray(p);
                p.push(null);
                for(let F = 0, H = J.length; F < H && !z.IsStopped(); ++F) x = J[F], p[0] = x, C && x.SetSiblingsSinglePicked(), z.SetIndex(F), yield* r.DebugRetrigger(q, u)
            }
            t.Pop();
            A.Pop();
            e.clearArray(J);
            k.Pop();
            return !1
        }
        _ForEachOrdered(p, x) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                r = t.GetCurrentCondition(),
                y = q.GetCurrentStackFrame(),
                v = y.GetCurrentEvent(),
                u = v.GetSolModifiers(),
                A = y.IsSolModifierAfterCnds(),
                z = q.Push(v),
                C = t.GetLoopStack(),
                E = C.Push(),
                J = p.IsInContainer(),
                F = p.GetCurrentSol(),
                H = k.Push();
            e.clearArray(H);
            const K = F.GetInstances();
            E.SetEnd(K.length);
            for(let N = 0, S = K.length; N < S; ++N) H.push([K[N], r.ReevaluateParameter(1, N)]);
            H.sort(m);
            1 === x && H.reverse();
            if(A)
                for(let N = 0, S = H.length; N < S && !E.IsStopped(); ++N) t.PushCopySol(u), x = H[N][0], p.GetCurrentSol().SetSinglePicked(x),
                    J && x.SetSiblingsSinglePicked(), E.SetIndex(N), v.Retrigger(y, z), t.PopSol(u);
            else {
                F._SetSelectAll(!1);
                p = F._GetOwnInstances();
                e.clearArray(p);
                p.push(null);
                for(let N = 0, S = H.length; N < S && !E.IsStopped(); ++N) t = H[N][0], p[0] = t, J && t.SetSiblingsSinglePicked(), E.SetIndex(N), v.Retrigger(y, z)
            }
            q.Pop();
            C.Pop();
            e.clearArray(H);
            k.Pop();
            return !1
        }* _DebugForEachOrdered(p, x) {
            var t = this._runtime.GetEventSheetManager();
            const q = t.GetEventStack(),
                r = t.GetCurrentCondition(),
                y = q.GetCurrentStackFrame(),
                v = y.GetCurrentEvent(),
                u = v.GetSolModifiers(),
                A = y.IsSolModifierAfterCnds(),
                z = q.Push(v),
                C = t.GetLoopStack(),
                E = C.Push(),
                J = p.IsInContainer(),
                F = p.GetCurrentSol(),
                H = k.Push();
            e.clearArray(H);
            const K = F.GetInstances();
            E.SetEnd(K.length);
            for(let N = 0, S = K.length; N < S; ++N) H.push([K[N], r.ReevaluateParameter(1, N)]);
            H.sort(m);
            1 === x && H.reverse();
            if(A)
                for(let N = 0, S = H.length; N < S && !E.IsStopped(); ++N) t.PushCopySol(u), x = H[N][0], p.GetCurrentSol().SetSinglePicked(x), J && x.SetSiblingsSinglePicked(), E.SetIndex(N), yield* v.DebugRetrigger(y, z), t.PopSol(u);
            else {
                F._SetSelectAll(!1);
                p = F._GetOwnInstances();
                e.clearArray(p);
                p.push(null);
                for(let N = 0, S = H.length; N < S && !E.IsStopped(); ++N) t = H[N][0], p[0] = t, J && t.SetSiblingsSinglePicked(), E.SetIndex(N), yield* v.DebugRetrigger(y, z)
            }
            q.Pop();
            C.Pop();
            e.clearArray(H);
            k.Pop();
            return !1
        }
        _GetFunctionMap(p, x) {
            let t = this._functionMaps.get(p);
            if(t) return t;
            if(!x) return null;
            t = {
                defaultFunc: null,
                strMap: new Map
            };
            this._functionMaps.set(p, t);
            return t
        }
        _DoCallMappedFunction(p, x, t, q, r) {
            x.GetEventBlock().RunAsMappedFunctionCall(t);
            q && p.PopSol(r)
        }* _DebugDoCallMappedFunction(p,
            x, t, q, r) {
            yield* x.GetEventBlock().DebugRunAsMappedFunctionCall(t);
            q && p.PopSol(r)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Type = class extends e.DefendedBase {
        constructor(b) {
            super();
            this._objectClass = b;
            this._runtime = b.GetRuntime();
            this._plugin = b.GetPlugin()
        }
        OnCreate() {}
        Release() {
            this._plugin = this._runtime = this._objectClass = null
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Instance = class extends e.DefendedBase {
        constructor(b, a) {
            super();
            this._inst = b;
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._runtime = this._inst.GetRuntime()
        }
        Release() {
            this._runtime = this._sdkType = this._objectClass = this._inst = null
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.Plugins.System.Cnds = {
        EveryTick() {
            return !0
        },
        OnLayoutStart() {
            return !0
        },
        OnLayoutEnd() {
            return !0
        },
        OnSuspend() {
            return !0
        },
        OnResume() {
            return !0
        },
        IsSuspended() {
            return this._runtime.IsSuspended()
        },
        Else() {
            const a = this._runtime.GetCurrentEventStackFrame();
            return a.GetElseBranchRan() ? !1 : !a.GetLastEventTrue()
        },
        TriggerOnce() {
            const a = this._runtime.GetCurrentCondition().GetSavedDataMap();
            let d = a.get("TriggerOnce_lastTick");
            "undefined" === typeof d && (d = -1, a.set("TriggerOnce_lastTick",
                -1));
            const c = this._runtime.GetTickCount();
            a.set("TriggerOnce_lastTick", c);
            return this._runtime.IsLayoutFirstTick() || d !== c - 1
        },
        Every(a) {
            const d = this._runtime.GetCurrentCondition().GetSavedDataMap(),
                c = d.get("Every_lastTime") || 0,
                f = this._runtime.GetGameTime();
            d.has("Every_seconds") || d.set("Every_seconds", a);
            const h = d.get("Every_seconds");
            if(f >= c + h) return d.set("Every_lastTime", c + h), f >= d.get("Every_lastTime") + .04 && d.set("Every_lastTime", f), d.set("Every_seconds", a), !0;
            f < c - .1 && d.set("Every_lastTime", f);
            return !1
        },
        IsGroupActive(a) {
            return (a = this._runtime.GetEventSheetManager().GetEventGroupByName(a)) && a.IsGroupActive()
        },
        IsPreview() {
            return this._runtime.IsPreview()
        },
        IsMobile() {
            return e.Platform.IsMobile
        },
        OnLoadFinished() {
            return !0
        },
        OnCanvasSnapshot() {
            return !0
        },
        EffectsSupported() {
            return !0
        },
        OnSaveComplete() {
            return !0
        },
        OnSaveFailed() {
            return !0
        },
        OnLoadComplete() {
            return !0
        },
        OnLoadFailed() {
            return !0
        },
        ObjectUIDExists(a) {
            return !!this._runtime.GetInstanceByUID(a)
        },
        IsOnPlatform(a) {
            switch(a) {
                case 0:
                    return "browser" === e.Platform.Context;
                case 1:
                    return "iOS" === e.Platform.OS;
                case 2:
                    return "Android" === e.Platform.OS;
                case 8:
                    return "cordova" === e.Platform.Context;
                case 9:
                    return "scirra-arcade" === this._runtime.GetExportType();
                case 10:
                    return "nwjs" === e.Platform.Context;
                case 13:
                    return "windows-uwp" === this._runtime.GetExportType();
                default:
                    return !1
            }
        },
        RegexTest(a, d, c) {
            return this.GetRegex(d, c).test(a)
        },
        Compare(a, d, c) {
            return e.compare(a, d, c)
        },
        CompareBetween(a, d, c) {
            return a >= d && a <= c
        },
        CompareVar(a, d, c) {
            return e.compare(a.GetValue(), d, c)
        },
        CompareBoolVar(a) {
            return !!a.GetValue()
        },
        CompareTime(a, d) {
            const c = this._runtime.GetGameTime();
            return 0 === a ? (a = this._runtime.GetCurrentCondition().GetSavedDataMap(), !a.get("CompareTime_executed") && c >= d ? (a.set("CompareTime_executed", !0), !0) : !1) : e.compare(c, a, d)
        },
        IsNaN(a) {
            return isNaN(a)
        },
        AngleWithin(a, d, c) {
            return e.angleDiff(e.toRadians(a), e.toRadians(c)) <= e.toRadians(d)
        },
        IsClockwiseFrom(a, d) {
            return e.angleClockwise(e.toRadians(a), e.toRadians(d))
        },
        IsBetweenAngles(a, d, c) {
            a = e.toRadians(a);
            d = e.toRadians(d);
            c = e.toRadians(c);
            return e.angleClockwise(c,
                d) ? e.angleClockwise(a, d) && !e.angleClockwise(a, c) : !(!e.angleClockwise(a, d) && e.angleClockwise(a, c))
        },
        IsValueType(a, d) {
            return "number" === typeof a ? 0 === d : 1 === d
        },
        EvaluateExpression(a) {
            return !!a
        },
        PickByComparison(a, d, c, f) {
            if(!a) return !1;
            const h = this._GetForEachStack(),
                g = h.Push(),
                k = a.GetCurrentSol();
            e.shallowAssignArray(g, k.GetInstances());
            k.IsSelectAll() && e.clearArray(k._GetOwnElseInstances());
            const m = this._runtime.GetCurrentCondition();
            let p = 0;
            for(let x = 0, t = g.length; x < t; ++x) {
                const q = g[x];
                g[p] = q;
                d = m.ReevaluateParameter(1,
                    x);
                f = m.ReevaluateParameter(3, x);
                e.compare(d, c, f) ? ++p : k._PushElseInstance(q)
            }
            e.truncateArray(g, p);
            k.SetArrayPicked(g);
            d = !!g.length;
            e.clearArray(g);
            h.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickByEvaluate(a, d) {
            if(!a) return !1;
            const c = this._GetForEachStack(),
                f = c.Push(),
                h = a.GetCurrentSol();
            e.shallowAssignArray(f, h.GetInstances());
            h.IsSelectAll() && e.clearArray(h._GetOwnElseInstances());
            const g = this._runtime.GetCurrentCondition();
            let k = 0;
            for(let m = 0, p = f.length; m < p; ++m) {
                const x = f[m];
                f[k] = x;
                (d = g.ReevaluateParameter(1,
                    m)) ? ++k: h._PushElseInstance(x)
            }
            e.truncateArray(f, k);
            h.SetArrayPicked(f);
            d = !!f.length;
            e.clearArray(f);
            c.Pop();
            a.ApplySolToContainer();
            return d
        },
        PickNth(a, d) {
            if(!a) return !1;
            const c = a.GetCurrentSol(),
                f = c.GetInstances();
            d = Math.floor(d);
            if(d >= f.length) return !1;
            c.PickOne(f[d]);
            a.ApplySolToContainer();
            return !0
        },
        PickRandom(a) {
            if(!a) return !1;
            const d = a.GetCurrentSol(),
                c = d.GetInstances(),
                f = Math.floor(this._runtime.Random() * c.length);
            if(f >= c.length) return !1;
            d.PickOne(c[f]);
            a.ApplySolToContainer();
            return !0
        },
        PickAll(a) {
            if(!a ||
                !a.GetInstanceCount()) return !1;
            a.GetCurrentSol()._SetSelectAll(!0);
            a.ApplySolToContainer();
            return !0
        },
        PickOverlappingPoint(a, d, c) {
            if(!a) return !1;
            const f = a.GetCurrentSol();
            var h = f.GetInstances();
            const g = this._runtime.GetCurrentEvent().IsOrBlock(),
                k = this._runtime.GetCurrentCondition().IsInverted();
            f.IsSelectAll() ? (e.shallowAssignArray(b, h), f.ClearArrays(), f._SetSelectAll(!1)) : g ? (e.shallowAssignArray(b, f._GetOwnElseInstances()), e.clearArray(f._GetOwnElseInstances())) : (e.shallowAssignArray(b, f._GetOwnInstances()),
                e.clearArray(f._GetOwnInstances()));
            for(let m = 0, p = b.length; m < p; ++m) h = b[m], e.xor(h.GetWorldInfo().ContainsPoint(d, c), k) ? f._PushInstance(h) : f._PushElseInstance(h);
            a.ApplySolToContainer();
            return e.xor(!!f._GetOwnInstances().length, k)
        },
        PickLastCreated(a) {
            if(!a) return !1;
            var d = a.IsFamily();
            let c = null;
            const f = this._runtime._GetInstancesPendingCreate();
            for(let h = f.length - 1; 0 <= h; --h) {
                const g = f[h];
                if(d) {
                    if(g.GetObjectClass().BelongsToFamily(a)) {
                        c = g;
                        break
                    }
                } else if(g.GetObjectClass() === a) {
                    c = g;
                    break
                }
            }
            c || (d = a.GetInstances(),
                d.length && (c = d[d.length - 1]));
            if(!c) return !1;
            a.GetCurrentSol().PickOne(c);
            a.ApplySolToContainer();
            return !0
        },
        Repeat(a) {
            return this._runtime.IsDebugging() ? this._DebugRepeat(a) : this._Repeat(a)
        },
        While() {
            return this._runtime.IsDebugging() ? this._DebugWhile() : this._While()
        },
        For(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugFor(a, d, c) : this._For(a, d, c)
        },
        ForEach(a) {
            return this._runtime.IsDebugging() ? this._DebugForEach(a) : this._ForEach(a)
        },
        ForEachOrdered(a, d, c) {
            return this._runtime.IsDebugging() ? this._DebugForEachOrdered(a,
                c) : this._ForEachOrdered(a, c)
        },
        LayerVisible(a) {
            return a ? a.IsVisible() : !1
        },
        LayerEmpty(a) {
            return a ? !a.GetInstanceCount() : !1
        },
        LayerCmpOpacity(a, d, c) {
            return a ? e.compare(100 * a.GetOpacity(), d, c) : !1
        },
        OnImageLoadingComplete() {
            return !0
        },
        IsLoadingImages() {
            return 0 < this._imagesLoadingTotal
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(g, k) {
        const m = g[0] - k[0];
        return 0 !== m ? m : g[1] - k[1]
    }

    function a(g, k) {
        return g[1] - k[1]
    }
    const d = [],
        c = [],
        f = e.New(e.Rect),
        h = e.New(e.Color);
    e.Plugins.System.Acts = {
        SetVar(g, k) {
            g.SetValue(k)
        },
        AddVar(g, k) {
            g.IsNumber() && "number" !== typeof k && (k = parseFloat(k));
            g.SetValue(g.GetValue() + k)
        },
        SubVar(g, k) {
            g.IsNumber() && g.SetValue(g.GetValue() - k)
        },
        SetBoolVar(g, k) {
            g.SetValue(!!k)
        },
        ToggleBoolVar(g) {
            g.SetValue(!g.GetValue())
        },
        ResetGlobals() {
            this._runtime.GetEventSheetManager().ResetAllGlobalsToInitialValue()
        },
        CreateObject(g, k, m, p, x) {
            g && k && (m = this._runtime.CreateInstance(g, k, m, p, x)) && (x && k.SortAndAddSceneGraphInstancesByZIndex(m), k = this._runtime.GetEventSheetManager(), k.BlockFlushingInstances(!0), m._TriggerOnCreatedOnSelfAndRelated(), k.BlockFlushingInstances(!1), g.GetCurrentSol().SetSinglePicked(m), m.IsInContainer() && m.SetSiblingsSinglePicked())
        },
        CreateObjectByName(g, k, m, p, x) {
            g && k && (g = this._runtime.GetObjectClassByName(g)) && e.Plugins.System.Acts.CreateObject.call(this, g, k, m, p, x)
        },
        RecreateInitialObjects(g,
            k, m, p, x, t, q, r, y, v) {
            if(g) {
                var u = this._runtime.GetCurrentLayout();
                if(t && (u = this._runtime.GetLayoutManager().GetLayoutByName(t), !u)) return;
                t = null;
                if("number" !== typeof q || 0 <= q)
                    if(t = u.GetLayer(q), !t) return;
                f.set(k, m, p, x);
                k = u.RecreateInitialObjects(g, f, t, r, y, v);
                g.GetCurrentSol().SetArrayPicked(k);
                g.ApplySolToContainer()
            }
        },
        StopLoop() {
            const g = this._loopStack;
            g.IsInLoop() && g.GetCurrent().Stop()
        },
        SetGroupActive(g, k) {
            (g = this._runtime.GetEventSheetManager().GetEventGroupByName(g)) && (0 === k ? g.SetGroupActive(!1) :
                1 === k ? g.SetGroupActive(!0) : g.SetGroupActive(!g.IsGroupActive()))
        },
        SetTimescale(g) {
            this._runtime.SetTimeScale(g)
        },
        SetObjectTimescale(g, k) {
            0 > k && (k = 0);
            if(g) {
                g = g.GetCurrentSol().GetInstances();
                for(const m of g) m.SetTimeScale(k)
            }
        },
        RestoreObjectTimescale(g) {
            if(g) {
                g = g.GetCurrentSol().GetInstances();
                for(const k of g) k.RestoreTimeScale()
            }
        },
        Wait(g) {
            if(!(0 > g)) return this._runtime.GetEventSheetManager().AddScheduledWait().InitTimer(g), !0
        },
        WaitForSignal(g) {
            this._runtime.GetEventSheetManager().AddScheduledWait().InitSignal(g);
            return !0
        },
        WaitForPreviousActions() {
            const g = this._runtime.GetEventSheetManager();
            g.AddScheduledWait().InitPromise(g.GetPromiseForAllAsyncActions());
            return !0
        },
        Signal(g) {
            g = g.toLowerCase();
            for(const k of this._runtime.GetEventSheetManager().scheduledWaits()) k.IsSignal() && k.GetSignalTag() === g && k.SetSignalled()
        },
        async SnapshotCanvas(g, k, m, p, x, t) {
            const q = this._runtime.GetCanvasManager();
            q && (this.UpdateRender(), await q.SnapshotCanvas(0 === g ? "image/png" : "image/jpeg", k / 100, m, p, x, t), await this._runtime.TriggerAsync(e.Plugins.System.Cnds.OnCanvasSnapshot,
                null))
        },
        SetCanvasSize(g, k) {
            if(!(0 >= g || 0 >= k)) {
                this._runtime.SetViewportSize(g, k);
                var m = this._runtime.GetCurrentLayout();
                m.BoundScrolling();
                for(const p of m.GetLayers()) p.UpdateViewport();
                if(m = this._runtime.GetCanvasManager()) "off" !== m.GetCurrentFullscreenMode() && this._runtime.SetOriginalViewportSize(g, k), m.SetSize(m.GetLastWidth(), m.GetLastHeight(), !0), this._runtime.UpdateRender()
            }
        },
        SetFullscreenQuality(g) {
            const k = this._runtime.GetCanvasManager();
            k && "off" !== k.GetCurrentFullscreenMode() && (k.SetFullscreenScalingQuality(0 !==
                g ? "high" : "low"), k.SetSize(k.GetLastWidth(), k.GetLastHeight(), !0))
        },
        SaveState(g) {
            this._runtime.SaveToSlot(g)
        },
        LoadState(g) {
            this._runtime.LoadFromSlot(g)
        },
        LoadStateJSON(g) {
            this._runtime.LoadFromJsonString(g)
        },
        SetHalfFramerateMode(g) {},
        ResetPersisted() {
            for(const g of this._runtime.GetLayoutManager().GetAllLayouts()) g.ResetPersistData()
        },
        SetPixelRounding(g) {
            this._runtime.SetPixelRoundingEnabled(0 !== g)
        },
        SetMinimumFramerate(g) {
            this._runtime.SetMinimumFramerate(g)
        },
        SortZOrderByInstVar(g, k) {
            if(g) {
                var m = g.GetCurrentSol().GetInstances(),
                    p = this._runtime.GetCurrentLayout(),
                    x = g.IsFamily();
                g = g.GetFamilyIndex();
                for(let q = 0, r = m.length; q < r; ++q) {
                    var t = m[q];
                    const y = t.GetWorldInfo();
                    if(!y) continue;
                    let v;
                    v = x ? t.GetInstanceVariableValue(k + t.GetObjectClass().GetFamilyInstanceVariableOffset(g)) : t.GetInstanceVariableValue(k);
                    d.push([y.GetLayer().GetIndex(), y.GetZIndex()]);
                    c.push([t, v])
                }
                if(d.length) {
                    d.sort(b);
                    c.sort(a);
                    k = !1;
                    for(let q = 0, r = d.length; q < r; ++q) m = c[q][0], x = p.GetLayerByIndex(d[q][0]), g = d[q][1], t = x._GetInstances(), t[g] !== m && (t[g] = m, m.GetWorldInfo()._SetLayer(x),
                        x.SetZIndicesChanged(), k = !0);
                    k && this._runtime.UpdateRender();
                    e.clearArray(d);
                    e.clearArray(c)
                }
            }
        },
        GoToLayout(g) {
            if(!this._runtime.IsLoading()) {
                var k = this._runtime.GetLayoutManager();
                k.IsPendingChangeMainLayout() || k.ChangeMainLayout(g)
            }
        },
        GoToLayoutByName(g) {
            if(!this._runtime.IsLoading()) {
                var k = this._runtime.GetLayoutManager();
                k.IsPendingChangeMainLayout() || (g = k.GetLayoutByName(g)) && k.ChangeMainLayout(g)
            }
        },
        NextPrevLayout(g) {
            if(!this._runtime.IsLoading()) {
                var k = this._runtime.GetLayoutManager();
                if(!k.IsPendingChangeMainLayout()) {
                    var m =
                        k.GetAllLayouts(),
                        p = m.indexOf(k.GetMainRunningLayout());
                    g && 0 === p || (g || p !== m.length - 1) && k.ChangeMainLayout(m[p + (g ? -1 : 1)])
                }
            }
        },
        RestartLayout() {
            if(!this._runtime.IsLoading()) {
                var g = this._runtime.GetLayoutManager();
                g.IsPendingChangeMainLayout() || (g.ChangeMainLayout(g.GetMainRunningLayout()), this._runtime.GetEventSheetManager().ResetAllGroupsInitialActivation())
            }
        },
        SetLayerVisible(g, k) {
            g && g.SetVisible(k)
        },
        SetLayerOpacity(g, k) {
            g && g.SetOpacity(k / 100)
        },
        SetLayerScale(g, k) {
            g && g.SetOwnScale(k)
        },
        SetLayerScaleRate(g,
            k) {
            g && g.SetScaleRate(k)
        },
        SetLayerAngle(g, k) {
            g && g.SetAngle(e.toRadians(+k))
        },
        SetLayerScroll(g, k, m) {
            g && (g.SetOwnScrollPositionEnabled(!0), g.SetScrollX(k), g.SetScrollY(m))
        },
        RestoreLayerScroll(g) {
            g && g.SetOwnScrollPositionEnabled(!1)
        },
        SetLayerParallax(g, k, m) {
            g && g.SetParallax(k / 100, m / 100)
        },
        SetLayerZElevation(g, k) {
            g && g.SetZElevation(+k)
        },
        SetLayerBackground(g, k) {
            g && (h.setFromRgbValue(k), h.clamp(), g = g.GetBackgroundColor(), g.equalsIgnoringAlpha(h) || (g.copyRgb(h), this.UpdateRender()))
        },
        SetLayerTransparent(g,
            k) {
            g && g.SetTransparent(k)
        },
        SetLayerBlendMode(g, k) {
            g && g.SetBlendMode(k)
        },
        SetLayerEffectEnabled(g, k, m) {
            g && (g = g.GetEffectList(), m = g.GetEffectTypeByName(m)) && (k = 1 === k, m.IsActive() !== k && (m.SetActive(k), g.UpdateActiveEffects(), this._runtime.UpdateRender()))
        },
        SetLayerEffectParam(g, k, m, p) {
            if(g && (g = g.GetEffectList(), k = g.GetEffectTypeByName(k))) {
                var x = k.GetIndex();
                g = g.GetEffectParametersForIndex(x);
                m = Math.floor(m);
                if(!(0 > m || m >= g.length)) {
                    x = k.GetShaderProgram().GetParameterType(m);
                    if("color" === x) {
                        h.setFromRgbValue(p);
                        m = g[m];
                        if(h.equalsIgnoringAlpha(m)) return;
                        m.copyRgb(h)
                    } else {
                        "percent" === x && (p /= 100);
                        if(g[m] === p) return;
                        g[m] = p
                    }
                    k.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayerForceOwnTexture(g, k) {
            g && g.SetForceOwnTexture(k)
        },
        SetLayoutScale(g) {
            this._runtime.GetCurrentLayout().SetScale(+g)
        },
        SetLayoutAngle(g) {
            this._runtime.GetCurrentLayout().SetAngle(e.toRadians(+g))
        },
        SetLayoutEffectEnabled(g, k) {
            const m = this._runtime.GetCurrentLayout().GetEffectList();
            if(k = m.GetEffectTypeByName(k)) g = 1 === g, k.IsActive() !== g && (k.SetActive(g),
                m.UpdateActiveEffects(), this._runtime.UpdateRender())
        },
        SetLayoutEffectParam(g, k, m) {
            var p = this._runtime.GetCurrentLayout().GetEffectList();
            if(g = p.GetEffectTypeByName(g)) {
                var x = g.GetIndex();
                p = p.GetEffectParametersForIndex(x);
                k = Math.floor(k);
                if(!(0 > k || k >= p.length)) {
                    x = g.GetShaderProgram().GetParameterType(k);
                    if("color" === x) {
                        h.setFromRgbValue(m);
                        k = p[k];
                        if(h.equalsIgnoringAlpha(k)) return;
                        k.copyRgb(h)
                    } else {
                        "percent" === x && (m /= 100);
                        if(p[k] === m) return;
                        p[k] = m
                    }
                    g.IsActive() && this._runtime.UpdateRender()
                }
            }
        },
        SetLayoutVanishingPoint(g,
            k) {
            this._runtime.GetCurrentLayout().SetVanishingPointXY(g / 100, k / 100)
        },
        ScrollX(g) {
            this._runtime.GetCurrentLayout().SetScrollX(g)
        },
        ScrollY(g) {
            this._runtime.GetCurrentLayout().SetScrollY(g)
        },
        Scroll(g, k) {
            const m = this._runtime.GetCurrentLayout();
            m.SetScrollX(g);
            m.SetScrollY(k)
        },
        ScrollToObject(g) {
            if(g && (g = g.GetFirstPicked()) && (g = g.GetWorldInfo())) {
                var k = this._runtime.GetCurrentLayout();
                k.SetScrollX(g.GetX());
                k.SetScrollY(g.GetY())
            }
        },
        async LoadObjectTextures(g) {
            const k = this._runtime.GetMainRunningLayout();
            k && g && !this._runtime.IsLoading() && (g = g.IsFamily() ? g.GetFamilyMembers() : [g], await this._LoadTexturesForObjectClasses(k, g))
        },
        async LoadObjectTexturesByName(g) {
            await e.Plugins.System.Acts.LoadObjectTextures.call(this, this._runtime.GetObjectClassByName(g))
        },
        UnloadObjectTextures(g) {
            const k = this._runtime.GetMainRunningLayout();
            k && g && (g = g.IsFamily() ? g.GetFamilyMembers() : [g], this._UnloadTexturesForObjectClasses(k, g))
        },
        UnloadObjectTexturesByName(g) {
            e.Plugins.System.Acts.UnloadObjectTexturesByName.call(this,
                this._runtime.GetObjectClassByName(g))
        },
        UnloadUnusedTextures() {
            const g = this._runtime.GetMainRunningLayout();
            if(g) {
                var k = g._GetTextureLoadedObjectTypes();
                this._UnloadTexturesForObjectClasses(g, k)
            }
        },
        async LoadLayoutTextures(g) {
            const k = this._runtime.GetMainRunningLayout();
            g && k && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(k, g._GetInitialObjectClasses())
        },
        async LoadLayoutTexturesByName(g) {
            const k = this._runtime.GetMainRunningLayout();
            (g = this._runtime.GetLayoutManager().GetLayoutByName(g)) &&
            k && !this._runtime.IsLoading() && await this._LoadTexturesForObjectClasses(k, g._GetInitialObjectClasses())
        },
        SetFunctionReturnValue(g) {
            const k = this._eventStack.GetCurrentExpFuncStackFrame();
            if(k) switch(k.GetFunctionReturnType()) {
                case 1:
                    "number" === typeof g && k.SetFunctionReturnValue(g);
                    break;
                case 2:
                    "string" === typeof g && k.SetFunctionReturnValue(g);
                    break;
                case 3:
                    k.SetFunctionReturnValue(g)
            }
        },
        MapFunction(g, k, m) {
            var p = this._GetFunctionMap(g.toLowerCase(), !0);
            const x = p.strMap,
                t = k.toLowerCase();
            x.has(t) && console.warn(`[Construct 3] Function map '${g}' string '${k}' already in map; overwriting entry`);
            if(p = e.first(x.values()) || p.defaultFunc) {
                p = 0 !== p.GetReturnType();
                const q = 0 !== m.GetReturnType();
                if(p !== q) {
                    console.error(`[Construct 3] Function map '${g}' string '${k}' function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            x.set(t, m)
        },
        MapFunctionDefault(g, k) {
            const m = this._GetFunctionMap(g.toLowerCase(), !0);
            m.defaultFunc && console.warn(`[Construct 3] Function map '${g}' already has a default; overwriting entry`);
            var p = e.first(m.strMap.values()) || m.defaultFunc;
            if(p) {
                p =
                    0 !== p.GetReturnType();
                const x = 0 !== k.GetReturnType();
                if(p !== x) {
                    console.error(`[Construct 3] Function map '${g}' default: function return type not compatible with other functions in the map; entry ignored`);
                    return
                }
            }
            m.defaultFunc = k
        },
        CallMappedFunction(g, k, m) {
            m = Math.floor(m);
            var p = this._GetFunctionMap(g.toLowerCase(), !1);
            if(p) {
                var x = p.strMap.get(k.toLowerCase());
                if(!x)
                    if(p.defaultFunc) x = p.defaultFunc, m = 0;
                    else {
                        console.warn(`[Construct 3] Call mapped function: no function associated with map '${g}' string '${k}'; call ignored (consider setting a default)`);
                        return
                    } if(x.IsEnabled())
                    if(0 !== x.GetReturnType()) console.warn(`[Construct 3] Call mapped function: map '${g}' string '${k}' has a return type so cannot be called`);
                    else {
                        g = this._runtime;
                        k = g.GetEventSheetManager();
                        var t = k.GetCurrentEvent();
                        p = t.GetSolModifiersIncludingParents();
                        var q = 0 < p.length;
                        q && k.PushCleanSol(p);
                        var r = [];
                        if(t = k.FindFirstFunctionBlockParent(t)) {
                            t = t.GetFunctionParameters();
                            for(let y = m, v = t.length; y < v; ++y) r.push(t[y].GetValue())
                        }
                        m = x.GetFunctionParameters();
                        for(let y = r.length, v = m.length; y <
                            v; ++y) r.push(m[y].GetInitialValue());
                        return g.IsDebugging() ? this._DebugDoCallMappedFunction(k, x, r, q, p) : this._DoCallMappedFunction(k, x, r, q, p)
                    }
            } else console.warn(`[Construct 3] Call mapped function: map name '${g}' not found; call ignored`)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.System.Exps = {
        int: function(b) {
            "string" === typeof b && (b = parseInt(b, 10), isNaN(b) && (b = 0));
            return Math.floor(b)
        },
        float: function(b) {
            "string" === typeof b && (b = parseFloat(b), isNaN(b) && (b = 0));
            return b
        },
        str(b) {
            return b.toString()
        },
        len(b) {
            return "string" === typeof b ? b.length : 0
        },
        random(b, a) {
            return "undefined" === typeof a ? this._runtime.Random() * b : this._runtime.Random() * (a - b) + b
        },
        choose(...b) {
            const a = Math.floor(this._runtime.Random() * b.length);
            return b[a]
        },
        pi() {
            return Math.PI
        },
        infinity() {
            return Infinity
        },
        sqrt(b) {
            return Math.sqrt(b)
        },
        abs(b) {
            return Math.abs(b)
        },
        round(b) {
            return Math.round(b)
        },
        roundtodp(b, a) {
            a = Math.max(Math.floor(a), 0);
            a = Math.pow(10, a);
            return Math.round((b + Number.EPSILON) * a) / a
        },
        floor(b) {
            return Math.floor(b)
        },
        ceil(b) {
            return Math.ceil(b)
        },
        sign(b) {
            return Math.sign(b)
        },
        sin(b) {
            return Math.sin(e.toRadians(b))
        },
        cos(b) {
            return Math.cos(e.toRadians(b))
        },
        tan(b) {
            return Math.tan(e.toRadians(b))
        },
        asin(b) {
            return e.toDegrees(Math.asin(b))
        },
        acos(b) {
            return e.toDegrees(Math.acos(b))
        },
        atan(b) {
            return e.toDegrees(Math.atan(b))
        },
        exp(b) {
            return Math.exp(b)
        },
        ln(b) {
            return Math.log(b)
        },
        log10(b) {
            return Math.log(b) / Math.LN10
        },
        max(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for(let d = 1, c = b.length; d < c; ++d) {
                let f = b[d];
                "number" === typeof f && a < f && (a = f)
            }
            return a
        },
        min(...b) {
            let a = b[0];
            "number" !== typeof a && (a = 0);
            for(let d = 1, c = b.length; d < c; ++d) {
                let f = b[d];
                "number" === typeof f && a > f && (a = f)
            }
            return a
        },
        clamp(b, a, d) {
            return e.clamp(b, a, d)
        },
        distance(b, a, d, c) {
            return e.distanceTo(b, a, d, c)
        },
        angle(b, a, d, c) {
            return e.toDegrees(e.angleTo(b, a, d, c))
        },
        lerp(b,
            a, d) {
            return e.lerp(b, a, d)
        },
        unlerp(b, a, d) {
            return e.unlerp(b, a, d)
        },
        qarp(b, a, d, c) {
            return e.qarp(b, a, d, c)
        },
        cubic(b, a, d, c, f) {
            return e.cubic(b, a, d, c, f)
        },
        cosp(b, a, d) {
            return e.cosp(b, a, d)
        },
        anglediff(b, a) {
            return e.toDegrees(e.angleDiff(e.toRadians(b), e.toRadians(a)))
        },
        anglelerp(b, a, d) {
            return e.toDegrees(e.angleLerp(e.toRadians(b), e.toRadians(a), d))
        },
        anglerotate(b, a, d) {
            return e.toDegrees(e.angleRotate(e.toRadians(b), e.toRadians(a), e.toRadians(d)))
        },
        setbit(b, a, d) {
            a |= 0;
            return (b | 0) & ~(1 << a) | (0 !== d ? 1 : 0) << a
        },
        togglebit(b,
            a) {
            return (b | 0) ^ 1 << (a | 0)
        },
        getbit(b, a) {
            return (b | 0) & 1 << (a | 0) ? 1 : 0
        },
        newline() {
            return "\n"
        },
        uppercase(b) {
            return "string" === typeof b ? b.toUpperCase() : ""
        },
        lowercase(b) {
            return "string" === typeof b ? b.toLowerCase() : ""
        },
        left(b, a) {
            return "string" === typeof b ? b.substr(0, a) : ""
        },
        mid(b, a, d) {
            return "string" !== typeof b ? "" : 0 > d ? b.substr(a) : b.substr(a, d)
        },
        right(b, a) {
            return "string" === typeof b ? b.substr(b.length - a) : ""
        },
        trim(b) {
            return "string" === typeof b ? b.trim() : ""
        },
        tokenat(b, a, d) {
            if("string" !== typeof b || "string" !== typeof d) return "";
            b = b.split(d);
            a = Math.floor(a);
            return 0 > a || a >= b.length ? "" : b[a]
        },
        tokencount(b, a) {
            return "string" === typeof b && "string" === typeof a && b.length ? b.split(a).length : 0
        },
        find(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(e.EscapeRegex(a), "i")) : -1
        },
        findcase(b, a) {
            return "string" === typeof b && "string" === typeof a ? b.search(new RegExp(e.EscapeRegex(a), "")) : -1
        },
        replace(b, a, d) {
            return "string" === typeof b && "string" === typeof a && "string" === typeof d ? b.replace(new RegExp(e.EscapeRegex(a), "gi"), d) : "string" ===
                typeof b ? b : ""
        },
        regexsearch(b, a, d) {
            a = this.GetRegex(a, d);
            return b ? b.search(a) : -1
        },
        regexreplace(b, a, d, c) {
            a = this.GetRegex(a, d);
            return b ? b.replace(a, c) : ""
        },
        regexmatchcount(b, a, d) {
            return (b = this.GetRegexMatches(b.toString(), a, d)) ? b.length : 0
        },
        regexmatchat(b, a, d, c) {
            c = Math.floor(c);
            b = this.GetRegexMatches(b.toString(), a, d);
            return !b || 0 > c || c >= b.length ? "" : b[c]
        },
        zeropad(b, a) {
            let d = 0 > b ? "-" : "";
            0 > b && (b = -b);
            d += "0".repeat(Math.max(a - b.toString().length, 0));
            return d + b.toString()
        },
        urlencode(b) {
            return encodeURIComponent(b)
        },
        urldecode(b) {
            return decodeURIComponent(b)
        },
        dt() {
            return this._runtime._GetDtFast()
        },
        timescale() {
            return this._runtime.GetTimeScale()
        },
        wallclocktime() {
            return (Date.now() - this._runtime.GetStartTime()) / 1E3
        },
        unixtime() {
            return Date.now()
        },
        time() {
            return this._runtime.GetGameTime()
        },
        tickcount() {
            return this._runtime.GetTickCount()
        },
        objectcount() {
            return this._runtime.GetObjectCount()
        },
        fps() {
            return this._runtime.GetFPS()
        },
        cpuutilisation() {
            return this._runtime.GetMainThreadTime()
        },
        gpuutilisation() {
            return this._runtime.GetGPUUtilisation()
        },
        windowwidth() {
            return this._runtime.GetCanvasManager().GetDeviceWidth()
        },
        windowheight() {
            return this._runtime.GetCanvasManager().GetDeviceHeight()
        },
        originalwindowwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalwindowheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        originalviewportwidth() {
            return this._runtime.GetOriginalViewportWidth()
        },
        originalviewportheight() {
            return this._runtime.GetOriginalViewportHeight()
        },
        scrollx() {
            return this._runtime.GetCurrentLayout().GetScrollX()
        },
        scrolly() {
            return this._runtime.GetCurrentLayout().GetScrollY()
        },
        layoutname() {
            return this._runtime.GetCurrentLayout().GetName()
        },
        layoutscale() {
            return this._runtime.GetCurrentLayout().GetScale()
        },
        layoutangle() {
            return e.toDegrees(this._runtime.GetCurrentLayout().GetAngle())
        },
        layoutwidth() {
            return this._runtime.GetCurrentLayout().GetWidth()
        },
        layoutheight() {
            return this._runtime.GetCurrentLayout().GetHeight()
        },
        viewportleft(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getLeft() :
                0
        },
        viewporttop(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getTop() : 0
        },
        viewportright(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getRight() : 0
        },
        viewportbottom(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().getBottom() : 0
        },
        viewportwidth(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().width() : 0
        },
        viewportheight(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetViewport().height() :
                0
        },
        canvastolayerx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[0] : 0
        },
        canvastolayery(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.CanvasCssToLayer(a, d)[1] : 0
        },
        layertocanvasx(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[0] : 0
        },
        layertocanvasy(b, a, d) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.LayerToCanvasCss(a, d)[1] : 0
        },
        layerscale(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetOwnScale() :
                0
        },
        layerangle(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? e.toDegrees(b.GetOwnAngle()) : 0
        },
        layeropacity(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetOpacity() : 0
        },
        layerscalerate(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScaleRate() : 0
        },
        layerscrollx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollX() : 0
        },
        layerscrolly(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetScrollY() : 0
        },
        layerparallaxx(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ?
                100 * b.GetParallaxX() : 0
        },
        layerparallaxy(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? 100 * b.GetParallaxY() : 0
        },
        layerzelevation(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetZElevation() : 0
        },
        layerindex(b) {
            return (b = this._runtime.GetCurrentLayout().GetLayer(b)) ? b.GetIndex() : -1
        },
        canvassnapshot() {
            const b = this._runtime.GetCanvasManager();
            return b ? b.GetCanvasSnapshotUrl() : ""
        },
        loopindex(b) {
            const a = this._loopStack;
            return a.IsInLoop() ? b ? (b = a.FindByName(b)) ? b.GetIndex() : 0 : a.GetCurrent().GetIndex() :
                0
        },
        savestatejson() {
            return this._runtime.GetLastSaveJsonString()
        },
        callmapped(b, a, ...d) {
            var c = this._GetFunctionMap(b.toLowerCase(), !1);
            if(!c) return console.warn(`[Construct 3] Call mapped function: map name '${b}' not found; returning 0`), 0;
            var f = c.strMap.get(a.toLowerCase());
            if(!f)
                if(c.defaultFunc) f = c.defaultFunc;
                else return console.warn(`[Construct 3] Call mapped function: no function associated with map '${b}' string '${a}'; returning 0 (consider setting a default)`), 0;
            c = f.GetReturnType();
            const h =
                f.GetDefaultReturnValue();
            if(0 === c) return console.warn(`[Construct 3] Call mapped function: map '${b}' string '${a}' has no return type so cannot be called from an expression; returning 0`), 0;
            if(!f.IsEnabled()) return h;
            b = this._runtime.GetEventSheetManager();
            a = b.GetCurrentEvent().GetSolModifiersIncludingParents();
            const g = 0 < a.length;
            g && b.PushCleanSol(a);
            const k = f.GetFunctionParameters();
            for(let m = d.length, p = k.length; m < p; ++m) d.push(k[m].GetInitialValue());
            f = f.GetEventBlock();
            d = f.RunAsExpressionFunctionCall(f.GetSolModifiersIncludingParents(),
                c, h, ...d);
            g && b.PopSol(a);
            return d
        },
        loadingprogress() {
            return this._runtime.GetAssetManager().GetLoadProgress()
        },
        imageloadingprogress() {
            return 0 === this._imagesLoadingTotal ? 1 : this._imagesLoadingComplete / this._imagesLoadingTotal
        },
        renderer() {
            return this._runtime.GetWebGPURenderer() ? "webgpu" : "webgl"
        },
        rendererdetail() {
            return this._runtime.GetWebGPURenderer() ? "<unavailable>" : this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
        },
        imagememoryusage() {
            let b = this._runtime.GetRenderer().GetEstimatedTextureMemoryUsage();
            return Math.round(100 * b / 1048576) / 100
        },
        rgb(b, a, d) {
            return e.PackRGB(b, a, d)
        },
        rgbex(b, a, d) {
            return e.PackRGBEx(b / 100, a / 100, d / 100)
        },
        rgba(b, a, d, c) {
            return e.PackRGBAEx(b / 100, a / 100, d / 100, c / 100)
        },
        rgbex255(b, a, d) {
            return e.PackRGBEx(b / 255, a / 255, d / 255)
        },
        rgba255(b, a, d, c) {
            return e.PackRGBAEx(b / 255, a / 255, d / 255, c / 255)
        },
        projectname() {
            return this._runtime.GetProjectName()
        },
        projectversion() {
            return this._runtime.GetProjectVersion()
        },
        currenteventsheetname() {
            return this._runtime.GetCurrentEvent().GetEventSheet().GetName()
        },
        currenteventnumber() {
            return this._runtime.GetCurrentEvent().GetDisplayNumber()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b);
            this._animations = b.GetAnimations()
        }
        Release() {
            e.clearArray(this._animations);
            super.Release()
        }
        OnCreate() {
            for(const b of this._animations) b.LoadAllAssets(this._runtime)
        }
        LoadTextures(b) {
            const a = {
                sampling: this._runtime.GetSampling()
            };
            return Promise.all(this._animations.map(d => d.LoadAllTextures(b, a)))
        }
        ReleaseTextures() {
            for(const b of this._animations) b.ReleaseAllTextures()
        }
        OnDynamicTextureLoadComplete() {
            this._UpdateAllCurrentTexture()
        }
        _UpdateAllCurrentTexture() {
            for(const b of this._objectClass.instancesIncludingPendingCreate()) b.GetSdkInstance()._UpdateCurrentTexture()
        }
        FinishCondition(b) {
            e.Plugins.Sprite._FinishCondition(this,
                b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = e.New(e.Rect),
        d = e.New(e.Quad),
        c = e.New(e.Vector2);
    e.Plugins.Sprite.Instance = class extends e.SDKWorldInstanceBase {
        constructor(g, k) {
            super(g);
            let m = !0,
                p = "",
                x = 0,
                t = !0;
            k && (m = !!k[0], p = k[1], x = k[2], t = k[3]);
            this._currentAnimation = this._objectClass.GetAnimationByName(p) || this._objectClass.GetAnimations()[0];
            this._currentFrameIndex = e.clamp(x, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            k =
                this._currentAnimationFrame.GetImageInfo();
            this._currentTexture = k.GetTexture();
            this._currentRcTex = k.GetTexRect();
            this.HandleWebGLContextLoss();
            g.SetFlag(2, !0);
            g.SetFlag(1, 0 <= this._currentAnimation.GetSpeed());
            this._currentAnimationSpeed = Math.abs(this._currentAnimation.GetSpeed());
            this._currentAnimationRepeatTo = this._currentAnimation.GetRepeatTo();
            this._animationTimer = e.New(e.KahanSum);
            this._animationRepeats = this._frameStartTime = 0;
            this._animTriggerName = "";
            this._changeAnimFrameIndex = -1;
            this._changeAnimationName =
                "";
            this._changeAnimationFrom = 0;
            g = this.GetWorldInfo();
            this._bquadRef = g.GetBoundingQuad();
            g.SetVisible(m);
            g.SetCollisionEnabled(t);
            g.SetOriginX(this._currentAnimationFrame.GetOriginX());
            g.SetOriginY(this._currentAnimationFrame.GetOriginY());
            g.SetSourceCollisionPoly(this._currentAnimationFrame.GetCollisionPoly());
            g.SetBboxChanged();
            1 === this._objectClass.GetAnimationCount() && 1 === this._objectClass.GetAnimations()[0].GetFrameCount() || 0 === this._currentAnimationSpeed || this._StartTicking()
        }
        Release() {
            this._animationTimer =
                this._currentTexture = this._currentAnimationFrame = this._currentAnimation = null;
            super.Release()
        }
        GetCurrentImageInfo() {
            return this._currentAnimationFrame.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        OnWebGLContextLost() {
            this._currentTexture = null
        }
        OnWebGLContextRestored() {
            this._UpdateCurrentTexture()
        }
        Draw(g) {
            var k = this._currentTexture;
            null !== k && (g.SetTexture(k), k = this.GetWorldInfo(), k.HasMesh() ? this._DrawMesh(k, g) : this._DrawStandard(k, g))
        }
        _DrawStandard(g, k) {
            let m = this._bquadRef;
            this._runtime.IsPixelRoundingEnabled() &&
                (m = g.PixelRoundQuad(m));
            k.Quad3(m, this._currentRcTex)
        }
        _DrawMesh(g, k) {
            const m = g.GetTransformedMesh();
            if(g.IsMeshChanged()) {
                g.CalculateBbox(a, d, !1);
                let p = d;
                this._runtime.IsPixelRoundingEnabled() && (p = g.PixelRoundQuad(p));
                m.CalculateTransformedMesh(g.GetSourceMesh(), p, this._currentRcTex);
                g.SetMeshChanged(!1)
            }
            m.Draw(k)
        }
        GetAnimationTime() {
            return this._animationTimer.Get()
        }
        IsAnimationPlaying() {
            return this._inst.GetFlag(2)
        }
        SetAnimationPlaying(g) {
            this._inst.SetFlag(2, g)
        }
        IsPlayingForwards() {
            return this._inst.GetFlag(1)
        }
        SetPlayingForwards(g) {
            this._inst.SetFlag(1,
                g)
        }
        IsInAnimationTrigger() {
            return this._inst.GetFlag(4)
        }
        SetInAnimationTrigger(g) {
            this._inst.SetFlag(4, g)
        }
        Tick() {
            this._changeAnimationName && this._DoChangeAnimation();
            0 <= this._changeAnimFrameIndex && this._DoChangeAnimFrame();
            const g = this._currentAnimationSpeed;
            if(this.IsAnimationPlaying() && 0 !== g) {
                var k = this._runtime.GetDt(this._inst);
                this._animationTimer.Add(k);
                k = this.GetAnimationTime();
                var m = this._currentAnimationFrame,
                    p = m.GetDuration() / g;
                if(!(k < this._frameStartTime + p)) {
                    var x = this._currentAnimation,
                        t = this._currentAnimationRepeatTo,
                        q = x.GetFrameCount(),
                        r = x.GetRepeatCount(),
                        y = x.IsLooping(),
                        v = x.IsPingPong();
                    this.IsPlayingForwards() ? this._currentFrameIndex++ : this._currentFrameIndex--;
                    this._frameStartTime += p;
                    this._currentFrameIndex >= q && (v ? (this.SetPlayingForwards(!1), this._currentFrameIndex = q - 2) : y ? this._currentFrameIndex = t : (this._animationRepeats++, this._animationRepeats >= r ? this._FinishAnimation(!1) : this._currentFrameIndex = t));
                    0 > this._currentFrameIndex && (v ? (this._currentFrameIndex = 1, this.SetPlayingForwards(!0),
                        y || (this._animationRepeats++, this._animationRepeats >= r && this._FinishAnimation(!0))) : y ? this._currentFrameIndex = t : (this._animationRepeats++, this._animationRepeats >= r ? this._FinishAnimation(!0) : this._currentFrameIndex = t));
                    this._currentFrameIndex = e.clamp(this._currentFrameIndex, 0, q - 1);
                    p = x.GetFrameAt(this._currentFrameIndex);
                    k > this._frameStartTime + p.GetDuration() / g && (this._frameStartTime = k);
                    this._OnFrameChanged(m, p)
                }
            } else this._StopTicking()
        }
        _FinishAnimation(g) {
            this._currentFrameIndex = g ? 0 : this._currentAnimation.GetFrameCount() -
                1;
            this.SetAnimationPlaying(!1);
            this._animTriggerName = this._currentAnimation.GetName();
            this.SetInAnimationTrigger(!0);
            this.Trigger(e.Plugins.Sprite.Cnds.OnAnyAnimFinished);
            this.Trigger(e.Plugins.Sprite.Cnds.OnAnimFinished);
            this.SetInAnimationTrigger(!1);
            this._animationRepeats = 0
        }
        _OnFrameChanged(g, k) {
            if(g !== k) {
                var m = this.GetWorldInfo(),
                    p = g.GetImageInfo(),
                    x = k.GetImageInfo(),
                    t = p.GetWidth();
                p = p.GetHeight();
                var q = x.GetWidth(),
                    r = x.GetHeight();
                t !== q && m.SetWidth(m.GetWidth() * (q / t));
                p !== r && m.SetHeight(m.GetHeight() *
                    (r / p));
                m.SetOriginX(k.GetOriginX());
                m.SetOriginY(k.GetOriginY());
                m.SetSourceCollisionPoly(k.GetCollisionPoly());
                m.SetBboxChanged();
                this._currentAnimationFrame = k;
                this._currentTexture = x.GetTexture();
                this._currentRcTex = x.GetTexRect();
                m = this.GetInstance().GetBehaviorInstances();
                for(let y = 0, v = m.length; y < v; ++y) m[y].OnSpriteFrameChanged(g, k);
                this.Trigger(e.Plugins.Sprite.Cnds.OnFrameChanged);
                this._runtime.UpdateRender()
            }
        }
        _StartAnim(g) {
            this.SetAnimationPlaying(!0);
            this._frameStartTime = this.GetAnimationTime();
            1 === g && 0 !== this._currentFrameIndex && (this._changeAnimFrameIndex = 0, this.IsInAnimationTrigger() || this._DoChangeAnimFrame());
            this._StartTicking()
        }
        _SetAnim(g, k) {
            this._changeAnimationName = g;
            this._changeAnimationFrom = k;
            this._StartTicking();
            this.IsInAnimationTrigger() || this._DoChangeAnimation()
        }
        _GetCurrentAnimationName() {
            return this._changeAnimationName ? this._changeAnimationName : this._currentAnimation.GetName()
        }
        _SetAnimFrame(g) {
            isFinite(g) && (this._changeAnimFrameIndex = g, this.IsInAnimationTrigger() || this._DoChangeAnimFrame())
        }
        _GetAnimFrame() {
            return this._currentFrameIndex
        }
        _SetAnimSpeed(g) {
            this._currentAnimationSpeed =
                Math.abs(g);
            this.SetPlayingForwards(0 <= g);
            0 < this._currentAnimationSpeed && this._StartTicking()
        }
        _GetAnimSpeed() {
            return this.IsPlayingForwards() ? this._currentAnimationSpeed : -this._currentAnimationSpeed
        }
        _SetAnimRepeatToFrame(g) {
            this._currentAnimationRepeatTo = g = e.clamp(Math.floor(g), 0, this._currentAnimation.GetFrameCount() - 1)
        }
        _GetAnimRepeatToFrame() {
            return this._currentAnimationRepeatTo
        }
        _DoChangeAnimation() {
            const g = this._currentAnimationFrame;
            var k = this._objectClass.GetAnimationByName(this._changeAnimationName);
            this._changeAnimationName = "";
            !k || k === this._currentAnimation && this.IsAnimationPlaying() || (this._currentAnimation = k, this.SetPlayingForwards(0 <= k.GetSpeed()), this._currentAnimationSpeed = Math.abs(k.GetSpeed()), this._currentAnimationRepeatTo = k.GetRepeatTo(), this._currentFrameIndex = e.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1), 1 === this._changeAnimationFrom && (this._currentFrameIndex = 0), this.SetAnimationPlaying(!0), this._frameStartTime = this.GetAnimationTime(), k = this._currentAnimation.GetFrameAt(this._currentFrameIndex),
                this._OnFrameChanged(g, k))
        }
        _DoChangeAnimFrame() {
            const g = this._currentAnimationFrame;
            var k = this._currentFrameIndex;
            this._currentFrameIndex = e.clamp(Math.floor(this._changeAnimFrameIndex), 0, this._currentAnimation.GetFrameCount() - 1);
            this._changeAnimFrameIndex = -1;
            k !== this._currentFrameIndex && (k = this._currentAnimation.GetFrameAt(this._currentFrameIndex), this._OnFrameChanged(g, k), this._frameStartTime = this.GetAnimationTime())
        }
        _UpdateCurrentTexture() {
            const g = this._currentAnimationFrame.GetImageInfo();
            this._currentTexture =
                g.GetTexture();
            this._currentRcTex = g.GetTexRect();
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        GetTexture() {
            return this._currentTexture
        }
        GetTexRect() {
            return this._currentRcTex
        }
        GetImagePointCount() {
            return this._currentAnimationFrame.GetImagePointCount()
        }
        GetImagePoint(g) {
            const k = this._currentAnimationFrame,
                m = this.GetWorldInfo();
            if("string" === typeof g) g = k.GetImagePointByName(g);
            else if("number" === typeof g) g = k.GetImagePointByIndex(g - 1);
            else throw new TypeError("expected string or number");
            if(!g) return [m.GetX(),
                m.GetY()
            ];
            c.copy(g.GetVec2());
            if(m.HasMesh()) {
                const [p, x] = m.GetSourceMesh().TransformPoint(c.getX(), c.getY());
                c.set(p, x)
            }
            c.offset(-k.GetOriginX(), -k.GetOriginY());
            c.scale(m.GetWidth(), m.GetHeight());
            c.rotate(m.GetAngle());
            c.offset(m.GetX(), m.GetY());
            return [c.getX(), c.getY()]
        }
        GetCollisionPolyPointCount() {
            return this.GetWorldInfo().GetTransformedCollisionPoly().pointCount()
        }
        GetCollisionPolyPoint(g) {
            g = Math.floor(g);
            const k = this.GetWorldInfo();
            var m = k.GetTransformedCollisionPoly();
            const p = m.pointCount();
            g === p && (g = 0);
            if(0 > g || g >= p) return [0, 0];
            m = m.pointsArr();
            return [m[2 * g] + k.GetX(), m[2 * g + 1] + k.GetY()]
        }
        GetDebuggerProperties() {
            const g = e.Plugins.Sprite.Acts;
            return [{
                title: "plugins.sprite.debugger.animation-properties.title",
                properties: [{
                    name: "plugins.sprite.debugger.animation-properties.current-animation",
                    value: this._currentAnimation.GetName(),
                    onedit: k => this.CallAction(g.SetAnim, k, 0)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.current-frame",
                    value: this._currentFrameIndex,
                    onedit: k => this.CallAction(g.SetAnimFrame,
                        k)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.is-playing",
                    value: this.IsAnimationPlaying(),
                    onedit: k => k ? this.CallAction(g.StartAnim, 0) : this.CallAction(g.StopAnim)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.speed",
                    value: this._currentAnimationSpeed,
                    onedit: k => this.CallAction(g.SetAnimSpeed, k)
                }, {
                    name: "plugins.sprite.debugger.animation-properties.repeats",
                    value: this._animationRepeats,
                    onedit: k => this._animationRepeats = k
                }]
            }]
        }
        SaveToJson() {
            const g = {
                a: this._currentAnimation.GetSID()
            };
            0 !== this._frameStartTime &&
                (g.fs = this._frameStartTime);
            var k = this.GetAnimationTime();
            0 !== k && (g.at = k);
            0 !== this._currentFrameIndex && (g.f = this._currentFrameIndex);
            0 !== this._currentAnimationSpeed && (g.cas = this._currentAnimationSpeed);
            1 !== this._animationRepeats && (g.ar = this._animationRepeats);
            0 !== this._currentAnimationRepeatTo && (g.rt = this._currentAnimationRepeatTo);
            this.IsAnimationPlaying() || (g.ap = this.IsAnimationPlaying());
            this.IsPlayingForwards() || (g.af = this.IsPlayingForwards());
            k = this.GetWorldInfo();
            k.IsCollisionEnabled() && (g.ce =
                k.IsCollisionEnabled());
            return g
        }
        LoadFromJson(g) {
            var k = this.GetObjectClass().GetAnimationBySID(g.a);
            k && (this._currentAnimation = k);
            this._frameStartTime = g.hasOwnProperty("fs") ? g.fs : 0;
            this._animationTimer.Set(g.hasOwnProperty("at") ? g.at : 0);
            k = g.hasOwnProperty("f") ? g.f : 0;
            this._currentFrameIndex = e.clamp(k, 0, this._currentAnimation.GetFrameCount() - 1);
            this._currentAnimationSpeed = g.hasOwnProperty("cas") ? g.cas : 0;
            this._animationRepeats = g.hasOwnProperty("ar") ? g.ar : 1;
            k = g.hasOwnProperty("rt") ? g.rt : 0;
            this._currentAnimationRepeatTo =
                e.clamp(k, 0, this._currentAnimation.GetFrameCount() - 1);
            this.SetAnimationPlaying(g.hasOwnProperty("ap") ? !!g.ap : !0);
            this.SetPlayingForwards(g.hasOwnProperty("af") ? !!g.af : !0);
            this._currentAnimationFrame = k = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
            this._UpdateCurrentTexture();
            const m = this.GetWorldInfo();
            m.SetOriginX(k.GetOriginX());
            m.SetOriginY(k.GetOriginY());
            m.SetSourceCollisionPoly(k.GetCollisionPoly());
            m.SetCollisionEnabled(!!g.ce)
        }
        GetPropertyValueByIndex(g) {
            const k = this.GetWorldInfo();
            switch(g) {
                case 3:
                    return k.IsCollisionEnabled();
                case 2:
                    return e.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1)
            }
        }
        SetPropertyValueByIndex(g, k) {
            var m = this.GetWorldInfo();
            switch(g) {
                case 3:
                    m.SetCollisionEnabled(!!k);
                    break;
                case 2:
                    this.SetAnimationPlaying(!1);
                    g = this._currentAnimation.GetFrameCount() - 1;
                    m = k = e.clamp(k, 0, g);
                    k = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                    const p = this._currentAnimation.GetFrameAt(m);
                    this._OnFrameChanged(k, p);
                    this._currentFrameIndex = e.clamp(m,
                        0, g)
            }
        }
        GetScriptInterfaceClass() {
            return self.ISpriteInstance
        }
    };
    const f = new WeakMap,
        h = new Map([
            ["current-frame", 0],
            ["beginning", 1]
        ]);
    self.ISpriteInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            f.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        getImagePointCount() {
            return f.get(this).GetImagePointCount()
        }
        getImagePointX(g) {
            if("string" !== typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)[0]
        }
        getImagePointY(g) {
            if("string" !==
                typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)[1]
        }
        getImagePoint(g) {
            if("string" !== typeof g && "number" !== typeof g) throw new TypeError("expected string or number");
            return f.get(this).GetImagePoint(g)
        }
        getPolyPointCount() {
            return f.get(this).GetCollisionPolyPointCount()
        }
        getPolyPointX(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)[0]
        }
        getPolyPointY(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)[1]
        }
        getPolyPoint(g) {
            b.RequireFiniteNumber(g);
            return f.get(this).GetCollisionPolyPoint(g)
        }
        stopAnimation() {
            f.get(this).SetAnimationPlaying(!1)
        }
        startAnimation(g = "current-frame") {
            b.RequireString(g);
            g = h.get(g);
            if("undefined" === typeof g) throw Error("invalid mode");
            f.get(this)._StartAnim(g)
        }
        setAnimation(g, k = "beginning") {
            b.RequireString(g);
            b.RequireString(k);
            k = h.get(k);
            if("undefined" === typeof k) throw Error("invalid mode");
            f.get(this)._SetAnim(g, k)
        }
        get animationName() {
            return f.get(this)._GetCurrentAnimationName()
        }
        set animationFrame(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimFrame(g)
        }
        get animationFrame() {
            return f.get(this)._GetAnimFrame()
        }
        set animationSpeed(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimSpeed(g)
        }
        get animationSpeed() {
            return f.get(this)._GetAnimSpeed()
        }
        set animationRepeatToFrame(g) {
            b.RequireFiniteNumber(g);
            f.get(this)._SetAnimRepeatToFrame(g)
        }
        get animationRepeatToFrame() {
            return f.get(this)._GetAnimRepeatToFrame()
        }
        get imageWidth() {
            return f.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return f.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect),
        a = [],
        d = [];
    let c = !1,
        f = null,
        h = !1;
    const g = new Set;

    function k(r, y, v, u) {
        const A = y.GetUID(),
            z = v.GetUID();
        A < z ? r.Set(y, v, u) : r.Set(v, y, u)
    }

    function m(r, y, v) {
        const u = y.GetUID(),
            A = v.GetUID();
        u < A ? r.Delete(y, v) : r.Delete(v, y)
    }

    function p(r, y) {
        r.DeleteEither(y)
    }

    function x(r, y, v) {
        const u = y.GetUID(),
            A = v.GetUID();
        return u < A ? r.Get(y, v) : r.Get(v, y)
    }

    function t(r, y, v, u) {
        if(!y) return !1;
        r = r.GetInstance();
        const A = 0 !== v || 0 !== u,
            z = r.GetWorldInfo(),
            C = r.GetRuntime(),
            E = C.GetCollisionEngine();
        var J = C.GetCurrentCondition();
        const F = J.GetEventBlock().IsOrBlock();
        var H = J.GetObjectClass();
        J = J.IsInverted();
        const K = y.GetCurrentSol();
        H = H !== y;
        f = y;
        c = H && !J;
        h = !1;
        let N = 0,
            S = 0,
            V = !1;
        K.IsSelectAll() ? (b.copy(z.GetBoundingBox()), b.offset(v, u), E.GetCollisionCandidates(z.GetLayer(), y, b, d), y = d) : F ? C.IsCurrentConditionFirst() && !K._GetOwnElseInstances().length && K._GetOwnInstances().length ? y = K._GetOwnInstances() : (y = K._GetOwnElseInstances(), h = !0) : y = K._GetOwnInstances();
        A && (N = z.GetX(), S = z.GetY(), z.OffsetXY(v, u),
            z.SetBboxChanged());
        for(const U of y)
            if(E.TestOverlap(r, U)) {
                V = !0;
                if(J) break;
                H && g.add(U)
            } A && (z.SetXY(N, S), z.SetBboxChanged());
        e.clearArray(d);
        return V
    }

    function q(r) {
        r = r.GetRuntime().GetCurrentEvent().IsOrBlock();
        const y = f.GetCurrentSol(),
            v = y._GetOwnInstances(),
            u = y._GetOwnElseInstances();
        y.IsSelectAll() ? (y.SetSetPicked(g), r && (e.clearArray(u), y.AddElseInstances(g, f.GetInstances()))) : r ? h ? y.TransferElseInstancesToOwn(g) : (y.AddElseInstances(g, v), y.SetSetPicked(g)) : y.SetSetPicked(g);
        f.ApplySolToContainer()
    }
    e.Plugins.Sprite._FinishCondition = function(r, y) {
        c && (y && q(r), g.clear(), f = null, c = !1)
    };
    e.Plugins.Sprite.Cnds = {
        OnCollision(r) {
            if(this._runtime.IsDebugging()) return e.Plugins.Sprite.Cnds.DebugOnCollision.call(this, r);
            if(!r) return !1;
            var y = this._runtime;
            const v = y.GetCollisionEngine(),
                u = y.GetEventSheetManager(),
                A = u.GetEventStack();
            var z = u.GetCurrentCondition();
            const C = z.GetObjectClass();
            var E = z.GetSavedDataMap(),
                J = z.GetUnsavedDataMap();
            z = A.GetCurrentStackFrame();
            const F = y.GetTickCount(),
                H = F - 1,
                K = z.GetCurrentEvent(),
                N = A.Push(K);
            let S = E.get("collmemory");
            S || (S = e.New(e.PairMap), E.set("collmemory", S));
            J.get("spriteCreatedDestroyCallback") || (J.set("spriteCreatedDestroyCallback", !0), y.Dispatcher().addEventListener("instancedestroy", ia => p(S, ia.instance)));
            E = C.GetCurrentSol();
            y = r.GetCurrentSol();
            E = E.GetInstances();
            J = null;
            for(let ia = 0; ia < E.length; ++ia) {
                const ka = E[ia];
                y.IsSelectAll() ? (v.GetCollisionCandidates(ka.GetWorldInfo().GetLayer(), r, ka.GetWorldInfo().GetBoundingBox(), a), J = a, v.AddRegisteredCollisionCandidates(ka,
                    r, J)) : J = y.GetInstances();
                for(let ya = 0; ya < J.length; ++ya) {
                    const ta = J[ya];
                    if(v.TestOverlap(ka, ta) || v.CheckRegisteredCollision(ka, ta)) {
                        var V = x(S, ka, ta),
                            U = !1,
                            X = -2;
                        "number" === typeof V && (U = !0, X = V);
                        V = !U || X < H;
                        k(S, ka, ta, F);
                        V && (V = K.GetSolModifiers(), u.PushCopySol(V), X = C.GetCurrentSol(), U = r.GetCurrentSol(), X._SetSelectAll(!1), U._SetSelectAll(!1), C === r ? (U = X._GetOwnInstances(), e.clearArray(U), U.push(ka), U.push(ta), C.ApplySolToContainer()) : (X = X._GetOwnInstances(), U = U._GetOwnInstances(), e.clearArray(X), e.clearArray(U),
                            X.push(ka), U.push(ta), C.ApplySolToContainer(), r.ApplySolToContainer()), K.Retrigger(z, N), u.PopSol(V))
                    } else m(S, ka, ta)
                }
                e.clearArray(a)
            }
            A.Pop();
            return !1
        },
        * DebugOnCollision(r) {
            if(!r) return !1;
            var y = this._runtime;
            const v = y.GetCollisionEngine(),
                u = y.GetEventSheetManager(),
                A = u.GetEventStack(),
                z = A.GetCurrentStackFrame(),
                C = y.GetTickCount(),
                E = C - 1,
                J = z.GetCurrentEvent(),
                F = A.Push(J);
            var H = u.GetCurrentCondition();
            const K = H.GetObjectClass();
            var N = H.GetSavedDataMap();
            H = H.GetUnsavedDataMap();
            let S = N.get("collmemory");
            S || (S = e.New(e.PairMap), N.set("collmemory", S));
            H.get("spriteCreatedDestroyCallback") || (H.set("spriteCreatedDestroyCallback", !0), y.Dispatcher().addEventListener("instancedestroy", ia => p(S, ia.instance)));
            N = K.GetCurrentSol();
            y = r.GetCurrentSol();
            N = N.GetInstances();
            H = null;
            for(let ia = 0; ia < N.length; ++ia) {
                const ka = N[ia];
                y.IsSelectAll() ? (v.GetCollisionCandidates(ka.GetWorldInfo().GetLayer(), r, ka.GetWorldInfo().GetBoundingBox(), a), H = a, v.AddRegisteredCollisionCandidates(ka, r, H)) : H = y.GetInstances();
                for(let ya =
                        0; ya < H.length; ++ya) {
                    const ta = H[ya];
                    if(v.TestOverlap(ka, ta) || v.CheckRegisteredCollision(ka, ta)) {
                        var V = x(S, ka, ta),
                            U = !1,
                            X = -2;
                        "number" === typeof V && (U = !0, X = V);
                        V = !U || X < E;
                        k(S, ka, ta, C);
                        V && (V = J.GetSolModifiers(), u.PushCopySol(V), X = K.GetCurrentSol(), U = r.GetCurrentSol(), X._SetSelectAll(!1), U._SetSelectAll(!1), K === r ? (U = X._GetOwnInstances(), e.clearArray(U), U.push(ka), U.push(ta), K.ApplySolToContainer()) : (X = X._GetOwnInstances(), U = U._GetOwnInstances(), e.clearArray(X), e.clearArray(U), X.push(ka), U.push(ta), K.ApplySolToContainer(),
                            r.ApplySolToContainer()), yield* J.DebugRetrigger(z, F), u.PopSol(V))
                    } else m(S, ka, ta)
                }
                e.clearArray(a)
            }
            A.Pop();
            return !1
        },
        IsOverlapping(r) {
            return t(this, r, 0, 0)
        },
        IsOverlappingOffset(r, y, v) {
            return t(this, r, y, v)
        },
        IsAnimPlaying(r) {
            return e.equalsNoCase(this._GetCurrentAnimationName(), r)
        },
        CompareFrame(r, y) {
            return e.compare(this._currentFrameIndex, r, y)
        },
        CompareAnimSpeed(r, y) {
            return e.compare(this._GetAnimSpeed(), r, y)
        },
        OnAnimFinished(r) {
            return e.equalsNoCase(this._animTriggerName, r)
        },
        OnAnyAnimFinished() {
            return !0
        },
        OnFrameChanged() {
            return !0
        },
        IsMirrored() {
            return 0 > this.GetWorldInfo().GetWidth()
        },
        IsFlipped() {
            return 0 > this.GetWorldInfo().GetHeight()
        },
        OnURLLoaded() {
            return !0
        },
        OnURLFailed() {
            return !0
        },
        IsCollisionEnabled() {
            return this.GetWorldInfo().IsCollisionEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Sprite.Acts = {
        Spawn(b, a, d, c) {
            if(b && a) {
                var [f, h] = this.GetImagePoint(d);
                if(d = this._runtime.CreateInstance(b, a, f, h, c)) {
                    c && a.SortAndAddSceneGraphInstancesByZIndex(d);
                    b.GetPlugin().IsRotatable() && (a = d.GetWorldInfo(), a.SetAngle(this.GetWorldInfo().GetAngle()), a.SetBboxChanged());
                    a = this._runtime.GetEventSheetManager();
                    a.BlockFlushingInstances(!0);
                    d._TriggerOnCreatedOnSelfAndRelated();
                    a.BlockFlushingInstances(!1);
                    c = this._runtime.GetCurrentAction().GetSavedDataMap();
                    a = !1;
                    if(!c.has("Spawn_LastExec") || c.get("Spawn_LastExec") < this._runtime.GetExecCount()) a = !0, c.set("Spawn_LastExec", this._runtime.GetExecCount());
                    if(b !== this.GetObjectClass() && (b = b.GetCurrentSol(), b._SetSelectAll(!1), b = b._GetOwnInstances(), a && e.clearArray(b), b.push(d), d.IsInContainer()))
                        for(const g of d.siblings()) d = g.GetObjectClass().GetCurrentSol(), a ? d.SetSinglePicked(g) : (d._SetSelectAll(!1), d._PushInstance(g))
                }
            }
        },
        StopAnim() {
            this.SetAnimationPlaying(!1)
        },
        StartAnim(b) {
            this._StartAnim(b)
        },
        SetAnim(b,
            a) {
            this._SetAnim(b, a)
        },
        SetAnimFrame(b) {
            this._SetAnimFrame(b)
        },
        SetAnimSpeed(b) {
            this._SetAnimSpeed(b)
        },
        SetAnimRepeatToFrame(b) {
            this._SetAnimRepeatToFrame(b)
        },
        SetMirrored(b) {
            const a = this.GetWorldInfo(),
                d = a.GetWidth();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetWidth(b), a.SetBboxChanged())
        },
        SetFlipped(b) {
            const a = this.GetWorldInfo(),
                d = a.GetHeight();
            b = Math.abs(d) * (0 === b ? -1 : 1);
            d !== b && (a.SetHeight(b), a.SetBboxChanged())
        },
        SetScale(b) {
            const a = this._currentAnimationFrame.GetImageInfo(),
                d = this.GetWorldInfo();
            var c =
                0 > d.GetWidth() ? -1 : 1;
            const f = 0 > d.GetHeight() ? -1 : 1;
            c *= a.GetWidth() * b;
            b = a.GetHeight() * b * f;
            if(d.GetWidth() !== c || d.GetHeight() !== b) d.SetSize(c, b), d.SetBboxChanged()
        },
        async LoadURL(b, a, d) {
            d = this._currentAnimationFrame.GetImageInfo();
            const c = this.GetWorldInfo(),
                f = this._runtime;
            if(d.GetURL() === b) 0 === a && (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged()), this.Trigger(e.Plugins.Sprite.Cnds.OnURLLoaded);
            else {
                var h = e.New(e.ImageInfo);
                try {
                    await h.LoadDynamicAsset(f, b);
                    if(!h.IsLoaded()) throw Error("image failed to load");
                    await h.LoadStaticTexture(f.GetRenderer(), {
                        sampling: this._runtime.GetSampling()
                    })
                } catch (g) {
                    console.error("Load image from URL failed: ", g);
                    this.Trigger(e.Plugins.Sprite.Cnds.OnURLFailed);
                    return
                }
                d.ReplaceWith(h);
                this._sdkType._UpdateAllCurrentTexture();
                this.WasReleased() || 0 !== a || (c.SetSize(d.GetWidth(), d.GetHeight()), c.SetBboxChanged());
                f.UpdateRender();
                this.WasReleased() || await this.TriggerAsync(e.Plugins.Sprite.Cnds.OnURLLoaded)
            }
        },
        SetCollisions(b) {
            this.GetWorldInfo().SetCollisionEnabled(b)
        },
        SetSolidCollisionFilter(b,
            a) {
            this.GetWorldInfo().SetSolidCollisionFilter(0 === b, a)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
}
"use strict";
self.C3.Plugins.Sprite.Exps = {
    AnimationFrame() {
        return this._currentFrameIndex
    },
    AnimationFrameCount() {
        return this._currentAnimation.GetFrameCount()
    },
    AnimationName() {
        return this._currentAnimation.GetName()
    },
    AnimationSpeed() {
        return this._GetAnimSpeed()
    },
    OriginalAnimationSpeed() {
        return this._currentAnimation.GetSpeed()
    },
    ImagePointX(e) {
        return this.GetImagePoint(e)[0]
    },
    ImagePointY(e) {
        return this.GetImagePoint(e)[1]
    },
    ImagePointCount() {
        return this.GetImagePointCount()
    },
    ImageWidth() {
        return this.GetCurrentImageInfo().GetWidth()
    },
    ImageHeight() {
        return this.GetCurrentImageInfo().GetHeight()
    },
    PolyPointXAt(e) {
        return this.GetCollisionPolyPoint(e)[0]
    },
    PolyPointYAt(e) {
        return this.GetCollisionPolyPoint(e)[1]
    },
    PolyPointCount() {
        return this.GetCollisionPolyPointCount()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Keyboard = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Keyboard.Type = class extends e.SDKTypeBase {
        constructor(d) {
            super(d)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IKeyboardObjectType
        }
    };
    let b = null;

    function a() {
        return b.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.IKeyboardObjectType = class extends self.IObjectClass {
        constructor(d) {
            super(d);
            b = d;
            d.GetRuntime()._GetCommonScriptInterfaces().keyboard = this
        }
        isKeyDown(d) {
            const c = a();
            if("string" === typeof d) return c.IsKeyDown(d);
            if("number" ===
                typeof d) return c.IsKeyCodeDown(d);
            throw new TypeError("expected string or number");
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Keyboard.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b);
            this._keysDownByString = new Set;
            this._keysDownByWhich = new Set;
            this._triggerWhich = 0;
            this._triggerTypedKey = this._triggerString = "";
            b = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "keydown", d => this._OnKeyDown(d.data)), e.Disposable.From(b, "keyup", d => this._OnKeyUp(d.data)), e.Disposable.From(b, "window-blur", () => this._OnWindowOrKeyboardBlur()),
                e.Disposable.From(b, "keyboard-blur", () => this._OnWindowOrKeyboardBlur()))
        }
        Release() {
            super.Release()
        }
        _OnKeyDown(b) {
            const a = b.which,
                d = b.code || a.toString();
            b = b.key;
            this._keysDownByString.has(d) || (this._keysDownByString.add(d), this._keysDownByWhich.add(a), this._triggerString = d, this._triggerWhich = a, this._triggerTypedKey = b, this.Trigger(e.Plugins.Keyboard.Cnds.OnAnyKey), this.Trigger(e.Plugins.Keyboard.Cnds.OnKey), this.Trigger(e.Plugins.Keyboard.Cnds.OnLeftRightKeyPressed), this.Trigger(e.Plugins.Keyboard.Cnds.OnKeyCode))
        }
        _OnKeyUp(b) {
            const a =
                b.which,
                d = b.code || a.toString();
            b = b.key;
            this._keysDownByString.delete(d);
            this._keysDownByWhich.delete(a);
            this._triggerString = d;
            this._triggerWhich = a;
            this._triggerTypedKey = b;
            this.Trigger(e.Plugins.Keyboard.Cnds.OnAnyKeyReleased);
            this.Trigger(e.Plugins.Keyboard.Cnds.OnKeyReleased);
            this.Trigger(e.Plugins.Keyboard.Cnds.OnLeftRightKeyReleased);
            this.Trigger(e.Plugins.Keyboard.Cnds.OnKeyCodeReleased)
        }
        _OnWindowOrKeyboardBlur() {
            for(const b of this._keysDownByWhich) this._keysDownByWhich.delete(b), this._triggerWhich =
                b, this.Trigger(e.Plugins.Keyboard.Cnds.OnAnyKeyReleased), this.Trigger(e.Plugins.Keyboard.Cnds.OnKeyReleased), this.Trigger(e.Plugins.Keyboard.Cnds.OnKeyCodeReleased);
            this._keysDownByString.clear()
        }
        IsKeyDown(b) {
            return this._keysDownByString.has(b)
        }
        IsKeyCodeDown(b) {
            return this._keysDownByWhich.has(b)
        }
        SaveToJson() {
            return {
                tk: this._triggerWhich,
                tkk: this._triggerTypedKey
            }
        }
        LoadFromJson(b) {
            this._triggerWhich = b.tk;
            b.hasOwnProperty("tkk") && (this._triggerTypedKey = b.tkk)
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.keyboard.name",
                properties: [{
                    name: "plugins.keyboard.debugger.last-key-code",
                    value: this._triggerWhich
                }, {
                    name: "plugins.keyboard.debugger.last-key-string",
                    value: e.Plugins.Keyboard.Exps.StringFromKeyCode(this._triggerWhich)
                }, {
                    name: "plugins.keyboard.debugger.last-typed-key",
                    value: this._triggerTypedKey
                }]
            }]
        }
    }
} {
    "use strict";
    const e = "ShiftLeft ShiftRight ControlLeft ControlRight AltLeft AltRight MetaLeft MetaRight".split(" ");
    self.C3.Plugins.Keyboard.Cnds = {
        IsKeyDown(b) {
            return this._keysDownByWhich.has(b)
        },
        OnKey(b) {
            return this._triggerWhich === b
        },
        OnAnyKey() {
            return !0
        },
        OnAnyKeyReleased() {
            return !0
        },
        OnKeyReleased(b) {
            return this._triggerWhich === b
        },
        IsKeyCodeDown(b) {
            b = Math.floor(b);
            return this._keysDownByWhich.has(b)
        },
        OnKeyCode(b) {
            return this._triggerWhich === b
        },
        OnKeyCodeReleased(b) {
            return this._triggerWhich === b
        },
        OnLeftRightKeyPressed(b) {
            return this._triggerString === e[b]
        },
        OnLeftRightKeyReleased(b) {
            return this._triggerString === e[b]
        },
        IsLeftRightKeyDown(b) {
            return this._keysDownByString.has(e[b])
        }
    }
}
"use strict";
self.C3.Plugins.Keyboard.Acts = {}; {
    "use strict";

    function e(b) {
        b = Math.floor(b);
        switch(b) {
            case 8:
                return "backspace";
            case 9:
                return "tab";
            case 13:
                return "enter";
            case 16:
                return "shift";
            case 17:
                return "control";
            case 18:
                return "alt";
            case 19:
                return "pause";
            case 20:
                return "capslock";
            case 27:
                return "esc";
            case 33:
                return "pageup";
            case 34:
                return "pagedown";
            case 35:
                return "end";
            case 36:
                return "home";
            case 37:
                return "\u2190";
            case 38:
                return "\u2191";
            case 39:
                return "\u2192";
            case 40:
                return "\u2193";
            case 45:
                return "insert";
            case 46:
                return "del";
            case 91:
                return "left window key";
            case 92:
                return "right window key";
            case 93:
                return "select";
            case 96:
                return "numpad 0";
            case 97:
                return "numpad 1";
            case 98:
                return "numpad 2";
            case 99:
                return "numpad 3";
            case 100:
                return "numpad 4";
            case 101:
                return "numpad 5";
            case 102:
                return "numpad 6";
            case 103:
                return "numpad 7";
            case 104:
                return "numpad 8";
            case 105:
                return "numpad 9";
            case 106:
                return "numpad *";
            case 107:
                return "numpad +";
            case 109:
                return "numpad -";
            case 110:
                return "numpad .";
            case 111:
                return "numpad /";
            case 112:
                return "F1";
            case 113:
                return "F2";
            case 114:
                return "F3";
            case 115:
                return "F4";
            case 116:
                return "F5";
            case 117:
                return "F6";
            case 118:
                return "F7";
            case 119:
                return "F8";
            case 120:
                return "F9";
            case 121:
                return "F10";
            case 122:
                return "F11";
            case 123:
                return "F12";
            case 144:
                return "numlock";
            case 145:
                return "scroll lock";
            case 186:
                return ";";
            case 187:
                return "=";
            case 188:
                return ",";
            case 189:
                return "-";
            case 190:
                return ".";
            case 191:
                return "/";
            case 192:
                return "'";
            case 219:
                return "[";
            case 220:
                return "\\";
            case 221:
                return "]";
            case 222:
                return "#";
            case 223:
                return "`";
            default:
                return String.fromCharCode(b)
        }
    }
    self.C3.Plugins.Keyboard.Exps = {
        LastKeyCode() {
            return this._triggerWhich
        },
        StringFromKeyCode(b) {
            return e(b)
        },
        TypedKey() {
            return this._triggerTypedKey
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio.Type = class extends e.SDKTypeBase {
        constructor(a) {
            super(a)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IAudioObjectType
        }
    };

    function b() {
        if(self.C3Audio_DOMInterface) return self.C3Audio_DOMInterface;
        throw Error("audio scripting API cannot be used here - make sure the project is using DOM mode, not worker mode");
    }
    self.IAudioObjectType = class extends self.IObjectClass {
        constructor(a) {
            super(a)
        }
        get audioContext() {
            return b().GetAudioContext()
        }
        get destinationNode() {
            return b().GetDestinationNode()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = ["interactive", "balanced", "playback"];
    e.Plugins.Audio.Instance = class extends e.SDKInstanceBase {
        constructor(a, d) {
            super(a, "audio");
            this._nextPlayTime = 0;
            this._triggerTag = "";
            this._saveLoadMode = this._timeScaleMode = 0;
            this._playInBackground = !1;
            this._distanceModel = this._panningModel = 1;
            this._listenerX = this._runtime.GetViewportWidth() / 2;
            this._listenerY = this._runtime.GetViewportHeight() / 2;
            this._listenerZ = -600;
            this._referenceDistance = 600;
            this._maxDistance = 1E4;
            this._rolloffFactor =
                1;
            this._listenerInst = null;
            this._loadListenerUid = -1;
            this._masterVolume = 1;
            this._isSilent = !1;
            this._sampleRate = 0;
            this._effectCount = new Map;
            this._preloadCount = this._preloadTotal = 0;
            this._remoteUrls = new Map;
            a = "interactive";
            d && (this._timeScaleMode = d[0], this._saveLoadMode = d[1], this._playInBackground = d[2], a = b[d[3]], this._panningModel = d[4], this._distanceModel = d[5], this._listenerZ = -d[6], this._referenceDistance = d[7], this._maxDistance = d[8], this._rolloffFactor = d[9]);
            this._lastAIState = [];
            this._lastFxState = [];
            this._lastAnalysersData = [];
            this.AddDOMMessageHandlers([
                ["state", c => this._OnUpdateState(c)],
                ["fxstate", c => this._OnUpdateFxState(c)],
                ["trigger", c => this._OnTrigger(c)]
            ]);
            d = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(d, "instancedestroy", c => this._OnInstanceDestroyed(c.instance)), e.Disposable.From(d, "afterload", () => this._OnAfterLoad()), e.Disposable.From(d, "suspend", () => this._OnSuspend()), e.Disposable.From(d, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("create-audio-context", {
                preloadList: this._runtime.GetAssetManager().GetAudioToPreload().map(c => ({
                    originalUrl: c.originalUrl,
                    url: c.url,
                    type: c.type,
                    fileSize: c.fileSize
                })),
                isiOSCordova: this._runtime.IsiOSCordova(),
                timeScaleMode: this._timeScaleMode,
                latencyHint: a,
                panningModel: this._panningModel,
                distanceModel: this._distanceModel,
                refDistance: this._referenceDistance,
                maxDistance: this._maxDistance,
                rolloffFactor: this._rolloffFactor,
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ]
            }).then(c => {
                this._sampleRate = c.sampleRate
            }));
            this._StartTicking()
        }
        Release() {
            this._listenerInst = null;
            super.Release()
        }
        _OnInstanceDestroyed(a) {
            this._listenerInst === a && (this._listenerInst = null)
        }
        DbToLinearNoCap(a) {
            return Math.pow(10, a / 20)
        }
        DbToLinear(a) {
            a = this.DbToLinearNoCap(a);
            return isFinite(a) ? Math.max(Math.min(a, 1), 0) : 0
        }
        LinearToDbNoCap(a) {
            return Math.log(a) / Math.log(10) * 20
        }
        LinearToDb(a) {
            return this.LinearToDbNoCap(Math.max(Math.min(a, 1), 0))
        }
        _OnSuspend() {
            this._playInBackground || this.PostToDOM("set-suspended", {
                isSuspended: !0
            })
        }
        _OnResume() {
            this._playInBackground ||
                this.PostToDOM("set-suspended", {
                    isSuspended: !1
                })
        }
        _OnUpdateState(a) {
            const d = a.tickCount,
                c = this._lastAIState.filter(f => f.hasOwnProperty("placeholder") && (f.placeholder > d || -1 === f.placeholder));
            this._lastAIState = a.audioInstances;
            this._lastAnalysersData = a.analysers;
            0 < c.length && e.appendArray(this._lastAIState, c)
        }
        _OnUpdateFxState(a) {
            this._lastFxState = a.fxstate
        }
        _GetFirstAudioStateByTag(a) {
            for(const d of this._lastAIState)
                if(e.equalsNoCase(d.tag, a)) return d;
            return null
        }
        _IsTagPlaying(a) {
            return this._lastAIState.some(d =>
                e.equalsNoCase(a, d.tag) && d.isPlaying)
        }
        _MaybeMarkAsPlaying(a, d, c, f) {
            if(this._IsTagPlaying(a)) return null;
            a = {
                tag: a,
                duration: 0,
                volume: f,
                isPlaying: !0,
                playbackTime: 0,
                playbackRate: 1,
                uid: -1,
                bufferOriginalUrl: "",
                bufferUrl: "",
                bufferType: "",
                isMusic: d,
                isLooping: c,
                isMuted: !1,
                resumePosition: 0,
                pan: null,
                placeholder: -1
            };
            this._lastAIState.push(a);
            return a
        }
        async _OnTrigger(a) {
            const d = a.type;
            this._triggerTag = a.tag;
            a = a.aiid;
            if("ended" === d) {
                for(const c of this._lastAIState)
                    if(c.aiid === a) {
                        c.isPlaying = !1;
                        break
                    } await this.TriggerAsync(e.Plugins.Audio.Cnds.OnEnded)
            } else "fade-ended" ===
                d && await this.TriggerAsync(e.Plugins.Audio.Cnds.OnFadeEnded)
        }
        Tick() {
            const a = {
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                instPans: this.GetInstancePans(),
                tickCount: this._runtime.GetTickCountNoSave()
            };
            if(this._listenerInst) {
                const d = this._listenerInst.GetWorldInfo();
                this._listenerX = d.GetX();
                this._listenerY = d.GetY();
                a.listenerPos = [this._listenerX, this._listenerY, this._listenerZ]
            }
            this.PostToDOM("tick", a)
        }
        rotatePtAround(a, d, c, f, h) {
            if(0 === c) return [a, d];
            const g = Math.sin(c);
            c = Math.cos(c);
            a -= f;
            d -= h;
            const k = a * g;
            a = a * c - d * g;
            return [a + f, d * c + k + h]
        }
        GetInstancePans() {
            return this._lastAIState.filter(a => -1 !== a.uid).map(a => this._runtime.GetInstanceByUID(a.uid)).filter(a => a).map(a => {
                const d = a.GetWorldInfo(),
                    c = d.GetLayer().GetAngle(),
                    [f, h] = this.rotatePtAround(d.GetX(), d.GetY(), -c, this._listenerX, this._listenerY);
                return {
                    uid: a.GetUID(),
                    x: f,
                    y: h,
                    angle: d.GetAngle() - c
                }
            })
        }
        GetAnalyserData(a, d) {
            for(const c of this._lastAnalysersData)
                if(c.index === d && e.equalsNoCase(c.tag, a)) return c;
            return null
        }
        _IncrementEffectCount(a) {
            this._effectCount.set(a,
                (this._effectCount.get(a) || 0) + 1)
        }
        _ShouldSave(a) {
            return a.hasOwnProperty("placeholder") || 3 === this._saveLoadMode ? !1 : a.isMusic && 1 === this._saveLoadMode ? !1 : a.isMusic || 2 !== this._saveLoadMode ? !0 : !1
        }
        SaveToJson() {
            return {
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                listenerZ: this._listenerZ,
                listenerUid: this._listenerInst ? this._listenerInst.GetUID() : -1,
                remoteUrls: [...this._remoteUrls.entries()],
                playing: this._lastAIState.filter(a => this._ShouldSave(a)),
                effects: this._lastFxState,
                analysers: this._lastAnalysersData
            }
        }
        LoadFromJson(a) {
            this._isSilent =
                a.isSilent;
            this._masterVolume = a.masterVolume;
            this._listenerZ = a.listenerZ;
            this._listenerInst = null;
            this._loadListenerUid = a.listenerUid;
            this._remoteUrls.clear();
            if(a.remoteUrls)
                for(const [d, c] of a.remoteUrls) this._remoteUrls.set(d, c);
            this._lastAIState = a.playing;
            this._lastFxState = a.effects;
            this._lastAnalysersData = a.analysers
        }
        _OnAfterLoad() {
            if(-1 !== this._loadListenerUid && (this._listenerInst = this._runtime.GetInstanceByUID(this._loadListenerUid), this._loadListenerUid = -1, this._listenerInst)) {
                var a = this._listenerInst.GetWorldInfo();
                this._listenerX = a.GetX();
                this._listenerY = a.GetY()
            }
            for(var d of this._lastAIState)(a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d.bufferOriginalUrl)) ? (d.bufferUrl = a.url, d.bufferType = a.type) : d.bufferUrl = null;
            for(const c of Object.values(this._lastFxState))
                for(const f of c) f.hasOwnProperty("bufferOriginalUrl") && (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(f.bufferOriginalUrl)) && (f.bufferUrl = d.url, f.bufferType = d.type);
            this.PostToDOM("load-state", {
                saveLoadMode: this._saveLoadMode,
                timeScale: this._runtime.GetTimeScale(),
                gameTime: this._runtime.GetGameTimeRaw(),
                listenerPos: [this._listenerX, this._listenerY, this._listenerZ],
                isSilent: this._isSilent,
                masterVolume: this._masterVolume,
                playing: this._lastAIState.filter(c => null !== c.bufferUrl),
                effects: this._lastFxState
            })
        }
        GetDebuggerProperties() {
            const a = [];
            for(const [d, c] of Object.entries(this._lastFxState)) a.push({
                name: "$" + d,
                value: c.map(f => f.type).join(", ")
            });
            return [{
                title: "plugins.audio.debugger.tag-effects",
                properties: a
            }, {
                title: "plugins.audio.debugger.currently-playing",
                properties: [{
                    name: "plugins.audio.debugger.currently-playing-count",
                    value: this._lastAIState.length
                }, ...this._lastAIState.map((d, c) => ({
                    name: "$#" + c,
                    value: `${d.bufferOriginalUrl} ("${d.tag}") ${Math.round(10*d.playbackTime)/10} / ${Math.round(10*d.duration)/10}`
                }))]
            }]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Audio.Cnds = {
        OnEnded(b) {
            return e.equalsNoCase(this._triggerTag, b)
        },
        OnFadeEnded(b) {
            return e.equalsNoCase(this._triggerTag, b)
        },
        PreloadsComplete() {
            return this._preloadCount === this._preloadTotal
        },
        AdvancedAudioSupported() {
            return !0
        },
        IsSilent() {
            return this._isSilent
        },
        IsAnyPlaying() {
            for(const b of this._lastAIState)
                if(b.isPlaying) return !0;
            return !1
        },
        IsTagPlaying(b) {
            return this._IsTagPlaying(b)
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = "lowpass highpass bandpass lowshelf highshelf peaking notch allpass".split(" ");
    e.Plugins.Audio.Acts = {
        async Play(a, d, c, f) {
            if(!this._isSilent) {
                var h = a[1],
                    g = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if(g) {
                    var k = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var m = this._MaybeMarkAsPlaying(f.toLowerCase(), h, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: g.url,
                            type: g.type,
                            isMusic: h,
                            tag: f.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: k,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        m && (m.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPosition(a, d, c, f, h, g, k, m, p, x) {
            if(!this._isSilent) {
                var t = a[1],
                    q = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if(q) {
                    var r = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var y = this._MaybeMarkAsPlaying(x.toLowerCase(), t, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: q.url,
                            type: q.type,
                            isMusic: t,
                            tag: x.toLowerCase(),
                            isLooping: 0 !==
                                d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: r,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: f,
                                y: h,
                                angle: e.toRadians(g),
                                innerAngle: e.toRadians(k),
                                outerAngle: e.toRadians(m),
                                outerGain: this.DbToLinear(p)
                            }
                        })
                    } finally {
                        y && (y.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObject(a, d, c, f, h, g, k, m) {
            if(!this._isSilent && f && (f = f.GetFirstPicked()) && f.GetWorldInfo()) {
                var p = f.GetWorldInfo(),
                    x = p.GetLayer().GetAngle(),
                    [t, q] = this.rotatePtAround(p.GetX(), p.GetY(), -x, this._listenerX, this._listenerY),
                    r = a[1],
                    y = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
                if(y) {
                    var v = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var u = this._MaybeMarkAsPlaying(m.toLowerCase(), r, 0 !== d, this.DbToLinear(c));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: a[0],
                            url: y.url,
                            type: y.type,
                            isMusic: r,
                            tag: m.toLowerCase(),
                            isLooping: 0 !== d,
                            vol: this.DbToLinear(c),
                            pos: 0,
                            off: v,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: t,
                                y: q,
                                angle: p.GetAngle() - x,
                                innerAngle: e.toRadians(h),
                                outerAngle: e.toRadians(g),
                                outerGain: this.DbToLinear(k),
                                uid: f.GetUID()
                            }
                        })
                    } finally {
                        u && (u.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayByName(a, d, c, f, h) {
            if(!this._isSilent) {
                a = 1 === a;
                var g = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if(g) {
                    var k = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var m = this._MaybeMarkAsPlaying(h.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: g.url,
                            type: g.type,
                            isMusic: a,
                            tag: h.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: k,
                            trueClock: !!self.C3_GetAudioContextCurrentTime
                        })
                    } finally {
                        m && (m.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtPositionByName(a, d, c, f, h, g, k, m, p, x, t) {
            if(!this._isSilent) {
                a = 1 === a;
                var q = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if(q) {
                    var r = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var y = this._MaybeMarkAsPlaying(t.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: q.url,
                            type: q.type,
                            isMusic: a,
                            tag: t.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: r,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: h,
                                y: g,
                                angle: e.toRadians(k),
                                innerAngle: e.toRadians(m),
                                outerAngle: e.toRadians(p),
                                outerGain: this.DbToLinear(x)
                            }
                        })
                    } finally {
                        y && (y.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        async PlayAtObjectByName(a, d, c, f, h, g, k, m, p) {
            if(!this._isSilent && !this._isSilent && h && (h = h.GetFirstPicked()) && h.GetWorldInfo()) {
                var x = h.GetWorldInfo(),
                    t = x.GetLayer().GetAngle(),
                    [q, r] = this.rotatePtAround(x.GetX(),
                        x.GetY(), -t, this._listenerX, this._listenerY);
                a = 1 === a;
                var y = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
                if(y) {
                    var v = this._nextPlayTime;
                    this._nextPlayTime = 0;
                    var u = this._MaybeMarkAsPlaying(p.toLowerCase(), a, 0 !== c, this.DbToLinear(f));
                    try {
                        await this.PostToDOMAsync("play", {
                            originalUrl: d,
                            url: y.url,
                            type: y.type,
                            isMusic: a,
                            tag: p.toLowerCase(),
                            isLooping: 0 !== c,
                            vol: this.DbToLinear(f),
                            pos: 0,
                            off: v,
                            trueClock: !!self.C3_GetAudioContextCurrentTime,
                            panning: {
                                x: q,
                                y: r,
                                angle: x.GetAngle() - t,
                                innerAngle: e.toRadians(g),
                                outerAngle: e.toRadians(k),
                                outerGain: this.DbToLinear(m),
                                uid: h.GetUID()
                            }
                        })
                    } finally {
                        u && (u.placeholder = this._runtime.GetTickCountNoSave())
                    }
                }
            }
        },
        SetLooping(a, d) {
            this.PostToDOM("set-looping", {
                tag: a.toLowerCase(),
                isLooping: 0 === d
            })
        },
        SetMuted(a, d) {
            this.PostToDOM("set-muted", {
                tag: a.toLowerCase(),
                isMuted: 0 === d
            })
        },
        SetVolume(a, d) {
            this.PostToDOM("set-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d)
            })
        },
        FadeVolume(a, d, c, f) {
            this.PostToDOM("fade-volume", {
                tag: a.toLowerCase(),
                vol: this.DbToLinear(d),
                duration: c,
                stopOnEnd: 0 === f
            })
        },
        async Preload(a) {
            const d = a[1],
                c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0]);
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: a[0],
                url: c.url,
                type: c.type,
                isMusic: d
            }), this._preloadCount++)
        },
        async PreloadByName(a, d) {
            a = 1 === a;
            const c = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase());
            c && (this._preloadTotal++, await this.PostToDOMAsync("preload", {
                originalUrl: d,
                url: c.url,
                type: c.type,
                isMusic: a
            }), this._preloadCount++)
        },
        SetPlaybackRate(a, d) {
            this.PostToDOM("set-playback-rate", {
                tag: a.toLowerCase(),
                rate: Math.max(d, 0)
            })
        },
        Stop(a) {
            this.PostToDOM("stop", {
                tag: a.toLowerCase()
            })
        },
        StopAll() {
            this.PostToDOM("stop-all")
        },
        SetPaused(a, d) {
            this.PostToDOM("set-paused", {
                tag: a.toLowerCase(),
                paused: 0 === d
            })
        },
        Seek(a, d) {
            this.PostToDOM("seek", {
                tag: a.toLowerCase(),
                pos: d
            })
        },
        SetSilent(a) {
            2 === a && (a = this._isSilent ? 1 : 0);
            a = 0 === a;
            this._isSilent !== a && (this._isSilent = a, this.PostToDOM("set-silent", {
                isSilent: a
            }))
        },
        SetMasterVolume(a) {
            a = this.DbToLinear(a);
            this._masterVolume !== a && (this._masterVolume = a, this.PostToDOM("set-master-volume", {
                vol: a
            }))
        },
        AddFilterEffect(a, d, c, f, h, g, k) {
            a = a.toLowerCase();
            d = b[d];
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "filter",
                tag: a,
                params: [d, c, f, h, g, e.clamp(k / 100, 0, 1)]
            })
        },
        AddDelayEffect(a, d, c, f) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "delay",
                tag: a,
                params: [d, this.DbToLinear(c), e.clamp(f / 100, 0, 1)]
            })
        },
        AddFlangerEffect(a, d,
            c, f, h, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "flanger",
                tag: a,
                params: [d / 1E3, c / 1E3, f, h / 100, e.clamp(g / 100, 0, 1)]
            })
        },
        AddPhaserEffect(a, d, c, f, h, g, k) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "phaser",
                tag: a,
                params: [d, c, f, h, g, e.clamp(k / 100, 0, 1)]
            })
        },
        AddConvolutionEffect(a, d, c, f) {
            a = a.toLowerCase();
            const h = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d[0]);
            h && (this._IncrementEffectCount(a), this.PostToDOM("add-effect", {
                type: "convolution",
                tag: a,
                bufferOriginalUrl: d[0],
                bufferUrl: h.url,
                bufferType: h.type,
                params: [0 === c, e.clamp(f / 100, 0, 1)]
            }))
        },
        AddGainEffect(a, d) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [this.DbToLinear(d)]
            })
        },
        AddMuteEffect(a) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "gain",
                tag: a,
                params: [0]
            })
        },
        AddTremoloEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "tremolo",
                tag: a,
                params: [d, e.clamp(c / 100, 0, 1)]
            })
        },
        AddRingModEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "ringmod",
                tag: a,
                params: [d, e.clamp(c / 100, 0, 1)]
            })
        },
        AddDistortionEffect(a, d, c, f, h, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "distortion",
                tag: a,
                params: [this.DbToLinearNoCap(d), this.DbToLinearNoCap(c), f, this.DbToLinearNoCap(h), e.clamp(g / 100, 0, 1)]
            })
        },
        AddCompressorEffect(a, d, c, f, h, g) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "compressor",
                tag: a,
                params: [d, c, f, h / 1E3, g / 1E3]
            })
        },
        AddAnalyserEffect(a, d, c) {
            a = a.toLowerCase();
            this._IncrementEffectCount(a);
            this.PostToDOM("add-effect", {
                type: "analyser",
                tag: a,
                params: [d, c]
            })
        },
        RemoveEffects(a) {
            a = a.toLowerCase();
            this._effectCount.set(a, 0);
            this.PostToDOM("remove-effects", {
                tag: a
            });
            this._lastFxState = {}
        },
        SetEffectParameter(a, d, c, f, h, g) {
            this.PostToDOM("set-effect-param", {
                tag: a.toLowerCase(),
                index: Math.floor(d),
                param: c,
                value: f,
                ramp: h,
                time: g
            })
        },
        SetListenerObject(a) {
            a &&
                (a = a.GetFirstPicked()) && a.GetWorldInfo() && (this._listenerInst = a)
        },
        SetListenerZ(a) {
            this._listenerZ = a
        },
        ScheduleNextPlay(a) {
            this._nextPlayTime = Math.max(a, 0)
        },
        UnloadAudio(a) {
            const d = a[1];
            (a = this._runtime.GetAssetManager().GetProjectAudioFileUrl(a[0])) && this.PostToDOM("unload", {
                url: a.url,
                type: a.type,
                isMusic: d
            })
        },
        UnloadAudioByName(a, d) {
            a = 1 === a;
            (d = this._runtime.GetAssetManager().GetProjectAudioFileUrl(d) || this._remoteUrls.get(d.toLowerCase())) && this.PostToDOM("unload", {
                url: d.url,
                type: d.type,
                isMusic: a
            })
        },
        UnloadAll() {
            this.PostToDOM("unload-all")
        },
        AddRemoteURL(a, d, c) {
            this._remoteUrls.set(c.toLowerCase(), {
                url: a,
                type: d
            })
        }
    }
}
"use strict";
self.C3.Plugins.Audio.Exps = {
    Duration(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.duration : 0
    },
    PlaybackTime(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.playbackTime : 0
    },
    PlaybackRate(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? e.playbackRate : 0
    },
    Volume(e) {
        return (e = this._GetFirstAudioStateByTag(e)) ? this.LinearToDb(e.volume) : 0
    },
    MasterVolume() {
        return this.LinearToDb(this._masterVolume)
    },
    EffectCount(e) {
        return this._effectCount.get(e.toLowerCase()) || 0
    },
    AnalyserFreqBinCount(e, b) {
        return (e = this.GetAnalyserData(e,
            Math.floor(b))) ? e.binCount : 0
    },
    AnalyserFreqBinAt(e, b, a) {
        e = this.GetAnalyserData(e, Math.floor(b));
        if(!e) return 0;
        a = Math.floor(a);
        return 0 > a || a >= e.binCount ? 0 : e.freqBins[a]
    },
    AnalyserPeakLevel(e, b) {
        return (e = this.GetAnalyserData(e, Math.floor(b))) ? e.peak : 0
    },
    AnalyserRMSLevel(e, b) {
        return (e = this.GetAnalyserData(e, Math.floor(b))) ? e.rms : 0
    },
    SampleRate() {
        return this._sampleRate
    },
    CurrentTime() {
        return self.C3_GetAudioContextCurrentTime ? self.C3_GetAudioContextCurrentTime() : performance.now() / 1E3
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a) {
        switch(a) {
            case 0:
                return "clamp-to-edge";
            case 2:
                return "mirror-repeat"
        }
        return "repeat"
    }
    e.Plugins.TiledBg.Type = class extends e.SDKTypeBase {
        constructor(a, d) {
            super(a);
            this._wrapY = this._wrapX = "repeat";
            d && (this._wrapX = b(d[0]), this._wrapY = b(d[1]))
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(a) {
            return this.GetImageInfo().LoadStaticTexture(a, {
                sampling: this._runtime.GetSampling(),
                wrapX: this._wrapX,
                wrapY: this._wrapY
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = e.New(e.Rect),
        d = e.New(e.Quad),
        c = e.New(e.Rect),
        f = e.New(e.Quad);
    e.Plugins.TiledBg.Instance = class extends e.SDKWorldInstanceBase {
        constructor(g, k) {
            super(g);
            this._imageOffsetY = this._imageOffsetX = 0;
            this._imageScaleY = this._imageScaleX = 1;
            this._imageAngle = 0;
            this._ownImageInfo = null;
            k && (this.GetWorldInfo().SetVisible(!!k[0]), this._imageOffsetX = k[4], this._imageOffsetY = k[5], this._imageScaleX = k[6], this._imageScaleY = k[7], this._imageAngle = e.toRadians(k[8]))
        }
        Release() {
            this._ReleaseOwnImage();
            super.Release()
        }
        _ReleaseOwnImage() {
            this._ownImageInfo && (this._ownImageInfo.Release(), this._ownImageInfo = null)
        }
        CalculateTextureCoordsFor3DFace(g, k, m) {
            var p = this.GetCurrentImageInfo();
            const x = p.GetWidth();
            p = p.GetHeight();
            const t = this._imageOffsetX / x,
                q = this._imageOffsetY / p,
                r = this._imageAngle;
            c.set(0, 0, g / (x * this._imageScaleX), k / (p * this._imageScaleY));
            c.offset(-t, -q);
            0 === r ? m.setFromRect(c) : m.setFromRotatedRect(c, -r)
        }
        Draw(g) {
            var k = this.GetCurrentImageInfo(),
                m = k.GetTexture();
            if(null !== m) {
                g.SetTexture(m);
                m = k.GetWidth();
                k = k.GetHeight();
                var p = this._imageOffsetX / m,
                    x = this._imageOffsetY / k,
                    t = this.GetWorldInfo();
                c.set(0, 0, t.GetWidth() / (m * this._imageScaleX), t.GetHeight() / (k * this._imageScaleY));
                c.offset(-p, -x);
                t.HasMesh() ? this._DrawMesh(t, g) : this._DrawStandard(t, g)
            }
        }
        _DrawStandard(g, k) {
            let m = g.GetBoundingQuad();
            this._runtime.IsPixelRoundingEnabled() && (m = g.PixelRoundQuad(m));
            0 === this._imageAngle ? k.Quad3(m, c) : (f.setFromRotatedRect(c, -this._imageAngle), k.Quad4(m, f))
        }
        _DrawMesh(g, k) {
            const m = g.GetTransformedMesh();
            if(g.IsMeshChanged()) {
                g.CalculateBbox(a, d, !1);
                let p = d;
                this._runtime.IsPixelRoundingEnabled() && (p = g.PixelRoundQuad(p));
                let x = c;
                0 !== this._imageAngle && (f.setFromRotatedRect(c, -this._imageAngle), x = f);
                m.CalculateTransformedMesh(g.GetSourceMesh(), p, x);
                g.SetMeshChanged(!1)
            }
            m.Draw(k)
        }
        GetCurrentImageInfo() {
            return this._ownImageInfo || this._objectClass.GetImageInfo()
        }
        IsOriginalSizeKnown() {
            return !0
        }
        GetTexture() {
            return this.GetCurrentImageInfo().GetTexture()
        }
        _SetMeshChanged() {
            this.GetWorldInfo().SetMeshChanged(!0)
        }
        _SetImageOffsetX(g) {
            this._imageOffsetX !==
                g && (this._imageOffsetX = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageOffsetX() {
            return this._imageOffsetX
        }
        _SetImageOffsetY(g) {
            this._imageOffsetY !== g && (this._imageOffsetY = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageOffsetY() {
            return this._imageOffsetY
        }
        _SetImageScaleX(g) {
            this._imageScaleX !== g && (this._imageScaleX = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageScaleX() {
            return this._imageScaleX
        }
        _SetImageScaleY(g) {
            this._imageScaleY !== g && (this._imageScaleY =
                g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageScaleY() {
            return this._imageScaleY
        }
        _SetImageAngle(g) {
            this._imageAngle !== g && (this._imageAngle = g, this._runtime.UpdateRender(), this._SetMeshChanged())
        }
        _GetImageAngle() {
            return this._imageAngle
        }
        GetPropertyValueByIndex(g) {
            switch(g) {
                case 4:
                    return this._GetImageOffsetX();
                case 5:
                    return this._GetImageOffsetY();
                case 6:
                    return this._GetImageScaleX();
                case 7:
                    return this._GetImageScaleY();
                case 8:
                    return this._GetImageAngle()
            }
        }
        SetPropertyValueByIndex(g,
            k) {
            switch(g) {
                case 4:
                    this._SetImageOffsetX(k);
                    break;
                case 5:
                    this._SetImageOffsetY(k);
                    break;
                case 6:
                    this._SetImageScaleX(k);
                    break;
                case 7:
                    this._SetImageScaleY(k);
                    break;
                case 8:
                    this._SetImageAngle(k)
            }
        }
        GetScriptInterfaceClass() {
            return self.ITiledBackgroundInstance
        }
    };
    const h = new WeakMap;
    self.ITiledBackgroundInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            h.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        set imageOffsetX(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageOffsetX(g)
        }
        get imageOffsetX() {
            return h.get(this)._GetImageOffsetX()
        }
        set imageOffsetY(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageOffsetY(g)
        }
        get imageOffsetY() {
            return h.get(this)._GetImageOffsetY()
        }
        set imageScaleX(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageScaleX(g)
        }
        get imageScaleX() {
            return h.get(this)._GetImageScaleX()
        }
        set imageScaleY(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageScaleY(g)
        }
        get imageScaleY() {
            return h.get(this)._GetImageScaleY()
        }
        set imageAngle(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageAngle(g)
        }
        get imageAngle() {
            return h.get(this)._GetImageAngle()
        }
        set imageAngleDegrees(g) {
            b.RequireFiniteNumber(g);
            h.get(this)._SetImageAngle(e.toRadians(g))
        }
        get imageAngleDegrees() {
            return e.toDegrees(h.get(this)._GetImageAngle())
        }
        get imageWidth() {
            return h.get(this).GetCurrentImageInfo().GetWidth()
        }
        get imageHeight() {
            return h.get(this).GetCurrentImageInfo().GetHeight()
        }
    }
}
"use strict";
self.C3.Plugins.TiledBg.Cnds = {
    OnURLLoaded() {
        return !0
    },
    OnURLFailed() {
        return !0
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg.Acts = {
        SetImageOffsetX(b) {
            this._SetImageOffsetX(b)
        },
        SetImageOffsetY(b) {
            this._SetImageOffsetY(b)
        },
        SetImageScaleX(b) {
            this._SetImageScaleX(b / 100)
        },
        SetImageScaleY(b) {
            this._SetImageScaleY(b / 100)
        },
        SetImageAngle(b) {
            this._SetImageAngle(e.toRadians(b))
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        },
        async LoadURL(b, a) {
            if(!this._ownImageInfo || this._ownImageInfo.GetURL() !== b) {
                a = this._runtime;
                var d = e.New(e.ImageInfo);
                try {
                    await d.LoadDynamicAsset(a,
                        b);
                    if(!d.IsLoaded()) throw Error("image failed to load");
                    if(this.WasReleased()) return d.Release(), null;
                    if(!await d.LoadStaticTexture(a.GetRenderer(), {
                            sampling: this._runtime.GetSampling(),
                            wrapX: "repeat",
                            wrapY: "repeat"
                        })) return
                } catch (c) {
                    console.error("Load image from URL failed: ", c);
                    this.Trigger(e.Plugins.TiledBg.Cnds.OnURLFailed);
                    return
                }
                this.WasReleased() ? d.Release() : (this._ReleaseOwnImage(), this._ownImageInfo = d, a.UpdateRender(), await this.TriggerAsync(e.Plugins.TiledBg.Cnds.OnURLLoaded))
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.TiledBg.Exps = {
        ImageWidth() {
            return this.GetCurrentImageInfo().GetWidth()
        },
        ImageHeight() {
            return this.GetCurrentImageInfo().GetHeight()
        },
        ImageOffsetX() {
            return this._imageOffsetX
        },
        ImageOffsetY() {
            return this._imageOffsetY
        },
        ImageScaleX() {
            return 100 * this._imageScaleX
        },
        ImageScaleY() {
            return 100 * this._imageScaleY
        },
        ImageAngle() {
            return e.toDegrees(this._imageAngle)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Spritefont2 = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Spritefont2.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b);
            this._spriteFont = e.New(self.SpriteFont)
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(b) {
            return this.GetImageInfo().LoadStaticTexture(b, {
                sampling: this._runtime.GetSampling()
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        UpdateSettings(b, a, d, c) {
            const f = this.GetImageInfo(),
                h = this._spriteFont;
            h.SetWidth(f.GetWidth());
            h.SetHeight(f.GetHeight());
            h.SetCharacterWidth(b);
            h.SetCharacterHeight(a);
            h.SetCharacterSet(d);
            h.SetSpacingData(c);
            h.UpdateCharacterMap()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = ["left", "center", "right"],
        d = ["top", "center", "bottom"];
    e.Plugins.Spritefont2.Instance = class extends e.SDKWorldInstanceBase {
        constructor(k, m) {
            super(k);
            this._text = "";
            this._enableBBcode = !0;
            this._characterHeight = this._characterWidth = 16;
            this._characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@\u00b0+=*$\u00a3\u20ac<>";
            k = "";
            this._characterScale = 1;
            this._verticalAlign = this._horizontalAlign = this._lineHeight = this._characterSpacing =
                0;
            this._wrapByWord = !0;
            this._spriteFontText = null;
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            m && (this._text = m[0], this._enableBBcode = m[1], this._characterWidth = m[2], this._characterHeight = m[3], this._characterSet = m[4], k = m[5], this._characterScale = m[6], this._characterSpacing = m[7], this._lineHeight = m[8], this._horizontalAlign = m[9], this._verticalAlign = m[10], this._wrapByWord = 0 === m[11], this.GetWorldInfo().SetVisible(m[12]));
            this._sdkType.UpdateSettings(this._characterWidth, this._characterHeight,
                this._characterSet, k);
            this._spriteFontText = e.New(self.SpriteFontText, this._sdkType.GetSpriteFont());
            m = this.GetWorldInfo();
            this._spriteFontText.SetSize(m.GetWidth(), m.GetHeight());
            this._UpdateSettings()
        }
        Release() {
            this._CancelTypewriter();
            this._spriteFontText.Release();
            this._spriteFontText = null;
            super.Release()
        }
        _UpdateSettings() {
            const k = this._spriteFontText;
            k && (k.SetBBCodeEnabled(this._enableBBcode), k.SetText(this._text), k.SetWordWrapMode(this._wrapByWord ? "word" : "character"), k.SetHorizontalAlign(a[this._horizontalAlign]),
                k.SetVerticalAlign(d[this._verticalAlign]), k.SetSpacing(this._characterSpacing), k.SetLineHeight(this._lineHeight))
        }
        Draw(k) {
            const m = this._objectClass.GetImageInfo();
            var p = m.GetTexture();
            if(p) {
                k.SetTexture(p);
                p = this.GetWorldInfo();
                var x = p.GetBoundingQuad(),
                    t = this._spriteFontText;
                t.SetScale(this._characterScale);
                t.SetSceneGraphScale(p.GetSceneGraphScale());
                this._runtime.IsPixelRoundingEnabled() && (x = p.PixelRoundQuad(x));
                t.SetSize(p.GetWidth(), p.GetHeight());
                t.GetSpriteFont().SetTexRect(m.GetTexRect());
                t.SetColor(p.GetUnpremultipliedColor());
                t.Draw(k, x.getTlx(), x.getTly(), p.GetAngle())
            }
        }
        SaveToJson() {
            const k = {
                t: this._text,
                ebbc: this._enableBBcode,
                csc: this._characterScale,
                csp: this._characterSpacing,
                lh: this._lineHeight,
                ha: this._horizontalAlign,
                va: this._verticalAlign,
                w: this._wrapByWord,
                cw: this._sdkType.GetSpriteFont().GetCharacterWidth(),
                ch: this._sdkType.GetSpriteFont().GetCharacterHeight(),
                cs: this._sdkType.GetSpriteFont().GetCharacterSet(),
                sd: this._sdkType.GetSpriteFont().GetSpacingData()
            }; - 1 !== this._typewriterEndTime &&
                (k.tw = {
                    st: this._typewriterStartTime,
                    en: this._typewriterEndTime,
                    l: this._typewriterLength
                });
            return k
        }
        LoadFromJson(k) {
            this._CancelTypewriter();
            this._text = k.t;
            this._enableBBcode = k.ebbc;
            this._characterScale = k.csc;
            this._characterSpacing = k.csp;
            this._lineHeight = k.lh;
            this._horizontalAlign = k.ha;
            this._verticalAlign = k.va;
            this._wrapByWord = k.w;
            if(k.hasOwnProperty("tw")) {
                var m = k.tw;
                this._typewriterStartTime = m.st;
                this._typewriterEndTime = m.en;
                this._typewriterLength = k.l
            }
            m = this._sdkType.GetSpriteFont();
            m.SetCharacterWidth(k.cw);
            m.SetCharacterHeight(k.ch);
            m.SetCharacterSet(k.cs);
            m.SetSpacingData(k.sd);
            this._UpdateSettings(); - 1 !== this._typewriterEndTime && this._StartTicking()
        }
        GetPropertyValueByIndex(k) {
            switch(k) {
                case 0:
                    return this._text;
                case 1:
                    return this._enableBBcode;
                case 2:
                    return this._sdkType.GetSpriteFont().GetCharacterWidth();
                case 3:
                    return this._sdkType.GetSpriteFont().GetCharacterHeight();
                case 4:
                    return this._sdkType.GetSpriteFont().GetCharacterSet();
                case 5:
                    return this._sdkType.GetSpriteFont().GetSpacingData();
                case 6:
                    return this._characterScale;
                case 7:
                    return this._characterSpacing;
                case 8:
                    return this._lineHeight;
                case 9:
                    return this._horizontalAlign;
                case 10:
                    return this._verticalAlign;
                case 11:
                    return this._wrapByWord ? 1 : 0
            }
        }
        SetPropertyValueByIndex(k, m) {
            switch(k) {
                case 0:
                    if(this._text === m) break;
                    this._text = m;
                    this._UpdateSettings();
                    break;
                case 1:
                    if(this._enableBBcode === !!m) break;
                    this._enableBBcode = !!m;
                    this._UpdateSettings();
                    break;
                case 2:
                    this._sdkType.GetSpriteFont().SetCharacterWidth(m);
                    break;
                case 3:
                    this._sdkType.GetSpriteFont().SetCharacterHeight(m);
                    break;
                case 4:
                    this._sdkType.GetSpriteFont().SetCharacterSet(m);
                    break;
                case 5:
                    this._sdkType.GetSpriteFont().SetSpacingData(m);
                    break;
                case 6:
                    if(this._characterScale === m) break;
                    this._characterScale = m;
                    this._UpdateSettings();
                    break;
                case 7:
                    if(this._characterSpacing === m) break;
                    this._characterSpacing = m;
                    this._UpdateSettings();
                    break;
                case 8:
                    if(this._lineHeight === m) break;
                    this._lineHeight = m;
                    this._UpdateSettings();
                    break;
                case 9:
                    if(this._horizontalAlign === m) break;
                    this._horizontalAlign = m;
                    this._UpdateSettings();
                    break;
                case 10:
                    if(this._verticalAlign ===
                        m) break;
                    this._verticalAlign = m;
                    this._UpdateSettings();
                    break;
                case 11:
                    this._wrapByWord !== (0 === m) && (this._wrapByWord = 0 === m, this._UpdateSettings())
            }
        }
        _SetText(k) {
            this._text !== k && (this._text = k, this._spriteFontText.SetText(k), this._runtime.UpdateRender())
        }
        GetText() {
            return this._text
        }
        _StartTypewriter(k, m) {
            this._SetText(k);
            this._typewriterStartTime = this._runtime.GetWallTime();
            this._typewriterEndTime = this._typewriterStartTime + m / this.GetInstance().GetActiveTimeScale();
            this._typewriterLength = e.BBString.StripAnyTags(k).length;
            this._spriteFontText.SetDrawMaxCharacterCount(0);
            this._StartTicking()
        }
        _CancelTypewriter() {
            this._typewriterEndTime = this._typewriterStartTime = -1;
            this._typewriterLength = 0;
            this._spriteFontText.SetDrawMaxCharacterCount(-1);
            this._StopTicking()
        }
        _FinishTypewriter() {
            -1 !== this._typewriterEndTime && (this._CancelTypewriter(), this.Trigger(e.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender())
        }
        _SetScale(k) {
            this._characterScale !== k && (this._characterScale = k, this._spriteFontText.SetScale(this._characterScale),
                this._runtime.UpdateRender())
        }
        _GetScale() {
            return this._characterScale
        }
        _SetCharacterSpacing(k) {
            this._characterSpacing !== k && (this._characterSpacing = k, this._spriteFontText.SetSpacing(this._characterSpacing), this._runtime.UpdateRender())
        }
        _GetCharacterSpacing() {
            return this._characterSpacing
        }
        _SetLineHeight(k) {
            this._lineHeight !== k && (this._lineHeight = k, this._spriteFontText.SetLineHeight(this._lineHeight), this._runtime.UpdateRender())
        }
        _GetLineHeight() {
            return this._lineHeight
        }
        _SetHAlign(k) {
            this._horizontalAlign !==
                k && (this._horizontalAlign = k, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _GetHAlign() {
            return this._horizontalAlign
        }
        _SetVAlign(k) {
            this._verticalAlign !== k && (this._verticalAlign = k, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _GetVAlign() {
            return this._verticalAlign
        }
        _SetWrapByWord(k) {
            k = !!k;
            this._wrapByWord !== k && (this._wrapByWord = k, this._UpdateSettings(), this._runtime.UpdateRender())
        }
        _IsWrapByWord() {
            return this._wrapByWord
        }
        Tick() {
            var k = this._runtime.GetWallTime();
            k >= this._typewriterEndTime ?
                (this._CancelTypewriter(), this.Trigger(e.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished), this._runtime.UpdateRender()) : (k = e.relerp(this._typewriterStartTime, this._typewriterEndTime, k, 0, this._typewriterLength), k = Math.floor(k), k !== this._spriteFontText.GetDrawMaxCharacterCount() && (this._spriteFontText.SetDrawMaxCharacterCount(k), this._runtime.UpdateRender()))
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.spritefont2.name",
                properties: [{
                    name: "plugins.spritefont2.properties.text.name",
                    value: this._text,
                    onedit: k => this._SetText(k)
                }]
            }]
        }
        GetScriptInterfaceClass() {
            return self.ISpriteFontInstance
        }
    };
    const c = new WeakMap,
        f = new Map([
            ["left", 0],
            ["center", 1],
            ["right", 2]
        ]),
        h = new Map([
            ["top", 0],
            ["center", 1],
            ["bottom", 2]
        ]),
        g = new Map([
            ["word", !0],
            ["character", !1]
        ]);
    self.ISpriteFontInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            c.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        get text() {
            return c.get(this).GetText()
        }
        set text(k) {
            b.RequireString(k);
            const m = c.get(this);
            m._CancelTypewriter();
            m._SetText(k)
        }
        typewriterText(k, m) {
            b.RequireString(k);
            b.RequireFiniteNumber(m);
            const p = c.get(this);
            p._CancelTypewriter();
            p._StartTypewriter(k, m)
        }
        typewriterFinish() {
            c.get(this)._FinishTypewriter()
        }
        set characterScale(k) {
            b.RequireFiniteNumber(k);
            c.get(this)._SetScale(k)
        }
        get characterScale() {
            return c.get(this)._GetScale()
        }
        set characterSpacing(k) {
            b.RequireFiniteNumber(k);
            c.get(this)._SetCharacterSpacing(k)
        }
        get characterSpacing() {
            return c.get(this)._GetCharacterSpacing()
        }
        set lineHeight(k) {
            b.RequireFiniteNumber(k);
            c.get(this)._SetLineHeight(k)
        }
        get lineHeight() {
            return c.get(this)._GetLineHeight()
        }
        set horizontalAlign(k) {
            b.RequireString(k);
            k = f.get(k);
            if("undefined" === typeof k) throw Error("invalid mode");
            c.get(this)._SetHAlign(k)
        }
        get horizontalAlign() {
            return a[c.get(this)._GetHAlign()]
        }
        set verticalAlign(k) {
            b.RequireString(k);
            k = h.get(k);
            if("undefined" === typeof k) throw Error("invalid mode");
            c.get(this)._SetVAlign(k)
        }
        get verticalAlign() {
            return d[c.get(this)._GetVAlign()]
        }
        set wordWrapMode(k) {
            b.RequireString(k);
            k = g.get(k);
            if("undefined" === typeof k) throw Error("invalid mode");
            c.get(this)._SetWrapByWord(k)
        }
        get wordWrapMode() {
            return c.get(this)._IsWrapByWord() ? "word" : "character"
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Spritefont2.Cnds = {
        CompareText(b, a) {
            return a ? this._text === b : e.equalsNoCase(this._text, b)
        },
        IsRunningTypewriterText() {
            return -1 !== this._typewriterEndTime
        },
        OnTypewriterTextFinished() {
            return !0
        }
    }
}
"use strict";
self.C3.Plugins.Spritefont2.Acts = {
    SetText(e) {
        this._CancelTypewriter();
        "number" === typeof e && 1E9 > e && (e = Math.round(1E10 * e) / 1E10);
        this._SetText(e.toString())
    },
    AppendText(e) {
        this._CancelTypewriter();
        "number" === typeof e && 1E9 > e && (e = Math.round(1E10 * e) / 1E10);
        (e = e.toString()) && this._SetText(this._text + e)
    },
    TypewriterText(e, b) {
        this._CancelTypewriter();
        "number" === typeof e && 1E9 > e && (e = Math.round(1E10 * e) / 1E10);
        this._StartTypewriter(e.toString(), b)
    },
    TypewriterFinish() {
        this._FinishTypewriter()
    },
    SetScale(e) {
        this._SetScale(e)
    },
    SetCharacterSpacing(e) {
        this._SetCharacterSpacing(e)
    },
    SetLineHeight(e) {
        this._SetLineHeight(e)
    },
    SetCharacterWidth(e, b) {
        let a = !1;
        const d = this._sdkType.GetSpriteFont();
        for(const c of e)
            if(" " === c) d.SetSpaceWidth(b), a = !0;
            else if(e = d.GetCharacter(c)) e.SetDisplayWidth(b), a = !0;
        a && d.SetCharacterWidthsChanged();
        this._runtime.UpdateRender()
    },
    SetEffect(e) {
        this.GetWorldInfo().SetBlendMode(e);
        this._runtime.UpdateRender()
    },
    SetHAlign(e) {
        this._SetHAlign(e)
    },
    SetVAlign(e) {
        this._SetVAlign(e)
    },
    SetWrapping(e) {
        this._SetWrapByWord(0 ===
            e)
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Spritefont2.Exps = {
        CharacterWidth(b) {
            return (b = this._sdkType.GetSpriteFont().GetCharacter(b)) ? b.GetDisplayWidth() : this._sdkType.GetSpriteFont().GetCharacterWidth()
        },
        CharacterHeight() {
            return this._characterHeight
        },
        CharacterScale() {
            return this._characterScale
        },
        CharacterSpacing() {
            return this._characterSpacing
        },
        LineHeight() {
            return this._lineHeight
        },
        Text() {
            return this._text
        },
        PlainText() {
            return this._enableBBcode ? e.BBString.StripAnyTags(this._text) : this._text
        },
        TextWidth() {
            const b =
                this.GetWorldInfo();
            this._spriteFontText.SetSize(b.GetWidth(), b.GetHeight());
            return this._spriteFontText.GetTextWidth()
        },
        TextHeight() {
            const b = this.GetWorldInfo();
            this._spriteFontText.SetSize(b.GetWidth(), b.GetHeight());
            return this._spriteFontText.GetTextHeight()
        }
    }
} {
    "use strict";
    const e = self.C3;
    self.SpriteFontCharacter = class {
        constructor(b, a, d, c) {
            let f = b.GetCharacterWidth(),
                h = b.GetCharacterHeight();
            this._spriteFont = b;
            this._char = a;
            this._pxRect = new e.Rect(d, c, d + f, c + h);
            this._texRect = new e.Rect;
            this._displayWidth = -1;
            this._UpdateTexRect()
        }
        Release() {
            this._texRect = this._pxRect = this._spriteFont = null
        }
        _UpdateTexRect() {
            let b = this._spriteFont.GetWidth(),
                a = this._spriteFont.GetHeight();
            this._texRect.copy(this._pxRect);
            this._texRect.divide(b, a);
            this._texRect.lerpInto(this._spriteFont.GetTexRect())
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        GetChar() {
            return this._char
        }
        GetTexRect() {
            return this._texRect
        }
        SetDisplayWidth(b) {
            this._displayWidth =
                b
        }
        GetDisplayWidth() {
            return 0 > this._displayWidth ? this._spriteFont.GetCharacterWidth() : this._displayWidth
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Rect,
        a = new e.Quad,
        d = new e.Color,
        c = new Set(["left", "center", "right"]),
        f = new Set(["top", "center", "bottom"]),
        h = new Set(["word", "character"]);
    self.SpriteFontText = class {
        constructor(g) {
            this._spriteFont = g;
            this._cssHeight = this._cssWidth = 0;
            this._text = "";
            this._isBBcodeEnabled = !1;
            this._bbString = null;
            this._wrappedText = e.New(e.WordWrap);
            this._wrapMode = "word";
            this._wrapChanged = !1;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._sceneGraphScale = this._scale = 1;
            this._lineHeight =
                this._spacing = 0;
            this._color = e.New(e.Color);
            this._drawMaxCharCount = -1;
            this._drawCharCount = 0;
            this._measureTextCallback = (k, m) => this._MeasureText(k, m);
            this._spriteFont._AddSpriteFontText(this)
        }
        Release() {
            this._spriteFont._RemoveSpriteFontText(this);
            this._measureTextCallback = this._color = null;
            this._wrappedText.Clear();
            this._bbString = this._spriteFont = this._wrappedText = null
        }
        _MeasureText(g, k) {
            var m = this._GetStyleTag(k, "scale"),
                p = (m ? parseFloat(m.param) : this._scale) * this._sceneGraphScale;
            m = this._GetStyleTag(k,
                "scalex");
            m = (m ? parseFloat(m.param) : 1) * p;
            k = this._GetStyleTag(k, "scaley");
            k = (k ? parseFloat(k.param) : 1) * p;
            k = this._spriteFont.GetCharacterHeight() * k + this._lineHeight;
            const x = this.GetSpriteFont();
            p = x.GetCharacterWidth() * m;
            const t = this.GetSpacing();
            if(x.HasAnyCustomWidths()) {
                let r = 0,
                    y = 0;
                for(var q of g) {
                    g = p;
                    const v = x.GetCharacter(q);
                    v ? g = v.GetDisplayWidth() * m : " " === q && (g = x.GetSpaceWidth() * m);
                    y += g;
                    ++r
                }
                return {
                    width: y + r * t,
                    height: k
                }
            }
            q = [...g].length;
            return {
                width: p * q + Math.max(q, 0) * t,
                height: k
            }
        }
        _SetWrapChanged() {
            this._wrapChanged = !0;
            this._wrappedText.Clear()
        }
        SetSize(g, k) {
            0 >= g || 0 >= k || this._cssWidth === g && this._cssHeight === k || (this._cssWidth !== g && this._SetWrapChanged(), this._cssWidth = g, this._cssHeight = k)
        }
        SetDrawMaxCharacterCount(g) {
            this._drawMaxCharCount = Math.floor(g)
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(g, k) {
            for(let m = g.length - 1; 0 <= m; --m) {
                const p = g[m];
                if(p.tag === k) return p
            }
            return null
        }
        _HasStyleTag(g, k) {
            return !!this._GetStyleTag(g, k)
        }
        _MaybeWrapText() {
            if(this._wrapChanged) {
                !this._isBBcodeEnabled ||
                    this._bbString && this._bbString.toString() === this._text || (this._bbString = new e.BBString(this._text, {
                        noEscape: !0
                    }));
                var g = -this.GetSpacing();
                this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, g);
                this._wrapChanged = !1
            }
        }
        Draw(g, k, m, p) {
            this._MaybeWrapText();
            let x = this._drawCharCount = 0;
            const t = this._lineHeight,
                q = e.cloneArray(this._wrappedText.GetLines()),
                r = Math.sin(p);
            p = Math.cos(p);
            var y = q.reduce((v, u) => v + u.height,
                0) - t;
            "center" === this._verticalAlign ? x = Math.max(Math.floor(this._cssHeight / 2 - y / 2), 0) : "bottom" === this._verticalAlign && (x = Math.floor(this._cssHeight - y));
            for(let v = 0, u = q.length; v < u; ++v) {
                y = q[v];
                const A = y.height;
                if(0 < v && x > this._cssHeight - (A - t)) break;
                0 <= x && this._DrawLine(g, y, k, m, x, r, p);
                x += A
            }
        }
        _DrawLine(g, k, m, p, x, t, q) {
            const r = k.height;
            let y = 0;
            "center" === this._horizontalAlign ? y = Math.max(Math.floor((this._cssWidth - k.width) / 2), 0) : "right" === this._horizontalAlign && (y = Math.max(Math.floor(this._cssWidth - k.width),
                0));
            for(const v of k.fragments) this._DrawFragment(g, v, m, p, y, x, t, q, r), y += v.width
        }
        _DrawFragment(g, k, m, p, x, t, q, r, y) {
            var v = k.text,
                u = k.width,
                A = k.styles;
            if(-1 !== this._drawMaxCharCount) {
                if(this._drawCharCount >= this._drawMaxCharCount) return;
                this._drawCharCount + v.length > this._drawMaxCharCount && (v = v.substr(0, this._drawMaxCharCount - this._drawCharCount), u = this._MeasureText(v, A).width);
                this._drawCharCount += v.length
            }
            var z = this._GetStyleTag(A, "background");
            if(!(e.IsStringAllWhitespace(v) && !z || this._HasStyleTag(A,
                    "hide"))) {
                k = this._GetStyleTag(A, "scale");
                var C = (k ? parseFloat(k.param) : this._scale) * this._sceneGraphScale;
                k = this._GetStyleTag(A, "scalex");
                k = (k ? parseFloat(k.param) : 1) * C;
                var E = this._GetStyleTag(A, "scaley");
                C *= E ? parseFloat(E.param) : 1;
                C *= this._spriteFont.GetCharacterHeight();
                t += y - this._lineHeight - C;
                y = this._GetStyleTag(A, "offsetx");
                x += y ? parseFloat(y.param) : 0;
                y = this._GetStyleTag(A, "offsety");
                t += y ? parseFloat(y.param) : 0;
                z && (g.SetColorFillMode(), d.parseString(z.param), d.setA(1), g.SetColor(d), b.set(x, t, x + u,
                    t + C), b.getRight() > this._cssWidth && b.setRight(this._cssWidth), a.setFromRotatedRectPrecalc(b, q, r), a.offset(m, p), g.Quad(a), g.SetTextureFillMode());
                (u = this._GetStyleTag(A, "color")) ? (d.parseString(u.param), d.setA(this._color.getA())) : d.copy(this._color);
                (u = this._GetStyleTag(A, "opacity")) && d.setA(d.getA() * parseFloat(u.param) / 100);
                d.premultiply();
                g.SetColor(d);
                u = this._spriteFont.GetCharacterWidth() * k;
                A = Math.abs(this.GetSpacing());
                for(const J of v)
                    if(v = this._spriteFont.GetCharacter(J)) {
                        z = v.GetDisplayWidth() *
                            k;
                        if(x + z > this._cssWidth + A + 1E-5) break;
                        b.set(x, t, x + u, t + C);
                        a.setFromRotatedRectPrecalc(b, q, r);
                        a.offset(m, p);
                        g.Quad3(a, v.GetTexRect());
                        x += z + this._spacing
                    } else x += this._spriteFont.GetSpaceWidth() * k + this._spacing
            }
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        SetBBCodeEnabled(g) {
            g = !!g;
            this._isBBcodeEnabled !== g && (this._isBBcodeEnabled = g, this._SetWrapChanged())
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetText(g) {
            this._text !== g && (this._text = g, this._SetWrapChanged())
        }
        SetWordWrapMode(g) {
            if(!h.has(g)) throw Error("invalid word wrap mode");
            this._wrapMode !== g && (this._wrapMode = g, this._SetWrapChanged())
        }
        SetHorizontalAlign(g) {
            if(!c.has(g)) throw Error("invalid alignment");
            this._horizontalAlign = g
        }
        SetVerticalAlign(g) {
            if(!f.has(g)) throw Error("invalid alignment");
            this._verticalAlign = g
        }
        SetScale(g) {
            this._scale !== g && (this._scale = g, this._SetWrapChanged())
        }
        GetScale() {
            return this._scale
        }
        SetSceneGraphScale(g) {
            this._sceneGraphScale !== g && (this._sceneGraphScale = g, this._SetWrapChanged())
        }
        GetSceneGraphScale() {
            return this._sceneGraphScale
        }
        SetSpacing(g) {
            this._spacing !==
                g && (this._spacing = g, this._SetWrapChanged())
        }
        GetSpacing() {
            return this._spacing
        }
        SetLineHeight(g) {
            this._lineHeight = g;
            this._SetWrapChanged()
        }
        GetLineHeight() {
            return this._lineHeight
        }
        SetOpacity(g) {
            g = e.clamp(g, 0, 1);
            this._color.a = g
        }
        SetColor(g) {
            this._color.equals(g) || this._color.copy(g)
        }
        GetColor() {
            return this._color
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            var g = this._spriteFont.GetCharacterHeight() * this._scale;
            const k = this._lineHeight;
            g += k;
            return this._wrappedText.GetLineCount() * g - k
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = {
            width: 256,
            height: 256,
            characterWidth: 16,
            characterHeight: 16,
            characterSet: ""
        };
    self.SpriteFont = class {
        constructor(a) {
            a = Object.assign({}, b, a);
            if(0 >= a.width || 0 >= a.height || 0 >= a.characterWidth || 0 >= a.characterHeight) throw Error("invalid size");
            this._width = a.width;
            this._height = a.height;
            this._characterWidth = a.characterWidth;
            this._characterHeight = a.characterHeight;
            this._characterSet = a.characterSet;
            this._spacingData = "";
            this._spacingParsed = null;
            this._hasAnyCustomWidths = !1;
            this._spaceWidth = -1;
            this._texRect = new e.Rect(0, 0, 1, 1);
            this._characterMap = new Map;
            this._mapChanged = !0;
            this._allTexts = new Set
        }
        Release() {
            this._texRect = null;
            this._ReleaseCharacters();
            this._characterMap = null;
            this._allTexts && this._allTexts.clear();
            this._allTexts = null
        }
        _ReleaseCharacters() {
            for(let a of this._characterMap.values()) a.Release();
            this._characterMap.clear()
        }
        _AddSpriteFontText(a) {
            this._allTexts.add(a)
        }
        _RemoveSpriteFontText(a) {
            this._allTexts.delete(a)
        }
        UpdateCharacterMap() {
            if(this._mapChanged) {
                this._ReleaseCharacters();
                var a = [...this._characterSet],
                    d = Math.floor(this._width / this._characterWidth),
                    c = d * Math.floor(this._height / this._characterHeight);
                for(let f = 0, h = a.length; f < h && !(f >= c); ++f) {
                    let g = a[f];
                    this._characterMap.set(g, e.New(self.SpriteFontCharacter, this, g, f % d * this._characterWidth, Math.floor(f / d) * this._characterHeight))
                }
                this._hasAnyCustomWidths = !1;
                this._spaceWidth = -1;
                if(Array.isArray(this._spacingParsed))
                    for(let f of this._spacingParsed)
                        if(Array.isArray(f) && 2 === f.length && (a = f[0], d = f[1], "number" === typeof a && isFinite(a) &&
                                "string" === typeof d && a !== this._characterWidth))
                            for(let h of d)(d = this._characterMap.get(h)) ? (d.SetDisplayWidth(a), this._hasAnyCustomWidths = !0) : " " === h && (this._spaceWidth = a, this._hasAnyCustomWidths = !0);
                this._mapChanged = !1;
                for(let f of this._allTexts) f._SetWrapChanged()
            }
        }
        SetCharacterWidthsChanged() {
            this._hasAnyCustomWidths = !0;
            for(const a of this._allTexts) a._SetWrapChanged()
        }
        GetCharacter(a) {
            this.UpdateCharacterMap();
            return this._characterMap.get(a) || null
        }
        HasAnyCustomWidths() {
            return this._hasAnyCustomWidths
        }
        SetWidth(a) {
            a =
                Math.floor(a);
            if(0 >= a) throw Error("invalid size");
            this._width !== a && (this._width = a, this._mapChanged = !0)
        }
        GetWidth() {
            return this._width
        }
        SetHeight(a) {
            a = Math.floor(a);
            if(0 >= a) throw Error("invalid size");
            this._height !== a && (this._height = a, this._mapChanged = !0)
        }
        GetHeight() {
            return this._height
        }
        SetTexRect(a) {
            if(!this._texRect.equals(a)) {
                this._texRect.copy(a);
                for(const d of this._characterMap.values()) d._UpdateTexRect()
            }
        }
        GetTexRect() {
            return this._texRect
        }
        SetCharacterWidth(a) {
            a = Math.floor(a);
            if(0 >= a) throw Error("invalid size");
            this._characterWidth !== a && (this._characterWidth = a, this._mapChanged = !0)
        }
        GetCharacterWidth() {
            return this._characterWidth
        }
        SetCharacterHeight(a) {
            a = Math.floor(a);
            if(0 >= a) throw Error("invalid size");
            this._characterHeight !== a && (this._characterHeight = a, this._mapChanged = !0)
        }
        GetCharacterHeight() {
            return this._characterHeight
        }
        SetCharacterSet(a) {
            this._characterSet !== a && (this._characterSet = a, this._mapChanged = !0)
        }
        GetCharacterSet() {
            return this._characterSet
        }
        SetSpacingData(a) {
            if(this._spacingData !== a && (this._spacingData =
                    a, this._mapChanged = !0, this._spacingParsed = null, this._spacingData.length)) try {
                this._spacingParsed = JSON.parse(this._spacingData)
            } catch (d) {
                this._spacingParsed = null
            }
        }
        GetSpacingData() {
            return this._spacingData
        }
        SetSpaceWidth(a) {
            0 > a && (a = -1);
            this._spaceWidth !== a && (this._spaceWidth = a, 0 <= this._spaceWidth && (this._hasAnyCustomWidths = !0))
        }
        GetSpaceWidth() {
            return 0 > this._spaceWidth ? this._characterWidth : this._spaceWidth
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.DrawingCanvas = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.DrawingCanvas.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = e.New(e.Color),
        d = e.New(e.Rect),
        c = e.New(e.Quad);
    let f = 0;
    e.Plugins.DrawingCanvas.Instance = class extends e.SDKWorldInstanceBase {
        constructor(g, k) {
            super(g);
            this._renderTarget = null;
            this._rcTex = e.New(e.Rect);
            this._multisampling = 0;
            this._texRenderTarget = null;
            this._drawCommands = [];
            this._currentPoly = [];
            this._drawBlendMode = 0;
            this._texScale = this._drawScale = 1;
            this._lineDashTexture = null;
            this._savedImageUrl = "";
            this._snapshot = null;
            this._tempRect = e.New(e.Rect);
            this._deviceQuadUnrotated =
                e.New(e.Quad);
            this._deviceQuadRotated = e.New(e.Quad);
            k && (this.GetWorldInfo().SetVisible(!!k[0]), this._multisampling = [0, 2, 4, 8][k[2]]);
            g = this._runtime.GetRenderer();
            this._SetDrawingBlendMode(0);
            g.IsWebGL() && 2 > g.GetWebGLVersionNumber() && (this._multisampling = 0);
            this._StartTicking2()
        }
        Release() {
            this._renderTarget && (this._renderTarget.GetRenderer().DeleteRenderTarget(this._renderTarget), this._renderTarget = null);
            this._texRenderTarget && (this._texRenderTarget.GetRenderer().DeleteRenderTarget(this._texRenderTarget),
                this._texRenderTarget = null);
            e.clearArray(this._drawCommands);
            super.Release()
        }
        _ClonePoly() {
            return this._currentPoly.map(g => g.slice(0))
        }
        _GetLineDashTexture() {
            this._MaybeCreateLineDashTexture();
            return this._lineDashTexture
        }
        _MaybeCreateLineDashTexture() {
            if(!this._lineDashTexture) {
                var g = e.CreateCanvas(512, 8),
                    k = g.getContext("2d");
                k.clearRect(0, 0, 512, 8);
                k.fillStyle = "white";
                k.fillRect(0, 0, 256, 8);
                this._lineDashTexture = this._runtime.GetRenderer().CreateStaticTexture(g, {
                    wrapX: "repeat",
                    sampling: this._runtime.GetSampling()
                })
            }
        }
        _SetDrawingBlendMode(g) {
            this._drawBlendMode =
                g
        }
        _ApplyCurrentDrawingBlendMode(g) {
            g.SetBlendMode(this._drawBlendMode)
        }
        _AddDrawCommand(g) {
            this._drawCommands.push(g);
            this._runtime.UpdateRender()
        }
        _UpdateRenderTargetSize(g, k, m) {
            this._renderTarget && g.DeleteRenderTarget(this._renderTarget);
            this._renderTarget = g.CreateRenderTarget({
                width: k,
                height: m,
                sampling: this._runtime.GetSampling(),
                isSampled: 0 === this._multisampling,
                canReadPixels: 0 === this._multisampling,
                multisampling: this._multisampling
            });
            0 < this._multisampling && (this._texRenderTarget && g.DeleteRenderTarget(this._texRenderTarget),
                this._texRenderTarget = g.CreateRenderTarget({
                    width: k,
                    height: m,
                    sampling: this._runtime.GetSampling(),
                    isSampled: !0,
                    canReadPixels: !0
                }));
            g.SetTexture(null)
        }
        _GetRenderTarget() {
            return this._renderTarget
        }
        _GetTexRenderTarget() {
            return this._texRenderTarget
        }
        GetMultisampling() {
            return this._multisampling
        }
        _SetRenderTargetDeviceTransform(g) {
            this._runtime.GetCanvasManager().SetDeviceTransform(g, this._renderTarget.GetWidth(), this._renderTarget.GetHeight())
        }
        HasAnyDrawingCommandInQueue() {
            return this._drawCommands.some(g =>
                !(g instanceof e.Plugins.DrawingCanvas.DrawCommand.SaveImage))
        }
        _CalculateUnrotatedDeviceCoords(g, k) {
            const m = this.GetWorldInfo(),
                p = m.GetLayer(),
                x = p.GetLayout(),
                t = m.GetAngle(),
                q = p.GetOwnAngle(),
                r = x.GetAngle();
            if(0 !== t || 0 !== q || 0 !== r) x.SetAngle(0), p.SetAngle(0), m.SetAngle(0), m.SetBboxChanged();
            var y = m.GetBoundingQuad();
            const [v, u] = p.LayerToDrawSurface(y.getTlx(), y.getTly()), [A, z] = p.LayerToDrawSurface(y.getBrx(), y.getBry());
            y = v - Math.round(v);
            const C = u - Math.round(u);
            g.set(v, u, A, z);
            g.offset(-y, -C);
            g.normalize();
            k.setFromRect(g);
            if(0 !== t || 0 !== q || 0 !== r) x.SetAngle(r), p.SetAngle(q), m.SetAngle(t), m.SetBboxChanged()
        }
        _CalculateRotatedDeviceCoords(g) {
            var k = this.GetWorldInfo();
            const m = k.GetLayer(),
                p = m.GetLayout(),
                x = m.GetOwnAngle(),
                t = p.GetAngle();
            if(0 !== x || 0 !== t) p.SetAngle(0), m.SetAngle(0);
            k = k.GetBoundingQuad();
            const [q, r] = m.LayerToDrawSurface(k.getTlx(), k.getTly()), [y, v] = m.LayerToDrawSurface(k.getTrx(), k.getTry()), [u, A] = m.LayerToDrawSurface(k.getBrx(), k.getBry()), [z, C] = m.LayerToDrawSurface(k.getBlx(), k.getBly());
            k = q - Math.round(q);
            const E = r - Math.round(r);
            g.set(q, r, y, v, u, A, z, C);
            g.offset(k, E);
            if(0 !== x || 0 !== t) p.SetAngle(t), m.SetAngle(x)
        }
        Tick2() {
            const g = this._runtime.GetRenderer();
            var k = this.GetWorldInfo(),
                m = this._tempRect;
            ++f;
            this._CalculateUnrotatedDeviceCoords(m, this._deviceQuadUnrotated);
            this._CalculateRotatedDeviceCoords(this._deviceQuadRotated);
            let p = Math.ceil(m.width() + .001),
                x = Math.ceil(m.height() + .001);
            g.IsWebGL() ? this._rcTex.set(0, 1, m.width() / p, 1 - m.height() / x) : this._rcTex.set(0, 0, m.width() / p, m.height() /
                x);
            const t = g.GetMaxTextureSize(),
                q = Math.max(p, x);
            q > t ? (this._texScale = t / q, p = Math.round(p * this._texScale), x = Math.round(x * this._texScale)) : this._texScale = 1;
            if(!(0 >= p || 0 >= x) && (this._drawScale = m.width() / k.GetWidth(), k = this._drawScale * this._texScale, (m = !this._renderTarget || this._renderTarget.GetWidth() !== p || this._renderTarget.GetHeight() !== x) && this.Trigger(e.Plugins.DrawingCanvas.Cnds.OnResolutionChanged), 0 < this._drawCommands.length || !this._renderTarget)) {
                (!this._renderTarget || m && this.HasAnyDrawingCommandInQueue()) &&
                this._UpdateRenderTargetSize(g, p, x);
                g.SetRenderTarget(this._renderTarget);
                this._SetRenderTargetDeviceTransform(g);
                this._ApplyCurrentDrawingBlendMode(g);
                for(const r of this._drawCommands) r.Do(g, k, this);
                e.clearArray(this._drawCommands);
                g.SetAlphaBlend();
                0 < this._multisampling && (g.SetRenderTarget(this._texRenderTarget), g.CopyRenderTarget(this._renderTarget, "crop"))
            }--f
        }
        Draw(g) {
            const k = this.GetWorldInfo(),
                m = k.GetLayer(),
                p = this._runtime.GetCanvasManager(),
                x = g.GetRenderTarget();
            let t = this._deviceQuadUnrotated;
            if(this._renderTarget) {
                g.IsWebGPU() && g._MaybeDoPendingClearRenderPass(this._renderTarget);
                0 === this._multisampling ? g.SetTexture(this._renderTarget.GetTexture()) : g.SetTexture(this._texRenderTarget.GetTexture());
                var q = !1;
                0 < f ? (p.SetDeviceTransform(g, x.GetWidth(), x.GetHeight()), q = !0, t = this._deviceQuadRotated) : 0 === k.GetAngle() && 0 === m.GetAngle() && !k.HasMesh() && m.RendersIn2DMode() ? (p.SetDeviceTransform(g), q = !0) : t = k.GetBoundingQuad();
                k.HasMesh() ? this._DrawMesh(g, k) : g.Quad3(t, this._rcTex);
                q && m._SetTransform(g,
                    !1);
                g.SetTexture(null)
            }
        }
        _DrawMesh(g, k) {
            const m = k.GetTransformedMesh();
            k.IsMeshChanged() && (k.CalculateBbox(d, c, !1), m.CalculateTransformedMesh(k.GetSourceMesh(), c, this._rcTex), k.SetMeshChanged(!1));
            m.Draw(g)
        }
        GetSnapshotPixel(g, k) {
            if(!this._snapshot) return [0, 0, 0, 0];
            var m = this._snapshot.width,
                p = this._snapshot.height;
            g = Math.floor(g);
            k = this._runtime.GetRenderer().IsWebGL() ? p - 1 - Math.floor(k) : Math.floor(k);
            if(0 > g || 0 > k || g >= m || k >= p) return [0, 0, 0, 0];
            p = this._snapshot.data;
            const x = k * m * 4 + 4 * g;
            g = p[x] / 255;
            k = p[x + 1] /
                255;
            m = p[x + 2] / 255;
            p = p[x + 3] / 255;
            0 !== p && (g /= p, k /= p, m /= p);
            return [100 * g, 100 * k, 100 * m, 100 * p]
        }
        SetSnapshotPixel(g, k, m) {
            if(!this._snapshot) return [0, 0, 0, 0];
            a.setFromRgbValue(m);
            a.premultiply();
            m = this._snapshot.width;
            var p = this._snapshot.height;
            g = Math.floor(g);
            k = p - 1 - Math.floor(k);
            0 > g || 0 > k || g >= m || k >= p || (p = this._snapshot.data, g = k * m * 4 + 4 * g, p[g] = Math.floor(255 * a.getR()), p[g + 1] = Math.floor(255 * a.getG()), p[g + 2] = Math.floor(255 * a.getB()), p[g + 3] = Math.floor(255 * a.getA()))
        }
        GetImagePixelData() {
            return new Promise(g => {
                this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.SaveImage(async k => {
                    var m = k.data.buffer;
                    const p = k.width;
                    k = k.height;
                    m = await this._runtime.AddJob("ProcessImageData", {
                        buffer: m,
                        width: p,
                        height: k,
                        unpremultiply: !0,
                        flipY: !0
                    }, [m]);
                    g(new ImageData(new Uint8ClampedArray(m), p, k))
                }))
            })
        }
        LoadImagePixelData(g, k, m) {
            if(!this._renderTarget) throw Error("canvas not yet ready");
            if(g.width !== this._renderTarget.GetWidth() || g.height !== this._renderTarget.GetHeight()) throw Error(`wrong size ImageData: expected ${this._renderTarget.GetWidth()} x ${this._renderTarget.GetHeight()}, got ${g.width} x ${g.height}`);
            e.clearArray(this._drawCommands);
            const p = this._runtime.GetRenderer();
            if(this._texRenderTarget) {
                var x = p.GetRenderTarget();
                const t = this._texRenderTarget.GetTexture();
                p.UpdateTexture(g, t, {
                    premultiplyAlpha: !!k,
                    flipY: !!m
                });
                p.SetRenderTarget(this._renderTarget);
                p.CopyRenderTarget(this._texRenderTarget, "crop");
                p.SetRenderTarget(x)
            } else x = this._renderTarget.GetTexture(), p.UpdateTexture(g, x, {
                premultiplyAlpha: !!k,
                flipY: !!m
            });
            this._runtime.UpdateRender()
        }
        GetScriptInterfaceClass() {
            return self.IDrawingCanvasInstance
        }
    };
    const h = new WeakMap;
    self.IDrawingCanvasInstance = class extends self.IWorldInstance {
        constructor() {
            super();
            h.set(this, self.IInstance._GetInitInst().GetSdkInstance())
        }
        getImagePixelData() {
            return h.get(this).GetImagePixelData()
        }
        loadImagePixelData(g, k = !1) {
            b.RequireInstanceOf(g, ImageData);
            h.get(this).LoadImagePixelData(g, k, !0)
        }
        get surfaceDeviceWidth() {
            const g = h.get(this)._GetRenderTarget();
            if(!g) throw Error("canvas not yet ready");
            return g.GetWidth()
        }
        get surfaceDeviceHeight() {
            const g = h.get(this)._GetRenderTarget();
            if(!g) throw Error("canvas not yet ready");
            return g.GetHeight()
        }
    }
}
"use strict";
self.C3.Plugins.DrawingCanvas.Cnds = {
    OnSavedImage() {
        return !0
    },
    OnSnapshot() {
        return !0
    },
    OnResolutionChanged() {
        return !0
    }
}; {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        return a.GetWorldInfo().GetZIndex() - d.GetWorldInfo().GetZIndex()
    }
    e.Plugins.DrawingCanvas.Acts = {
        SetEffect(a) {
            this.GetWorldInfo().SetBlendMode(a);
            this._runtime.UpdateRender()
        },
        ClearCanvas(a) {
            e.clearArray(this._drawCommands);
            this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.ClearCanvas(a))
        },
        ClearRect(a, d, c, f, h) {
            a !== c && d !== f && this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.ClearRect(a, d, c, f, h))
        },
        FillRect(a, d, c, f, h) {
            a !== c && d !== f && this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.FillRect(a,
                d, c, f, h))
        },
        FillLinearGradient(a, d, c, f, h, g, k) {
            a !== c && d !== f && this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.FillLinearGradient(a, d, c, f, h, g, k))
        },
        FillEllipse(a, d, c, f, h, g) {
            0 >= c || 0 >= f || this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.FillEllipse(a, d, c, f, h, 0 !== g))
        },
        OutlineEllipse(a, d, c, f, h, g, k) {
            0 >= c || 0 >= f || 0 >= g || this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.OutlineEllipse(a, d, c, f, h, g, 0 !== k))
        },
        OutlineRect(a, d, c, f, h, g) {
            a === c || d === f || 0 >= g || this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.OutlineRect(a,
                d, c, f, h, g))
        },
        Line(a, d, c, f, h, g, k) {
            a === c && d === f || 0 >= g || this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.Line(a, d, c, f, h, g, 0 === k ? "butt" : "square"))
        },
        LineDashed(a, d, c, f, h, g, k, m) {
            if(!(a === c && d === f || 0 >= g || 0 >= k)) {
                m = 0 === m ? "butt" : "square";
                var p = this._GetLineDashTexture();
                this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.LineDashed(a, d, c, f, h, g, k, p, m))
            }
        },
        AddPolyPoint(a, d) {
            this._currentPoly.push([a, d])
        },
        ResetPoly() {
            e.clearArray(this._currentPoly)
        },
        LinePoly(a, d, c) {
            2 > this._currentPoly.length ||
                0 >= d || (c = 0 === c ? "butt" : "square", this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.LinePoly(this._ClonePoly(), a, d, c)))
        },
        LineDashedPoly(a, d, c, f) {
            if(!(2 > this._currentPoly.length || 0 >= d || 0 >= c)) {
                f = 0 === f ? "butt" : "square";
                var h = this._GetLineDashTexture();
                this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.LineDashedPoly(this._ClonePoly(), a, d, c, h, f))
            }
        },
        FillPoly(a) {
            3 > this._currentPoly.length || this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.FillPoly(this._ClonePoly(), a))
        },
        SetDrawBlend(a) {
            2 <=
                a && a++;
            this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.SetDrawBlend(a))
        },
        PasteObject(a, d) {
            if(a) {
                var c = this.GetWorldInfo(),
                    f = c.GetBoundingBox(),
                    h = c.GetBoundingQuad();
                a = a.GetCurrentSol().GetInstances().filter(g => (g = g.GetWorldInfo()) && f.intersectsRect(g.GetBoundingBox()) && (0 === c.GetAngle() || h.intersectsQuad(g.GetBoundingQuad())));
                0 !== a.length && (a.sort(b), this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.DrawInstances(a, 0 !== d, c)))
            }
        },
        SaveImage(a, d, c, f, h, g) {
            const k = 0 === a ? "image/png" :
                "image/jpeg";
            d /= 100;
            const m = e.New(e.Rect);
            m.setWH(c, f, h, g);
            return new Promise(p => {
                this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.SaveImage(async x => {
                    var t = x.data.buffer,
                        q = x.width;
                    x = x.height;
                    const r = this._runtime.GetRenderer().IsWebGL();
                    t = await this._runtime.AddJob("ProcessImageData", {
                        buffer: t,
                        width: q,
                        height: x,
                        unpremultiply: !0,
                        flipY: r && !e.Supports.ImageBitmapOptions
                    }, [t]);
                    x = new ImageData(new Uint8ClampedArray(t), q, x);
                    e.Supports.ImageBitmapOptions ? (q = await createImageBitmap(x, {
                        premultiplyAlpha: "none",
                        imageOrientation: r ? "flipY" : "none"
                    }), q = await e.DrawableToBlob(q, k, d)) : q = await e.ImageDataToBlob(x, k, d);
                    this._savedImageUrl && URL.revokeObjectURL(this._savedImageUrl);
                    this._savedImageUrl = URL.createObjectURL(q);
                    this.Trigger(e.Plugins.DrawingCanvas.Cnds.OnSavedImage);
                    p()
                }, m))
            })
        },
        SaveSnapshot() {
            return new Promise(a => {
                this._AddDrawCommand(new e.Plugins.DrawingCanvas.DrawCommand.SaveImage(d => {
                    this._snapshot = d;
                    this.Trigger(e.Plugins.DrawingCanvas.Cnds.OnSnapshot);
                    a()
                }))
            })
        },
        ClearSnapshot() {
            this._snapshot = null
        },
        SnapshotSetPixel(a, d, c) {
            this.SetSnapshotPixel(a, d, c)
        },
        LoadSnapshot() {
            this._snapshot && this._renderTarget && this._snapshot.width === this._renderTarget.GetWidth() && this._snapshot.height === this._renderTarget.GetHeight() && this.LoadImagePixelData(this._snapshot, !1)
        }
    }
}
"use strict";
self.C3.Plugins.DrawingCanvas.Exps = {
    SavedImageURL() {
        return this._savedImageUrl
    },
    SnapshotRedAt(e, b) {
        return this.GetSnapshotPixel(e, b)[0]
    },
    SnapshotGreenAt(e, b) {
        return this.GetSnapshotPixel(e, b)[1]
    },
    SnapshotBlueAt(e, b) {
        return this.GetSnapshotPixel(e, b)[2]
    },
    SnapshotAlphaAt(e, b) {
        return this.GetSnapshotPixel(e, b)[3]
    },
    SnapshotWidth() {
        return this._snapshot ? this._snapshot.width : 0
    },
    SnapshotHeight() {
        return this._snapshot ? this._snapshot.height : 0
    },
    PixelScale() {
        return 1 / (this._drawScale * this._texScale)
    },
    SurfaceDeviceWidth() {
        const e =
            this._GetRenderTarget();
        return e ? e.GetWidth() : 0
    },
    SurfaceDeviceHeight() {
        const e = this._GetRenderTarget();
        return e ? e.GetHeight() : 0
    }
}; {
    "use strict";
    const e = self.C3,
        b = e.New(e.Quad),
        a = e.New(e.Quad),
        d = e.New(e.Vector2);
    e.Plugins.DrawingCanvas.DrawCommand = class {
        constructor() {}
        Do(f) {
            throw Error("required override");
        }
    };
    const c = e.Plugins.DrawingCanvas.DrawCommand;
    c.SaveImage = class extends c {
        constructor(f, h) {
            super();
            this._callback = f;
            this._areaRect = h
        }
        Do(f, h, g) {
            h = f.GetRenderTarget();
            0 < h.GetMultisampling() && (g = g._GetTexRenderTarget(), f.SetRenderTarget(g), f.CopyRenderTarget(h, "crop"), f.SetRenderTarget(h), h = g);
            f.ReadBackRenderTargetToImageData(h,
                !1, this._areaRect).then(this._callback)
        }
    };
    c.ClearCanvas = class extends c {
        constructor(f) {
            super();
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(f);
            this._color.premultiply()
        }
        Do(f) {
            f.Clear(this._color)
        }
    };
    c.ClearRect = class extends c {
        constructor(f, h, g, k, m) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f, h, g, k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply()
        }
        Do(f, h, g) {
            const k = g._GetRenderTarget().GetHeight();
            this._rect.multiply(h, h);
            this._rect.shuntY(k);
            f.SetColorFillMode();
            f.SetColor(this._color);
            f.SetBlendMode(3);
            f.Rect(this._rect);
            g._ApplyCurrentDrawingBlendMode(f)
        }
    };
    c.FillRect = class extends c {
        constructor(f, h, g, k, m) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f, h, g, k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply()
        }
        Do(f, h) {
            f.SetColorFillMode();
            f.SetColor(this._color);
            this._rect.multiply(h, h);
            f.Rect(this._rect)
        }
    };
    c.FillLinearGradient = class extends c {
        constructor(f, h, g, k, m, p, x) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f,
                h, g, k);
            this._color1 = e.New(e.Color);
            this._color1.setFromRgbValue(m);
            this._color2 = e.New(e.Color);
            this._color2.setFromRgbValue(p);
            this._dir = x
        }
        Do(f, h) {
            f.SetLinearGradientFillMode();
            f.SetColor(this._color1);
            f.SetGradientColor(this._color2);
            this._rect.multiply(h, h);
            b.setFromRect(this._rect);
            0 === this._dir ? a.set(0, 0, 1, 0, 1, 1, 0, 1) : a.set(0, 1, 0, 0, 1, 0, 1, 1);
            f.Quad4(b, a)
        }
    };
    c.FillEllipse = class extends c {
        constructor(f, h, g, k, m, p) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f - g, h - k, f + g, h + k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply();
            this._isSmooth = p
        }
        Do(f, h) {
            this._rect.multiply(h, h);
            this._isSmooth ? (f.SetSmoothEllipseFillMode(), f.SetColor(this._color), this._rect.inflate(.5, .5), f.SetEllipseParams(1 / this._rect.width(), 1 / this._rect.height())) : (f.SetHardEllipseFillMode(), f.SetColor(this._color));
            f.Rect(this._rect)
        }
    };
    c.OutlineEllipse = class extends c {
        constructor(f, h, g, k, m, p, x) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f - g, h - k, f + g, h + k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply();
            this._thickness = p;
            this._isSmooth = x
        }
        Do(f, h) {
            this._rect.multiply(h, h);
            this._isSmooth ? (f.SetSmoothEllipseOutlineMode(), f.SetColor(this._color), this._rect.inflate(.5, .5), f.SetEllipseParams(1 / this._rect.width(), 1 / this._rect.height(), this._thickness * h)) : (f.SetHardEllipseOutlineMode(), f.SetEllipseParams(1 / this._rect.width(), 1 / this._rect.height(), this._thickness * h), f.SetColor(this._color));
            f.Rect(this._rect)
        }
    };
    c.OutlineRect = class extends c {
        constructor(f, h, g, k, m, p) {
            super();
            this._rect =
                e.New(e.Rect);
            this._rect.set(f, h, g, k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply();
            this._thickness = p
        }
        Do(f, h) {
            f.SetColorFillMode();
            f.SetColor(this._color);
            f.PushLineCapZag();
            f.PushLineWidth(this._thickness * h);
            this._rect.multiply(h, h);
            f.LineRect2(this._rect);
            f.PopLineCap();
            f.PopLineWidth()
        }
    };
    c.Line = class extends c {
        constructor(f, h, g, k, m, p, x) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f, h, g, k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply();
            this._thickness = p;
            this._cap = x
        }
        Do(f, h) {
            f.SetColorFillMode();
            f.SetColor(this._color);
            f.PushLineCap(this._cap);
            f.PushLineWidth(this._thickness * h);
            const g = this._rect;
            g.multiply(h, h);
            f.Line(g.getLeft(), g.getTop(), g.getRight(), g.getBottom());
            f.PopLineCap();
            f.PopLineWidth()
        }
    };
    c.LinePoly = class extends c {
        constructor(f, h, g, k) {
            super();
            this._poly = f;
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(h);
            this._color.premultiply();
            this._thickness = g;
            this._cap = k
        }
        Do(f, h) {
            f.SetColorFillMode();
            f.SetColor(this._color);
            f.PushLineCap(this._cap);
            f.PushLineWidth(this._thickness * h);
            const g = this._poly;
            for(let k = 0, m = g.length; k < m; ++k) {
                const p = (k + 1) % m;
                f.Line(g[k][0] * h, g[k][1] * h, g[p][0] * h, g[p][1] * h)
            }
            f.PopLineCap();
            f.PopLineWidth()
        }
    };
    c.LineDashed = class extends c {
        constructor(f, h, g, k, m, p, x, t, q) {
            super();
            this._rect = e.New(e.Rect);
            this._rect.set(f, h, g, k);
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(m);
            this._color.premultiply();
            this._thickness = p;
            this._dashLength = x;
            this._dashTex = t;
            this._cap = q
        }
        Do(f, h) {
            f.SetTextureFillMode();
            f.SetTexture(this._dashTex);
            f.SetColor(this._color);
            f.PushLineCap(this._cap);
            f.PushLineWidth(this._thickness * h);
            const g = this._rect,
                k = e.distanceTo(g.getLeft(), g.getTop(), g.getRight(), g.getBottom()) / (2 * this._dashLength);
            g.multiply(h, h);
            f.TexturedLine(g.getLeft(), g.getTop(), g.getRight(), g.getBottom(), 0, k);
            f.PopLineCap();
            f.PopLineWidth()
        }
    };
    c.LineDashedPoly = class extends c {
        constructor(f, h, g, k, m, p) {
            super();
            this._poly = f;
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(h);
            this._color.premultiply();
            this._thickness = g;
            this._dashLength = k;
            this._dashTex = m;
            this._cap = p
        }
        Do(f, h) {
            f.SetTextureFillMode();
            f.SetTexture(this._dashTex);
            f.SetColor(this._color);
            f.PushLineCap(this._cap);
            f.PushLineWidth(this._thickness * h);
            let g = 0;
            const k = this._poly;
            for(let p = 0, x = k.length; p < x; ++p) {
                var m = (p + 1) % x;
                const t = k[p][0],
                    q = k[p][1],
                    r = k[m][0];
                m = k[m][1];
                const y = g + e.distanceTo(t, q, r, m) / (2 * this._dashLength);
                f.TexturedLine(t * h, q * h, r * h, m * h, g, y);
                g = y - Math.floor(y)
            }
            f.PopLineCap();
            f.PopLineWidth()
        }
    };
    c.FillPoly = class extends c {
        constructor(f,
            h) {
            super();
            this._poly = f;
            this._color = e.New(e.Color);
            this._color.setFromRgbValue(h);
            this._color.premultiply()
        }
        Do(f, h) {
            f.SetColorFillMode();
            f.SetColor(this._color);
            var g = this._poly;
            for(let k = 0, m = g.length; k < m; ++k) {
                const p = g[k];
                p[0] *= h;
                p[1] *= h
            }
            h = self.polyDecomp;
            if(h.isSimple(g)) {
                h.makeCCW(g);
                h.removeCollinearPoints(g, e.toRadians(.1));
                g = h.quickDecomp(g);
                for(const k of g) f.ConvexPoly(k.flat())
            }
        }
    };
    c.SetDrawBlend = class extends c {
        constructor(f) {
            super();
            this._blendIndex = f
        }
        Do(f, h, g) {
            g._SetDrawingBlendMode(this._blendIndex);
            g._ApplyCurrentDrawingBlendMode(f)
        }
    };
    c.DrawInstances = class extends c {
        constructor(f, h, g) {
            super();
            const k = g.GetLayer();
            this._includeFx = h;
            this._layoutTransform = k.GetLayout().SaveTransform();
            this._layerTransforms = new Map;
            this._layerTransforms.set(k, k.SaveTransform());
            this._instances = f.map(m => this._SaveInstanceState(m, g))
        }
        _SaveInstanceState(f, h) {
            const g = h.GetAngle();
            var k = h.GetLayer();
            const m = f.GetWorldInfo();
            var p = m.GetLayer();
            const x = m.GetX(),
                t = m.GetY(),
                q = m.GetWidth(),
                r = m.GetHeight(),
                y = m.GetAngle();
            this._layerTransforms.has(p) || this._layerTransforms.set(p, p.SaveTransform());
            const v = k.IsTransformCompatibleWith(p);
            if(!v) {
                const [A, z] = p.LayerToDrawSurface(x, t), [C, E] = k.DrawSurfaceToLayer(A, z);
                m.SetXY(C, E);
                var u = p.GetNormalScale() / k.GetNormalScale();
                m.SetSize(q * u, r * u);
                k = k.GetOwnAngle() - p.GetOwnAngle();
                m.OffsetAngle(k)
            }
            0 !== g && (p = h.GetBoundingQuad(), k = p.midX(), p = p.midY(), u = -h.GetSinAngle(), h = h.GetCosAngle(), d.set(x, t), d.offset(-k, -p), d.rotatePrecalc(u, h), d.offset(k, p), m.SetXY(d.getX(), d.getY()), m.OffsetAngle(-g));
            0 === g && v || m.SetBboxChanged();
            f = [f, f.SaveToJson("visual-state")];
            0 === g && v || (m.SetXY(x, t), m.SetSize(q, r), m.SetAngle(y), m.SetBboxChanged());
            return f
        }
        Do(f, h, g) {
            h = g.GetRuntime().GetCanvasManager();
            const k = g.GetWorldInfo().GetLayer(),
                m = k.GetLayout();
            var p = k.GetViewport(),
                x = g.GetWorldInfo().GetBoundingBox();
            const t = g._GetRenderTarget(),
                q = 0 < g.GetMultisampling(),
                r = this._includeFx,
                y = m.SaveTransform();
            m.RestoreTransform(this._layoutTransform);
            const v = new Map;
            for(const [H, K] of this._layerTransforms) v.set(H, H.SaveTransform()),
                H.RestoreTransform(K);
            h.SetIsPastingToDrawingCanvas(!0);
            var u = (p.width() - x.width()) / -2,
                A = (p.height() - x.height()) / -2;
            const [z, C] = k.LayerToDrawSurface(x.getLeft(), x.getTop());
            h.SetDeviceTransformOffset(z, C);
            var E = x.getLeft() - p.getLeft();
            p = x.getTop() - p.getTop();
            const J = u + E,
                F = A + p;
            u = t.GetHeight();
            k._SetTransform(f, !1, J, F, u);
            for(let H = 0, K = this._instances.length; H < K; ++H) {
                E = this._instances[H];
                A = E[0];
                E = E[1];
                if(A.IsDestroyed()) continue;
                p = A.GetWorldInfo();
                x = p.GetBoundingBox();
                const N = A.SaveToJson("visual-state");
                A.LoadFromJson(E, "visual-state");
                p.GetBoundingBox();
                !r || !p.HasAnyActiveEffect() || q && p.GetInstanceEffectList().HasAnyActiveBackgroundBlendingEffect() ? k._DrawInstance(A, p, f) : (x.offset(-J, -F), k._DrawInstanceWithEffects(A, p, f, t, {
                    preTransform: () => k._SetTransform(f, !1, J, F)
                }) && k._SetTransform(f, !1, J, F, u), p.SetBboxChanged(), p.GetBoundingBox());
                A.LoadFromJson(N, "visual-state")
            }
            h.SetDeviceTransformOffset(0, 0);
            h.SetIsPastingToDrawingCanvas(!1);
            g._SetRenderTargetDeviceTransform(f);
            g._ApplyCurrentDrawingBlendMode(f);
            m.RestoreTransform(y);
            for(const [H, K] of v) H.RestoreTransform(K)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Arr = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Arr.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IInstance;

    function d(f, h, g) {
        if(h < f.length) e.truncateArray(f, h);
        else if(h > f.length)
            if("function" === typeof g)
                for(var k = f.length; k < h; ++k) f.push(g());
            else
                for(k = f.length; k < h; ++k) f.push(g)
    }
    e.Plugins.Arr.Instance = class extends e.SDKInstanceBase {
        constructor(f, h) {
            super(f);
            this._cx = 10;
            this._cz = this._cy = 1;
            this._arr = null;
            this._forX = [];
            this._forY = [];
            this._forZ = [];
            this._forDepth = -1;
            h && (this._cx = h[0], this._cy = h[1], this._cz = h[2]);
            this._arr = e.MakeFilledArray(this._cx,
                () => e.MakeFilledArray(this._cy, () => e.MakeFilledArray(this._cz, 0)))
        }
        Release() {
            this._arr = null;
            super.Release()
        }
        At(f, h, g) {
            f = Math.floor(f);
            h = Math.floor(h);
            g = Math.floor(g);
            return 0 <= f && f < this._cx && 0 <= h && h < this._cy && 0 <= g && g < this._cz ? this._arr[f][h][g] : 0
        }
        Set(f, h, g, k) {
            f = Math.floor(f);
            h = Math.floor(h);
            g = Math.floor(g);
            0 <= f && f < this._cx && 0 <= h && h < this._cy && 0 <= g && g < this._cz && (this._arr[f][h][g] = k)
        }
        SetSize(f, h, g) {
            f = Math.floor(f);
            h = Math.floor(h);
            g = Math.floor(g);
            0 > f && (f = 0);
            0 > h && (h = 0);
            0 > g && (g = 0);
            if(this._cx !== f || this._cy !==
                h || this._cz !== g) {
                this._cx = f;
                this._cy = h;
                this._cz = g;
                var k = this._arr;
                d(k, f, () => e.MakeFilledArray(h, () => e.MakeFilledArray(g, 0)));
                for(let m = 0; m < f; ++m) {
                    d(k[m], h, () => e.MakeFilledArray(g, 0));
                    for(let p = 0; p < h; ++p) d(k[m][p], g, 0)
                }
            }
        }
        GetWidth() {
            return this._cx
        }
        GetHeight() {
            return this._cy
        }
        GetDepth() {
            return this._cz
        }
        GetDebuggerProperties() {
            const f = [{
                    title: "plugins.arr.debugger.array-properties.title",
                    properties: [{
                            name: "plugins.arr.properties.width.name",
                            value: this._cx,
                            onedit: g => this.SetSize(g, this._cy, this._cz)
                        },
                        {
                            name: "plugins.arr.properties.height.name",
                            value: this._cy,
                            onedit: g => this.SetSize(this._cx, g, this._cz)
                        }, {
                            name: "plugins.arr.properties.depth.name",
                            value: this._cz,
                            onedit: g => this.SetSize(this._cx, this._cy, g)
                        }, {
                            name: "plugins.arr.properties.elements.name",
                            value: this._cx * this._cy * this._cz
                        }
                    ]
                }],
                h = [];
            if(1 === this._cy && 1 === this._cz)
                for(let g = 0; g < this._cx; ++g) h.push({
                    name: "$" + g,
                    value: this._arr[g][0][0],
                    onedit: k => this._arr[g][0][0] = k
                });
            else
                for(let g = 0; g < this._cx; ++g) h.push({
                    name: "$" + g,
                    value: this._arr[g].toString()
                });
            h.length && f.push({
                title: "plugins.arr.debugger.array-data.title",
                properties: h
            });
            return f
        }
        GetAsJsonString() {
            return JSON.stringify({
                c2array: !0,
                size: [this._cx, this._cy, this._cz],
                data: this._arr
            })
        }
        SaveToJson() {
            return {
                size: [this._cx, this._cy, this._cz],
                data: this._arr
            }
        }
        LoadFromJson(f) {
            const h = f.size;
            this._cx = h[0];
            this._cy = h[1];
            this._cz = h[2];
            this._arr = f.data
        }
        _GetForX() {
            return 0 <= this._forDepth && this._forDepth < this._forX.length ? this._forX[this._forDepth] : 0
        }
        _GetForY() {
            return 0 <= this._forDepth && this._forDepth <
                this._forY.length ? this._forY[this._forDepth] : 0
        }
        _GetForZ() {
            return 0 <= this._forDepth && this._forDepth < this._forZ.length ? this._forZ[this._forDepth] : 0
        }
        GetScriptInterfaceClass() {
            return self.IArrayInstance
        }
    };
    const c = new WeakMap;
    self.IArrayInstance = class extends a {
        constructor() {
            super();
            c.set(this, a._GetInitInst().GetSdkInstance())
        }
        get width() {
            return c.get(this).GetWidth()
        }
        get height() {
            return c.get(this).GetHeight()
        }
        get depth() {
            return c.get(this).GetDepth()
        }
        setSize(f, h = 1, g = 1) {
            b.RequireFiniteNumber(f);
            b.RequireFiniteNumber(h);
            b.RequireFiniteNumber(g);
            c.get(this).SetSize(f, h, g)
        }
        getAt(f, h = 0, g = 0) {
            b.RequireFiniteNumber(f);
            b.RequireFiniteNumber(h);
            b.RequireFiniteNumber(g);
            return c.get(this).At(f, h, g)
        }
        setAt(f, h, g = 0, k = 0) {
            b.RequireFiniteNumber(h);
            b.RequireFiniteNumber(g);
            b.RequireFiniteNumber(k);
            if("number" !== typeof f && "string" !== typeof f) throw new TypeError("invalid type");
            c.get(this).Set(h, g, k, f)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d, c, f, h) {
        a.PushCopySol(c);
        d.Retrigger(f, h);
        a.PopSol(c)
    }
    e.Plugins.Arr.Cnds = {
        CompareX(a, d, c) {
            return e.compare(this.At(a, 0, 0), d, c)
        },
        CompareXY(a, d, c, f) {
            return e.compare(this.At(a, d, 0), c, f)
        },
        CompareXYZ(a, d, c, f, h) {
            return e.compare(this.At(a, d, c), f, h)
        },
        ArrForEach(a) {
            const d = this._runtime,
                c = d.GetEventSheetManager(),
                f = d.GetCurrentEvent(),
                h = f.GetSolModifiers(),
                g = d.GetEventStack(),
                k = g.GetCurrentStackFrame(),
                m = g.Push(f),
                p = ++this._forDepth,
                x = this._forX;
            var t = this._forY,
                q = this._forZ;
            const r = this._cx,
                y = this._cy;
            var v = this._cz;
            p === this._forX.length ? (x.push(0), t.push(0), q.push(0)) : (x[p] = 0, t[p] = 0, q[p] = 0);
            d.SetDebuggingEnabled(!1);
            if(0 === a)
                for(a = 0; a < r; ++a)
                    for(let u = 0; u < y; ++u)
                        for(let A = 0; A < v; ++A) x[p] = a, t[p] = u, q[p] = A, b(c, f, h, k, m);
            else if(1 === a)
                for(q = 0; q < r; ++q)
                    for(v = 0; v < y; ++v) x[p] = q, t[p] = v, b(c, f, h, k, m);
            else
                for(t = 0; t < r; ++t) x[p] = t, b(c, f, h, k, m);
            d.SetDebuggingEnabled(!0);
            this._forDepth--;
            g.Pop();
            return !1
        },
        CompareCurrent(a, d) {
            return e.compare(this.At(this._GetForX(), this._GetForY(),
                this._GetForZ()), a, d)
        },
        Contains(a) {
            const d = this._cx,
                c = this._cy,
                f = this._cz,
                h = this._arr;
            for(let g = 0; g < d; ++g)
                for(let k = 0; k < c; ++k)
                    for(let m = 0; m < f; ++m)
                        if(h[g][k][m] === a) return !0;
            return !1
        },
        IsEmpty() {
            return 0 === this._cx || 0 === this._cy || 0 === this._cz
        },
        CompareSize(a, d, c) {
            let f = 0;
            switch(a) {
                case 0:
                    f = this._cx;
                    break;
                case 1:
                    f = this._cy;
                    break;
                case 2:
                    f = this._cz
            }
            return e.compare(f, d, c)
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(a, d) {
        if("number" === typeof a && "number" === typeof d) return a - d;
        a = a.toString();
        d = d.toString();
        return a < d ? -1 : a > d ? 1 : 0
    }
    e.Plugins.Arr.Acts = {
        Clear(a) {
            const d = this._cx,
                c = this._cy,
                f = this._cz,
                h = this._arr;
            for(let g = 0; g < d; ++g)
                for(let k = 0; k < c; ++k)
                    for(let m = 0; m < f; ++m) h[g][k][m] = a
        },
        SetSize(a, d, c) {
            this.SetSize(a, d, c)
        },
        SetX(a, d) {
            this.Set(a, 0, 0, d)
        },
        SetXY(a, d, c) {
            this.Set(a, d, 0, c)
        },
        SetXYZ(a, d, c, f) {
            this.Set(a, d, c, f)
        },
        Push(a, d, c) {
            var f = this._cx,
                h = this._cy;
            const g = this._cz,
                k = this._arr;
            if(0 === c) f = e.MakeFilledArray(h, () => e.MakeFilledArray(g, d)), 0 === a ? k.push(f) : k.unshift(f), this._cx++;
            else if(1 === c) {
                for(h = 0; h < f; ++h) c = e.MakeFilledArray(g, d), 0 === a ? k[h].push(c) : k[h].unshift(c);
                this._cy++
            } else {
                for(c = 0; c < f; ++c)
                    for(let m = 0; m < h; ++m) 0 === a ? k[c][m].push(d) : k[c][m].unshift(d);
                this._cz++
            }
        },
        Pop(a, d) {
            const c = this._cx;
            var f = this._cy,
                h = this._cz;
            const g = this._arr;
            if(0 === d) 0 !== c && (0 === a ? g.pop() : g.shift(), this._cx--);
            else if(1 === d) {
                if(0 !== f) {
                    for(f = 0; f < c; ++f) 0 === a ? g[f].pop() : g[f].shift();
                    this._cy--
                }
            } else if(0 !==
                h) {
                for(d = 0; d < c; ++d)
                    for(h = 0; h < f; ++h) 0 === a ? g[d][h].pop() : g[d][h].shift();
                this._cz--
            }
        },
        Reverse(a) {
            const d = this._cx;
            var c = this._cy,
                f = this._cz;
            const h = this._arr;
            if(0 !== d && 0 !== c && 0 !== f)
                if(0 === a) h.reverse();
                else if(1 === a)
                for(c = 0; c < d; ++c) h[c].reverse();
            else
                for(a = 0; a < d; ++a)
                    for(f = 0; f < c; ++f) h[a][f].reverse()
        },
        Sort(a) {
            const d = this._cx;
            var c = this._cy,
                f = this._cz;
            const h = this._arr;
            if(0 !== d && 0 !== c && 0 !== f)
                if(0 === a) h.sort((g, k) => b(g[0][0], k[0][0]));
                else if(1 === a)
                for(c = 0; c < d; ++c) h[c].sort((g, k) => b(g[0], k[0]));
            else
                for(a =
                    0; a < d; ++a)
                    for(f = 0; f < c; ++f) h[a][f].sort(b)
        },
        Delete(a, d) {
            a = Math.floor(a);
            if(!(0 > a)) {
                var c = this._cx,
                    f = this._cy,
                    h = this._cz,
                    g = this._arr;
                if(0 === d) a >= c || (g.splice(a, 1), this._cx--);
                else if(1 === d) {
                    if(!(a >= f)) {
                        for(f = 0; f < c; ++f) g[f].splice(a, 1);
                        this._cy--
                    }
                } else if(!(a >= h)) {
                    for(d = 0; d < c; ++d)
                        for(h = 0; h < f; ++h) g[d][h].splice(a, 1);
                    this._cz--
                }
            }
        },
        Insert(a, d, c) {
            d = Math.floor(d);
            if(!(0 > d)) {
                var f = this._cx,
                    h = this._cy,
                    g = this._cz,
                    k = this._arr;
                if(0 === c) d > f || (k.splice(d, 0, e.MakeFilledArray(h, () => e.MakeFilledArray(g, a))), this._cx++);
                else if(1 === c) {
                    if(!(d > h)) {
                        for(h = 0; h < f; ++h) k[h].splice(d, 0, e.MakeFilledArray(g, a));
                        this._cy++
                    }
                } else if(!(d > g)) {
                    for(c = 0; c < f; ++c)
                        for(let m = 0; m < h; ++m) k[c][m].splice(d, 0, a);
                    this._cz++
                }
            }
        },
        JSONLoad(a) {
            let d = null;
            try {
                d = JSON.parse(a)
            } catch (c) {
                console.error("[Construct 3] Failed to parse JSON: ", c);
                return
            }
            d.c2array && (a = d.size, this._cx = a[0], this._cy = a[1], this._cz = a[2], this._arr = d.data)
        },
        JSONDownload(a) {
            const d = URL.createObjectURL(new Blob([this.GetAsJsonString()], {
                type: "application/json"
            }));
            this._runtime.InvokeDownload(d,
                a)
        }
    }
}
"use strict";
self.C3.Plugins.Arr.Exps = {
    At(e, b, a) {
        return this.At(e, b || 0, a || 0)
    },
    Width() {
        return this._cx
    },
    Height() {
        return this._cy
    },
    Depth() {
        return this._cz
    },
    CurX() {
        return this._GetForX()
    },
    CurY() {
        return this._GetForY()
    },
    CurZ() {
        return this._GetForZ()
    },
    CurValue() {
        return this.At(this._GetForX(), this._GetForY(), this._GetForZ())
    },
    Front() {
        return this.At(0, 0, 0)
    },
    Back() {
        return this.At(this._cx - 1, 0, 0)
    },
    IndexOf(e) {
        const b = this._arr;
        for(let a = 0, d = this._cx; a < d; ++a)
            if(b[a][0][0] === e) return a;
        return -1
    },
    LastIndexOf(e) {
        const b = this._arr;
        for(let a = this._cx - 1; 0 <= a; --a)
            if(b[a][0][0] === e) return a;
        return -1
    },
    AsJSON() {
        return this.GetAsJsonString()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Mouse = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Mouse.Type = class extends e.SDKTypeBase {
        constructor(d) {
            super(d)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.IMouseObjectType
        }
    };
    let b = null;

    function a() {
        return b.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.IMouseObjectType = class extends self.IObjectClass {
        constructor(d) {
            super(d);
            b = d;
            d.GetRuntime()._GetCommonScriptInterfaces().mouse = this
        }
        getMouseX(d) {
            return a().GetMousePositionForLayer(d)[0]
        }
        getMouseY(d) {
            return a().GetMousePositionForLayer(d)[1]
        }
        getMousePosition(d) {
            return a().GetMousePositionForLayer(d)
        }
        isMouseButtonDown(d) {
            return a().IsMouseButtonDown(d)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Mouse.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, "mouse");
            this._buttonMap = [!1, !1, !1];
            this._triggerDir = this._triggerType = this._triggerButton = this._mouseYcanvas = this._mouseXcanvas = 0;
            b = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), e.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), e.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data)),
                e.Disposable.From(b, "dblclick", d => this._OnDoubleClick(d.data)), e.Disposable.From(b, "wheel", d => this._OnMouseWheel(d.data)), e.Disposable.From(b, "window-blur", () => this._OnWindowBlur()))
        }
        Release() {
            super.Release()
        }
        _OnPointerDown(b) {
            "mouse" === b.pointerType && (this._mouseXcanvas = b.pageX - this._runtime.GetCanvasClientX(), this._mouseYcanvas = b.pageY - this._runtime.GetCanvasClientY(), this._CheckButtonChanges(b.lastButtons, b.buttons))
        }
        _OnPointerMove(b) {
            "mouse" === b.pointerType && (this._mouseXcanvas = b.pageX - this._runtime.GetCanvasClientX(),
                this._mouseYcanvas = b.pageY - this._runtime.GetCanvasClientY(), this._CheckButtonChanges(b.lastButtons, b.buttons))
        }
        _OnPointerUp(b) {
            "mouse" === b.pointerType && this._CheckButtonChanges(b.lastButtons, b.buttons)
        }
        _CheckButtonChanges(b, a) {
            this._CheckButtonChange(b, a, 1, 0);
            this._CheckButtonChange(b, a, 4, 1);
            this._CheckButtonChange(b, a, 2, 2)
        }
        _CheckButtonChange(b, a, d, c) {
            !(b & d) && a & d ? this._OnMouseDown(c) : b & d && !(a & d) && this._OnMouseUp(c)
        }
        _OnMouseDown(b) {
            this._buttonMap[b] = !0;
            this.Trigger(e.Plugins.Mouse.Cnds.OnAnyClick);
            this._triggerButton = b;
            this._triggerType = 0;
            this.Trigger(e.Plugins.Mouse.Cnds.OnClick);
            this.Trigger(e.Plugins.Mouse.Cnds.OnObjectClicked)
        }
        _OnMouseUp(b) {
            this._buttonMap[b] && (this._buttonMap[b] = !1, this._triggerButton = b, this.Trigger(e.Plugins.Mouse.Cnds.OnRelease))
        }
        _OnDoubleClick(b) {
            this._triggerButton = b.button;
            this._triggerType = 1;
            this.Trigger(e.Plugins.Mouse.Cnds.OnClick);
            this.Trigger(e.Plugins.Mouse.Cnds.OnObjectClicked)
        }
        _OnMouseWheel(b) {
            this._triggerDir = 0 > b.deltaY ? 1 : 0;
            this.Trigger(e.Plugins.Mouse.Cnds.OnWheel)
        }
        _OnWindowBlur() {
            for(let b =
                    0, a = this._buttonMap.length; b < a && this._buttonMap[b]; ++b) this._buttonMap[b] = !1, this._triggerButton = b, this.Trigger(e.Plugins.Mouse.Cnds.OnRelease)
        }
        GetMousePositionForLayer(b) {
            const a = this._runtime.GetMainRunningLayout(),
                d = this._mouseXcanvas,
                c = this._mouseYcanvas;
            return "undefined" === typeof b ? a.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(d, c) : (b = a.GetLayer(b)) ? b.CanvasCssToLayer(d, c) : [0, 0]
        }
        IsMouseButtonDown(b) {
            b = Math.floor(b);
            return !!this._buttonMap[b]
        }
        _IsMouseOverCanvas() {
            return 0 <= this._mouseXcanvas &&
                0 <= this._mouseYcanvas && this._mouseXcanvas < this._runtime.GetCanvasCssWidth() && this._mouseYcanvas < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                    title: "plugins.mouse.name",
                    properties: [{
                        name: "plugins.mouse.debugger.absolute-position",
                        value: this._mouseXcanvas + "," + this._mouseYcanvas
                    }, {
                        name: "plugins.mouse.debugger.left-button",
                        value: this._buttonMap[0]
                    }, {
                        name: "plugins.mouse.debugger.middle-button",
                        value: this._buttonMap[1]
                    }, {
                        name: "plugins.mouse.debugger.right-button",
                        value: this._buttonMap[2]
                    }]
                },
                {
                    title: "plugins.mouse.debugger.position-on-each-layer",
                    properties: this._runtime.GetMainRunningLayout().GetLayers().map(b => ({
                        name: "$" + b.GetName(),
                        value: b.CanvasCssToLayer(this._mouseXcanvas, this._mouseYcanvas).join(", ")
                    }))
                }
            ]
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Mouse.Cnds = {
        OnClick(b, a) {
            return this._triggerButton === b && this._triggerType === a
        },
        OnAnyClick() {
            return !0
        },
        IsButtonDown(b) {
            return this._buttonMap[b]
        },
        OnRelease(b) {
            return this._triggerButton === b
        },
        IsOverObject(b) {
            if(!this._IsMouseOverCanvas()) return !1;
            const a = this._runtime.GetCurrentCondition().IsInverted(),
                d = this._mouseXcanvas,
                c = this._mouseYcanvas;
            return e.xor(this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(b, d, c, a), a)
        },
        OnObjectClicked(b, a, d) {
            if(b !==
                this._triggerButton || a !== this._triggerType || !this._IsMouseOverCanvas()) return !1;
            b = this._mouseXcanvas;
            a = this._mouseYcanvas;
            return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(d, b, a, !1)
        },
        OnWheel(b) {
            return this._triggerDir === b
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = null;
    const a = "auto pointer text crosshair move help wait none".split(" ");
    e.Plugins.Mouse.Acts = {
        SetCursor(d) {
            d = a[d];
            b !== d && (b = d, this.PostToDOM("cursor", d))
        },
        SetCursorSprite(d) {
            if(!e.Platform.IsMobile && d && (d = d.GetFirstPicked())) {
                var c = d.GetWorldInfo(),
                    f = d.GetCurrentImageInfo();
                c && f && b !== f && (b = f, f.ExtractImageToCanvas().then(h => e.CanvasToBlob(h)).then(h => {
                    h = `url(${URL.createObjectURL(h)}) ${Math.round(c.GetOriginX()*f.GetWidth())} ${Math.round(c.GetOriginY()*f.GetHeight())}, auto`;
                    this.PostToDOM("cursor", "");
                    this.PostToDOM("cursor", h)
                }))
            }
        }
    }
}
"use strict";
self.C3.Plugins.Mouse.Exps = {
    X(e) {
        return this.GetMousePositionForLayer(e)[0]
    },
    Y(e) {
        return this.GetMousePositionForLayer(e)[1]
    },
    AbsoluteX() {
        return this._mouseXcanvas
    },
    AbsoluteY() {
        return this._mouseYcanvas
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {
            this.GetImageInfo().LoadAsset(this._runtime)
        }
        LoadTextures(b) {
            return this.GetImageInfo().LoadStaticTexture(b, {
                sampling: this._runtime.GetSampling()
            })
        }
        ReleaseTextures() {
            this.GetImageInfo().ReleaseTexture()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.New(e.Rect);
    e.Plugins.Particles.Instance = class extends e.SDKWorldInstanceBase {
        constructor(a, d) {
            super(a);
            this._isFirstTick = !0;
            this._particleEngine = a = e.New(self.ParticleEngine);
            a.ononeshotfinish = () => this._OnOneShotFinish();
            this._spawnObjectClass = null;
            this._particleUpdateCallback = (f, h, g, k, m, p) => this._OnParticleUpdate(f, h, g, k, m, p);
            this._particleDestroyCallback = f => this._OnParticleDestroy(f);
            this._hasAnyDefaultParticle = !0;
            d && (a.SetRate(d[0]), a.SetSprayCone(e.toRadians(d[1])),
                a.SetSprayType(d[2] ? "one-shot" : "continuous-spray"), this._SetParticleObjectClass(this._runtime.GetObjectClassBySID(d[3])), a.SetInitSpeed(d[4]), a.SetInitSize(d[5]), a.SetInitOpacity(d[6] / 100), a.SetGrowRate(d[7]), a.SetInitXRandom(d[8]), a.SetInitYRandom(d[9]), a.SetInitSpeedRandom(d[10]), a.SetInitSizeRandom(d[11]), a.SetGrowRandom(d[12]), a.SetAcceleration(d[13]), a.SetGravity(d[14]), a.SetLifeAngleRandom(d[15]), a.SetLifeSpeedRandom(d[16]), a.SetLifeOpacityRandom(d[17]), a.SetDestroyModeIndex(d[18]), a.SetTimeout(d[19]));
            this._UpdateEngineParameters();
            this._spawnObjectClass && (this._hasAnyDefaultParticle = !1);
            "one-shot" === a.GetSprayType() ? a.CreateOneShotSpray() : a.SetSpraying(!0);
            const c = this.GetWorldInfo();
            c.SetBboxChangeEventEnabled(!0);
            this._inst.Dispatcher().addEventListener("bboxchange", () => {
                c.OverwriteBoundingBox(this._particleEngine.GetBoundingBox())
            });
            this.GetRuntime().GetRenderer().IsWebGPU() && c.SetUsePointsShaderProgram();
            this._StartTicking()
        }
        Release() {
            this._particleEngine.Release();
            this._particleDestroyCallback =
                this._particleUpdateCallback = this._particleEngine = null;
            super.Release()
        }
        _SetParticleObjectClass(a) {
            a === this.GetObjectClass() && (a = null);
            this._spawnObjectClass = a;
            this._particleEngine.onparticlecreate = a ? d => this._OnParticleCreate(d) : null;
            this._spawnObjectClass || (this._hasAnyDefaultParticle = !0)
        }
        _UpdateEngineParameters() {
            const a = this._particleEngine,
                d = this.GetWorldInfo();
            a.SetMasterOpacity(d.GetOpacity());
            a.SetPixelRounding(this._runtime.IsPixelRoundingEnabled());
            a.SetSpawnX(d.GetX());
            a.SetSpawnY(d.GetY());
            a.SetSpawnAngle(d.GetAngle());
            a.SetInitSizeScale(d.GetSceneGraphScale())
        }
        _OnOneShotFinish() {
            this._runtime.DestroyInstance(this._inst)
        }
        Draw(a) {
            if(this._hasAnyDefaultParticle) {
                var d = this._objectClass.GetImageInfo(),
                    c = d.GetTexture();
                if(c) {
                    var f = this.GetWorldInfo(),
                        h = f.GetLayer();
                    this._runtime.GetCanvasManager().IsPastingToDrawingCanvas() ? b.set(-Infinity, -Infinity, Infinity, Infinity) : h.GetViewportForZ(f.GetTotalZElevation(), b);
                    a.SetTexture(c);
                    c = h.Get2DScaleFactorToZ(f.GetTotalZElevation());
                    this._particleEngine.SetParticleScale(h.GetRenderScale() *
                        c);
                    this._particleEngine.Draw(a, d.GetTexRect(), b)
                }
            }
        }
        SaveToJson() {
            const a = this._particleEngine;
            return {
                r: a.GetRate(),
                sc: a.GetSprayCone(),
                st: a.GetSprayType(),
                isp: a.GetInitSpeed(),
                isz: a.GetInitSize(),
                io: a.GetInitOpacity(),
                gr: a.GetGrowRate(),
                xr: a.GetInitXRandom(),
                yr: a.GetInitYRandom(),
                spr: a.GetInitSpeedRandom(),
                szr: a.GetInitSizeRandom(),
                grnd: a.GetGrowRandom(),
                acc: a.GetAcceleration(),
                g: a.GetGravity(),
                lar: a.GetLifeAngleRandom(),
                lsr: a.GetLifeSpeedRandom(),
                lor: a.GetLifeOpacityRandom(),
                dm: a.GetDestroyModeIndex(),
                to: a.GetTimeout(),
                s: a.IsSpraying(),
                pcc: a._GetCreateCounter(),
                ft: this._isFirstTick,
                p: a.GetParticles().map(d => d.toJSON())
            }
        }
        LoadFromJson(a) {
            var d = this._particleEngine;
            d.SetRate(a.r);
            d.SetSprayCone(a.sc);
            d.SetSprayType(a.st);
            d.SetInitSpeed(a.isp);
            d.SetInitSize(a.isz);
            d.SetInitOpacity(a.io);
            d.SetGrowRate(a.gr);
            d.SetInitXRandom(a.xr);
            d.SetInitYRandom(a.yr);
            d.SetInitSpeedRandom(a.spr);
            d.SetInitSizeRandom(a.szr);
            d.SetGrowRandom(a.grnd);
            d.SetAcceleration(a.acc);
            d.SetGravity(a.g);
            d.SetLifeAngleRandom(a.lar);
            d.SetLifeSpeedRandom(a.lsr);
            d.SetLifeOpacityRandom(a.lor);
            d.SetDestroyModeIndex(a.dm);
            d.SetTimeout(a.to);
            d.SetSpraying(a.s);
            d._SetCreateCounter(a.pcc);
            this._isFirstTick = a.ft;
            a = a.p;
            d.SetParticleCount(a.length);
            d = d.GetParticles();
            for(let c = 0, f = d.length; c < f; ++c) d[c].setFromJSON(a[c])
        }
        Tick() {
            const a = this._runtime.GetDt(this._inst);
            this._UpdateEngineParameters();
            this._isFirstTick && "one-shot" === this._particleEngine.GetSprayType() && this._particleEngine.ReInitAllParticles();
            this._particleEngine.Tick(a);
            this._particleEngine.IsSpraying() &&
                this._runtime.UpdateRender();
            this.GetWorldInfo().SetBboxChanged();
            this._isFirstTick = !1
        }
        _OnParticleCreate(a) {
            const d = this._runtime.CreateInstance(this._spawnObjectClass, this.GetWorldInfo().GetLayer(), a.GetX(), a.GetY()),
                c = d.GetWorldInfo();
            c.SetSize(a.GetSize(), a.GetSize());
            c.SetAngle(a.GetAngle());
            c.SetOpacity(a.GetOpacity());
            c.SetUnpremultipliedColor(this.GetWorldInfo().GetUnpremultipliedColor());
            c.SetBboxChanged();
            c.ZOrderMoveAdjacentToInstance(this.GetInstance(), !0);
            d._TriggerOnCreated();
            a.SetUpdateCallback(this._particleUpdateCallback);
            a.SetDestroyCallback(this._particleDestroyCallback);
            return d
        }
        _OnParticleUpdate(a, d, c, f, h, g) {
            a.IsDestroyed() || (a = a.GetWorldInfo(), a.OffsetXY(d, c), a.SetSize(a.GetWidth() + f, a.GetHeight() + f), a.SetAngle(a.GetAngle() + h), a.SetOpacity(a.GetOpacity() + g), a.SetBboxChanged())
        }
        _OnParticleDestroy(a) {
            a.IsDestroyed() || this._runtime.DestroyInstance(a)
        }
        GetPropertyValueByIndex(a) {
            const d = this._particleEngine;
            switch(a) {
                case 0:
                    return d.GetRate();
                case 1:
                    return e.toDegrees(d.GetSprayCone());
                case 2:
                    return "one-shot" === d.GetSprayType() ?
                        1 : 0;
                case 4:
                    return d.GetInitSpeed();
                case 5:
                    return d.GetInitSize();
                case 6:
                    return 100 * d.GetInitOpacity();
                case 7:
                    return d.GetGrowRate();
                case 8:
                    return d.GetInitXRandom();
                case 9:
                    return d.GetInitYRandom();
                case 10:
                    return d.GetInitSpeedRandom();
                case 11:
                    return d.GetInitSizeRandom();
                case 12:
                    return d.GetGrowRandom();
                case 13:
                    return d.GetAcceleration();
                case 14:
                    return d.GetGravity();
                case 15:
                    return d.GetLifeAngleRandom();
                case 16:
                    return d.GetLifeSpeedRandom();
                case 17:
                    return d.GetLifeOpacityRandom();
                case 18:
                    return d.GetDestroyModeIndex();
                case 19:
                    return d.GetTimeout()
            }
        }
        SetPropertyValueByIndex(a, d) {
            const c = this._particleEngine;
            switch(a) {
                case 0:
                    c.SetRate(d);
                    break;
                case 1:
                    c.SetSprayCone(e.toRadians(d));
                    break;
                case 2:
                    c.SetSprayType(d ? "one-shot" : "continuous-spray");
                    break;
                case 4:
                    c.SetInitSpeed(d);
                    break;
                case 5:
                    c.SetInitSize(d);
                    break;
                case 6:
                    c.SetInitOpacity(d / 100);
                    break;
                case 7:
                    c.SetGrowRate(d);
                    break;
                case 8:
                    c.SetInitXRandom(d);
                    break;
                case 9:
                    c.SetInitYRandom(d);
                    break;
                case 10:
                    c.SetInitSpeedRandom(d);
                    break;
                case 11:
                    c.SetInitSizeRandom(d);
                    break;
                case 12:
                    c.SetGrowRandom(d);
                    break;
                case 13:
                    c.SetAcceleration(d);
                    break;
                case 14:
                    c.SetGravity(d);
                    break;
                case 15:
                    c.SetLifeAngleRandom(d);
                    break;
                case 16:
                    c.SetLifeSpeedRandom(d);
                    break;
                case 17:
                    c.SetLifeOpacityRandom(d);
                    break;
                case 18:
                    c.SetDestroyModeIndex(d);
                    break;
                case 19:
                    c.SetTimeout(d)
            }
        }
        GetDebuggerProperties() {
            const a = this._particleEngine;
            return [{
                title: "plugins.particles.name",
                properties: [{
                        name: "plugins.particles.debugger.particle-count",
                        value: a.GetParticleCount()
                    }, {
                        name: "plugins.particles.properties.type.name",
                        value: ["plugins.particles.properties.type.items." +
                            a.GetSprayType()
                        ]
                    }, {
                        name: "plugins.particles.debugger.is-spraying",
                        value: a.IsSpraying(),
                        onedit: d => a.SetSpraying(d)
                    }, {
                        name: "plugins.particles.properties.rate.name",
                        value: a.GetRate(),
                        onedit: d => a.SetRate(d)
                    }, {
                        name: "plugins.particles.properties.spray-cone.name",
                        value: e.toDegrees(a.GetSprayCone()),
                        onedit: d => a.SetSprayCone(e.toRadians(d))
                    }, {
                        name: "plugins.particles.properties.speed.name",
                        value: a.GetInitSpeed(),
                        onedit: d => a.SetInitSpeed(d)
                    }, {
                        name: "plugins.particles.properties.size.name",
                        value: a.GetInitSize(),
                        onedit: d => a.SetInitSize(d)
                    }, {
                        name: "plugins.particles.properties.opacity.name",
                        value: a.GetInitOpacity(),
                        onedit: d => a.SetInitOpacity(d)
                    }, {
                        name: "plugins.particles.properties.grow-rate.name",
                        value: a.GetGrowRate(),
                        onedit: d => a.SetGrowRate(d)
                    }, {
                        name: "plugins.particles.properties.x-randomiser.name",
                        value: a.GetInitXRandom(),
                        onedit: d => a.SetInitXRandom(d)
                    }, {
                        name: "plugins.particles.properties.y-randomiser.name",
                        value: a.GetInitYRandom(),
                        onedit: d => a.SetInitYRandom(d)
                    }, {
                        name: "plugins.particles.properties.initial-speed-randomiser.name",
                        value: a.GetInitSpeedRandom(),
                        onedit: d => a.SetInitSpeedRandom(d)
                    }, {
                        name: "plugins.particles.properties.size-randomiser.name",
                        value: a.GetInitSizeRandom(),
                        onedit: d => a.SetInitSizeRandom(d)
                    }, {
                        name: "plugins.particles.properties.grow-rate-randomiser.name",
                        value: a.GetGrowRandom(),
                        onedit: d => a.SetGrowRandom(d)
                    }, {
                        name: "plugins.particles.properties.acceleration.name",
                        value: a.GetAcceleration(),
                        onedit: d => a.SetAcceleration(d)
                    }, {
                        name: "plugins.particles.properties.gravity.name",
                        value: a.GetGravity(),
                        onedit: d => a.SetGravity(d)
                    },
                    {
                        name: "plugins.particles.properties.angle-randomiser.name",
                        value: a.GetLifeAngleRandom(),
                        onedit: d => a.SetLifeAngleRandom(d)
                    }, {
                        name: "plugins.particles.properties.life-speed-randomiser.name",
                        value: a.GetLifeSpeedRandom(),
                        onedit: d => a.SetLifeSpeedRandom(d)
                    }, {
                        name: "plugins.particles.properties.opacity-randomiser.name",
                        value: a.GetLifeOpacityRandom(),
                        onedit: d => a.SetLifeOpacityRandom(d)
                    }, {
                        name: "plugins.particles.properties.timeout.name",
                        value: a.GetTimeout(),
                        onedit: d => a.SetTimeout(d)
                    }
                ]
            }]
        }
    }
}
"use strict";
self.C3.Plugins.Particles.Cnds = {
    IsSpraying() {
        return this._particleEngine.IsSpraying()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Acts = {
        SetSpraying(b) {
            this._particleEngine.SetSpraying(0 !== b)
        },
        SetRate(b) {
            this._particleEngine.SetRate(b);
            "one-shot" === this._particleEngine.GetSprayType() && this._isFirstTick && this._particleEngine.SetParticleCount(b)
        },
        SetParticleObject(b) {
            this._SetParticleObjectClass(b)
        },
        UnsetParticleObject() {
            this._SetParticleObjectClass(null)
        },
        SetSprayCone(b) {
            this._particleEngine.SetSprayCone(e.toRadians(b))
        },
        SetInitSpeed(b) {
            this._particleEngine.SetInitSpeed(b)
        },
        SetInitSize(b) {
            this._particleEngine.SetInitSize(b)
        },
        SetInitOpacity(b) {
            this._particleEngine.SetInitOpacity(b / 100)
        },
        SetGrowRate(b) {
            this._particleEngine.SetGrowRate(b)
        },
        SetXRandomiser(b) {
            this._particleEngine.SetInitXRandom(b)
        },
        SetYRandomiser(b) {
            this._particleEngine.SetInitYRandom(b)
        },
        SetSpeedRandomiser(b) {
            this._particleEngine.SetInitSpeedRandom(b)
        },
        SetSizeRandomiser(b) {
            this._particleEngine.SetInitSizeRandom(b)
        },
        SetGrowRateRandomiser(b) {
            this._particleEngine.SetGrowRandom(b)
        },
        SetParticleAcc(b) {
            this._particleEngine.SetAcceleration(b)
        },
        SetGravity(b) {
            this._particleEngine.SetGravity(b)
        },
        SetAngleRandomiser(b) {
            this._particleEngine.SetLifeAngleRandom(b)
        },
        SetLifeSpeedRandomiser(b) {
            this._particleEngine.SetLifeSpeedRandom(b)
        },
        SetOpacityRandomiser(b) {
            this._particleEngine.SetLifeOpacityRandom(b)
        },
        SetTimeout(b) {
            this._particleEngine.SetTimeout(b)
        },
        SetEffect(b) {
            this.GetWorldInfo().SetBlendMode(b);
            this._runtime.UpdateRender()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Particles.Exps = {
        ParticleCount() {
            return this._particleEngine.GetParticleCount()
        },
        Rate() {
            return this._particleEngine.GetRate()
        },
        SprayCone() {
            return e.toDegrees(this._particleEngine.GetSprayCone())
        },
        InitSpeed() {
            return this._particleEngine.GetInitSpeed()
        },
        InitSize() {
            return this._particleEngine.GetInitSize()
        },
        InitOpacity() {
            return 100 * this._particleEngine.GetInitOpacity()
        },
        InitGrowRate() {
            return this._particleEngine.GetGrowRate()
        },
        XRandom() {
            return this._particleEngine.GetInitXRandom()
        },
        YRandom() {
            return this._particleEngine.GetInitYRandom()
        },
        InitSpeedRandom() {
            return this._particleEngine.GetInitSpeedRandom()
        },
        InitGrowRandom() {
            return this._particleEngine.GetGrowRandom()
        },
        ParticleAcceleration() {
            return this._particleEngine.GetAcceleration()
        },
        Gravity() {
            return this._particleEngine.GetGravity()
        },
        ParticleAngleRandom() {
            return this._particleEngine.GetLifeAngleRandom()
        },
        ParticleSpeedRandom() {
            return this._particleEngine.GetLifeSpeedRandom()
        },
        ParticleOpacityRandom() {
            return this._particleEngine.GetLifeOpacityRandom()
        },
        Timeout() {
            return this._particleEngine.GetTimeout()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [],
        a = new Set(["continuous-spray", "one-shot"]),
        d = ["fade-to-invisible", "timeout-expired", "particle-stopped"];
    self.ParticleEngine = class {
        constructor() {
            this._sprayCone = this._rate = 0;
            this._sprayType = "continuous-spray";
            this._isSpraying = !1;
            this._masterOpacity = 0;
            this._isPixelRounding = !1;
            this._initSize = this._initSpeed = this._spawnAngle = this._spawnY = this._spawnX = 0;
            this._initSizeScale = 1;
            this._createCounter = this._timeout = this._destroyMode = this._lifeOpacityRandom = this._lifeSpeedRandom =
                this._lifeAngleRandom = this._gravity = this._acceleration = this._growRandom = this._initSizeRandom = this._initSpeedRandom = this._yRandom = this._xRandom = this._growRate = this._initOpacity = 0;
            this._particleScale = 1;
            this.onparticlecreate = this.ononeshotfinish = null;
            this._particles = [];
            this._boundingBox = new e.Rect;
            this._color = new e.Color
        }
        Release() {
            this.Cancel();
            e.clearArray(this._particles);
            this._color = this._boundingBox = this.onparticlecreate = this.ononeshotfinish = this._particles = null
        }
        Cancel() {
            const c = this._particles;
            for(let f = 0, h = c.length; f < h; ++f) c[f].Destroy();
            e.appendArray(b, c);
            e.clearArray(c);
            1E3 < b.length && e.truncateArray(b, 1E3);
            this._isSpraying = !1
        }
        CreateOneShotSpray() {
            for(let c = 0, f = this._rate; c < f; ++c) this._CreateParticle();
            this._particles.length && (this._isSpraying = !0)
        }
        _CreateParticle() {
            let c;
            b.length ? (c = b.pop(), c.SetEngine(this)) : c = e.New(self.Particle, this);
            this._particles.push(c);
            c.Init(this.onparticlecreate);
            return c
        }
        ReInitAllParticles() {
            const c = this._particles,
                f = this.onparticlecreate;
            for(let h = 0, g = c.length; h <
                g; ++h) c[h].Init(f)
        }
        SetParticleCount(c) {
            var f = this._particles;
            if(c < f.length) {
                c = f.length - c;
                for(let h = 0; h < c; ++h) {
                    const g = f.pop();
                    g.Destroy();
                    b.push(g)
                }
                1E3 < b.length && e.truncateArray(b, 1E3)
            } else if(c > f.length)
                for(f = c - f.length, c = 0; c < f; ++c) this._CreateParticle()
        }
        GetParticles() {
            return this._particles
        }
        GetParticleCount() {
            return this._particles.length
        }
        Tick(c) {
            this._SpawnContinuous(c);
            this._TickParticles(c);
            this._MaybeFinishOneShot()
        }
        _SpawnContinuous(c) {
            if("continuous-spray" === this._sprayType && this._isSpraying) {
                this._createCounter +=
                    c * this._rate;
                c = Math.floor(this._createCounter);
                this._createCounter -= c;
                for(let f = 0; f < c; ++f) this._CreateParticle()
            }
        }
        _SetCreateCounter(c) {
            this._createCounter = c
        }
        _GetCreateCounter() {
            return this._createCounter
        }
        _TickParticles(c) {
            const f = this._boundingBox;
            f.set(this._spawnX, this._spawnY, this._spawnX, this._spawnY);
            const h = this._particles;
            let g = 0;
            for(let k = 0, m = h.length; k < m; ++k) {
                const p = h[k];
                h[g] = p;
                p.Tick(c);
                p.IsActive() ? (++g, f.expandToContain(p.GetBoundingBox())) : (p.Destroy(), b.push(p))
            }
            e.truncateArray(h, g);
            1E3 < b.length && e.truncateArray(b, 1E3)
        }
        _MaybeFinishOneShot() {
            if("one-shot" === this._sprayType && 0 === this._particles.length && this._isSpraying) {
                if(this.ononeshotfinish) this.ononeshotfinish();
                this._isSpraying = !1
            }
        }
        Draw(c, f, h) {
            c.StartRenderingPoints(f);
            this._color.copy(c.GetColor());
            const g = this._particles;
            for(let k = 0, m = g.length; k < m; ++k) {
                const p = g[k];
                h.intersectsRect(p.GetBoundingBox()) && p.Draw(c, f)
            }
            c.FinishRenderingPoints()
        }
        GetColor() {
            return this._color
        }
        SetRate(c) {
            this._rate = +c
        }
        GetRate() {
            return this._rate
        }
        SetSprayCone(c) {
            this._sprayCone = +c
        }
        GetSprayCone() {
            return this._sprayCone
        }
        SetSprayType(c) {
            if(!a.has(c)) throw Error("invalid spray type");
            this._sprayType = c
        }
        GetSprayType() {
            return this._sprayType
        }
        SetSpraying(c) {
            this._isSpraying = !!c
        }
        IsSpraying() {
            return this._isSpraying
        }
        SetMasterOpacity(c) {
            this._masterOpacity = +c
        }
        GetMasterOpacity() {
            return this._masterOpacity
        }
        SetPixelRounding(c) {
            this._isPixelRounding = !!c
        }
        IsPixelRounding() {
            return this._isPixelRounding
        }
        SetSpawnX(c) {
            this._spawnX = +c
        }
        GetSpawnX() {
            return this._spawnX
        }
        SetSpawnY(c) {
            this._spawnY = +c
        }
        GetSpawnY() {
            return this._spawnY
        }
        SetSpawnAngle(c) {
            this._spawnAngle = +c
        }
        GetInitAngle() {
            return this._spawnAngle
        }
        SetInitSpeed(c) {
            this._initSpeed = +c
        }
        GetInitSpeed() {
            return this._initSpeed
        }
        SetInitSize(c) {
            this._initSize = +c
        }
        GetInitSize() {
            return this._initSize
        }
        SetInitSizeScale(c) {
            this._initSizeScale = +c
        }
        GetInitSizeScale() {
            return this._initSizeScale
        }
        SetInitOpacity(c) {
            this._initOpacity = +c
        }
        GetInitOpacity() {
            return this._initOpacity
        }
        SetGrowRate(c) {
            this._growRate = +c
        }
        GetGrowRate() {
            return this._growRate
        }
        SetInitXRandom(c) {
            this._xRandom = +c
        }
        GetInitXRandom() {
            return this._xRandom
        }
        SetInitYRandom(c) {
            this._yRandom = +c
        }
        GetInitYRandom() {
            return this._yRandom
        }
        SetInitSpeedRandom(c) {
            this._initSpeedRandom = +c
        }
        GetInitSpeedRandom() {
            return this._initSpeedRandom
        }
        SetInitSizeRandom(c) {
            this._initSizeRandom = +c
        }
        GetInitSizeRandom() {
            return this._initSizeRandom
        }
        SetGrowRandom(c) {
            this._growRandom = +c
        }
        GetGrowRandom() {
            return this._growRandom
        }
        SetAcceleration(c) {
            this._acceleration = +c
        }
        GetAcceleration() {
            return this._acceleration
        }
        SetGravity(c) {
            this._gravity = +c
        }
        GetGravity() {
            return this._gravity
        }
        SetLifeAngleRandom(c) {
            this._lifeAngleRandom = +c
        }
        GetLifeAngleRandom() {
            return this._lifeAngleRandom
        }
        SetLifeSpeedRandom(c) {
            this._lifeSpeedRandom = +c
        }
        GetLifeSpeedRandom() {
            return this._lifeSpeedRandom
        }
        SetLifeOpacityRandom(c) {
            this._lifeOpacityRandom = +c
        }
        GetLifeOpacityRandom() {
            return this._lifeOpacityRandom
        }
        SetDestroyMode(c) {
            c = d.indexOf(c);
            if(-1 === c) throw Error("invalid destroy mode");
            this._destroyMode = c
        }
        SetDestroyModeIndex(c) {
            this.SetDestroyMode(d[c])
        }
        GetDestroyMode() {
            return d[this._destroyMode]
        }
        GetDestroyModeIndex() {
            return this._destroyMode
        }
        SetTimeout(c) {
            this._timeout = +c
        }
        GetTimeout() {
            return this._timeout
        }
        SetParticleScale(c) {
            this._particleScale = +c
        }
        GetParticleScale() {
            return this._particleScale
        }
        GetBoundingBox() {
            return this._boundingBox
        }
    }
} {
    "use strict";
    const e = self.C3;

    function b(h) {
        return Math.random() * h - h / 2
    }
    const a = new e.Quad,
        d = new e.Color,
        c = self.devicePixelRatio || 1;
    let f = !1;
    self.Particle = class {
        constructor(h) {
            this._engine = h;
            this._isActive = !1;
            this._angle = this._speed = this._y = this._x = 0;
            this._opacity = 1;
            this._age = this._gs = this._halfSize = this._size = this._grow = this._lastOpacity = 0;
            this._bbox = new e.Rect;
            this._destroyCallback = this._updateCallback = this._userData = null
        }
        SetEngine(h) {
            this._engine = h
        }
        Init(h) {
            const g = this._engine;
            this._isActive = !0;
            this._x = g.GetSpawnX() + b(g.GetInitXRandom());
            this._y = g.GetSpawnY() + b(g.GetInitYRandom());
            this._speed = g.GetInitSpeed() + b(g.GetInitSpeedRandom());
            this._angle = g.GetInitAngle() + b(g.GetSprayCone());
            this._lastOpacity = this._opacity = g.GetInitOpacity();
            this._size = (g.GetInitSize() + b(g.GetInitSizeRandom())) * g.GetInitSizeScale();
            this._halfSize = this._size / 2;
            this._grow = g.GetGrowRate() + b(g.GetGrowRandom());
            this._age = this._gs = 0;
            this._UpdateBoundingBox();
            h ? this._userData || (this._userData = h(this)) : this._destroyCallback =
                this._updateCallback = this._userData = null
        }
        SetUpdateCallback(h) {
            this._updateCallback = h
        }
        SetDestroyCallback(h) {
            this._destroyCallback = h
        }
        Destroy() {
            const h = this._destroyCallback;
            h && h(this._userData);
            this._destroyCallback = this._updateCallback = this._userData = null
        }
        toJSON() {
            return [this._x, this._y, this._speed, this._angle, this._opacity, this._grow, this._size, this._gs, this._age]
        }
        setFromJSON(h) {
            this._x = h[0];
            this._y = h[1];
            this._speed = h[2];
            this._angle = h[3];
            this._opacity = h[4];
            this._grow = h[5];
            this._size = h[6];
            this._gs =
                h[7];
            this._age = h[8];
            this._halfSize = this._size / 2;
            this._UpdateBoundingBox()
        }
        Tick(h) {
            var g = this._engine,
                k = this._speed * h,
                m = this._angle;
            const p = Math.cos(m) * k;
            k = Math.sin(m) * k + this._gs * h;
            this._x += p;
            this._y += k;
            m = this._grow * h;
            this._size += m;
            this._halfSize = this._size / 2;
            this._speed += g.GetAcceleration() * h;
            this._gs += g.GetGravity() * h;
            this._age += h;
            this._UpdateBoundingBox();
            var x = g.GetLifeAngleRandom(),
                t = g.GetLifeSpeedRandom();
            const q = g.GetLifeOpacityRandom();
            let r = 0;
            0 !== x && (r = b(x * h), this._angle += r);
            0 !== t && (this._speed +=
                b(t * h));
            0 !== q && (this._opacity = e.clamp(this._opacity + b(q * h), 0, 1));
            h = 1 <= this._size && (2 === g.GetDestroyModeIndex() ? 0 < this._speed : this._age < g.GetTimeout());
            (x = this._updateCallback) && h && (t = g.GetMasterOpacity() * this._opacity, 0 === g.GetDestroyModeIndex() && (t *= 1 - this._age / g.GetTimeout()), g = t - this._lastOpacity, this._lastOpacity = t, x(this._userData, p, k, m, r, g));
            this._isActive = h
        }
        IsActive() {
            return this._isActive
        }
        GetBoundingBox() {
            return this._bbox
        }
        _UpdateBoundingBox() {
            const h = this._x,
                g = this._y,
                k = this._halfSize;
            this._bbox.set(h -
                k, g - k, h + k, g + k)
        }
        Draw(h, g) {
            if(!this._userData) {
                var k = this._engine,
                    m = k.GetMasterOpacity() * this._opacity;
                0 === k.GetDestroyModeIndex() && (m *= 1 - this._age / k.GetTimeout());
                if(!(0 >= m)) {
                    var p = this._size,
                        x = p * k.GetParticleScale() * c;
                    if(!(1 > x)) {
                        var t = this._x,
                            q = this._y;
                        k.IsPixelRounding() && (t = t + .5 | 0, q = q + .5 | 0);
                        h.IsWebGPU() ? h.Point(t, q, p, m) : x > h.GetMaxPointSize() || x < h.GetMinPointSize() ? (d.copy(k.GetColor()), d.multiplyAlpha(m), h.SetColor(d), f = !0, a.setFromRect(this._bbox), h.Quad3(a, g)) : (f && (h.SetColor(k.GetColor()), f = !1), h.Point(t, q, x, m))
                    }
                }
            }
        }
        GetUserData() {
            return this._userData
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSize() {
            return this._size
        }
        GetAngle() {
            return this._angle
        }
        GetOpacity() {
            return this._opacity
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    e.Plugins.Touch.Type = class extends e.SDKTypeBase {
        constructor(c) {
            super(c)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
        GetScriptInterfaceClass() {
            return self.ITouchObjectType
        }
    };
    let a = null;

    function d() {
        return a.GetSingleGlobalInstance().GetSdkInstance()
    }
    self.ITouchObjectType = class extends self.IObjectClass {
        constructor(c) {
            super(c);
            a = c;
            c.GetRuntime()._GetCommonScriptInterfaces().touch = this
        }
        requestPermission(c) {
            b.RequireString(c);
            const f = d();
            if("orientation" === c) return f._RequestPermission(0);
            if("motion" === c) return f._RequestPermission(1);
            throw Error("invalid type");
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, "touch");
            this._touches = new Map;
            this._isMouseDown = this._useMouseInput = !1;
            this._getTouchIndex = this._curTouchY = this._curTouchX = this._triggerPermission = this._triggerId = this._triggerIndex = this._accWithGZ = this._accWithGY = this._accWithGX = this._accZ = this._accY = this._accX = this._orientGamma = this._orientBeta = this._orientAlpha = this._orientCompassHeading = 0;
            this._permissionPromises = [];
            a && (this._useMouseInput =
                a[0]);
            this.AddDOMMessageHandler("permission-result", d => this._OnPermissionResult(d));
            b = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "pointerdown", d => this._OnPointerDown(d.data)), e.Disposable.From(b, "pointermove", d => this._OnPointerMove(d.data)), e.Disposable.From(b, "pointerup", d => this._OnPointerUp(d.data, !1)), e.Disposable.From(b, "pointercancel", d => this._OnPointerUp(d.data, !0)), e.Disposable.From(b, "deviceorientation", d => this._OnDeviceOrientation(d.data)),
                e.Disposable.From(b, "deviceorientationabsolute", d => this._OnDeviceOrientationAbsolute(d.data)), e.Disposable.From(b, "devicemotion", d => this._OnDeviceMotion(d.data)), e.Disposable.From(b, "tick2", d => this._OnTick2()))
        }
        Release() {
            this._touches.clear();
            super.Release()
        }
        _OnPointerDown(b) {
            if("mouse" === b.pointerType)
                if(this._useMouseInput) this._isMouseDown = !0;
                else return;
            const a = b.pointerId;
            if(!this._touches.has(a)) {
                var d = b.pageX - this._runtime.GetCanvasClientX();
                b = b.pageY - this._runtime.GetCanvasClientY();
                var c =
                    performance.now(),
                    f = this._touches.size;
                this._triggerIndex = f;
                this._triggerId = a;
                var h = e.New(e.Plugins.Touch.TouchInfo);
                h.Init(c, d, b, a, f);
                this._touches.set(a, h);
                this.Trigger(e.Plugins.Touch.Cnds.OnNthTouchStart);
                this.Trigger(e.Plugins.Touch.Cnds.OnTouchStart);
                this._curTouchX = d;
                this._curTouchY = b;
                this.Trigger(e.Plugins.Touch.Cnds.OnTouchObject)
            }
        }
        _OnPointerMove(b) {
            if("mouse" !== b.pointerType || this._isMouseDown) {
                var a = this._touches.get(b.pointerId);
                if(a) {
                    var d = performance.now();
                    if(!(2 > d - a.GetTime())) {
                        var c =
                            b.pageX - this._runtime.GetCanvasClientX(),
                            f = b.pageY - this._runtime.GetCanvasClientY();
                        a.Update(d, c, f, b.width, b.height, b.pressure)
                    }
                }
            }
        }
        _OnPointerUp(b, a) {
            if("mouse" === b.pointerType)
                if(this._isMouseDown) this._isMouseDown = !1;
                else return;
            const d = performance.now();
            b = b.pointerId;
            const c = this._touches.get(b);
            c && (this._triggerIndex = c.GetStartIndex(), this._triggerId = c.GetId(), this.Trigger(e.Plugins.Touch.Cnds.OnNthTouchEnd), this.Trigger(e.Plugins.Touch.Cnds.OnTouchEnd), a || (a = c.ShouldTriggerTap(d), "single-tap" ===
                a ? (this.Trigger(e.Plugins.Touch.Cnds.OnTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnTapGestureObject)) : "double-tap" === a && (this.Trigger(e.Plugins.Touch.Cnds.OnDoubleTapGesture), this._curTouchX = c.GetX(), this._curTouchY = c.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnDoubleTapGestureObject))), c.Release(), this._touches.delete(b))
        }
        _RequestPermission(b) {
            this._PostToDOMMaybeSync("request-permission", {
                type: b
            });
            return new Promise((a, d) => {
                this._permissionPromises.push({
                    type: b,
                    resolve: a,
                    reject: d
                })
            })
        }
        _OnPermissionResult(b) {
            const a = b.result,
                d = b.type;
            this._triggerPermission = d;
            b = this._permissionPromises.filter(c => c.type === d);
            for(const c of b) c.resolve(a ? "granted" : "denied");
            this._permissionPromises = this._permissionPromises.filter(c => c.type !== d);
            a ? (this.Trigger(e.Plugins.Touch.Cnds.OnPermissionGranted), 0 === d ? this._runtime.RequestDeviceOrientationEvent() : this._runtime.RequestDeviceMotionEvent()) : this.Trigger(e.Plugins.Touch.Cnds.OnPermissionDenied)
        }
        _OnDeviceOrientation(b) {
            "number" ===
            typeof b.webkitCompassHeading ? this._orientCompassHeading = b.webkitCompassHeading : b.absolute && (this._orientCompassHeading = b.alpha);
            this._orientAlpha = b.alpha;
            this._orientBeta = b.beta;
            this._orientGamma = b.gamma
        }
        _OnDeviceOrientationAbsolute(b) {
            this._orientCompassHeading = b.alpha
        }
        _OnDeviceMotion(b) {
            const a = b.acceleration;
            a && (this._accX = a.x, this._accY = a.y, this._accZ = a.z);
            if(b = b.accelerationIncludingGravity) this._accWithGX = b.x, this._accWithGY = b.y, this._accWithGZ = b.z
        }
        _OnTick2() {
            const b = performance.now();
            let a =
                0;
            for(const d of this._touches.values()) d.GetTime() <= b - 50 && d._SetLastTime(b), d.ShouldTriggerHold(b) && (this._triggerIndex = d.GetStartIndex(), this._triggerId = d.GetId(), this._getTouchIndex = a, this.Trigger(e.Plugins.Touch.Cnds.OnHoldGesture), this._curTouchX = d.GetX(), this._curTouchY = d.GetY(), this.Trigger(e.Plugins.Touch.Cnds.OnHoldGestureObject), this._getTouchIndex = 0), ++a
        }
        _GetTouchByIndex(b) {
            b = Math.floor(b);
            for(const a of this._touches.values()) {
                if(0 === b) return a;
                --b
            }
            return null
        }
        _IsClientPosOnCanvas(b, a) {
            return 0 <=
                b && 0 <= a && b < this._runtime.GetCanvasCssWidth() && a < this._runtime.GetCanvasCssHeight()
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.touch.debugger.touches",
                properties: [...this._touches.values()].map(b => ({
                    name: "$" + b.GetId(),
                    value: b.GetX() + ", " + b.GetY()
                }))
            }]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = [];
    e.Plugins.Touch.Cnds = {
        OnTouchStart() {
            return !0
        },
        OnTouchEnd() {
            return !0
        },
        IsInTouch() {
            return 0 < this._touches.size
        },
        OnTouchObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        IsTouchingObject(a) {
            if(!a) return !1;
            const d = a.GetCurrentSol();
            var c = d.GetInstances();
            for(const f of c) {
                c = f.GetWorldInfo();
                const h = c.GetLayer();
                for(const g of this._touches.values()) {
                    if(!this._IsClientPosOnCanvas(g.GetX(),
                            g.GetY())) continue;
                    const [k, m] = h.CanvasCssToLayer(g.GetX(), g.GetY(), c.GetTotalZElevation());
                    if(c.ContainsPoint(k, m)) {
                        b.push(f);
                        break
                    }
                }
            }
            return b.length ? (d.SetArrayPicked(b), a.ApplySolToContainer(), e.clearArray(b), !0) : !1
        },
        CompareTouchSpeed(a, d, c) {
            return (a = this._GetTouchByIndex(a)) ? e.compare(a.GetSpeed(), d, c) : !1
        },
        OrientationSupported() {
            return !0
        },
        MotionSupported() {
            return !0
        },
        CompareOrientation(a, d, c) {
            this._runtime.RequestDeviceOrientationEvent();
            return e.compare(0 === a ? this._orientAlpha : 1 === a ? this._orientBeta :
                this._orientGamma, d, c)
        },
        CompareAcceleration(a, d, c) {
            this._runtime.RequestDeviceMotionEvent();
            return e.compare(0 === a ? this._accWithGX : 1 === a ? this._accWithGY : 2 === a ? this._accWithGZ : 3 === a ? this._accX : 4 === a ? this._accY : this._accZ, d, c)
        },
        OnNthTouchStart(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        OnNthTouchEnd(a) {
            a = Math.floor(a);
            return a === this._triggerIndex
        },
        HasNthTouch(a) {
            a = Math.floor(a);
            return this._touches.size >= a + 1
        },
        OnHoldGesture() {
            return !0
        },
        OnTapGesture() {
            return !0
        },
        OnDoubleTapGesture() {
            return !0
        },
        OnHoldGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a, this._curTouchX, this._curTouchY, !1) : !1
        },
        OnDoubleTapGestureObject(a) {
            return a && this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY) ? this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(a,
                this._curTouchX, this._curTouchY, !1) : !1
        },
        OnPermissionGranted(a) {
            return this._triggerPermission === a
        },
        OnPermissionDenied(a) {
            return this._triggerPermission === a
        }
    }
}
"use strict";
self.C3.Plugins.Touch.Acts = {
    RequestPermission(e) {
        this._RequestPermission(e)
    }
}; {
    "use strict";
    const e = self.C3;
    e.Plugins.Touch.Exps = {
        TouchCount() {
            return this._touches.size
        },
        X(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !0) : 0
        },
        Y(b) {
            const a = this._GetTouchByIndex(this._getTouchIndex);
            return a ? a.GetPositionForLayer(this._runtime.GetCurrentLayout(), b, !1) : 0
        },
        XAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YAt(b, a) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        XForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !0) : 0
        },
        YForID(b, a) {
            return (b = this._touches.get(b)) ? b.GetPositionForLayer(this._runtime.GetCurrentLayout(), a, !1) : 0
        },
        AbsoluteX() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetX() : 0
        },
        AbsoluteY() {
            const b = this._GetTouchByIndex(0);
            return b ? b.GetY() : 0
        },
        AbsoluteXAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetX() : 0
        },
        AbsoluteYAt(b) {
            return (b = this._GetTouchByIndex(b)) ?
                b.GetY() : 0
        },
        AbsoluteXForID(b) {
            return (b = this._touches.get(b)) ? b.GetX() : 0
        },
        AbsoluteYForID(b) {
            return (b = this._touches.get(b)) ? b.GetY() : 0
        },
        SpeedAt(b) {
            return (b = this._GetTouchByIndex(b)) ? b.GetSpeed() : 0
        },
        SpeedForID(b) {
            return (b = this._touches.get(b)) ? b.GetSpeed() : 0
        },
        AngleAt(b) {
            return (b = this._GetTouchByIndex(b)) ? e.toDegrees(b.GetAngle()) : 0
        },
        AngleForID(b) {
            return (b = this._touches.get(b)) ? e.toDegrees(b.GetAngle()) : 0
        },
        CompassHeading() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientCompassHeading
        },
        Alpha() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientAlpha
        },
        Beta() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientBeta
        },
        Gamma() {
            this._runtime.RequestDeviceOrientationEvent();
            return this._orientGamma
        },
        AccelerationXWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGX
        },
        AccelerationYWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGY
        },
        AccelerationZWithG() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accWithGZ
        },
        AccelerationX() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accX
        },
        AccelerationY() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accY
        },
        AccelerationZ() {
            this._runtime.RequestDeviceMotionEvent();
            return this._accZ
        },
        TouchIndex() {
            return this._triggerIndex
        },
        TouchID() {
            return this._triggerId
        },
        WidthForID(b) {
            return (b = this._touches.get(b)) ? b.GetWidth() : 0
        },
        HeightForID(b) {
            return (b = this._touches.get(b)) ? b.GetHeight() : 0
        },
        PressureForID(b) {
            return (b = this._touches.get(b)) ? b.GetPressure() : 0
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = -1E3,
        a = -1E3,
        d = -1E4;
    e.Plugins.Touch.TouchInfo = class extends e.DefendedBase {
        constructor() {
            super();
            this._pressure = this._height = this._width = this._lastY = this._lastX = this._y = this._x = this._startY = this._startX = this._lastTime = this._time = this._startTime = this._startIndex = this._pointerId = 0;
            this._isTooFarForHold = this._hasTriggeredHold = !1
        }
        Release() {}
        Init(c, f, h, g, k) {
            this._pointerId = g;
            this._startIndex = k;
            this._startTime = this._lastTime = this._time = c;
            this._startX = f;
            this._startY = h;
            this._x = f;
            this._y = h;
            this._lastX = f;
            this._lastY = h
        }
        Update(c, f, h, g, k, m) {
            this._lastTime = this._time;
            this._time = c;
            this._lastX = this._x;
            this._lastY = this._y;
            this._x = f;
            this._y = h;
            this._width = g;
            this._height = k;
            this._pressure = m;
            !this._isTooFarForHold && 15 <= e.distanceTo(this._startX, this._startY, this._x, this._y) && (this._isTooFarForHold = !0)
        }
        GetId() {
            return this._pointerId
        }
        GetStartIndex() {
            return this._startIndex
        }
        GetTime() {
            return this._time
        }
        _SetLastTime(c) {
            this._lastTime = c
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSpeed() {
            const c =
                e.distanceTo(this._x, this._y, this._lastX, this._lastY),
                f = (this._time - this._lastTime) / 1E3;
            return 0 < f ? c / f : 0
        }
        GetAngle() {
            return e.angleTo(this._lastX, this._lastY, this._x, this._y)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetPressure() {
            return this._pressure
        }
        ShouldTriggerHold(c) {
            return this._hasTriggeredHold ? !1 : 500 <= c - this._startTime && !this._isTooFarForHold && 15 > e.distanceTo(this._startX, this._startY, this._x, this._y) ? this._hasTriggeredHold = !0 : !1
        }
        ShouldTriggerTap(c) {
            if(this._hasTriggeredHold) return "";
            if(333 >= c - this._startTime && !this._isTooFarForHold && 15 > e.distanceTo(this._startX, this._startY, this._x, this._y)) {
                if(666 >= c - d && 25 > e.distanceTo(b, a, this._x, this._y)) return a = b = -1E3, d = -1E4, "double-tap";
                b = this._x;
                a = this._y;
                d = c;
                return "single-tap"
            }
            return ""
        }
        GetPositionForLayer(c, f, h) {
            return "undefined" === typeof f ? c.GetLayerByIndex(0).CanvasCssToLayer_DefaultTransform(this._x, this._y)[h ? 0 : 1] : (c = c.GetLayer(f)) ? c.CanvasCssToLayer(this._x, this._y)[h ? 0 : 1] : 0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Browser = class extends e.SDKPluginBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Browser.Type = class extends e.SDKTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Plugins.Browser.Instance = class extends e.SDKInstanceBase {
        constructor(b, a) {
            super(b, "browser");
            this._initLocationStr = "";
            this._isOnline = !1;
            this._docTitle = this._referrer = "";
            this._isCookieEnabled = !1;
            this._windowOuterHeight = this._windowOuterWidth = this._screenHeight = this._screenWidth = 0;
            this._isScirraArcade = !1;
            this.AddDOMMessageHandlers([
                ["online-state", d => this._OnOnlineStateChanged(d)],
                ["backbutton", () => this._OnBackButton()],
                ["sw-message", d => this._OnSWMessage(d)],
                ["hashchange",
                    d => this._OnHashChange(d)
                ]
            ]);
            b = this.GetRuntime().Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "afterfirstlayoutstart", () => this._OnAfterFirstLayoutStart()), e.Disposable.From(b, "window-resize", () => this._OnWindowResize()), e.Disposable.From(b, "suspend", () => this._OnSuspend()), e.Disposable.From(b, "resume", () => this._OnResume()));
            this._runtime.AddLoadPromise(this.PostToDOMAsync("get-initial-state", {
                exportType: this._runtime.GetExportType()
            }).then(d => {
                this._initLocationStr = d.location;
                this._isOnline = d.isOnline;
                this._referrer = d.referrer;
                this._docTitle = d.title;
                this._isCookieEnabled = d.isCookieEnabled;
                this._screenWidth = d.screenWidth;
                this._screenHeight = d.screenHeight;
                this._windowOuterWidth = d.windowOuterWidth;
                this._windowOuterHeight = d.windowOuterHeight;
                this._isScirraArcade = d.isScirraArcade
            }))
        }
        Release() {
            super.Release()
        }
        _OnAfterFirstLayoutStart() {
            this.PostToDOM("ready-for-sw-messages")
        }
        async _OnOnlineStateChanged(b) {
            b = !!b.isOnline;
            this._isOnline !== b && ((this._isOnline = b) ? await this.TriggerAsync(e.Plugins.Browser.Cnds.OnOnline) :
                await this.TriggerAsync(e.Plugins.Browser.Cnds.OnOffline))
        }
        async _OnWindowResize() {
            await this.TriggerAsync(e.Plugins.Browser.Cnds.OnResize)
        }
        _OnSuspend() {
            this.Trigger(e.Plugins.Browser.Cnds.OnPageHidden)
        }
        _OnResume() {
            this.Trigger(e.Plugins.Browser.Cnds.OnPageVisible)
        }
        async _OnBackButton() {
            await this.TriggerAsync(e.Plugins.Browser.Cnds.OnBackButton)
        }
        _OnSWMessage(b) {
            b = b.type;
            "downloading-update" === b ? this.Trigger(e.Plugins.Browser.Cnds.OnUpdateFound) : "update-ready" === b || "update-pending" === b ? this.Trigger(e.Plugins.Browser.Cnds.OnUpdateReady) :
                "offline-ready" === b && this.Trigger(e.Plugins.Browser.Cnds.OnOfflineReady)
        }
        _OnHashChange(b) {
            this._initLocationStr = b.location;
            this.Trigger(e.Plugins.Browser.Cnds.OnHashChange)
        }
        GetDebuggerProperties() {
            return [{
                title: "plugins.browser.name",
                properties: [{
                    name: "plugins.browser.debugger.user-agent",
                    value: navigator.userAgent
                }, {
                    name: "plugins.browser.debugger.is-online",
                    value: this._isOnline
                }, {
                    name: "plugins.browser.debugger.is-fullscreen",
                    value: this._runtime.GetCanvasManager().IsDocumentFullscreen()
                }]
            }]
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Cnds = {
    IsOnline() {
        return this._isOnline
    },
    OnOnline() {
        return !0
    },
    OnOffline() {
        return !0
    },
    OnResize() {
        return !0
    },
    CookiesEnabled() {
        return this._isCookieEnabled
    },
    IsFullscreen() {
        return this._runtime.GetCanvasManager().IsDocumentFullscreen()
    },
    OnBackButton() {
        return !0
    },
    IsPortraitLandscape(e) {
        const b = this._runtime.GetCanvasManager().GetLastWidth(),
            a = this._runtime.GetCanvasManager().GetLastHeight();
        return (b <= a ? 0 : 1) === e
    },
    OnUpdateFound() {
        return !0
    },
    OnUpdateReady() {
        return !0
    },
    OnOfflineReady() {
        return !0
    },
    OnHashChange() {
        return !0
    },
    PageVisible() {
        return !this._runtime.IsSuspended()
    },
    OnPageHidden() {
        return !0
    },
    OnPageVisible() {
        return !0
    },
    HasJava() {
        return !1
    },
    IsDownloadingUpdate() {
        return !1
    },
    OnMenuButton() {
        return !1
    },
    OnSearchButton() {
        return !1
    },
    IsMetered() {
        return !1
    },
    IsCharging() {
        return !0
    },
    SupportsFullscreen() {
        return !0
    }
}; {
    "use strict";
    const e = self.C3,
        b = "portrait landscape portrait-primary portrait-secondary landscape-primary landscape-secondary".split(" ");
    e.Plugins.Browser.Acts = {
        Alert(a) {
            this.PostToDOM("alert", {
                message: a.toString()
            })
        },
        Close() {
            this._isScirraArcade || (this._runtime.IsDebug() ? self.C3Debugger.CloseWindow() : this.PostToDOM("close"))
        },
        Focus() {
            this.PostToDOM("set-focus", {
                isFocus: !0
            })
        },
        Blur() {
            this.PostToDOM("set-focus", {
                isFocus: !1
            })
        },
        GoBack() {
            this._isScirraArcade || this.PostToDOM("navigate", {
                type: "back"
            })
        },
        GoForward() {
            this._isScirraArcade || this.PostToDOM("navigate", {
                type: "forward"
            })
        },
        GoHome() {},
        Reload() {
            this._isScirraArcade || (this._runtime.IsDebug() ? this._runtime.PostToDebugger({
                type: "reload"
            }) : this.PostToDOM("navigate", {
                type: "reload"
            }))
        },
        GoToURL(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "url",
                url: a,
                target: d,
                exportType: this._runtime.GetExportType()
            })
        },
        GoToURLWindow(a, d) {
            this._PostToDOMMaybeSync("navigate", {
                type: "new-window",
                url: a,
                tag: d,
                exportType: this._runtime.GetExportType()
            })
        },
        RequestFullScreen(a,
            d) {
            2 <= a && (a += 1);
            6 === a && (a = 2);
            1 === a && (a = 0);
            a = e.CanvasManager._FullscreenModeNumberToString(a);
            this._runtime.GetCanvasManager().SetDocumentFullscreenMode(a);
            this._PostToDOMMaybeSync("request-fullscreen", {
                navUI: d
            })
        },
        CancelFullScreen() {
            this._PostToDOMMaybeSync("exit-fullscreen")
        },
        Vibrate(a) {
            a = a.split(",");
            for(let d = 0, c = a.length; d < c; ++d) a[d] = parseInt(a[d], 10);
            this._PostToDOMMaybeSync("vibrate", {
                pattern: a
            })
        },
        async InvokeDownload(a, d) {
            a && d && (a = await this._runtime.GetAssetManager().GetProjectFileUrl(a), this._runtime.InvokeDownload(a,
                d))
        },
        InvokeDownloadString(a, d, c) {
            c && (a = `data:${d},${encodeURIComponent(a)}`, this._runtime.InvokeDownload(a, c))
        },
        ConsoleLog(a, d) {
            d = d.toString();
            0 === a ? console.log(d) : 1 === a ? console.warn(d) : 2 === a && console.error(d)
        },
        ConsoleGroup(a) {
            console.group(a)
        },
        ConsoleGroupEnd() {
            console.groupEnd()
        },
        ExecJs(a) {
            try {
                eval(a)
            } catch (d) {
                console.error("Error executing JavaScript: ", d)
            }
        },
        LockOrientation(a) {
            a = Math.floor(a);
            0 > a || a >= b.length || this._PostToDOMMaybeSync("lock-orientation", {
                orientation: b[a]
            })
        },
        UnlockOrientation() {
            this._PostToDOMMaybeSync("unlock-orientation")
        },
        LoadStyleSheet(a) {
            this._runtime.GetAssetManager().LoadStyleSheet(a)
        },
        SetHash(a) {
            this.PostToDOM("set-hash", {
                hash: a
            })
        }
    }
}
"use strict";
self.C3.Plugins.Browser.Exps = {
    URL() {
        return this._runtime.IsInWorker() ? this._initLocationStr : location.toString()
    },
    Protocol() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).protocol : location.protocol
    },
    Domain() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hostname : location.hostname
    },
    Port() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).port : location.port
    },
    PathName() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).pathname :
            location.pathname
    },
    Hash() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).hash : location.hash
    },
    QueryString() {
        return this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search
    },
    QueryParam(e) {
        const b = this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search;
        return (e = RegExp("[?&]" + e + "=([^&]*)").exec(b)) ? decodeURIComponent(e[1].replace(/\+/g, " ")) : ""
    },
    Referrer() {
        return this._referrer
    },
    Title() {
        return this._docTitle
    },
    Language() {
        return navigator.language
    },
    Platform() {
        return navigator.platform
    },
    UserAgent() {
        return navigator.userAgent
    },
    ExecJS(e) {
        let b = 0;
        try {
            b = eval(e)
        } catch (a) {
            console.error("Error executing JavaScript: ", a)
        }
        return "number" === typeof b || "string" === typeof b ? b : "boolean" === typeof b ? b ? 1 : 0 : 0
    },
    Name() {
        return navigator.appName
    },
    Version() {
        return navigator.appVersion
    },
    Product() {
        return navigator.product
    },
    Vendor() {
        return navigator.vendor
    },
    BatteryLevel() {
        return 1
    },
    BatteryTimeLeft() {
        return Infinity
    },
    Bandwidth() {
        const e = navigator.connection;
        return e ? e.downlink ||
            e.downlinkMax || e.bandwidth || Infinity : Infinity
    },
    ConnectionType() {
        const e = navigator.connection;
        return e ? e.type || "unknown" : "unknown"
    },
    DevicePixelRatio() {
        return self.devicePixelRatio
    },
    ScreenWidth() {
        return this._screenWidth
    },
    ScreenHeight() {
        return this._screenHeight
    },
    WindowInnerWidth() {
        return this._runtime.GetCanvasManager().GetLastWidth()
    },
    WindowInnerHeight() {
        return this._runtime.GetCanvasManager().GetLastHeight()
    },
    WindowOuterWidth() {
        return this._windowOuterWidth
    },
    WindowOuterHeight() {
        return this._windowOuterWidth
    }
};
"use strict";
C3.Plugins.GM_SDK = class extends C3.SDKPluginBase {
    constructor(e) {
        super(e)
    }
    Release() {
        super.Release()
    }
};
"use strict";
C3.Plugins.GM_SDK.Type = class extends C3.SDKTypeBase {
    constructor(e) {
        super(e)
    }
    Release() {
        super.Release()
    }
    OnCreate() {}
};
"use strict";
C3.Plugins.GM_SDK.Instance = class extends C3.SDKInstanceBase {
    constructor(e, b) {
        super(e);
        this._gameID = "";
        this._preloadedAd = this._adViewed = this._adPlaying = this._sdkReady = !1;
        this._available_adtypes = ["interstitial"];
        b && (this._gameID = b[0]);
        window.SDK_OPTIONS = {
            gameId: this._gameID,
            onEvent: a => {
                switch(a.name) {
                    case "SDK_GAME_START":
                        this._adPlaying = !1;
                        break;
                    case "SDK_GAME_PAUSE":
                        this._adPlaying = !0;
                        break;
                    case "COMPLETE":
                        this._adViewed = !0;
                        setTimeout(() => {
                            this._adViewed = !1
                        }, 5E3);
                        break;
                    case "SDK_READY":
                        this._sdkReady = !0
                }
            }
        };
        (function(a, d, c) {
            var f = a.getElementsByTagName(d)[0];
            a.getElementById(c) || (a = a.createElement(d), a.id = c, a.src = "", f.parentNode.insertBefore(a, f))
        })(document, "script", "gamemonetize-sdk")
    }
    Release() {
        super.Release()
    }
    SaveToJson() {
        return {}
    }
    LoadFromJson(e) {}
    // ShowAd() {
    //     var e = window.sdk;
    //     "undefined" !== e && "undefined" !== e.showBanner && e.showBanner()
    // }
};
"use strict";
C3.Plugins.GM_SDK.Cnds = {
    ResumeGame() {
        return !this._adPlaying
    },
    PauseGame() {
        return this._adPlaying
    },
    PreloadedAd() {
        return this._preloadedAd
    },
    AdViewed() {
        return this._adViewed
    }
};
"use strict";
C3.Plugins.GM_SDK.Acts = {
    ShowAd() {
        this.ShowAd()
    }
};
"use strict";
C3.Plugins.GM_SDK.Exps = {}; {
    "use strict";
    const e = self.C3,
        b = self.C3X;
    let a = null,
        d = null,
        c = [],
        f = null,
        h = null;

    function g(m, p, x) {
        var t = m.GetSavedDataMap();
        const q = p.GetSavedDataMap();
        x ? ((t = t.get("Physics_DisabledCollisions")) && t.delete(p.GetSID()), (p = q.get("Physics_DisabledCollisions")) && p.delete(m.GetSID())) : (x = t.get("Physics_DisabledCollisions"), x || (x = new Set, t.set("Physics_DisabledCollisions", x)), t = q.get("Physics_DisabledCollisions"), t || (t = new Set, q.set("Physics_DisabledCollisions", t)), x.add(p.GetSID()), t.add(m.GetSID()))
    }
    e.Behaviors.Physics =
        class extends e.SDKBehaviorBase {
            constructor(m) {
                m.scriptInterfaceClass = self.IPhysicsBehavior;
                super(m);
                this._world = null;
                this._worldG = 10;
                this._worldScale = .02;
                this._worldManifold = null;
                this._lastUpdateTick = -1;
                this._steppingMode = 1;
                this._velocityIterations = 8;
                this._positionIterations = 3;
                this._allCollisionsEnabled = !0;
                this._runtime.AddLoadPromise(this._LoadBox2DWasm())
            }
            async _LoadBox2DWasm() {
                const m = await this._runtime.GetAssetManager().GetProjectFileUrl("https://64345986-62434566.preview.editmysite.com/uploads/9/9/0/8/139890129/custom_themes/104868751615748392/files/box2d.wasm");
                await new Promise(p => {
                    self.Box2DWasmModule({
                        wasmBinaryFile: m
                    }).then(x => {
                        f = x;
                        this._InitBox2DWorld();
                        p()
                    })
                })
            }
            _InitBox2DWorld() {
                const m = this._runtime.GetCollisionEngine();
                a = e.Behaviors.Physics.GetVec2(0, 0);
                d = e.Behaviors.Physics.GetVec2(0, 0);
                this._world = new f.b2World(e.Behaviors.Physics.GetTempVec2A(0, this._worldG), !0);
                var p = new f.JSContactListener;
                p.BeginContact = x => {
                    var t = f.wrapPointer(x, f.b2Contact);
                    x = e.Behaviors.Physics.Instance.LookupBehInstFromBody(t.GetFixtureA().GetBody());
                    t = e.Behaviors.Physics.Instance.LookupBehInstFromBody(t.GetFixtureB().GetBody());
                    m.RegisterCollision(x.GetObjectInstance(),
                        t.GetObjectInstance())
                };
                p.EndContact = () => {};
                p.PreSolve = () => {};
                p.PostSolve = () => {};
                this._world.SetContactListener(p);
                p = new f.JSContactFilter;
                p.ShouldCollide = (x, t) => {
                    if(this._allCollisionsEnabled) return !0;
                    x = f.wrapPointer(x, f.b2Fixture);
                    t = f.wrapPointer(t, f.b2Fixture);
                    x = e.Behaviors.Physics.Instance.LookupBehInstFromBody(x.GetBody());
                    t = e.Behaviors.Physics.Instance.LookupBehInstFromBody(t.GetBody());
                    x = x.GetObjectInstance().GetObjectClass();
                    const q = t.GetObjectInstance().GetObjectClass();
                    t = x.GetSID();
                    const r =
                        q.GetSID();
                    return (x = x.GetSavedDataMap().get("Physics_DisabledCollisions")) && x.has(r) ? !1 : (x = q.GetSavedDataMap().get("Physics_DisabledCollisions")) && x.has(t) ? !1 : !0
                };
                this._world.SetContactFilter(p);
                this._worldManifold = new f.b2WorldManifold
            }
            Release() {
                super.Release()
            }
            GetBox2D() {
                return f
            }
            GetWorld() {
                return this._world
            }
            GetWorldScale() {
                return this._worldScale
            }
            GetSteppingMode() {
                return this._steppingMode
            }
            SetSteppingMode(m) {
                this._steppingMode = m
            }
            SetLastUpdateTick(m) {
                this._lastUpdateTick = m
            }
            GetLastUpdateTick() {
                return this._lastUpdateTick
            }
            SetVelocityIterations(m) {
                this._velocityIterations =
                    Math.max(m, 1)
            }
            GetVelocityIterations() {
                return this._velocityIterations
            }
            SetPositionIterations(m) {
                this._positionIterations = Math.max(m, 1)
            }
            GetPositionIterations() {
                return this._positionIterations
            }
            SetIterations(m, p) {
                this.SetVelocityIterations(m);
                this.SetPositionIterations(p)
            }
            GetGravity() {
                return this._worldG
            }
            SetGravity(m) {
                m !== this._worldG && (this._world.SetGravity(e.Behaviors.Physics.GetTempVec2A(0, m)), this._worldG = m, this._WakeUpAllPhysicsBodies())
            }
            _WakeUpAllPhysicsBodies() {
                for(const p of this.GetInstances()) {
                    var m =
                        e.Behaviors.Physics.Instance.LookupBehInstFromInst(p);
                    m && (m = m.GetBody()) && m.SetAwake(!0)
                }
            }
            DisableShouldCollideFastPath() {
                this._allCollisionsEnabled = !1
            }
            SetCollisionsEnabled(m, p, x) {
                x = !!x;
                if(m && p) {
                    if(p.IsFamily())
                        for(const t of p.GetFamilyMembers()) g(m, t, x);
                    else g(m, p, x);
                    this.DisableShouldCollideFastPath()
                }
            }
            GetWorldManifold() {
                return this._worldManifold
            }
            static GetPhysicsCollisionKey() {
                return "Physics_DisabledCollisions"
            }
            static GetVec2(m, p) {
                if(c.length) {
                    const x = c.pop();
                    x.set_x(m);
                    x.set_y(p);
                    return x
                }
                return new f.b2Vec2(m,
                    p)
            }
            static FreeVec2(m) {
                c.push(m)
            }
            static GetTempVec2A(m, p) {
                a.set_x(m);
                a.set_y(p);
                return a
            }
            static GetTempVec2B(m, p) {
                d.set_x(m);
                d.set_y(p);
                return d
            }
            static CreatePolygonShape(m) {
                const p = new f.b2PolygonShape,
                    x = f._malloc(8 * m.length);
                var t = 0;
                for(let q = 0; q < m.length; ++q) f.HEAPF32[x + t >> 2] = m[q].get_x(), f.HEAPF32[x + (t + 4) >> 2] = m[q].get_y(), t += 8;
                t = f.wrapPointer(x, f.b2Vec2);
                p.Set(t, m.length);
                f._free(x);
                return p
            }
        };
    const k = ["fixed", "variable"];
    self.IPhysicsBehavior = class extends self.IBehavior {
        constructor(m) {
            super(m);
            h = m
        }
        set worldGravity(m) {
            b.RequireFiniteNumber(m);
            h.SetGravity(m)
        }
        get worldGravity() {
            return h.GetGravity()
        }
        set steppingMode(m) {
            m = k.indexOf(m);
            if(0 > m) throw Error("invalid stepping mode");
            h.SetSteppingMode(k[m])
        }
        get steppingMode() {
            return k[h.GetSteppingMode()]
        }
        set velocityIterations(m) {
            b.RequireFiniteNumber(m);
            h.SetVelocityIterations(m)
        }
        get velocityIterations() {
            return h.GetVelocityIterations()
        }
        set positionIterations(m) {
            b.RequireFiniteNumber(m);
            h.SetPositionIterations(m)
        }
        get positionIterations() {
            return h.GetPositionIterations()
        }
        setCollisionsEnabled(m,
            p, x) {
            const t = h.GetRuntime();
            m = t._UnwrapIObjectClass(m);
            p = t._UnwrapIObjectClass(p);
            h.SetCollisionsEnabled(m, p, !!x)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Physics.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance,
        d = new WeakMap,
        c = new WeakMap,
        f = new WeakMap,
        h = e.Behaviors.Physics.GetTempVec2A,
        g = e.Behaviors.Physics.GetTempVec2B,
        k = e.New(e.Rect),
        m = e.New(e.Quad);
    e.Behaviors.Physics.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(t, q) {
            super(t);
            t = this.GetBehavior();
            const r = this.GetWorldInfo();
            this._box2d = t.GetBox2D();
            this._world = t.GetWorld();
            this._worldScale = t.GetWorldScale();
            this._isImmovable = !1;
            this._collisionMask = 0;
            this._preventRotation = !1;
            this._density = 1;
            this._friction = .5;
            this._restitution = .2;
            this._linearDamping = 0;
            this._angularDamping = .01;
            this._isBullet = !1;
            this._isEnabled = !0;
            this._body = null;
            this._fixtures = [];
            this._myJoints = [];
            this._myCreatedJoints = [];
            this._joiningMe = new Set;
            this._lastKnownX = r.GetX();
            this._lastKnownY = r.GetY();
            this._lastKnownAngle = r.GetAngle();
            this._lastHeight = this._lastWidth = 0;
            this._lastTickOverride = !1;
            q && (this._isImmovable = !!q[0], this._collisionMask = q[1], this._preventRotation = !!q[2], this._density = q[3], this._friction =
                q[4], this._restitution = q[5], this._linearDamping = q[6], this._angularDamping = q[7], this._isBullet = !!q[8], this._isEnabled = !!q[9]);
            q = this._runtime.Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(q, "instancedestroy", y => this._OnInstanceDestroyed(y.instance)), e.Disposable.From(q, "beforeload", () => this._OnBeforeLoad()), e.Disposable.From(q, "afterload", () => this._OnAfterLoad()));
            c.set(this._inst, this);
            this._isEnabled && this._StartTicking()
        }
        PostCreate() {
            this._CreateBody()
        }
        Release() {
            this._DestroyMyJoints();
            e.clearArray(this._myCreatedJoints);
            this._joiningMe.clear();
            this._body && (this._DestroyFixtures(), this._world.DestroyBody(this._body), this._body = null);
            super.Release()
        }
        _CreateFixture(t) {
            if(this._body) return t = this._body.CreateFixture(t), this._fixtures.push(t), t
        }
        _DestroyFixtures() {
            if(this._body) {
                for(const t of this._fixtures) this._body.DestroyFixture(t);
                e.clearArray(this._fixtures)
            }
        }
        _GetBoundingQuadExcludingMesh() {
            const t = this.GetWorldInfo();
            return t.HasMesh() ? (t.CalculateBbox(k, m, !1), m) : t.GetBoundingQuad()
        }
        _Destroy(t) {
            this._box2d.destroy(t)
        }
        _CreateBody() {
            if(this._isEnabled) {
                var t =
                    this._box2d.b2FixtureDef,
                    q = this._box2d.b2BodyDef,
                    r = this.GetWorldInfo();
                if(!this._body) {
                    q = new q;
                    q.set_type(this._isImmovable ? 0 : 2);
                    var y = this._GetBoundingQuadExcludingMesh();
                    q.set_position(g(y.midX() * this._worldScale, y.midY() * this._worldScale));
                    q.set_angle(r.GetAngle());
                    q.set_fixedRotation(this._preventRotation);
                    q.set_linearDamping(this._linearDamping);
                    q.set_angularDamping(this._angularDamping);
                    q.set_bullet(this._isBullet);
                    this._body = this._world.CreateBody(q);
                    this._Destroy(q);
                    d.set(this._body, this)
                }
                this._DestroyFixtures();
                t = new t;
                t.set_density(this._density);
                t.set_friction(this._friction);
                t.set_restitution(this._restitution);
                y = r.HasOwnCollisionPoly();
                q = this._collisionMask;
                y || this._inst.HasTilemap() || 0 !== q || (q = 1);
                y = Math.max(Math.abs(r.GetWidth()), 1);
                var v = Math.max(Math.abs(r.GetHeight()), 1);
                0 === q ? this._inst.HasTilemap() ? this._CreateTilemapFixtures(t) : this._CreatePolygonFixture(t, y, v) : 1 === q ? this._CreateBoundingBoxFixture(t, y, v) : this._CreateCircleFixture(t, y, v);
                this._lastWidth = r.GetWidth();
                this._lastHeight = r.GetHeight();
                r.SetPhysicsBodyChanged(!1);
                this._Destroy(t)
            }
        }
        _CreateBoundingBoxFixture(t, q, r) {
            const y = new this._box2d.b2PolygonShape;
            y.SetAsBox(q * this._worldScale * .5, r * this._worldScale * .5);
            t.set_shape(y);
            this._CreateFixture(t);
            this._Destroy(y)
        }
        _CreateCircleFixture(t, q, r) {
            const y = new this._box2d.b2CircleShape;
            y.set_m_radius(Math.min(q, r) * this._worldScale * .5);
            t.set_shape(y);
            this._CreateFixture(t);
            this._Destroy(y)
        }
        _CreatePolygonFixture(t, q, r) {
            var y = this.GetWorldInfo(),
                v = 0 > y.GetWidth();
            const u = 0 > y.GetHeight(),
                A = this._worldScale;
            var z = y.GetAngle();
            0 !== z && (y.SetAngle(0), y.SetBboxChanged());
            var C = this._GetBoundingQuadExcludingMesh();
            const E = C.midX() - y.GetX();
            C = C.midY() - y.GetY();
            0 !== z && (y.SetAngle(z), y.SetBboxChanged());
            z = y.GetCustomTransformedCollisionPoly(v ? -q : q, u ? -r : r, 0).pointsArr();
            const J = z.length / 2;
            y = [];
            for(let F = 0; F < J; ++F) y.push(e.Behaviors.Physics.GetVec2(z[2 * F] - E, z[2 * F + 1] - C));
            v !== u && y.reverse();
            v = e.Behaviors.Physics.Separator.Separate(y, q * r);
            for(const F of y) e.Behaviors.Physics.FreeVec2(F);
            if(v.length)
                for(const F of v) {
                    for(const H of F) H.set_x(H.get_x() *
                        A), H.set_y(H.get_y() * A);
                    q = e.Behaviors.Physics.CreatePolygonShape(F);
                    t.set_shape(q);
                    this._CreateFixture(t);
                    this._Destroy(q);
                    for(const H of F) e.Behaviors.Physics.FreeVec2(H)
                } else this._CreateBoundingBoxFixture(t, q, r)
        }
        _CreateTilemapFixtures(t) {
            var q = this.GetWorldInfo(),
                r = this._GetBoundingQuadExcludingMesh();
            const y = r.midX() - q.GetX();
            q = r.midY() - q.GetY();
            r = this._worldScale;
            const v = e.Behaviors.Physics.GetVec2,
                u = e.Behaviors.Physics.FreeVec2,
                A = [];
            this._inst.GetSdkInstance().GetAllCollisionRects(A);
            const z = [];
            for(let H = 0, K = A.length; H < K; ++H) {
                var C = A[H],
                    E = C.GetRect(),
                    J = C.GetPoly();
                if(J) {
                    var F = f.get(J);
                    if(!F) {
                        F = J.pointsArr();
                        const N = J.pointCount();
                        for(let S = 0; S < N; ++S) z.push(v(F[2 * S], F[2 * S + 1]));
                        C = C.GetTileId() & 3758096384;
                        (-2147483648 === C || 1073741824 === C || 536870912 === C || C & -2147483648 && C & 1073741824 && C & 536870912) && z.reverse();
                        F = e.Behaviors.Physics.Separator.Separate(z, E.width() * E.height());
                        f.set(J, F);
                        for(const S of z) u(S);
                        e.clearArray(z)
                    }
                    for(let N = 0, S = F.length; N < S; ++N) {
                        J = F[N];
                        for(let V = 0, U = J.length; V < U; ++V) z.push(v((E.getLeft() +
                            J[V].get_x() - y) * r, (E.getTop() + J[V].get_y() - q) * r));
                        J = e.Behaviors.Physics.CreatePolygonShape(z);
                        t.set_shape(J);
                        this._CreateFixture(t);
                        this._Destroy(J);
                        for(const V of z) u(V);
                        e.clearArray(z)
                    }
                } else z.push(v((E.getLeft() - y) * r, (E.getTop() - q) * r)), z.push(v((E.getRight() - y) * r, (E.getTop() - q) * r)), z.push(v((E.getRight() - y) * r, (E.getBottom() - q) * r)), z.push(v((E.getLeft() - y) * r, (E.getBottom() - q) * r)), E = e.Behaviors.Physics.CreatePolygonShape(z), t.set_shape(E), this._CreateFixture(t), this._Destroy(E);
                for(const N of z) u(N);
                e.clearArray(z)
            }
        }
        _DestroyBody() {
            this._body && (this._DestroyMyJoints(), d.delete(this._body), this._DestroyFixtures(), this._world.DestroyBody(this._body), this._body = null)
        }
        _DestroyMyJoints() {
            for(const t of this._myJoints) this._world.DestroyJoint(t);
            e.clearArray(this._myJoints)
        }
        _RecreateMyJoints() {
            for(const t of this._myCreatedJoints) switch(t.type) {
                case 0:
                    this._DoCreateDistanceJoint(...t.params);
                    break;
                case 1:
                    this._DoCreateRevoluteJoint(...t.params);
                    break;
                case 2:
                    this._DoCreateLimitedRevoluteJoint(...t.params);
                    break;
                case 3:
                    this._DoCreatePrismaticJoint(...t.params)
            }
        }
        _GetInstImagePoint(t) {
            var q = this.GetWorldInfo();
            return -1 === t ? [q.GetX(), q.GetY()] : 0 === t && this._body ? (t = this._body.GetPosition(), q = this._body.GetLocalCenter(), [(t.get_x() + q.get_x()) / this._worldScale, (t.get_y() + q.get_y()) / this._worldScale]) : this._inst.GetImagePoint(t)
        }
        _CreateDistanceJoint(t, q, r, y, v) {
            this._isEnabled && q && q !== this._inst && e.Behaviors.Physics.Instance.LookupBehInstFromInst(q) && (this._myCreatedJoints.push({
                type: 0,
                params: [t, q.GetUID(),
                    r, y, v
                ]
            }), this._DoCreateDistanceJoint(t, q.GetUID(), r, y, v))
        }
        _DoCreateDistanceJoint(t, q, r, y, v) {
            if(this._isEnabled) {
                var u = this._runtime.GetInstanceByUID(q);
                if(u && u !== this._inst && c.has(u)) {
                    q = e.Behaviors.Physics.Instance.LookupBehInstFromInst(u);
                    q._joiningMe.add(this._inst);
                    this._UpdateBodyToMatchInstance(!1);
                    q._UpdateBodyToMatchInstance(!1);
                    var [A, z] = this._GetInstImagePoint(t), [C, E] = u.GetImagePoint(r);
                    t = A - C;
                    r = z - E;
                    u = this._worldScale;
                    var J = new this._box2d.b2DistanceJointDef;
                    J.Initialize(this._body, q.GetBody(),
                        h(A * u, z * u), g(C * u, E * u));
                    J.set_length(Math.hypot(t, r) * u);
                    J.set_dampingRatio(y);
                    J.set_frequencyHz(v);
                    this._myJoints.push(this._world.CreateJoint(J));
                    this._Destroy(J)
                }
            }
        }
        _CreateRevoluteJoint(t, q) {
            this._isEnabled && q && q !== this._inst && e.Behaviors.Physics.Instance.LookupBehInstFromInst(q) && (this._myCreatedJoints.push({
                type: 1,
                params: [t, q.GetUID()]
            }), this._DoCreateRevoluteJoint(t, q.GetUID()))
        }
        _DoCreateRevoluteJoint(t, q) {
            if(this._isEnabled && (q = this._runtime.GetInstanceByUID(q)) && q !== this._inst && c.has(q)) {
                q = e.Behaviors.Physics.Instance.LookupBehInstFromInst(q);
                q._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(!1);
                q._UpdateBodyToMatchInstance(!1);
                var [r, y] = this._GetInstImagePoint(t);
                t = this._worldScale;
                var v = new this._box2d.b2RevoluteJointDef;
                v.Initialize(this._body, q.GetBody(), h(r * t, y * t));
                this._myJoints.push(this._world.CreateJoint(v));
                this._Destroy(v)
            }
        }
        _CreateLimitedRevoluteJoint(t, q, r, y) {
            this._isEnabled && q && q !== this._inst && e.Behaviors.Physics.Instance.LookupBehInstFromInst(q) && (r = e.toDegrees(r), y = e.toDegrees(y), this._myCreatedJoints.push({
                type: 2,
                params: [t, q.GetUID(), r, y]
            }), this._DoCreateLimitedRevoluteJoint(t, q.GetUID(), r, y))
        }
        _DoCreateLimitedRevoluteJoint(t, q, r, y) {
            if(this._isEnabled && (q = this._runtime.GetInstanceByUID(q)) && q !== this._inst && c.has(q)) {
                q = e.Behaviors.Physics.Instance.LookupBehInstFromInst(q);
                q._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(!1);
                q._UpdateBodyToMatchInstance(!1);
                var [v, u] = this._GetInstImagePoint(t);
                t = this._worldScale;
                var A = new this._box2d.b2RevoluteJointDef;
                A.Initialize(this._body, q.GetBody(), h(v * t, u *
                    t));
                A.set_enableLimit(!0);
                A.set_lowerAngle(e.toRadians(r));
                A.set_upperAngle(e.toRadians(y));
                this._myJoints.push(this._world.CreateJoint(A));
                this._Destroy(A)
            }
        }
        _CreatePrismaticJoint(t, q, r, y, v, u, A, z, C) {
            this._isEnabled && q && q !== this._inst && e.Behaviors.Physics.Instance.LookupBehInstFromInst(q) && (r = e.toDegrees(r), z = e.toDegrees(z), this._myCreatedJoints.push({
                type: 3,
                params: [t, q.GetUID(), r, y, v, u, A, z, C]
            }), this._DoCreatePrismaticJoint(t, q.GetUID(), r, y, v, u, A, z, C))
        }
        _DoCreatePrismaticJoint(t, q, r, y, v, u, A, z, C) {
            if(this._isEnabled &&
                (q = this._runtime.GetInstanceByUID(q)) && q !== this._inst && c.has(q)) {
                q = e.Behaviors.Physics.Instance.LookupBehInstFromInst(q);
                q._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(!1);
                q._UpdateBodyToMatchInstance(!1);
                var [E, J] = this._GetInstImagePoint(t);
                r = e.toRadians(r);
                t = Math.cos(r);
                r = Math.sin(r);
                var F = this._worldScale,
                    H = new this._box2d.b2PrismaticJointDef;
                H.Initialize(this._body, q.GetBody(), h(E * F, J * F), g(t, r));
                H.set_enableLimit(!!y);
                H.set_lowerTranslation(v * F);
                H.set_upperTranslation(u * F);
                H.set_enableMotor(!!A);
                H.set_motorSpeed(e.toRadians(z));
                H.set_maxMotorForce(C);
                this._myJoints.push(this._world.CreateJoint(H));
                this._Destroy(H)
            }
        }
        _RemoveJoints() {
            this._isEnabled && (this._DestroyMyJoints(), e.clearArray(this._myCreatedJoints), this._joiningMe.clear())
        }
        _OnInstanceDestroyed(t) {
            const q = t.GetUID();
            let r = 0;
            for(let y = 0, v = this._myCreatedJoints.length; y < v; ++y) this._myCreatedJoints[r] = this._myCreatedJoints[y], r < this._myJoints.length && (this._myJoints[r] = this._myJoints[y]), this._myCreatedJoints[y].params[1] === q ? y < this._myJoints.length &&
                this._world.DestroyJoint(this._myJoints[y]) : ++r;
            e.truncateArray(this._myCreatedJoints, r);
            r < this._myJoints.length && e.truncateArray(this._myJoints, r);
            this._joiningMe.delete(t)
        }
        GetBody() {
            return this._body
        }
        static LookupBehInstFromBody(t) {
            return d.get(t) || null
        }
        static LookupBehInstFromInst(t) {
            return c.get(t) || null
        }
        SaveToJson() {
            const t = {
                e: this._isEnabled,
                pr: this._preventRotation,
                d: this._density,
                fr: this._friction,
                re: this._restitution,
                ld: this._linearDamping,
                ad: this._angularDamping,
                b: this._isBullet,
                mcj: this._myCreatedJoints
            };
            if(this._isEnabled) {
                const q = this._body.GetLinearVelocity();
                t.vx = q.get_x();
                t.vy = q.get_y();
                t.om = this._body.GetAngularVelocity()
            }
            return t
        }
        _OnBeforeLoad() {
            this._DestroyMyJoints();
            e.clearArray(this._myCreatedJoints);
            this._joiningMe.clear()
        }
        LoadFromJson(t) {
            this._DestroyBody();
            this._isEnabled = t.e;
            this._preventRotation = t.pr;
            this._density = t.d;
            this._friction = t.fr;
            this._restitution = t.re;
            this._linearDamping = t.ld;
            this._angularDamping = t.ad;
            this._isBullet = t.b;
            this._myCreatedJoints = t.mcj;
            const q = this.GetWorldInfo();
            this._lastKnownX = q.GetX();
            this._lastKnownY = q.GetY();
            this._lastKnownAngle = q.GetAngle();
            this._lastWidth = q.GetWidth();
            this._lastHeight = q.GetHeight();
            this._isEnabled && (this._CreateBody(), this._body.SetLinearVelocity(h(t.vx, t.vy)), this._body.SetAngularVelocity(t.om), 0 === t.vx && 0 === t.vy && 0 === t.om || this._body.SetAwake(!0), this._myCreatedJoints = t.mcj);
            this._isEnabled ? this._StartTicking() : this._StopTicking()
        }
        _OnAfterLoad() {
            this._isEnabled && this._RecreateMyJoints()
        }
        Tick() {
            if(this._isEnabled) {
                var t = this._runtime,
                    q = this.GetBehavior();
                if(0 === q.GetSteppingMode()) var r = t.GetTimeScale() / 60;
                else r = t.GetDt(this._inst), r > 1 / 30 && (r = 1 / 30);
                var y = t.GetTickCountNoSave();
                if(y > q.GetLastUpdateTick() && 0 < t.GetTimeScale()) {
                    t = this._runtime.IsDebug();
                    let v = 0;
                    t && (v = performance.now());
                    0 !== r && this._world.Step(r, q.GetVelocityIterations(), q.GetPositionIterations());
                    this._world.ClearForces();
                    t && self.C3Debugger.AddPhysicsTime(performance.now() - v);
                    q.SetLastUpdateTick(y)
                }
                this._UpdateBodyToMatchInstance(!0)
            }
        }
        _UpdateBodyToMatchInstance(t) {
            const q =
                this._inst.GetWorldInfo();
            var r = this._worldScale;
            (q.GetWidth() !== this._lastWidth || q.GetHeight() !== this._lastHeight || q.IsPhysicsBodyChanged()) && this._CreateBody();
            var y = this._body,
                v = q.GetX() !== this._lastKnownX || q.GetY() !== this._lastKnownY,
                u = q.GetAngle() !== this._lastKnownAngle;
            if(v) {
                var A = this._GetBoundingQuadExcludingMesh();
                const z = A.midX();
                A = A.midY();
                const C = z - this._lastKnownX,
                    E = A - this._lastKnownY;
                u ? y.SetTransform(h(z * r, A * r), q.GetAngle()) : y.SetTransform(h(z * r, A * r), y.GetAngle());
                t && (y.SetLinearVelocity(h(C,
                    E)), this._lastTickOverride = !0);
                y.SetAwake(!0)
            } else t && this._lastTickOverride && (t = this._GetBoundingQuadExcludingMesh(), this._lastTickOverride = !1, y.SetLinearVelocity(h(0, 0)), y.SetTransform(h(t.midX() * r, t.midY() * r), y.GetAngle()));
            !v && u && (y.SetTransform(y.GetPosition(), q.GetAngle()), y.SetAwake(!0));
            u = y.GetPosition();
            v = u.get_x() / r;
            r = u.get_y() / r;
            y = y.GetAngle();
            if(v !== q.GetX() || r !== q.GetY() || y !== q.GetAngle())
                if(q.SetXY(v, r), q.SetAngle(y), q.SetBboxChanged(), r = this._GetBoundingQuadExcludingMesh(), y = r.midX() -
                    q.GetX(), r = r.midY() - q.GetY(), 0 !== y || 0 !== r) q.OffsetXY(-y, -r), q.SetBboxChanged();
            this._lastKnownX = q.GetX();
            this._lastKnownY = q.GetY();
            this._lastKnownAngle = q.GetAngle()
        }
        GetPropertyValueByIndex(t) {
            switch(t) {
                case 2:
                    return this._IsPreventRotate();
                case 3:
                    return this._GetDensity();
                case 4:
                    return this._GetFriction();
                case 5:
                    return this._GetElasticity();
                case 6:
                    return this._GetLinearDamping();
                case 7:
                    return this._GetAngularDamping();
                case 8:
                    return this._IsBullet();
                case 9:
                    return this._IsEnabled()
            }
        }
        SetPropertyValueByIndex(t,
            q) {
            switch(t) {
                case 2:
                    this._SetPreventRotate(q);
                    break;
                case 3:
                    this._SetDensity(q);
                    break;
                case 4:
                    this._SetFriction(q);
                    break;
                case 5:
                    this._SetElasticity(q);
                    break;
                case 6:
                    this._SetLinearDamping(q);
                    break;
                case 7:
                    this._SetAngularDamping(q);
                    break;
                case 8:
                    this._SetBullet(q);
                    break;
                case 9:
                    this._SetEnabled(q)
            }
        }
        _SetEnabled(t) {
            t = !!t;
            this._isEnabled && !t ? (this._DestroyBody(), this._isEnabled = !1, this._StopTicking()) : !this._isEnabled && t && (this._isEnabled = !0, this._CreateBody(), this._StartTicking())
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetDebuggerProperties() {
            const t = [{
                name: "behaviors.physics.properties.enabled.name",
                value: this._IsEnabled(),
                onedit: q => this._SetEnabled(q)
            }, {
                name: "behaviors.physics.properties.immovable.name",
                value: this._IsImmovable(),
                onedit: q => this._SetImmovable(q)
            }, {
                name: "behaviors.physics.properties.density.name",
                value: this._GetDensity(),
                onedit: q => this._SetDensity(q)
            }, {
                name: "behaviors.physics.properties.friction.name",
                value: this._GetFriction(),
                onedit: q => this._SetFriction(q)
            }, {
                name: "behaviors.physics.properties.elasticity.name",
                value: this._GetElasticity(),
                onedit: q => this._SetElasticity(q)
            }, {
                name: "behaviors.physics.properties.linear-damping.name",
                value: this._GetLinearDamping(),
                onedit: q => this._SetLinearDamping(q)
            }, {
                name: "behaviors.physics.properties.angular-damping.name",
                value: this._GetAngularDamping(),
                onedit: q => this._SetAngularDamping(q)
            }];
            this._isEnabled && (t.push({
                    name: "behaviors.physics.debugger.is-sleeping",
                    value: this._IsSleeping()
                }), t.push({
                    name: "behaviors.physics.debugger.velocity-x",
                    value: this._GetVelocityX(),
                    onedit: q => this._SetVelocity(q, this._GetVelocityY())
                }),
                t.push({
                    name: "behaviors.physics.debugger.velocity-y",
                    value: this._GetVelocityY(),
                    onedit: q => this._SetVelocity(this._GetVelocityX(), q)
                }), t.push({
                    name: "behaviors.physics.debugger.angular-velocity",
                    value: e.toDegrees(this._GetAngularVelocity()),
                    onedit: q => this._SetAngularVelocity(e.toRadians(q))
                }), t.push({
                    name: "behaviors.physics.debugger.mass",
                    value: this._GetMass()
                }));
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: t
            }]
        }
        _ApplyForce(t, q, r) {
            const [y, v] = this._GetInstImagePoint(r);
            this._DoApplyForce(t,
                q, y, v)
        }
        _ApplyForceToward(t, q, r, y) {
            const [v, u] = this._GetInstImagePoint(y);
            q = e.angleTo(v, u, q, r);
            this._DoApplyForce(Math.cos(q) * t, Math.sin(q) * t, v, u)
        }
        _ApplyForceAtAngle(t, q, r) {
            const [y, v] = this._GetInstImagePoint(r);
            this._DoApplyForce(Math.cos(q) * t, Math.sin(q) * t, y, v)
        }
        _DoApplyForce(t, q, r, y) {
            if(this._isEnabled) {
                var v = this._worldScale;
                this._body.ApplyForce(h(t, q), g(r * v, y * v), !0)
            }
        }
        _ApplyImpulse(t, q, r) {
            const [y, v] = this._GetInstImagePoint(r);
            this._DoApplyImpulse(t, q, y, v)
        }
        _ApplyImpulseToward(t, q, r, y) {
            const [v,
                u
            ] = this._GetInstImagePoint(y);
            q = e.angleTo(v, u, q, r);
            this._DoApplyImpulse(Math.cos(q) * t, Math.sin(q) * t, v, u)
        }
        _ApplyImpulseAtAngle(t, q, r) {
            const [y, v] = this._GetInstImagePoint(r);
            this._DoApplyImpulse(Math.cos(q) * t, Math.sin(q) * t, y, v)
        }
        _DoApplyImpulse(t, q, r, y) {
            if(this._isEnabled) {
                var v = this._worldScale;
                this._body.ApplyLinearImpulse(h(t, q), g(r * v, y * v), !0);
                t = this.GetWorldInfo();
                this._lastKnownX = t.GetX();
                this._lastKnownY = t.GetY();
                this._lastTickOverride = !1
            }
        }
        _ApplyTorque(t) {
            this._isEnabled && this._body.ApplyTorque(t,
                !0)
        }
        _ApplyTorqueToAngle(t, q) {
            q = e.angleClockwise(this.GetWorldInfo().GetAngle(), q) ? -1 : 1;
            this._ApplyTorque(t * q)
        }
        _ApplyTorqueToPosition(t, q, r) {
            var y = this.GetWorldInfo();
            q = e.angleTo(y.GetX(), y.GetY(), q, r);
            y = e.angleClockwise(y.GetAngle(), q) ? -1 : 1;
            this._ApplyTorque(t * y)
        }
        _SetAngularVelocity(t) {
            this._isEnabled && (this._body.SetAngularVelocity(t), this._body.SetAwake(!0))
        }
        _GetAngularVelocity() {
            return this._isEnabled ? this._body.GetAngularVelocity() : 0
        }
        _SetVelocity(t, q) {
            if(this._isEnabled) {
                var r = this._worldScale;
                this._body.SetLinearVelocity(h(t * r, q * r));
                this._body.SetAwake(!0);
                t = this.GetWorldInfo();
                this._lastKnownX = t.GetX();
                this._lastKnownY = t.GetY();
                this._lastTickOverride = !1
            }
        }
        _GetVelocity() {
            if(!this._isEnabled) return [0, 0];
            const t = this._worldScale,
                q = this._body.GetLinearVelocity();
            return [q.get_x() / t, q.get_y() / t]
        }
        _GetVelocityX() {
            return this._isEnabled ? this._body.GetLinearVelocity().get_x() / this._worldScale : 0
        }
        _GetVelocityY() {
            return this._isEnabled ? this._body.GetLinearVelocity().get_y() / this._worldScale : 0
        }
        _SetDensity(t) {
            if(this._isEnabled &&
                this._density !== t) {
                this._density = t;
                for(const q of this._fixtures) q.SetDensity(t);
                this._body.ResetMassData()
            }
        }
        _GetDensity() {
            return this._isEnabled ? this._density : 0
        }
        _SetFriction(t) {
            if(this._isEnabled && this._friction !== t) {
                this._friction = t;
                for(var q of this._fixtures) q.SetFriction(t);
                for(t = this._body.GetContactList(); this._box2d.getPointer(t); t = t.get_next())(q = t.get_contact()) && q.ResetFriction()
            }
        }
        _GetFriction() {
            return this._isEnabled ? this._friction : 0
        }
        _SetElasticity(t) {
            if(this._isEnabled && this._restitution !==
                t) {
                this._restitution = t;
                for(const q of this._fixtures) q.SetRestitution(t)
            }
        }
        _GetElasticity() {
            return this._isEnabled ? this._restitution : 0
        }
        _SetLinearDamping(t) {
            this._isEnabled && this._linearDamping !== t && (this._linearDamping = t, this._body.SetLinearDamping(t))
        }
        _GetLinearDamping() {
            return this._isEnabled ? this._linearDamping : 0
        }
        _SetAngularDamping(t) {
            this._isEnabled && this._angularDamping !== t && (this._angularDamping = t, this._body.SetAngularDamping(t))
        }
        _GetAngularDamping() {
            return this._isEnabled ? this._angularDamping :
                0
        }
        _SetImmovable(t) {
            this._isEnabled && (t = !!t, this._isImmovable !== t && (this._isImmovable = t, this._body.SetType(this._isImmovable ? 0 : 2), this._body.SetAwake(!0)))
        }
        _IsImmovable() {
            return this._isImmovable
        }
        _SetPreventRotate(t) {
            this._isEnabled && (t = !!t, this._preventRotation !== t && (this._preventRotation = t, this._body.SetFixedRotation(this._preventRotation), this._body.SetAngularVelocity(0), this._body.SetAwake(!0)))
        }
        _IsPreventRotate() {
            return this._preventRotation
        }
        _SetBullet(t) {
            this._isEnabled && (t = !!t, this._isBullet !==
                t && (this._isBullet = t, this._body.SetBullet(this._isBullet), this._body.SetAwake(!0)))
        }
        _IsBullet() {
            return this._isBullet
        }
        _GetMass() {
            return this._isEnabled ? this._body.GetMass() / this._worldScale : 0
        }
        _GetCenterOfMassX() {
            return this._isEnabled ? (this._body.GetPosition().get_x() + this._body.GetLocalCenter().get_x()) / this._worldScale : 0
        }
        _GetCenterOfMassY() {
            return this._isEnabled ? (this._body.GetPosition().get_y() + this._body.GetLocalCenter().get_y()) / this._worldScale : 0
        }
        _GetCenterOfMass() {
            if(!this._isEnabled) return [0,
                0
            ];
            const t = this._body.GetPosition(),
                q = this._body.GetLocalCenter(),
                r = this._worldScale;
            return [(t.get_x() + q.get_x()) / r, (t.get_y() + q.get_y()) / r]
        }
        _IsSleeping() {
            return this._isEnabled ? !this._body.IsAwake() : !1
        }
        _GetContactCount() {
            if(!this._isEnabled) return 0;
            let t = 0;
            for(let r = this._body.GetContactList(); this._box2d.getPointer(r); r = r.get_next()) {
                var q = r.get_contact();
                q && (q = q.GetManifold().get_pointCount(), t += q)
            }
            return t
        }
        _GetContactPositionAt(t) {
            t = Math.floor(t);
            if(!this._isEnabled) return [0, 0];
            var q = 0;
            for(let y =
                    this._body.GetContactList(); this._box2d.getPointer(y); y = y.get_next()) {
                var r = y.get_contact();
                if(!r) continue;
                const v = r.GetManifold().get_pointCount();
                if(t >= q && t < q + v) return t -= q, q = this.GetBehavior().GetWorldManifold(), r.GetWorldManifold(q), r = q.get_points(t), [r.get_x() / this._worldScale, r.get_y() / this._worldScale];
                q += v
            }
            return [0, 0]
        }
        GetScriptInterfaceClass() {
            return self.IPhysicsBehaviorInstance
        }
    };
    const p = new WeakMap;

    function x(t, q) {
        return p.get(t).GetRuntime()._UnwrapIWorldInstance(q)
    }
    self.IPhysicsBehaviorInstance =
        class extends a {
            constructor() {
                super();
                p.set(this, a._GetInitInst().GetSdkInstance())
            }
            get isEnabled() {
                return p.get(this)._IsEnabled()
            }
            set isEnabled(t) {
                p.get(this)._SetEnabled(t)
            }
            applyForce(t, q, r = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._ApplyForce(t, q, r)
            }
            applyForceTowardPosition(t, q, r, y = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                b.RequireFiniteNumber(r);
                p.get(this)._ApplyForceToward(t, q, r, y)
            }
            applyForceAtAngle(t, q, r = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._ApplyForceAtAngle(t, q, r)
            }
            applyImpulse(t, q, r = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._ApplyImpulse(t, q, r)
            }
            applyImpulseTowardPosition(t, q, r, y = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                b.RequireFiniteNumber(r);
                p.get(this)._ApplyImpulseToward(t, q, r, y)
            }
            applyImpulseAtAngle(t, q, r = 0) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._ApplyImpulseAtAngle(t, q, r)
            }
            applyTorque(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._ApplyTorque(t)
            }
            applyTorqueToAngle(t,
                q) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._ApplyTorqueToAngle(t, q)
            }
            applyTorqueToPosition(t, q, r) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                b.RequireFiniteNumber(r);
                p.get(this)._ApplyTorqueToPosition(t, q, r)
            }
            set angularVelocity(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetAngularVelocity(t)
            }
            get angularVelocity() {
                return p.get(this)._GetAngularVelocity()
            }
            setVelocity(t, q) {
                b.RequireFiniteNumber(t);
                b.RequireFiniteNumber(q);
                p.get(this)._SetVelocity(t, q)
            }
            getVelocityX() {
                return p.get(this)._GetVelocityX()
            }
            getVelocityY() {
                return p.get(this)._GetVelocityY()
            }
            getVelocity() {
                return p.get(this)._GetVelocity()
            }
            set density(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetDensity(t)
            }
            get density() {
                return p.get(this)._GetDensity()
            }
            set friction(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetFriction(t)
            }
            get friction() {
                return p.get(this)._GetFriction()
            }
            set elasticity(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetElasticity(t)
            }
            get elasticity() {
                return p.get(this)._GetElasticity()
            }
            set linearDamping(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetLinearDamping(t)
            }
            get linearDamping() {
                return p.get(this)._GetLinearDamping()
            }
            set angularDamping(t) {
                b.RequireFiniteNumber(t);
                p.get(this)._SetAngularDamping(t)
            }
            get angularDamping() {
                return p.get(this)._GetAngularDamping()
            }
            set isImmovable(t) {
                p.get(this)._SetImmovable(t)
            }
            get isImmovable() {
                return p.get(this)._IsImmovable()
            }
            set isPreventRotation(t) {
                p.get(this)._SetPreventRotate(t)
            }
            get isPreventRotation() {
                return p.get(this)._IsPreventRotate()
            }
            set isBullet(t) {
                p.get(this)._SetBullet(t)
            }
            get isBullet() {
                return p.get(this)._IsBullet()
            }
            get mass() {
                return p.get(this)._GetMass()
            }
            getCenterOfMassX() {
                return p.get(this)._GetCenterOfMassX()
            }
            getCenterOfMassY() {
                return p.get(this)._GetCenterOfMassY()
            }
            getCenterOfMass() {
                return p.get(this)._GetCenterOfMass()
            }
            getContactCount() {
                return p.get(this)._GetContactCount()
            }
            getContactX(t) {
                b.RequireFiniteNumber(t);
                return p.get(this)._GetContactPositionAt(t)[0]
            }
            getContactY(t) {
                b.RequireFiniteNumber(t);
                return p.get(this)._GetContactPositionAt(t)[1]
            }
            getContact(t) {
                b.RequireFiniteNumber(t);
                return p.get(this)._GetContactPositionAt(t)
            }
            get isSleeping() {
                return p.get(this)._IsSleeping()
            }
            createDistanceJoint(t, q, r, y, v) {
                b.RequireFiniteNumber(y);
                b.RequireFiniteNumber(v);
                q = x(this, q);
                p.get(this)._CreateDistanceJoint(t, q, r, y, v)
            }
            createRevoluteJoint(t, q) {
                q = x(this, q);
                p.get(this)._CreateRevoluteJoint(t, q)
            }
            createLimitedRevoluteJoint(t,
                q, r, y) {
                b.RequireFiniteNumber(r);
                b.RequireFiniteNumber(y);
                q = x(this, q);
                p.get(this)._CreateLimitedRevoluteJoint(t, q, r, y)
            }
            createPrismaticJoint(t, q, r, y, v, u, A, z, C) {
                q = x(this, q);
                p.get(this)._CreatePrismaticJoint(t, q, r, y, v, u, A, z, C)
            }
            removeAllJoints() {
                p.get(this)._RemoveJoints()
            }
        }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Physics.Cnds = {
        IsSleeping() {
            return this._IsSleeping()
        },
        CompareVelocity(b, a, d) {
            if(!this._isEnabled) return !1;
            if(0 === b) b = this._GetVelocityX();
            else if(1 === b) b = this._GetVelocityY();
            else {
                const [c, f] = this._GetVelocity();
                b = Math.hypot(c, f)
            }
            return e.compare(b, a, d)
        },
        CompareAngularVelocity(b, a) {
            if(!this._isEnabled) return !1;
            const d = e.toDegrees(this._GetAngularVelocity());
            return e.compare(d, b, a)
        },
        CompareMass(b, a) {
            if(!this._isEnabled) return !1;
            const d = this._GetMass();
            return e.compare(d,
                b, a)
        },
        IsEnabled() {
            return this._IsEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Physics.Acts = {
        ApplyForce(b, a, d) {
            this._ApplyForce(b, a, d)
        },
        ApplyForceToward(b, a, d, c) {
            this._ApplyForceToward(b, a, d, c)
        },
        ApplyForceAtAngle(b, a, d) {
            this._ApplyForceAtAngle(b, e.toRadians(a), d)
        },
        ApplyImpulse(b, a, d) {
            this._ApplyImpulse(b, a, d)
        },
        ApplyImpulseToward(b, a, d, c) {
            this._ApplyImpulseToward(b, a, d, c)
        },
        ApplyImpulseAtAngle(b, a, d) {
            this._ApplyImpulseAtAngle(b, e.toRadians(a), d)
        },
        ApplyTorque(b) {
            this._ApplyTorque(e.toRadians(b))
        },
        ApplyTorqueToAngle(b, a) {
            this._ApplyTorqueToAngle(e.toRadians(b),
                e.toRadians(a))
        },
        ApplyTorqueToPosition(b, a, d) {
            this._ApplyTorqueToPosition(e.toRadians(b), a, d)
        },
        SetAngularVelocity(b) {
            this._SetAngularVelocity(e.toRadians(b))
        },
        CreateDistanceJoint(b, a, d, c, f) {
            a && (a = a.GetFirstPicked(this._inst), this._CreateDistanceJoint(b, a, d, c, f))
        },
        CreateRevoluteJoint(b, a) {
            a && (a = a.GetFirstPicked(this._inst), this._CreateRevoluteJoint(b, a))
        },
        CreateLimitedRevoluteJoint(b, a, d, c) {
            a && (a = a.GetFirstPicked(this._inst), this._CreateLimitedRevoluteJoint(b, a, e.toRadians(d), e.toRadians(c)))
        },
        CreatePrismaticJoint(b,
            a, d, c, f, h, g, k, m) {
            a && (a = a.GetFirstPicked(this._inst), this._CreatePrismaticJoint(b, a, e.toRadians(d), c, f, h, g, e.toRadians(k), m))
        },
        RemoveJoints() {
            this._RemoveJoints()
        },
        SetWorldGravity(b) {
            this.GetBehavior().SetGravity(b)
        },
        SetSteppingMode(b) {
            this.GetBehavior().SetSteppingMode(b)
        },
        SetIterations(b, a) {
            this.GetBehavior().SetIterations(b, a)
        },
        SetVelocity(b, a) {
            this._SetVelocity(b, a)
        },
        SetDensity(b) {
            this._SetDensity(b)
        },
        SetFriction(b) {
            this._SetFriction(b)
        },
        SetElasticity(b) {
            this._SetElasticity(b)
        },
        SetLinearDamping(b) {
            this._SetLinearDamping(b)
        },
        SetAngularDamping(b) {
            this._SetAngularDamping(b)
        },
        SetImmovable(b) {
            this._SetImmovable(b)
        },
        EnableCollisions(b, a) {
            this.GetBehavior().SetCollisionsEnabled(this.GetObjectClass(), b, 0 !== a)
        },
        SetPreventRotate(b) {
            this._SetPreventRotate(0 !== b)
        },
        SetBullet(b) {
            this._SetBullet(0 !== b)
        },
        SetEnabled(b) {
            this._SetEnabled(0 !== b)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Physics.Exps = {
        VelocityX() {
            return this._GetVelocityX()
        },
        VelocityY() {
            return this._GetVelocityY()
        },
        AngularVelocity() {
            return e.toDegrees(this._GetAngularVelocity())
        },
        Mass() {
            return this._GetMass()
        },
        CenterOfMassX() {
            return this._GetCenterOfMassX()
        },
        CenterOfMassY() {
            return this._GetCenterOfMassY()
        },
        Density() {
            return this._GetDensity()
        },
        Friction() {
            return this._GetFriction()
        },
        Elasticity() {
            return this._GetElasticity()
        },
        LinearDamping() {
            return this._GetLinearDamping()
        },
        AngularDamping() {
            return this._GetAngularDamping()
        },
        ContactCount() {
            return this._GetContactCount()
        },
        ContactXAt(b) {
            return this._GetContactPositionAt(b)[0]
        },
        ContactYAt(b) {
            return this._GetContactPositionAt(b)[1]
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = {};
    e.Behaviors.Physics.Separator = b;
    const a = e.Behaviors.Physics.GetVec2,
        d = e.Behaviors.Physics.FreeVec2;

    function c(g) {
        return a(g.get_x(), g.get_y())
    }
    b.det = function(g, k, m, p, x, t) {
        return g * p + m * t + x * k - k * m - p * x - t * g
    };
    b.hitRay = function(g, k, m, p, x, t, q, r) {
        var y = m - g,
            v = p - k,
            u = q - x;
        const A = r - t;
        u = (u * (t - k) - A * (x - g)) / (v * u - y * A);
        y = g + u * y;
        v = k + u * v;
        g = b.isOnSegment(m, p, g, k, y, v);
        x = b.isOnSegment(y, v, x, t, q, r);
        return g && x ? a(y, v) : null
    };
    b.isOnSegment = function(g, k, m, p, x, t) {
        return (m + .1 >= g && g >= x - .1 || m - .1 <=
            g && g <= x + .1) && (p + .1 >= k && k >= t - .1 || p - .1 <= k && k <= t + .1) && b.isOnLine(g, k, m, p, x, t)
    };
    b.isOnLine = function(g, k, m, p, x, t) {
        return .1 < Math.abs(x - m) ? .1 > Math.abs((t - p) / (x - m) * (g - m) + p - k) : .1 > Math.abs(g - m)
    };
    b.pointsMatch = function(g, k, m, p) {
        return .1 > Math.abs(m - g) && .1 > Math.abs(p - k)
    };
    b.Separate = function(g, k) {
        g = b.calcShapes(g);
        let m = [];
        for(let p = 0, x = g.length; p < x; ++p) {
            const t = g[p],
                q = [];
            let r = 0;
            for(let y = 0, v = t.length; y < v; ++y) {
                const u = t[y],
                    A = t[(y + 1) % v];
                r += u.get_x() * A.get_y() - u.get_y() * A.get_x();
                q.push(a(u.get_x(), u.get_y()))
            }
            r =
                Math.abs(r / 2);
            if(r >= .001 * k) m.push(q);
            else
                for(let y = 0, v = q.length; y < v; y++) d(q[y])
        }
        return m = f(m)
    };
    b.calcShapes = function(g) {
        var k;
        let m;
        var p;
        let x;
        let t, q, r, y;
        let v;
        var u = 0;
        let A = 0,
            z, C = [],
            E = [];
        for(E.push(g); E.length;) {
            g = E[0];
            m = g.length;
            z = !0;
            for(k = 0; k < m; k++) {
                t = k;
                q = k < m - 1 ? k + 1 : k + 1 - m;
                var J = k < m - 2 ? k + 2 : k + 2 - m;
                r = g[t];
                y = g[q];
                J = g[J];
                J = b.det(r.get_x(), r.get_y(), y.get_x(), y.get_y(), J.get_x(), J.get_y());
                if(0 > J) {
                    z = !1;
                    var F = 1E9;
                    for(p = 0; p < m; p++)
                        if(p !== t && p !== q) {
                            k = p;
                            J = p < m - 1 ? p + 1 : 0;
                            var H = g[k];
                            var K = g[J];
                            if(H = b.hitRay(r.get_x(),
                                    r.get_y(), y.get_x(), y.get_y(), H.get_x(), H.get_y(), K.get_x(), K.get_y())) K = y.get_x() - H.get_x(), x = y.get_y() - H.get_y(), K = K * K + x * x, K < F ? (A = k, u = J, v = H, F = K) : d(H)
                        } if(1E9 === F) return [];
                    p = [];
                    F = [];
                    k = A;
                    J = u;
                    H = g[k];
                    K = g[J];
                    u = !1;
                    b.pointsMatch(v.get_x(), v.get_y(), K.get_x(), K.get_y()) || (p.push(v), u = !0);
                    b.pointsMatch(v.get_x(), v.get_y(), H.get_x(), H.get_y()) || (F.push(v), u = !0);
                    u || d(v);
                    A = -1;
                    for(u = t;;) {
                        if(u !== J) p.push(g[u]);
                        else {
                            if(0 > A || A >= m) return [];
                            b.isOnSegment(K.get_x(), K.get_y(), g[A].get_x(), g[A].get_y(), r.get_x(), r.get_y()) ||
                                p.push(g[u]);
                            break
                        }
                        A = u;
                        0 > u - 1 ? u = m - 1 : u--
                    }
                    p.reverse();
                    A = -1;
                    for(u = q;;) {
                        if(u !== k) F.push(g[u]);
                        else {
                            if(0 > A || A >= m) return [];
                            u !== k || b.isOnSegment(H.get_x(), H.get_y(), g[A].get_x(), g[A].get_y(), y.get_x(), y.get_y()) || F.push(g[u]);
                            break
                        }
                        A = u;
                        u + 1 > m - 1 ? u = 0 : u++
                    }
                    E.push(p, F);
                    E.shift();
                    break
                }
            }
            z && C.push(E.shift())
        }
        return C
    };

    function f(g) {
        const k = [];
        for(const m of g) 8 >= m.length ? k.push(m) : k.push.apply(k, h(m));
        return k
    }

    function h(g) {
        const k = [];
        k.push(g.splice(0, 8));
        const m = k[0][0];
        let p = k[0][7];
        for(; g.length;) {
            const x = g.splice(0,
                Math.min(g.length, 6));
            let t = x[x.length - 1];
            x.push(c(m));
            x.push(c(p));
            k.push(x);
            p = t
        }
        return k
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Pin.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._pinInst = null;
            this._pinUid = -1;
            this._mode = "";
            this._propSet = new Set;
            this._lastKnownAngle = this._dz = this._dAngle = this._dHeight = this._dWidth = this._dy = this._dx = this._pinImagePoint = this._pinAngle = this._pinDist = 0;
            this._destroy = !1;
            a && (this._destroy = a[0]);
            b = this._runtime.Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(b, "instancedestroy", d => this._OnInstanceDestroyed(d.instance)),
                e.Disposable.From(b, "afterload", d => this._OnAfterLoad()))
        }
        Release() {
            this._pinInst = null;
            super.Release()
        }
        _SetPinInst(b) {
            b ? (this._pinInst = b, this._StartTicking2()) : (this._pinInst = null, this._StopTicking2())
        }
        _Pin(b, a, d) {
            if(b && (b = b.GetFirstPicked(this._inst)))
                if(this._mode = a, this._SetPinInst(b), a = this._inst.GetWorldInfo(), b = b.GetWorldInfo(), "properties" === this._mode) {
                    const c = this._propSet;
                    c.clear();
                    for(const f of d) c.add(f);
                    this._dx = a.GetX() - b.GetX();
                    this._dy = a.GetY() - b.GetY();
                    this._dAngle = a.GetAngle() - b.GetAngle();
                    this._lastKnownAngle = a.GetAngle();
                    this._dz = a.GetZElevation() - b.GetZElevation();
                    c.has("x") && c.has("y") && (this._pinAngle = e.angleTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()) - b.GetAngle(), this._pinDist = e.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY()));
                    c.has("width-abs") ? this._dWidth = a.GetWidth() - b.GetWidth() : c.has("width-scale") && (this._dWidth = a.GetWidth() / b.GetWidth());
                    c.has("height-abs") ? this._dHeight = a.GetHeight() - b.GetHeight() : c.has("height-scale") && (this._dHeight = a.GetHeight() / b.GetHeight())
                } else this._pinDist =
                    e.distanceTo(b.GetX(), b.GetY(), a.GetX(), a.GetY())
        }
        SaveToJson() {
            const b = this._propSet,
                a = this._mode,
                d = {
                    uid: this._pinInst ? this._pinInst.GetUID() : -1,
                    m: a
                };
            if("rope" === a || "bar" === a) d.pd = this._pinDist;
            else if("properties" === a) {
                d.ps = [...this._propSet];
                b.has("imagepoint") ? d.ip = this._pinImagePoint : b.has("x") && b.has("y") ? (d.pa = this._pinAngle, d.pd = this._pinDist) : (b.has("x") && (d.dx = this._dx), b.has("y") && (d.dy = this._dy));
                b.has("angle") && (d.da = this._dAngle, d.lka = this._lastKnownAngle);
                if(b.has("width-abs") || b.has("width-scale")) d.dw =
                    this._dWidth;
                if(b.has("height-abs") || b.has("height-scale")) d.dh = this._dHeight;
                b.has("z") && (d.dz = this._dz)
            }
            return d
        }
        LoadFromJson(b) {
            const a = b.m,
                d = this._propSet;
            d.clear();
            this._pinUid = b.uid;
            if("number" === typeof a) this._LoadFromJson_Legacy(b);
            else if(this._mode = a, "rope" === a || "bar" === a) this._pinDist = b.pd;
            else if("properties" === a) {
                for(const c of b.ps) d.add(c);
                d.has("imagepoint") ? this._pinImagePoint = b.ip : d.has("x") && d.has("y") ? (this._pinAngle = b.pa, this._pinDist = b.pd) : (d.has("x") && (this._dx = b.dx), d.has("y") &&
                    (this._dy = b.dy));
                d.has("angle") && (this._dAngle = b.da, this._lastKnownAngle = b.lka || 0);
                if(d.has("width-abs") || d.has("width-scale")) this._dWidth = b.dw;
                if(d.has("height-abs") || d.has("height-scale")) this._dHeight = b.dh;
                d.has("z") && (this._dz = b.dz)
            }
        }
        _LoadFromJson_Legacy(b) {
            const a = this._propSet,
                d = b.msa,
                c = b.tsa,
                f = b.pa,
                h = b.pd;
            switch(b.m) {
                case 0:
                    this._mode = "properties";
                    a.add("x").add("y").add("angle");
                    this._pinAngle = f;
                    this._pinDist = h;
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 1:
                    this._mode = "properties";
                    a.add("x").add("y");
                    this._pinAngle = f;
                    this._pinDist = h;
                    break;
                case 2:
                    this._mode = "properties";
                    a.add("angle");
                    this._dAngle = d - c;
                    this._lastKnownAngle = b.lka;
                    break;
                case 3:
                    this._mode = "rope";
                    this._pinDist = b.pd;
                    break;
                case 4:
                    this._mode = "bar", this._pinDist = b.pd
            }
        }
        _OnAfterLoad() {
            -1 === this._pinUid ? this._SetPinInst(null) : (this._SetPinInst(this._runtime.GetInstanceByUID(this._pinUid)), this._pinUid = -1)
        }
        _OnInstanceDestroyed(b) {
            this._pinInst === b && (this._SetPinInst(null), this._destroy && this._runtime.DestroyInstance(this._inst))
        }
        Tick2() {
            var b =
                this._pinInst;
            if(b) {
                var a = b.GetWorldInfo(),
                    d = this._inst.GetWorldInfo(),
                    c = this._mode,
                    f = !1;
                if("rope" === c || "bar" === c) {
                    if(b = e.distanceTo(d.GetX(), d.GetY(), a.GetX(), a.GetY()), b > this._pinDist || "bar" === c && b < this._pinDist) f = e.angleTo(a.GetX(), a.GetY(), d.GetX(), d.GetY()), d.SetXY(a.GetX() + Math.cos(f) * this._pinDist, a.GetY() + Math.sin(f) * this._pinDist), f = !0
                } else {
                    c = this._propSet;
                    if(c.has("imagepoint")) {
                        const [h, g] = b.GetImagePoint(this._pinImagePoint);
                        d.EqualsXY(h, g) || (d.SetXY(h, g), f = !0)
                    } else if(c.has("x") && c.has("y")) {
                        b =
                            a.GetX() + Math.cos(a.GetAngle() + this._pinAngle) * this._pinDist;
                        const h = a.GetY() + Math.sin(a.GetAngle() + this._pinAngle) * this._pinDist;
                        d.EqualsXY(b, h) || (d.SetXY(b, h), f = !0)
                    } else b = a.GetX() + this._dx, c.has("x") && b !== d.GetX() && (d.SetX(b), f = !0), b = a.GetY() + this._dy, c.has("y") && b !== d.GetY() && (d.SetY(b), f = !0);
                    c.has("angle") && (this._lastKnownAngle !== d.GetAngle() && (this._dAngle = e.clampAngle(this._dAngle + (d.GetAngle() - this._lastKnownAngle))), b = e.clampAngle(a.GetAngle() + this._dAngle), b !== d.GetAngle() && (d.SetAngle(b),
                        f = !0), this._lastKnownAngle = d.GetAngle());
                    c.has("width-abs") && (b = a.GetWidth() + this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), f = !0));
                    c.has("width-scale") && (b = a.GetWidth() * this._dWidth, b !== d.GetWidth() && (d.SetWidth(b), f = !0));
                    c.has("height-abs") && (b = a.GetHeight() + this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), f = !0));
                    c.has("height-scale") && (b = a.GetHeight() * this._dHeight, b !== d.GetHeight() && (d.SetHeight(b), f = !0));
                    c.has("z") && (b = a.GetZElevation() + this._dz, b !== d.GetZElevation() && (d.SetZElevation(b), this._runtime.UpdateRender()))
                }
                f &&
                    d.SetBboxChanged()
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.pin.debugger.is-pinned",
                    value: !!this._pinInst
                }, {
                    name: "behaviors.pin.debugger.pinned-uid",
                    value: this._pinInst ? this._pinInst.GetUID() : 0
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Pin.Cnds = {
    IsPinned() {
        return !!this._pinInst
    },
    WillDestroy() {
        return this._destroy
    }
};
"use strict";
self.C3.Behaviors.Pin.Acts = {
    PinByDistance(e, b) {
        this._Pin(e, 0 === b ? "rope" : "bar")
    },
    PinByProperties(e, b, a, d, c, f, h) {
        const g = [];
        b && g.push("x");
        a && g.push("y");
        d && g.push("angle");
        h && g.push("z");
        1 === c ? g.push("width-abs") : 2 === c && g.push("width-scale");
        1 === f ? g.push("height-abs") : 2 === f && g.push("height-scale");
        0 !== g.length && this._Pin(e, "properties", g)
    },
    PinByImagePoint(e, b, a, d, c, f) {
        const h = ["imagepoint"];
        a && h.push("angle");
        f && h.push("z");
        1 === d ? h.push("width-abs") : 2 === d && h.push("width-scale");
        1 === c ? h.push("height-abs") :
            2 === c && h.push("height-scale");
        this._pinImagePoint = b;
        this._Pin(e, "properties", h)
    },
    SetPinDistance(e) {
        if("rope" === this._mode || "bar" === this._mode) this._pinDist = Math.max(e, 0)
    },
    SetDestroy(e) {
        this._destroy = e
    },
    Unpin() {
        this._SetPinInst(null);
        this._mode = "";
        this._propSet.clear();
        this._pinImagePoint = ""
    },
    Pin(e, b) {
        switch(b) {
            case 0:
                this._Pin(e, "properties", ["x", "y", "angle"]);
                break;
            case 1:
                this._Pin(e, "properties", ["x", "y"]);
                break;
            case 2:
                this._Pin(e, "properties", ["angle"]);
                break;
            case 3:
                this._Pin(e, "rope");
                break;
            case 4:
                this._Pin(e,
                    "bar")
        }
    }
};
"use strict";
self.C3.Behaviors.Pin.Exps = {
    PinnedUID() {
        return this._pinInst ? this._pinInst.GetUID() : -1
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Timer = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Timer.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Timer.SingleTimer = class {
        constructor(b, a, d, c) {
            this._current = e.New(e.KahanSum);
            this._current.Set(b || 0);
            this._total = e.New(e.KahanSum);
            this._total.Set(a || 0);
            this._duration = d || 0;
            this._isRegular = !!c;
            this._isPaused = !1
        }
        GetCurrentTime() {
            return this._current.Get()
        }
        GetTotalTime() {
            return this._total.Get()
        }
        GetDuration() {
            return this._duration
        }
        SetPaused(b) {
            this._isPaused = !!b
        }
        IsPaused() {
            return this._isPaused
        }
        Add(b) {
            this._current.Add(b);
            this._total.Add(b)
        }
        HasFinished() {
            return this._current.Get() >=
                this._duration
        }
        Update() {
            if(this.HasFinished())
                if(this._isRegular) this._current.Subtract(this._duration);
                else return !0;
            return !1
        }
        SaveToJson() {
            return {
                c: this._current.Get(),
                t: this._total.Get(),
                d: this._duration,
                r: this._isRegular,
                p: this._isPaused
            }
        }
        LoadFromJson(b) {
            this._current.Set(b.c);
            this._total.Set(b.t);
            this._duration = b.d;
            this._isRegular = !!b.r;
            this._isPaused = !!b.p
        }
    };
    e.Behaviors.Timer.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._timers = new Map
        }
        Release() {
            this._timers.clear();
            super.Release()
        }
        _UpdateTickState() {
            0 < this._timers.size ? (this._StartTicking(), this._StartTicking2()) : (this._StopTicking(), this._StopTicking2())
        }
        SaveToJson() {
            const b = {};
            for(const [a, d] of this._timers.entries()) b[a] = d.SaveToJson();
            return b
        }
        LoadFromJson(b) {
            this._timers.clear();
            for(const [a, d] of Object.entries(b)) b = new e.Behaviors.Timer.SingleTimer, b.LoadFromJson(d), this._timers.set(a, b);
            this._UpdateTickState()
        }
        Tick() {
            const b = this._runtime.GetDt(this._inst);
            for(const a of this._timers.values()) a.IsPaused() ||
                a.Add(b)
        }
        Tick2() {
            for(const [b, a] of this._timers.entries()) a.Update() && this._timers.delete(b)
        }
        GetDebuggerProperties() {
            return [{
                title: "behaviors.timer.debugger.timers",
                properties: [...this._timers.entries()].map(b => ({
                    name: "$" + b[0],
                    value: `${Math.round(10*b[1].GetCurrentTime())/10} / ${Math.round(10*b[1].GetDuration())/10}`
                }))
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Timer.Cnds = {
    OnTimer(e) {
        return (e = this._timers.get(e.toLowerCase())) ? e.HasFinished() : !1
    },
    IsTimerRunning(e) {
        return this._timers.has(e.toLowerCase())
    },
    IsTimerPaused(e) {
        return (e = this._timers.get(e.toLowerCase())) && e.IsPaused()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Timer.Acts = {
        StartTimer(b, a, d) {
            b = new e.Behaviors.Timer.SingleTimer(0, 0, b, 1 === a);
            this._timers.set(d.toLowerCase(), b);
            this._UpdateTickState()
        },
        StopTimer(b) {
            this._timers.delete(b.toLowerCase());
            this._UpdateTickState()
        },
        PauseResumeTimer(b, a) {
            (b = this._timers.get(b.toLowerCase())) && b.SetPaused(0 === a)
        }
    }
}
"use strict";
self.C3.Behaviors.Timer.Exps = {
    CurrentTime(e) {
        return (e = this._timers.get(e.toLowerCase())) ? e.GetCurrentTime() : 0
    },
    TotalTime(e) {
        return (e = this._timers.get(e.toLowerCase())) ? e.GetTotalTime() : 0
    },
    Duration(e) {
        return (e = this._timers.get(e.toLowerCase())) ? e.GetDuration() : 0
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Anchor = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Anchor.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Anchor.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._anchorTop = this._anchorLeft = 2;
            this._anchorBottom = this._anchorRight = 0;
            this._isEnabled = !0;
            b = this._inst.GetWorldInfo().GetBoundingBox();
            this._xLeft = b.getLeft();
            this._yTop = b.getTop();
            this._xRight = this._runtime.GetOriginalViewportWidth() - b.getLeft();
            this._yBottom = this._runtime.GetOriginalViewportHeight() - b.getTop();
            this._rDiff = this._runtime.GetOriginalViewportWidth() - b.getRight();
            this._bDiff = this._runtime.GetOriginalViewportHeight() - b.getBottom();
            a && (this._anchorLeft = a[0], this._anchorTop = a[1], this._anchorRight = a[2], this._anchorBottom = a[3], this._isEnabled = !!a[4]);
            a = this._runtime.Dispatcher();
            this._disposables = new e.CompositeDisposable(e.Disposable.From(a, "layoutchange", () => this._OnLayoutChange()));
            this._isEnabled && this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                xl: this._xLeft,
                yt: this._yTop,
                xr: this._xRight,
                yb: this._yBottom,
                rd: this._rDiff,
                bd: this._bDiff,
                al: this._anchorLeft,
                at: this._anchorTop,
                ar: this._anchorRight,
                ab: this._anchorBottom,
                e: this._isEnabled
            }
        }
        LoadFromJson(b) {
            this._xLeft = b.xl;
            this._yTop = b.yt;
            this._xRight = b.xr;
            this._yBottom = b.yb;
            this._rDiff = b.rd;
            this._bDiff = b.bd;
            this._anchorLeft = b.al;
            this._anchorTop = b.at;
            this._anchorRight = b.ar;
            this._anchorBottom = b.ab;
            (this._isEnabled = b.e) ? this._StartTicking(): this._StopTicking()
        }
        _UpdatePosition() {
            if(this._isEnabled) {
                var b = this._inst.GetWorldInfo(),
                    a = b.GetLayer().GetViewport();
                if(0 === this._anchorLeft) {
                    var d = a.getLeft() + this._xLeft -
                        b.GetBoundingBox().getLeft();
                    0 !== d && (b.OffsetX(d), b.SetBboxChanged())
                } else 1 === this._anchorLeft && (d = a.getRight() - this._xRight - b.GetBoundingBox().getLeft(), 0 !== d && (b.OffsetX(d), b.SetBboxChanged()));
                0 === this._anchorTop ? (d = a.getTop() + this._yTop - b.GetBoundingBox().getTop(), 0 !== d && (b.OffsetY(d), b.SetBboxChanged())) : 1 === this._anchorTop && (d = a.getBottom() - this._yBottom - b.GetBoundingBox().getTop(), 0 !== d && (b.OffsetY(d), b.SetBboxChanged()));
                1 === this._anchorRight && (d = a.getRight() - this._rDiff - b.GetBoundingBox().getRight(),
                    0 !== d && (b.OffsetX(b.GetOriginX() * d), b.SetWidth(Math.max(b.GetWidth() + d), 0), b.SetBboxChanged(), this._rDiff = a.getRight() - b.GetBoundingBox().getRight()));
                1 === this._anchorBottom && (d = a.getBottom() - this._bDiff - b.GetBoundingBox().getBottom(), 0 !== d && (b.OffsetY(b.GetOriginY() * d), b.SetHeight(Math.max(b.GetHeight() + d, 0)), b.SetBboxChanged(), this._bDiff = a.getBottom() - b.GetBoundingBox().getBottom()))
            }
        }
        Tick() {
            this._UpdatePosition()
        }
        _OnLayoutChange() {
            this._UpdatePosition()
        }
        GetPropertyValueByIndex(b) {
            switch(b) {
                case 0:
                    return this._anchorLeft;
                case 1:
                    return this._anchorTop;
                case 2:
                    return this._anchorRight;
                case 3:
                    return this._anchorBottom;
                case 4:
                    return this._isEnabled
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch(b) {
                case 0:
                    this._anchorLeft = a;
                    break;
                case 1:
                    this._anchorTop = a;
                    break;
                case 2:
                    this._anchorRight = a;
                    break;
                case 3:
                    this._anchorBottom = a;
                    break;
                case 4:
                    (this._isEnabled = !!a) ? this._StartTicking(): this._StopTicking()
            }
        }
    }
}
"use strict";
self.C3.Behaviors.Anchor.Cnds = {
    IsEnabled() {
        return this._isEnabled
    }
};
"use strict";
self.C3.Behaviors.Anchor.Acts = {
    SetEnabled(e) {
        this._isEnabled && 0 === e ? (this._isEnabled = !1, this._StopTicking()) : this._isEnabled || 0 === e || (e = this._inst.GetWorldInfo().GetBoundingBox(), this._xLeft = e.getLeft(), this._yTop = e.getTop(), this._xRight = this._runtime.GetOriginalViewportWidth() - e.getLeft(), this._yBottom = this._runtime.GetOriginalViewportHeight() - e.getTop(), this._rDiff = this._runtime.GetOriginalViewportWidth() - e.getRight(), this._bDiff = this._runtime.GetOriginalViewportHeight() - e.getBottom(), this._isEnabled = !0, this._StartTicking())
    }
};
"use strict";
self.C3.Behaviors.Anchor.Exps = {}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween;
    b.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(a, d) {
            super(a);
            this._allowMultiple = !1;
            this._enabled = !0;
            d && (this._allowMultiple = !1, this._enabled = !!d[0]);
            this._activeTweens = new Map;
            this._disabledTweens = [];
            this._waitingForReleaseTweens = new Map;
            this._waitingForReleaseTweensJson = this._disabledTweensJson = this._activeTweensJson = this._finishingTween = null;
            this._finishingTweenName = "";
            this._enabled && this._StartTicking2();
            this._afterLoad = c => this._OnAfterLoad(c);
            this.GetRuntime().Dispatcher().addEventListener("afterload", this._afterLoad)
        }
        Release() {
            this.GetRuntime().Dispatcher().removeEventListener("afterload", this._afterLoad);
            this._afterLoad = null;
            this._finishingTween && (this.ReleaseAndCompleteTween(this._finishingTween), this._finishingTween = null);
            this.ReleaseAndCompleteTweens();
            this._tweens = null;
            this.ClearDisabledList();
            this._disabledTweens = null;
            this._ReleaseWaitingTweens();
            this._waitingForReleaseTweens = null;
            super.Release()
        }
        SetEnabled(a) {
            (this._enabled = a) ?
            this._StartTicking2(): this._StopTicking2()
        }
        GetEnabled() {
            return this._enabled
        }
        AddToDisabledList(a) {
            this._disabledTweens.push(a)
        }
        IsInDisabledList(a) {
            return this._disabledTweens.includes(a)
        }
        ClearDisabledList() {
            e.clearArray(this._disabledTweens)
        }
        GetFinishingTween() {
            return this._finishingTween
        }
        IsInstanceValid() {
            const a = this.GetObjectInstance();
            return a ? !a.IsDestroyed() : !1
        }
        GetTween(a, d, c = !1) {
            if((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for(const f of d)
                    if(f.HasTags(a)) return f
        }
        GetTweenIncludingWaitingForRelease(a,
            d) {
            return this.GetTween(a, d, !0)
        }* GetTweens(a, d, c = !1) {
            if((d = d ? this.PropertyTweens(d, c) : this.AllTweens(c)) && d.length)
                for(const f of d) f.HasTags(a) && (yield f)
        }* GetTweensIncludingWaitingForRelease(a, d) {
            yield* this.GetTweens(a, d, !0)
        }
        PropertyTweens(a, d) {
            if(d) return d = this._activeTweens.get(a), a = this._waitingForReleaseTweens.get(a), d || (d = []), a || (a = []), d.concat(a).filter(c => c);
            (a = this._activeTweens.get(a)) || (a = []);
            return a.filter(c => c)
        }
        AllTweens(a) {
            if(a) {
                a = [...this._activeTweens.values()].flat();
                const d = [...this._waitingForReleaseTweens.values()].flat();
                return a.concat(d).filter(c => c)
            }
            return [...this._activeTweens.values()].flat().filter(d => d)
        }
        AllTweensIncludingWaitingForRelease() {
            return this.AllTweens(!0)
        }
        SaveToJson() {
            return {
                s: !1,
                e: !!this._enabled,
                at: this._SaveActiveTweensToJson(),
                dt: this._SaveDisabledTweensToJson(),
                wt: this._SaveWaitingForReleaseTweensToJson(),
                ft: this._SaveFinishingTweenToJson()
            }
        }
        LoadFromJson(a) {
            a && (this._activeTweensJson = a.at, this._disabledTweensJson = a.dt, this._waitingForReleaseTweensJson = a.wt, this._finishingTweenName = a.ft, this._allowMultiple = !1, this._enabled = !!a.e)
        }
        _OnAfterLoad(a) {
            a = this.GetRuntime().GetTimelineManager();
            this._PopulateTweenMap(this._activeTweensJson, this._activeTweens, a);
            if(this._disabledTweensJson) {
                e.clearArray(this._disabledTweens);
                for(const d of this._disabledTweensJson) this._PopulateTweenArray(this._disabledTweens, d, a)
            }
            this._PopulateTweenMap(this._waitingForReleaseTweensJson, this._waitingForReleaseTweens, a);
            this._finishingTween = this._GetTween(this._finishingTweenName, a);
            this._enabled ? this._StartTicking2() : this._StopTicking2()
        }
        _PopulateTweenMap(a,
            d, c) {
            if(a)
                for(const h in a) {
                    let g = d.get(h);
                    g ? e.clearArray(g) : g = [];
                    var f = a[h];
                    for(const k of f) this._PopulateTweenArray(g, k.name, c) ? this._LoadTweenFromJson(k.name, k, c) : (f = e.Tween.Build({
                        runtime: this.GetRuntime(),
                        json: k
                    }), f.AddCompletedCallback(m => this._FinishTriggers(m)), c.AddScheduledTimeline(f), this._PopulateTweenArray(g, f, c));
                    d.set(h, g)
                }
        }
        _GetTween(a, d) {
            return d.GetScheduledOrPlayingTimelineByName(a)
        }
        _PopulateTweenArray(a, d, c) {
            if("string" === typeof d) {
                if(d = this._GetTween(d, c)) return !!a.push(d)
            } else return !!a.push(d);
            return !1
        }
        _LoadTweenFromJson(a, d, c) {
            "string" === typeof a ? (a = this._GetTween(a, c)) && a._LoadFromJson(d) : a._LoadFromJson(d)
        }
        _SaveActiveTweensToJson() {
            const a = {};
            for(const [d, c] of this._activeTweens) a[d] = c.map(f => f._SaveToJson());
            return a
        }
        _SaveDisabledTweensToJson() {
            return this._disabledTweens.map(a => a.GetName())
        }
        _SaveWaitingForReleaseTweensToJson() {
            const a = {};
            for(const [d, c] of this._waitingForReleaseTweens) a[d] = c.map(f => f._SaveToJson());
            return a
        }
        _SaveFinishingTweenToJson() {
            return this._finishingTween ? this._finishingTween.GetName() :
                ""
        }
        Tick2() {
            this._ReleaseWaitingTweens()
        }
        CreateTween(a) {
            var d = b.Config.GetPropertyTracksConfig(a.property, a.startValue, a.endValue, a.ease, a.resultMode, this.GetObjectInstance());
            const c = b.Maps.GetPropertyFromIndex(a.property);
            b.Maps.IsValueId(c) || this.ReleaseTweens(a.property);
            d = e.Tween.Build({
                runtime: this.GetRuntime(),
                id: c,
                tags: a.tags,
                time: a.time,
                instance: this.GetObjectInstance(),
                releaseOnComplete: !!a.releaseOnComplete,
                loop: !!a.loop,
                pingPong: !!a.pingPong,
                initialValueMode: a.initialValueMode,
                propertyTracksConfig: d
            });
            d.AddCompletedCallback(f => this._FinishTriggers(f));
            this._AddTween(d, a.property);
            return d
        }
        ReleaseTween(a, d = !1) {
            var c = a.GetId();
            if(this._activeTweens.has(c) && (c = this._activeTweens.get(c))) {
                const f = c.indexOf(a); - 1 !== f && c.splice(f, 1)
            }
            a.IsReleased() || this._IsInWaitingList(a) || (a.Stop(d), this._AddToWaitingList(a))
        }
        ReleaseTweens(a, d = !1) {
            if(e.IsFiniteNumber(a)) {
                var c = b.Maps.GetPropertyFromIndex(a);
                if(this._activeTweens.has(c)) {
                    c = this._activeTweens.get(c);
                    var f = this.GetFinishingTween();
                    for(var h of c) h ===
                        f || h.IsReleased() || this._IsInWaitingList(h) || (h.Stop(d), h.Release());
                    e.clearArray(c)
                }
            } else {
                h = this.GetFinishingTween();
                for(c of this.AllTweens()) c === h || c.IsReleased() || this._IsInWaitingList(c) || (c.Stop(d), c.Release());
                for(f of this._activeTweens.keys()) e.clearArray(this._activeTweens.get(f)), this._activeTweens.delete(f);
                this._activeTweens.clear()
            }
        }
        ReleaseAndCompleteTween(a) {
            this.ReleaseTween(a, !0)
        }
        ReleaseAndCompleteTweens() {
            this.ReleaseTweens(NaN, !0)
        }
        GetPropertyValueByIndex(a) {
            switch(a) {
                case 0:
                    return this._enabled
            }
        }
        SetPropertyValueByIndex(a,
            d) {
            switch(a) {
                case 0:
                    this._enabled = !!d
            }
        }
        _GetBehaviorType(a) {
            a = a.GetInstance().GetBehaviorInstances();
            for(const d of a)
                if(a = d.GetBehaviorType(), a.GetInstanceSdkCtor() === this.constructor) return a
        }
        Trigger(a, d, c, f) {
            return this._runtime ? super.Trigger(a) : d.Trigger(a, c, f)
        }
        _FinishTriggers(a) {
            this._finishingTween = a;
            b.Cnds.SetFinishingTween(a);
            let d, c;
            if(this.GetRuntime()) d = this._inst, c = this._runtime, this.Trigger(b.Cnds.OnTweensFinished), this.Trigger(b.Cnds.OnAnyTweensFinished), this.ReleaseTween(a);
            else {
                d = a.GetInstance();
                if(!d || d && d.IsDestroyed()) return;
                c = d.GetRuntime();
                const f = this._GetBehaviorType(a);
                this.Trigger(b.Cnds.OnTweensFinished, c, d, f);
                this.Trigger(b.Cnds.OnAnyTweensFinished, c, d, f);
                a.Stop()
            }
            this._finishingTween = null;
            b.Cnds.SetFinishingTween(null);
            a.GetDestroyInstanceOnComplete() && c.DestroyInstance(d)
        }
        _AddTween(a, d) {
            d = b.Maps.GetPropertyFromIndex(d);
            this._activeTweens.has(d) || this._activeTweens.set(d, []);
            this._activeTweens.get(d).push(a)
        }
        _AddToWaitingList(a) {
            const d = a.GetId();
            this._waitingForReleaseTweens.has(d) ||
                this._waitingForReleaseTweens.set(d, []);
            this._waitingForReleaseTweens.get(d).push(a)
        }
        _IsInWaitingList(a) {
            const d = a.GetId();
            return this._waitingForReleaseTweens.has(d) ? this._waitingForReleaseTweens.get(d).includes(a) : !1
        }
        _ReleaseWaitingTweens() {
            if(this._waitingForReleaseTweens.size) {
                for(const a of this._waitingForReleaseTweens.values()) {
                    for(const d of a) d.IsReleased() || d.Release();
                    e.clearArray(a)
                }
                this._waitingForReleaseTweens.clear()
            }
        }
    }
} {
    "use strict";
    const e = self.C3;
    let b = null;
    e.Behaviors.Tween.Cnds = {
        SetFinishingTween(a) {
            b = a
        },
        OnTweensFinished(a) {
            return b.HasTags(a)
        },
        OnAnyTweensFinished() {
            return !0
        },
        IsPlaying(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(e.Tween.IsPlaying) : !1
        },
        IsAnyPlaying() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(e.Tween.IsPlaying) : !1
        },
        IsPaused(a) {
            return (a = [...this.GetTweensIncludingWaitingForRelease(a)], a.length) ? a.some(e.Tween.IsPaused) : !1
        },
        IsAnyPaused() {
            const a = [...this.AllTweensIncludingWaitingForRelease()];
            return a && a.length ? a.some(e.Tween.IsPaused) : !1
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = self.Ease,
        a = e.Behaviors.Tween;
    a.Acts = {
        SetEnabled(d) {
            this.SetEnabled(!!d);
            for(const c of this.AllTweens()) d ? this.IsInDisabledList(c) && c.Resume() : ((c.IsPlaying() || c.IsScheduled()) && this.AddToDisabledList(c), c.Stop());
            d && this.ClearDisabledList()
        },
        async TweenOneProperty(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.OneProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenTwoProperties(...d) {
            this.GetEnabled() && this.IsInstanceValid() &&
                (d = this.CreateTween(a.TweenArguments.TwoProperties(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        async TweenValue(...d) {
            this.GetEnabled() && this.IsInstanceValid() && (d = this.CreateTween(a.TweenArguments.ValueProperty(this, ...d)), d.Play() && await d.GetPlayPromise())
        },
        PauseTweens(d) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const c of this.GetTweens(d)) c.Stop()
        },
        PauseAllTweens() {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const d of this.AllTweens()) d.Stop()
        },
        ResumeTweens(d) {
            if(this.GetEnabled() &&
                this.IsInstanceValid())
                for(const c of this.GetTweens(d)) c.Resume()
        },
        ResumeAllTweens() {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const d of this.AllTweens()) d.Resume()
        },
        StopTweens(d) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const c of this.GetTweens(d)) this.ReleaseTween(c)
        },
        StopAllTweens() {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const d of this.AllTweens()) this.ReleaseTween(d)
        },
        SetOnePropertyTweensEndValue(d, c, f) {
            if(this.GetEnabled() && this.IsInstanceValid()) {
                c = e.Behaviors.Tween.Maps.GetSinglePropertyFromIndex(c);
                for(const h of this.GetTweens(d)) h.BeforeSetEndValues([c]), h.SetEndValue(f, c)
            }
        },
        SetTwoPropertiesTweensEndValue(d, c, f, h) {
            if(this.GetEnabled() && this.IsInstanceValid()) {
                c = e.Behaviors.Tween.Maps.GetRealProperties(c);
                for(const g of this.GetTweens(d)) g.BeforeSetEndValues(c), g.SetEndValue(f, c[0]), g.SetEndValue(h, c[1])
            }
        },
        SetValuePropertyTweensStartValue(d, c) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const f of this.GetTweens(d, "value")) f.SetStartValue(c, "value")
        },
        SetValuePropertyTweensEndValue(d, c) {
            if(this.GetEnabled() &&
                this.IsInstanceValid())
                for(const f of this.GetTweens(d, "value")) f.BeforeSetEndValues(["value"]), f.SetEndValue(c, "value")
        },
        SetTweensEase(d, c) {
            if(this.GetEnabled() && this.IsInstanceValid()) {
                c = b.GetEaseFromIndex(c);
                for(const f of this.GetTweens(d)) f.SetEase(c)
            }
        },
        SetAllTweensEase(d) {
            if(this.GetEnabled() && this.IsInstanceValid()) {
                d = b.GetEaseFromIndex(d);
                for(const c of this.AllTweens()) c.SetEase(d)
            }
        },
        SetTweensTime(d, c) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const f of this.GetTweens(d)) f.SetTime(c)
        },
        SetAllTweensTime(d) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const c of this.AllTweens()) c.SetTime(d)
        },
        SetTweensPlaybackRate(d, c) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const f of this.GetTweens(d)) f.SetPlaybackRate(c)
        },
        SetAllTweensPlaybackRate(d) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const c of this.AllTweens()) c.SetPlaybackRate(d)
        },
        SetTweensDestroyOnComplete(d, c) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const f of this.GetTweens(d)) f.SetDestroyInstanceOnComplete(!!c)
        },
        SetAllTweensDestroyOnComplete(d) {
            if(this.GetEnabled() && this.IsInstanceValid())
                for(const c of this.AllTweens()) c.SetDestroyInstanceOnComplete(!!d)
        }
    }
}
"use strict";
self.C3.Behaviors.Tween.Exps = {
    Time(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e)) ? e.GetTime() : 0
    },
    Progress(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e)) ? e.GetTime() / e.GetTotalTime() : 0
    },
    Value(e) {
        return (e = this.GetTweenIncludingWaitingForRelease(e, "value")) ? e.GetPropertyTrack("value").GetSourceAdapterValue() : 0
    },
    Tags() {
        return this.GetFinishingTween() ? this.GetFinishingTween().GetStringTags() : ""
    }
}; {
    "use strict";
    const e = self.C3,
        b = self.Ease,
        a = ["position", "size", "scale"],
        d = "offsetX offsetY offsetWidth offsetHeight offsetAngle offsetOpacity offsetColor offsetZElevation offsetScaleX offsetScaleY".split(" "),
        c = ["value"],
        f = [].concat(a).concat(d).concat(c),
        h = {
            position: ["offsetX", "offsetY"],
            size: ["offsetWidth", "offsetHeight"],
            scale: ["offsetScaleX", "offsetScaleY"]
        },
        g = Object.assign({}, f.reduce((k, m) => Object.assign({}, k, {
            [m]: [m]
        }), {}), h);
    e.Behaviors.Tween.Maps = class {
        constructor() {}
        static GetEases() {
            return [...b.GetRuntimeEaseNames()]
        }
        static GetEaseFromIndex(k) {
            return [...b.GetRuntimeEaseNames()][k]
        }
        static GetPropertyFromIndex(k) {
            return f[k]
        }
        static GetPropertyIndexFromName(k) {
            return f.indexOf(k)
        }
        static GetPairPropertyFromIndex(k) {
            return a[k]
        }
        static GetSinglePropertyFromIndex(k) {
            return d[k]
        }
        static GetValuePropertyFromIndex(k) {
            return c[k]
        }
        static GetPairProperties(k) {
            return h[k]
        }
        static GetRealProperties(k) {
            return e.IsString(k) ?
                g[k] : g[f[k]]
        }
        static IsPairId(k) {
            return !!h[k]
        }
        static IsColorId(k) {
            return "offsetColor" === k
        }
        static IsAngleId(k) {
            return "offsetAngle" === k
        }
        static IsOpacityId(k) {
            return "offsetOpacity" === k
        }
        static IsValueId(k) {
            return "value" === k
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = new Map;
    b.Config = class {
        constructor() {}
        static GetPropertyTracksConfig(d, c, f, h, g, k) {
            0 === a.size && this._CreateConfigObjects();
            var m = b.PropertyTypes.Pick(d);
            m = a.get(m);
            e.IsFiniteNumber(d) && (d = b.Maps.GetPropertyFromIndex(d));
            return this._GetConfig(m, d, c, f, h, g, k)
        }
        static TransformValue(d, c) {
            return e.Behaviors.Tween.GetPropertyTracksConfig(d).valueGetter(c)
        }
        static _CreateConfigObjects() {
            const d = b.PropertyTypes,
                c = b.ValueGetters;
            this._AddConfigObject(d.PAIR,
                this._GetPairConfig, c._GetPropertyValue);
            this._AddConfigObject(d.COLOR, this._GetColorConfig, c._GetColorPropertyValue);
            this._AddConfigObject(d.ANGLE, this._GetAngleConfig, c._GetPropertyAngleValue);
            this._AddConfigObject(d.VALUE, this._GetValueConfig, c._GetPropertyValue);
            this._AddConfigObject(d.OTHER, this._GetCommonConfig, c._GetPropertyValue)
        }
        static _AddConfigObject(d, c, f) {
            a.set(d, this._CreateConfigObject(d, c, f))
        }
        static _CreateConfigObject(d, c, f) {
            return {
                name: d,
                configFunc: c,
                valueGetter: f
            }
        }
        static _GetConfig(d,
            c, f, h, g, k, m) {
            return d.configFunc(c, d.valueGetter(f), d.valueGetter(h), g, k, m)
        }
        static _GetPairConfig(d, c, f, h, g, k) {
            return b.Maps.GetPairProperties(d).map((m, p) => ({
                sourceId: "world-instance",
                property: m,
                type: "float",
                valueType: "numeric",
                startValue: c[p],
                endValue: f[p],
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            }))
        }
        static _GetColorConfig(d, c, f, h, g, k) {
            return e.Plugins.Text && k.GetPlugin() instanceof e.Plugins.Text ? {
                sourceId: "plugin",
                sourceArgs: [7],
                property: "color",
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            } : {
                sourceId: "world-instance",
                property: d,
                type: "color",
                valueType: "color",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            }
        }
        static _GetAngleConfig(d, c, f, h, g, k) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "angle",
                valueType: "angle",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            }
        }
        static _GetCommonConfig(d, c, f, h, g, k) {
            return {
                sourceId: "world-instance",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            }
        }
        static _GetValueConfig(d, c, f, h, g, k) {
            return {
                sourceId: "value",
                property: d,
                type: "float",
                valueType: "numeric",
                startValue: c,
                endValue: f,
                ease: b.Maps.GetEaseFromIndex(h),
                resultMode: g
            }
        }
    }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = Object.assign({}, {
            resultMode: "absolute"
        }, {
            tags: "",
            property: "",
            time: 0,
            ease: 0,
            releaseOnComplete: 0,
            loop: !1,
            pingPong: !1
        }),
        d = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: 0,
            endValue: 0
        }),
        c = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0],
            endValue: [0, 0]
        }),
        f = Object.assign({}, a, {
            initialValueMode: "current-state",
            startValue: [0, 0, 0],
            endValue: [0, 0, 0]
        }),
        h = Object.assign({}, d, {
            initialValueMode: "start-value"
        });
    b.TweenArguments =
        class {
            constructor() {}
            static _SetCommonProperties(g, k, m, p, x, t, q) {
                g.tags = k;
                g.time = m;
                g.ease = p;
                g.releaseOnComplete = x;
                g.loop = t;
                g.pingPong = q
            }
            static OneProperty(g, k, m, p, x, t, q, r, y) {
                g = b.Maps.GetSinglePropertyFromIndex(m);
                m = b.Maps.IsColorId(g) ? f : d;
                this._SetCommonProperties(m, k, x, t, q, r, y);
                b.Maps.IsColorId(g) ? (f.endValue[0] = e.GetRValue(p), f.endValue[1] = e.GetGValue(p), f.endValue[2] = e.GetBValue(p), f.property = b.Maps.GetPropertyIndexFromName(g)) : b.Maps.IsOpacityId(g) ? d.endValue = p / 100 : d.endValue = p;
                m.property = b.Maps.GetPropertyIndexFromName(g);
                return m
            }
            static TwoProperties(g, k, m, p, x, t, q, r, y, v) {
                this._SetCommonProperties(c, k, t, q, r, y, v);
                g = b.Maps.GetPairPropertyFromIndex(m);
                c.endValue[0] = p;
                c.endValue[1] = x;
                c.property = b.Maps.GetPropertyIndexFromName(g);
                return c
            }
            static ValueProperty(g, k, m, p, x, t, q, r, y) {
                this._SetCommonProperties(h, k, x, t, q, r, y);
                h.startValue = m;
                h.endValue = p;
                h.property = b.Maps.GetPropertyIndexFromName("value");
                return h
            }
        }
} {
    "use strict";
    const e = self.C3,
        b = e.Behaviors.Tween,
        a = [];
    b.PropertyTypes = class {
        constructor() {}
        static Pick(d) {
            0 === a.length && (a.push({
                checkFunc: b.Maps.IsPairId,
                result: this.PAIR
            }), a.push({
                checkFunc: b.Maps.IsColorId,
                result: this.COLOR
            }), a.push({
                checkFunc: b.Maps.IsAngleId,
                result: this.ANGLE
            }), a.push({
                checkFunc: b.Maps.IsValueId,
                result: this.VALUE
            }), a.push({
                checkFunc: () => !0,
                result: this.OTHER
            }));
            e.IsFiniteNumber(d) && (d = e.Behaviors.Tween.Maps.GetPropertyFromIndex(d));
            for(const c of a)
                if(c.checkFunc(d)) return c.result
        }
        static get PAIR() {
            return "pair"
        }
        static get COLOR() {
            return "color"
        }
        static get ANGLE() {
            return "angle"
        }
        static get VALUE() {
            return "value"
        }
        static get OTHER() {
            return "other"
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Tween.ValueGetters = class {
        constructor() {}
        static _GetPropertyAngleValue(b) {
            b = e.toRadians(parseFloat(b));
            return e.clampAngle(b)
        }
        static _GetColorPropertyValue(b) {
            return b.slice(0)
        }
        static _GetPropertyValue(b) {
            return b
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Sin = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Sin.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance,
        d = 2 * Math.PI,
        c = Math.PI / 2,
        f = 3 * Math.PI / 2,
        h = [0, 1, 8, 3, 4, 2, 5, 6, 9, 7];
    e.Behaviors.Sin.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(p, x) {
            super(p);
            this._mag = this._period = this._wave = this._movement = this._i = 0;
            this._isEnabled = !0;
            this._ratio = this._lastKnownValue2 = this._lastKnownValue = this._initialValue2 = this._initialValue = this._magnitudeRandom = this._periodOffsetRandom = this._periodRandom = this._baseMag = this._basePeriodOffset = this._basePeriod =
                0;
            x && (this._movement = h[x[0]], this._wave = x[1], this._periodRandom = this._runtime.Random() * x[3], this._basePeriod = x[2], this._period = x[2], this._period += this._periodRandom, this._basePeriodOffset = x[4], 0 !== this._period && (this._periodOffsetRandom = this._runtime.Random() * x[5], this._i = x[4] / this._period * d, this._i += this._periodOffsetRandom / this._period * d), this._magnitudeRandom = this._runtime.Random() * x[7], this._baseMag = x[6], this._mag = x[6], this._mag += this._magnitudeRandom, this._isEnabled = !!x[8]);
            5 === this._movement &&
                (this._mag = e.toRadians(this._mag));
            this.Init();
            this._isEnabled && this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                i: this._i,
                e: this._isEnabled,
                mv: this._movement,
                w: this._wave,
                p: this._period,
                mag: this._mag,
                iv: this._initialValue,
                iv2: this._initialValue2,
                r: this._ratio,
                lkv: this._lastKnownValue,
                lkv2: this._lastKnownValue2
            }
        }
        LoadFromJson(p) {
            this._i = p.i;
            this._SetEnabled(p.e);
            this._movement = p.mv;
            this._wave = p.w;
            this._period = p.p;
            this._mag = p.mag;
            this._initialValue = p.iv;
            this._initialValue2 = p.iv2;
            this._ratio =
                p.r;
            this._lastKnownValue = p.lkv;
            this._lastKnownValue2 = p.lkv2
        }
        Init() {
            const p = this._inst.GetWorldInfo();
            switch(this._movement) {
                case 0:
                    this._initialValue = p.GetX();
                    break;
                case 1:
                    this._initialValue = p.GetY();
                    break;
                case 2:
                    this._initialValue = p.GetWidth();
                    this._ratio = p.GetHeight() / p.GetWidth();
                    break;
                case 3:
                    this._initialValue = p.GetWidth();
                    break;
                case 4:
                    this._initialValue = p.GetHeight();
                    break;
                case 5:
                    this._initialValue = p.GetAngle();
                    break;
                case 6:
                    this._initialValue = p.GetOpacity();
                    break;
                case 7:
                    this._initialValue = 0;
                    break;
                case 8:
                    this._initialValue = p.GetX();
                    this._initialValue2 = p.GetY();
                    break;
                case 9:
                    this._initialValue = p.GetZElevation()
            }
            this._lastKnownValue = this._initialValue;
            this._lastKnownValue2 = this._initialValue2
        }
        WaveFunc(p) {
            p %= d;
            switch(this._wave) {
                case 0:
                    return Math.sin(p);
                case 1:
                    return p <= c ? p / c : p <= f ? 1 - 2 * (p - c) / Math.PI : (p - f) / c - 1;
                case 2:
                    return 2 * p / d - 1;
                case 3:
                    return -2 * p / d + 1;
                case 4:
                    return p < Math.PI ? -1 : 1
            }
            return 0
        }
        Tick() {
            const p = this._runtime.GetDt(this._inst);
            this._isEnabled && 0 !== p && (this._i = 0 === this._period ? 0 :
                (this._i + p / this._period * d) % d, this._UpdateFromPhase())
        }
        _UpdateFromPhase() {
            const p = this._inst.GetWorldInfo();
            switch(this._movement) {
                case 0:
                    p.GetX() !== this._lastKnownValue && (this._initialValue += p.GetX() - this._lastKnownValue);
                    p.SetX(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = p.GetX();
                    break;
                case 1:
                    p.GetY() !== this._lastKnownValue && (this._initialValue += p.GetY() - this._lastKnownValue);
                    p.SetY(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = p.GetY();
                    break;
                case 2:
                    p.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    p.SetHeight(p.GetWidth() * this._ratio);
                    break;
                case 3:
                    p.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    break;
                case 4:
                    p.SetHeight(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    break;
                case 5:
                    p.GetAngle() !== this._lastKnownValue && (this._initialValue = e.clampAngle(this._initialValue + (p.GetAngle() - this._lastKnownValue)));
                    p.SetAngle(this._initialValue + this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = p.GetAngle();
                    break;
                case 6:
                    p.SetOpacity(this._initialValue + this.WaveFunc(this._i) * this._mag / 100);
                    break;
                case 8:
                    p.GetX() !== this._lastKnownValue && (this._initialValue += p.GetX() - this._lastKnownValue);
                    p.GetY() !== this._lastKnownValue2 && (this._initialValue2 += p.GetY() - this._lastKnownValue2);
                    p.SetX(this._initialValue + Math.cos(p.GetAngle()) * this.WaveFunc(this._i) * this._mag);
                    p.SetY(this._initialValue2 + Math.sin(p.GetAngle()) * this.WaveFunc(this._i) * this._mag);
                    this._lastKnownValue = p.GetX();
                    this._lastKnownValue2 = p.GetY();
                    break;
                case 9:
                    p.SetZElevation(this._initialValue + this.WaveFunc(this._i) * this._mag)
            }
            p.SetBboxChanged()
        }
        _OnSpriteFrameChanged(p, x) {}
        _SetPeriod(p) {
            this._period = p
        }
        _GetPeriod() {
            return this._period
        }
        _SetMagnitude(p) {
            this._mag = p
        }
        _SetMagnitude_ConvertAngle(p) {
            5 === this._movement && (p = e.toRadians(p));
            this._SetMagnitude(p)
        }
        _GetMagnitude() {
            return this._mag
        }
        _GetMagnitude_ConvertAngle() {
            let p = this._GetMagnitude();
            5 === this._movement && (p = e.toDegrees(p));
            return p
        }
        _SetMovement(p) {
            5 === this._movement && 5 !== p && (this._mag = e.toDegrees(this._mag));
            this._movement = p;
            this.Init()
        }
        _GetMovement() {
            return this._movement
        }
        _SetWave(p) {
            this._wave = p
        }
        _GetWave() {
            return this._wave
        }
        _SetPhase(p) {
            this._i = e.clamp(p, 0, 2 * Math.PI);
            this._UpdateFromPhase()
        }
        _GetPhase() {
            return this._i
        }
        _SetEnabled(p) {
            (this._isEnabled = !!p) ? this._StartTicking(): this._StopTicking()
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetPropertyValueByIndex(p) {
            switch(p) {
                case 0:
                    return this._movement;
                case 1:
                    return this._wave;
                case 2:
                    return this._basePeriod;
                case 6:
                    return this._baseMag;
                case 8:
                    return this._isEnabled
            }
        }
        SetPropertyValueByIndex(p,
            x) {
            switch(p) {
                case 0:
                    this._movement = h[x];
                    this.Init();
                    break;
                case 1:
                    this._wave = x;
                    break;
                case 2:
                    this._basePeriod = x;
                    this._period = this._basePeriod + this._periodRandom;
                    this._isEnabled || (0 !== this._period ? (this._i = this._basePeriodOffset / this._period * d, this._i += this._periodOffsetRandom / this._period * d) : this._i = 0);
                    break;
                case 6:
                    this._baseMag = x;
                    this._mag = this._baseMag + this._magnitudeRandom;
                    5 === this._movement && (this._mag = e.toRadians(this._mag));
                    break;
                case 8:
                    this._isEnabled = !!x
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" +
                    this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.sin.properties.enabled.name",
                    value: this._IsEnabled(),
                    onedit: p => this._SetEnabled(p)
                }, {
                    name: "behaviors.sin.properties.period.name",
                    value: this._GetPeriod(),
                    onedit: p => this._SetPeriod(p)
                }, {
                    name: "behaviors.sin.properties.magnitude.name",
                    value: this._GetMagnitude_ConvertAngle(),
                    onedit: p => this._SetMagnitude_ConvertAngle(p)
                }, {
                    name: "behaviors.sin.debugger.value",
                    value: this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
                }]
            }]
        }
        GetScriptInterfaceClass() {
            return self.ISineBehaviorInstance
        }
    };
    const g = new WeakMap,
        k = "horizontal vertical size width height angle opacity value-only forwards-backwards z-elevation".split(" "),
        m = ["sine", "triangle", "sawtooth", "reverse-sawtooth", "square"];
    self.ISineBehaviorInstance = class extends a {
        constructor() {
            super();
            g.set(this, a._GetInitInst().GetSdkInstance())
        }
        set period(p) {
            b.RequireFiniteNumber(p);
            g.get(this)._SetPeriod(p)
        }
        get period() {
            return g.get(this)._GetPeriod()
        }
        set magnitude(p) {
            b.RequireFiniteNumber(p);
            g.get(this)._SetMagnitude(p)
        }
        get magnitude() {
            return g.get(this)._GetMagnitude()
        }
        set phase(p) {
            g.get(this)._SetPhase(p)
        }
        get phase() {
            return g.get(this)._GetPhase()
        }
        set movement(p) {
            b.RequireString(p);
            p = k.indexOf(p);
            if(-1 === p) throw Error("invalid movement");
            g.get(this)._SetMovement(p)
        }
        get movement() {
            return k[g.get(this)._GetMovement()]
        }
        set wave(p) {
            b.RequireString(p);
            p = m.indexOf(p);
            if(-1 === p) throw Error("invalid wave");
            g.get(this)._SetWave(p)
        }
        get wave() {
            return m[g.get(this)._GetWave()]
        }
        get value() {
            const p = g.get(this);
            return p.WaveFunc(p._GetPhase()) * p._GetMagnitude()
        }
        updateInitialState() {
            g.get(this).Init()
        }
        set isEnabled(p) {
            g.get(this)._SetEnabled(!!p)
        }
        get isEnabled() {
            return g.get(this)._IsEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Sin.Cnds = {
        IsEnabled() {
            return this._IsEnabled()
        },
        CompareMovement(b) {
            return this._GetMovement() === b
        },
        ComparePeriod(b, a) {
            return e.compare(this._GetPeriod(), b, a)
        },
        CompareMagnitude(b, a) {
            return e.compare(this._GetMagnitude_ConvertAngle(), b, a)
        },
        CompareWave(b) {
            return this._GetWave() === b
        }
    }
}
"use strict";
self.C3.Behaviors.Sin.Acts = {
    SetEnabled(e) {
        this._SetEnabled(0 !== e)
    },
    SetPeriod(e) {
        this._SetPeriod(e)
    },
    SetMagnitude(e) {
        this._SetMagnitude_ConvertAngle(e)
    },
    SetMovement(e) {
        this._SetMovement(e)
    },
    SetWave(e) {
        this._wave = e
    },
    SetPhase(e) {
        const b = 2 * Math.PI;
        this._SetPhase(e * b % b)
    },
    UpdateInitialState() {
        this.Init()
    }
};
"use strict";
self.C3.Behaviors.Sin.Exps = {
    CyclePosition() {
        return this._GetPhase() / (2 * Math.PI)
    },
    Period() {
        return this._GetPeriod()
    },
    Magnitude() {
        return this._GetMagnitude_ConvertAngle()
    },
    Value() {
        return this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Fade.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(b, a) {
            super(b);
            this._fadeOutTime = this._waitTime = this._fadeInTime = 0;
            this._activeAtStart = this._destroy = !0;
            this._setMaxOpacity = !1;
            this._stage = 0;
            this._stageTime = e.New(e.KahanSum);
            this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1;
            a && (this._fadeInTime = a[0], this._waitTime = a[1], this._fadeOutTime = a[2], this._destroy = !!a[3], this._stage = (this._activeAtStart = !!a[4]) ? 0 : 3);
            this._activeAtStart && (0 ===
                this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender()));
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                fit: this._fadeInTime,
                wt: this._waitTime,
                fot: this._fadeOutTime,
                d: this._destroy,
                s: this._stage,
                st: this._stageTime.Get(),
                mo: this._maxOpacity
            }
        }
        LoadFromJson(b) {
            this._fadeInTime = b.fit;
            this._waitTime = b.wt;
            this._fadeOutTime = b.fot;
            this._destroy = b.d;
            this._stage = b.s;
            this._stageTime.Set(b.st);
            this._maxOpacity =
                b.mo
        }
        Tick() {
            var b = this._runtime.GetDt(this._inst);
            this._stageTime.Add(b);
            b = this._inst.GetWorldInfo();
            0 === this._stage && (b.SetOpacity(this._stageTime.Get() / this._fadeInTime * this._maxOpacity), this._runtime.UpdateRender(), b.GetOpacity() >= this._maxOpacity && (b.SetOpacity(this._maxOpacity), this._stage = 1, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnFadeInEnd)));
            1 === this._stage && this._stageTime.Get() >= this._waitTime && (this._stage = 2, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnWaitEnd));
            2 === this._stage && 0 !== this._fadeOutTime && (b.SetOpacity(this._maxOpacity - this._stageTime.Get() / this._fadeOutTime * this._maxOpacity), this._runtime.UpdateRender(), 0 >= b.GetOpacity() && (this._stage = 3, this._stageTime.Reset(), this.Trigger(e.Behaviors.Fade.Cnds.OnFadeOutEnd), this._destroy && this._runtime.DestroyInstance(this._inst)))
        }
        Start() {
            this._stage = 0;
            this._stageTime.Reset();
            0 === this._fadeInTime ? (this._stage = 1, 0 === this._waitTime && (this._stage = 2)) : (this._inst.GetWorldInfo().SetOpacity(0), this._runtime.UpdateRender())
        }
        GetPropertyValueByIndex(b) {
            switch(b) {
                case 0:
                    return this._fadeInTime;
                case 1:
                    return this._waitTime;
                case 2:
                    return this._fadeOutTime;
                case 3:
                    return this._destroy
            }
        }
        SetPropertyValueByIndex(b, a) {
            switch(b) {
                case 0:
                    this._fadeInTime = a;
                    break;
                case 1:
                    this._waitTime = a;
                    break;
                case 2:
                    this._fadeOutTime = a;
                    break;
                case 3:
                    this._destroy = !!a
            }
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                    name: "behaviors.fade.properties.fade-in-time.name",
                    value: this._fadeInTime,
                    onedit: b => this._fadeInTime = b
                }, {
                    name: "behaviors.fade.properties.wait-time.name",
                    value: this._waitTime,
                    onedit: b => this._waitTime = b
                }, {
                    name: "behaviors.fade.properties.fade-out-time.name",
                    value: this._fadeOutTime,
                    onedit: b => this._fadeOutTime = b
                }, {
                    name: "behaviors.fade.debugger.stage",
                    value: ["behaviors.fade.debugger." + ["fade-in", "wait", "fade-out", "done"][this._stage]]
                }]
            }]
        }
    }
}
"use strict";
self.C3.Behaviors.Fade.Cnds = {
    OnFadeOutEnd() {
        return !0
    },
    OnFadeInEnd() {
        return !0
    },
    OnWaitEnd() {
        return !0
    }
};
"use strict";
self.C3.Behaviors.Fade.Acts = {
    StartFade() {
        this._activeAtStart || this._setMaxOpacity || (this._maxOpacity = this._inst.GetWorldInfo().GetOpacity() || 1, this._setMaxOpacity = !0);
        3 === this._stage && this.Start()
    },
    RestartFade() {
        this.Start()
    },
    SetFadeInTime(e) {
        0 > e && (e = 0);
        this._fadeInTime = e
    },
    SetWaitTime(e) {
        0 > e && (e = 0);
        this._waitTime = e
    },
    SetFadeOutTime(e) {
        0 > e && (e = 0);
        this._fadeOutTime = e
    }
};
"use strict";
self.C3.Behaviors.Fade.Exps = {
    FadeInTime() {
        return this._fadeInTime
    },
    WaitTime() {
        return this._waitTime
    },
    FadeOutTime() {
        return this._fadeOutTime
    }
}; {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = self.C3X,
        a = self.IBehaviorInstance;
    e.Behaviors.Bullet.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(c, f) {
            super(c);
            c = this.GetWorldInfo();
            this._g = this._acc = this._speed = 0;
            this._isStepping = this._setAngle = this._bounceOffSolid = !1;
            this._isEnabled = !0;
            this._dy = this._dx = 0;
            this._lastX = c.GetX();
            this._lastY = c.GetY();
            this._lastKnownAngle = c.GetAngle();
            this._travelled = 0;
            this._stepSize = Math.min(Math.abs(c.GetWidth()), Math.abs(c.GetHeight()) / 2);
            this._stopStepping = !1;
            f &&
                (this._speed = f[0], this._acc = f[1], this._g = f[2], this._bounceOffSolid = !!f[3], this._setAngle = !!f[4], this._isStepping = !!f[5], this._isEnabled = !!f[6]);
            f = c.GetAngle();
            this._dx = Math.cos(f) * this._speed;
            this._dy = Math.sin(f) * this._speed;
            this._isEnabled && (this._StartTicking(), this._bounceOffSolid && this._StartPostTicking())
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            const c = {
                dx: this._dx,
                dy: this._dy,
                lx: this._lastX,
                ly: this._lastY,
                lka: this._lastKnownAngle,
                t: this._travelled
            };
            0 !== this._acc && (c.acc = this._acc);
            0 !== this._g &&
                (c.g = this._g);
            this._isStepping && (c.st = this._isStepping);
            this._isEnabled || (c.e = this._isEnabled);
            this._bounceOffSolid && (c.bos = this._bounceOffSolid);
            this._setAngle && (c.sa = this._setAngle);
            return c
        }
        LoadFromJson(c) {
            this._dx = c.dx;
            this._dy = c.dy;
            this._lastX = c.lx;
            this._lastY = c.ly;
            this._lastKnownAngle = c.lka;
            this._travelled = c.t;
            this._acc = c.hasOwnProperty("acc") ? c.acc : 0;
            this._g = c.hasOwnProperty("g") ? c.g : 0;
            this._isStepping = c.hasOwnProperty("st") ? c.st : !1;
            this._bounceOffSolid = c.hasOwnProperty("bos") ? c.bos : !1;
            this._setAngle =
                c.hasOwnProperty("sa") ? c.sa : !1;
            this._SetEnabled(c.hasOwnProperty("e") ? c.e : !0)
        }
        Tick() {
            if(this._isEnabled) {
                var c = this._runtime.GetDt(this._inst),
                    f = this._inst.GetWorldInfo();
                if(f.GetAngle() !== this._lastKnownAngle) {
                    var h = f.GetAngle();
                    if(this._setAngle) {
                        var g = e.distanceTo(0, 0, this._dx, this._dy);
                        this._dx = Math.cos(h) * g;
                        this._dy = Math.sin(h) * g
                    }
                    this._lastKnownAngle = h
                }
                h = g = 0;
                if(0 !== this._acc) {
                    let k = e.distanceTo(0, 0, this._dx, this._dy),
                        m;
                    m = 0 === this._dx && 0 === this._dy ? f.GetAngle() : e.angleTo(0, 0, this._dx, this._dy);
                    k += this._acc * c;
                    g = Math.cos(m) * this._acc;
                    h = Math.sin(m) * this._acc;
                    0 > k && (h = g = k = 0);
                    this._dx = Math.cos(m) * k;
                    this._dy = Math.sin(m) * k
                }
                0 !== this._g && (this._dy += this._g * c, h += this._g);
                this._lastX = f.GetX();
                this._lastY = f.GetY();
                if(0 !== this._dx || 0 !== this._dy) g = this._dx * c + .5 * g * c * c, c = this._dy * c + .5 * h * c * c, h = e.distanceTo(0, 0, g, c), this._MoveBy(g, c, h), this._travelled += h, !this._setAngle || 0 === g && 0 === c || (c = e.angleTo(0, 0, g, c), f.SetAngle(c), this._lastKnownAngle = f.GetAngle()), f.SetBboxChanged()
            }
        }
        _MoveBy(c, f, h) {
            const g = this.GetWorldInfo();
            if(!this._isStepping || h <= this._stepSize) g.OffsetXY(c, f), g.SetBboxChanged(), this._isStepping && this.Trigger(e.Behaviors.Bullet.Cnds.OnStep);
            else {
                this._stopStepping = !1;
                var k = g.GetX(),
                    m = g.GetY(),
                    p = k + c,
                    x = m + f;
                f = e.angleTo(0, 0, c, f);
                c = Math.cos(f) * this._stepSize;
                f = Math.sin(f) * this._stepSize;
                h = Math.floor(h / this._stepSize);
                for(let t = 1; t <= h; ++t)
                    if(g.SetXY(k + c * t, m + f * t), g.SetBboxChanged(), this.Trigger(e.Behaviors.Bullet.Cnds.OnStep), this._inst.IsDestroyed() || this._stopStepping) return;
                g.SetXY(p, x);
                g.SetBboxChanged();
                this.Trigger(e.Behaviors.Bullet.Cnds.OnStep)
            }
        }
        PostTick() {
            if(this._isEnabled && this._bounceOffSolid && (0 !== this._dx || 0 !== this._dy)) {
                var c = this._runtime.GetDt(this._inst),
                    f = this._inst.GetWorldInfo(),
                    h = this._runtime.GetCollisionEngine(),
                    g = h.TestOverlapSolid(this._inst);
                if(g) {
                    h.RegisterCollision(this._inst, g);
                    g = e.distanceTo(0, 0, this._dx, this._dy);
                    const k = h.CalculateBounceAngle(this._inst, this._lastX, this._lastY);
                    this._dx = Math.cos(k) * g;
                    this._dy = Math.sin(k) * g;
                    f.OffsetXY(this._dx * c, this._dy * c);
                    f.SetBboxChanged();
                    this._setAngle && (f.SetAngle(k), this._lastKnownAngle = f.GetAngle(), f.SetBboxChanged());
                    h.PushOutSolid(this._inst, this._dx / g, this._dy / g, Math.max(2.5 * g * c, 30)) || h.PushOutSolidNearest(this._inst, 100)
                }
            }
        }
        GetPropertyValueByIndex(c) {
            switch(c) {
                case 0:
                    return this._GetSpeed();
                case 1:
                    return this._GetAcceleration();
                case 2:
                    return this._GetGravity();
                case 4:
                    return this._setAngle;
                case 5:
                    return this._isStepping;
                case 6:
                    return this._IsEnabled()
            }
        }
        SetPropertyValueByIndex(c, f) {
            switch(c) {
                case 0:
                    this._SetSpeed(f);
                    break;
                case 1:
                    this._acc =
                        f;
                    break;
                case 2:
                    this._g = f;
                    break;
                case 4:
                    this._setAngle = !!f;
                    break;
                case 5:
                    this._isStepping = !!f;
                    break;
                case 6:
                    this._SetEnabled(!!f)
            }
        }
        _SetSpeed(c) {
            const f = e.angleTo(0, 0, this._dx, this._dy);
            this._dx = Math.cos(f) * c;
            this._dy = Math.sin(f) * c
        }
        _GetSpeed() {
            return e.round6dp(e.distanceTo(0, 0, this._dx, this._dy))
        }
        _SetAcceleration(c) {
            this._acc = c
        }
        _GetAcceleration() {
            return this._acc
        }
        _SetGravity(c) {
            this._g = c
        }
        _GetGravity() {
            return this._g
        }
        _SetAngleOfMotion(c) {
            const f = e.distanceTo(0, 0, this._dx, this._dy);
            this._dx = Math.cos(c) *
                f;
            this._dy = Math.sin(c) * f
        }
        _GetAngleOfMotion() {
            return e.angleTo(0, 0, this._dx, this._dy)
        }
        _SetBounceOffSolids(c) {
            c = !!c;
            this._bounceOffSolid !== c && (this._bounceOffSolid = c, this._isEnabled && (this._bounceOffSolid ? this._StartPostTicking() : this._StopPostTicking()))
        }
        _IsBounceOffSolids() {
            return this._bounceOffSolid
        }
        _SetDistanceTravelled(c) {
            this._travelled = c
        }
        _GetDistanceTravelled() {
            return this._travelled
        }
        _SetEnabled(c) {
            (this._isEnabled = !!c) ? (this._StartTicking(), this._bounceOffSolid && this._StartPostTicking()) : (this._StopTicking(),
                this._StopPostTicking())
        }
        _IsEnabled() {
            return this._isEnabled
        }
        GetDebuggerProperties() {
            return [{
                title: "$" + this.GetBehaviorType().GetName(),
                properties: [{
                        name: "behaviors.bullet.debugger.vector-x",
                        value: this._dx,
                        onedit: c => this._dx = c
                    }, {
                        name: "behaviors.bullet.debugger.vector-y",
                        value: this._dy,
                        onedit: c => this._dy = c
                    }, {
                        name: "behaviors.bullet.properties.speed.name",
                        value: this._GetSpeed(),
                        onedit: c => this._SetSpeed(c)
                    }, {
                        name: "behaviors.bullet.debugger.angle-of-motion",
                        value: e.toDegrees(this._GetAngleOfMotion())
                    },
                    {
                        name: "behaviors.bullet.properties.gravity.name",
                        value: this._GetGravity(),
                        onedit: c => this._SetGravity(c)
                    }, {
                        name: "behaviors.bullet.properties.acceleration.name",
                        value: this._GetAcceleration(),
                        onedit: c => this._SetAcceleration(c)
                    }, {
                        name: "behaviors.bullet.debugger.distance-travelled",
                        value: this._GetDistanceTravelled()
                    }, {
                        name: "behaviors.bullet.properties.enabled.name",
                        value: this._IsEnabled(),
                        onedit: c => this._SetEnabled(c)
                    }
                ]
            }]
        }
        GetScriptInterfaceClass() {
            return self.IBulletBehaviorInstance
        }
    };
    const d = new WeakMap;
    self.IBulletBehaviorInstance = class extends a {
        constructor() {
            super();
            d.set(this, a._GetInitInst().GetSdkInstance())
        }
        get speed() {
            return d.get(this)._GetSpeed()
        }
        set speed(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetSpeed(c)
        }
        get acceleration() {
            return d.get(this)._GetAcceleration()
        }
        set acceleration(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAcceleration(c)
        }
        get gravity() {
            return d.get(this)._GetGravity()
        }
        set gravity(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetGravity(c)
        }
        get angleOfMotion() {
            return d.get(this)._GetAngleOfMotion()
        }
        set angleOfMotion(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetAngleOfMotion(c)
        }
        get bounceOffSolids() {
            return d.get(this)._IsBounceOffSolids()
        }
        set bounceOffSolids(c) {
            d.get(this)._SetBounceOffSolids(!!c)
        }
        get distanceTravelled() {
            return d.get(this)._GetDistanceTravelled()
        }
        set distanceTravelled(c) {
            b.RequireFiniteNumber(c);
            d.get(this)._SetDistanceTravelled(c)
        }
        get isEnabled() {
            return d.get(this)._IsEnabled()
        }
        set isEnabled(c) {
            d.get(this)._SetEnabled(c)
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Cnds = {
        CompareSpeed(b, a) {
            return e.compare(Math.sqrt(this._dx * this._dx + this._dy * this._dy), b, a)
        },
        CompareTravelled(b, a) {
            return e.compare(this._GetDistanceTravelled(), b, a)
        },
        OnStep() {
            return !0
        },
        IsEnabled() {
            return this._IsEnabled()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Acts = {
        SetSpeed(b) {
            this._SetSpeed(b)
        },
        SetAcceleration(b) {
            this._SetAcceleration(b)
        },
        SetGravity(b) {
            this._SetGravity(b)
        },
        SetAngleOfMotion(b) {
            this._SetAngleOfMotion(e.toRadians(b))
        },
        Bounce(b) {
            if(b && (b = b.GetFirstPicked(this._inst))) {
                var a = this._inst.GetWorldInfo(),
                    d = this._runtime.GetCollisionEngine(),
                    c = this._runtime.GetDt(this._inst),
                    f = e.distanceTo(0, 0, this._dx, this._dy),
                    h = d.CalculateBounceAngle(this._inst, this._lastX, this._lastY, b);
                this._dx = Math.cos(h) *
                    f;
                this._dy = Math.sin(h) * f;
                a.OffsetXY(this._dx * c, this._dy * c);
                a.SetBboxChanged();
                this._setAngle && (a.SetAngle(h), this._lastKnownAngle = a.GetAngle(), a.SetBboxChanged());
                0 !== f && (this._bounceOffSolid ? d.PushOutSolid(this._inst, this._dx / f, this._dy / f, Math.max(2.5 * f * c, 30)) || d.PushOutSolidNearest(this._inst, 100) : d.PushOut(this._inst, this._dx / f, this._dy / f, Math.max(2.5 * f * c, 30), b))
            }
        },
        SetBounceOffSolids(b) {
            this._SetBounceOffSolids(b)
        },
        SetDistanceTravelled(b) {
            this._SetDistanceTravelled(b)
        },
        SetEnabled(b) {
            this._SetEnabled(b)
        },
        StopStepping() {
            this._stopStepping = !0
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.Bullet.Exps = {
        Speed() {
            return this._GetSpeed()
        },
        Acceleration() {
            return this._GetAcceleration()
        },
        AngleOfMotion() {
            return e.toDegrees(this._GetAngleOfMotion())
        },
        DistanceTravelled() {
            return this._GetDistanceTravelled()
        },
        Gravity() {
            return this._GetGravity()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.wrap = class extends e.SDKBehaviorBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
    }
} {
    "use strict";
    const e = self.C3;
    e.Behaviors.wrap.Type = class extends e.SDKBehaviorTypeBase {
        constructor(b) {
            super(b)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    }
} {
    "use strict";
    const e = self.C3,
        b = new e.Rect;
    e.Behaviors.wrap.Instance = class extends e.SDKBehaviorInstanceBase {
        constructor(a, d) {
            super(a);
            this._mode = 0;
            d && (this._mode = d[0]);
            this._StartTicking()
        }
        Release() {
            super.Release()
        }
        SaveToJson() {
            return {
                m: this._mode
            }
        }
        LoadFromJson(a) {
            this._mode = a.m
        }
        Tick() {
            const a = this._inst.GetWorldInfo(),
                d = a.GetLayer(),
                c = d.GetLayout(),
                f = a.GetBoundingBox();
            0 === this._mode ? b.set(0, 0, c.GetWidth(), c.GetHeight()) : b.copy(d.GetViewport());
            f.getRight() < b.getLeft() ? (a.SetX(b.getRight() - 1 + (a.GetX() -
                f.getLeft())), a.SetBboxChanged()) : f.getLeft() > b.getRight() ? (a.SetX(b.getLeft() + 1 - (f.getRight() - a.GetX())), a.SetBboxChanged()) : f.getBottom() < b.getTop() ? (a.SetY(b.getBottom() - 1 + (a.GetY() - f.getTop())), a.SetBboxChanged()) : f.getTop() > b.getBottom() && (a.SetY(b.getTop() + 1 - (f.getBottom() - a.GetY())), a.SetBboxChanged())
        }
        GetPropertyValueByIndex(a) {
            switch(a) {
                case 0:
                    return this._mode
            }
        }
        SetPropertyValueByIndex(a, d) {
            switch(a) {
                case 0:
                    this._mode = d
            }
        }
    }
}
"use strict";
self.C3.Behaviors.wrap.Cnds = {};
"use strict";
self.C3.Behaviors.wrap.Acts = {};
"use strict";
self.C3.Behaviors.wrap.Exps = {}; {
    const e = self.C3;
    self.C3_GetObjectRefTable = function() {
        return [e.Plugins.Sprite, e.Behaviors.Physics, e.Behaviors.Pin, e.Behaviors.Timer, e.Plugins.Keyboard, e.Plugins.Audio, e.Behaviors.Anchor, e.Behaviors.Tween, e.Plugins.TiledBg, e.Plugins.Spritefont2, e.Behaviors.Sin, e.Plugins.DrawingCanvas, e.Plugins.Arr, e.Plugins.Mouse, e.Plugins.Particles, e.Plugins.Touch, e.Plugins.Browser, e.Behaviors.Fade, e.Behaviors.Bullet, e.Behaviors.wrap, e.Plugins.GM_SDK, e.Plugins.System.Cnds.IsGroupActive, e.Plugins.System.Cnds.OnLayoutStart,
            e.Behaviors.Physics.Acts.CreateLimitedRevoluteJoint, e.Behaviors.Pin.Acts.Pin, e.Plugins.Sprite.Cnds.CompareInstanceVar, e.Plugins.System.Cnds.CompareVar, e.Plugins.Sprite.Cnds.IsOverlapping, e.Plugins.System.Cnds.TriggerOnce, e.Behaviors.Physics.Acts.ApplyForce, e.Behaviors.Physics.Exps.VelocityX, e.Plugins.Sprite.Cnds.CompareX, e.Plugins.Sprite.Exps.ImagePointX, e.Plugins.Sprite.Acts.SetInstanceVar, e.Plugins.System.Exps.random, e.Plugins.Sprite.Cnds.CompareY, e.Plugins.Sprite.Exps.ImagePointY, e.Behaviors.Physics.Acts.SetAngularVelocity,
            e.Plugins.System.Exps.dt, e.Plugins.Sprite.Cnds.IsBetweenAngles, e.Plugins.System.Cnds.Else, e.Plugins.Sprite.Acts.AddInstanceVar, e.Plugins.Sprite.Acts.SubInstanceVar, e.Behaviors.Physics.Acts.ApplyForceToward, e.Plugins.System.Cnds.Compare, e.Plugins.Sprite.Exps.Angle, e.Plugins.Sprite.Acts.SetAngle, e.Plugins.System.Acts.SetVar, e.Behaviors.Physics.Acts.SetEnabled, e.Behaviors.Physics.Acts.ApplyTorqueToAngle, e.Behaviors.Physics.Acts.EnableCollisions, e.Behaviors.Timer.Acts.StartTimer, e.Behaviors.Physics.Acts.SetVelocity,
            e.Plugins.Sprite.Exps.X, e.Plugins.Sprite.Exps.Y, e.Behaviors.Timer.Cnds.IsTimerRunning, e.Plugins.Sprite.Acts.SetX, e.Plugins.Sprite.Acts.SetScale, e.Plugins.System.Exps.min, e.Plugins.System.Exps.max, e.Plugins.Sprite.Acts.SetPos, e.Plugins.Sprite.Cnds.OnCollision, e.Plugins.Sprite.Acts.ZMoveToObject, e.Plugins.System.Exps.anglediff, e.Plugins.Sprite.Cnds.OnCreated, e.Behaviors.Physics.Acts.SetImmovable, e.Plugins.Arr.Acts.SetSize, e.Plugins.Arr.Acts.Clear, e.Behaviors.Physics.Exps.VelocityY, e.Plugins.Sprite.Acts.SetAnimSpeed,
            e.Plugins.Sprite.Exps.AnimationFrameCount, e.Plugins.Sprite.Acts.SetVisible, e.Plugins.System.Acts.SetTimescale, e.Plugins.Audio.Acts.Play, e.Plugins.System.Acts.Wait, e.Plugins.System.Acts.RestartLayout, e.Behaviors.Timer.Cnds.OnTimer, e.Behaviors.Pin.Acts.PinByProperties, e.Plugins.Sprite.Acts.SetSize, e.Plugins.Sprite.Exps.Width, e.Plugins.Sprite.Exps.Height, e.Behaviors.Bullet.Acts.SetSpeed, e.Behaviors.Bullet.Exps.Speed, e.Behaviors.Physics.Exps.AngularVelocity, e.Plugins.Browser.Cnds.OnResize, e.Plugins.TiledBg.Acts.SetY,
            e.Plugins.System.Exps.viewporttop, e.Plugins.TiledBg.Acts.SetWidth, e.Plugins.System.Exps.viewportright, e.Plugins.System.Exps.viewportleft, e.Plugins.TiledBg.Acts.SetHeight, e.Plugins.System.Exps.viewportbottom, e.Plugins.TiledBg.Exps.Y, e.Plugins.TiledBg.Acts.SetX, e.Plugins.System.Exps.int, e.Plugins.System.Cnds.While, e.Plugins.System.Exps.choose, e.Plugins.TiledBg.Acts.Destroy, e.Plugins.System.Acts.SetLayerBackground, e.Plugins.System.Exps.rgbex255, e.Plugins.TiledBg.Acts.SetDefaultColor, e.Plugins.TiledBg.Acts.SetEffectParam,
            e.Plugins.Sprite.Acts.SetAnimFrame, e.Plugins.Sprite.Acts.SetDefaultColor, e.Plugins.Sprite.Exps.ColorValue, e.Plugins.Touch.Cnds.IsTouchingObject, e.Plugins.Keyboard.Cnds.IsKeyDown, e.Plugins.Sprite.Acts.Destroy, e.Plugins.Spritefont2.Cnds.CompareInstanceVar, e.Plugins.Spritefont2.Acts.SetVisible, e.Plugins.Audio.Cnds.IsTagPlaying, e.Plugins.Spritefont2.Acts.SetText, e.Plugins.System.Cnds.PickOverlappingPoint, e.Behaviors.Physics.Cnds.CompareVelocity, e.Plugins.System.Acts.SetObjectTimescale, e.Plugins.System.Cnds.ForEach,
            e.Plugins.Sprite.Acts.SetWidth, e.Plugins.Sprite.Acts.SetHeight, e.Plugins.System.Acts.AddVar, e.Plugins.Sprite.Exps.AnimationName, e.Plugins.System.Acts.ResetPersisted, e.Plugins.System.Acts.Scroll, e.Plugins.System.Exps.scrollx, e.Plugins.System.Exps.scrolly, e.Plugins.System.Acts.SetLayoutScale, e.Plugins.System.Exps.layoutscale, e.Plugins.Spritefont2.Acts.SetScale, e.Plugins.Spritefont2.Acts.SetDefaultColor, e.Behaviors.Tween.Cnds.IsPlaying, e.Plugins.System.Acts.SetLayerOpacity, e.Behaviors.Tween.Exps.Value,
            e.Behaviors.Tween.Cnds.OnTweensFinished, e.Plugins.Audio.Acts.Stop, e.Behaviors.Tween.Acts.TweenValue, e.Plugins.System.Acts.SetLayerVisible, e.Plugins.Sprite.Acts.MoveToLayer, e.Plugins.Spritefont2.Acts.MoveToLayer, e.Plugins.System.Acts.CreateObject, e.Plugins.TiledBg.Acts.SetSize, e.Behaviors.Tween.Acts.TweenOneProperty, e.Behaviors.Timer.Acts.StopTimer, e.Plugins.Sprite.Cnds.PickDistance, e.Plugins.System.Cnds.Every, e.Plugins.Arr.Acts.Push, e.Plugins.Arr.Acts.SetXY, e.Plugins.Arr.Exps.Width, e.Plugins.DrawingCanvas.Acts.ClearCanvas,
            e.Plugins.System.Exps.rgba, e.Plugins.Arr.Cnds.CompareSize, e.Plugins.Arr.Acts.Pop, e.Plugins.System.Cnds.Repeat, e.Plugins.System.Exps.loopindex, e.Plugins.Arr.Exps.At, e.Plugins.DrawingCanvas.Acts.ResetPoly, e.Plugins.DrawingCanvas.Acts.AddPolyPoint, e.Plugins.DrawingCanvas.Acts.FillPoly, e.Plugins.Sprite.Cnds.IsAnimPlaying, e.Plugins.Sprite.Acts.MoveToTop, e.Plugins.System.Exps.len, e.Plugins.Particles.Acts.Destroy, e.Behaviors.Physics.Acts.SetFriction, e.Plugins.Sprite.Acts.SetY, e.Plugins.Sprite.Acts.SetAnim,
            e.Plugins.Sprite.Acts.Spawn, e.Plugins.Sprite.Exps.LayerName, e.Behaviors.Pin.Acts.PinByImagePoint, e.Behaviors.Physics.Acts.SetWorldGravity, e.Plugins.TiledBg.Exps.Width, e.Plugins.Audio.Acts.SetPlaybackRate, e.Plugins.Sprite.Acts.SetCollisions, e.Plugins.Sprite.Exps.AnimationFrame, e.Behaviors.Tween.Acts.TweenTwoProperties, e.Behaviors.Sin.Acts.SetEnabled, e.Behaviors.Sin.Cnds.IsEnabled, e.Plugins.System.Exps.anglelerp, e.Plugins.Touch.Cnds.OnTouchObject, e.Plugins.Browser.Acts.GoToURLWindow, e.Plugins.Sprite.Cnds.IsVisible,
            e.Plugins.Audio.Acts.SetSilent, e.Plugins.Touch.Cnds.OnTouchEnd, e.Plugins.Sprite.Cnds.CompareFrame, e.Plugins.GM_SDK.Acts.ShowAd, e.Plugins.System.Cnds.PickAll, e.Plugins.Audio.Acts.StopAll, e.Plugins.System.Acts.ResetGlobals, e.Behaviors.Tween.Cnds.IsAnyPlaying, e.Plugins.Audio.Acts.Seek, e.Behaviors.Fade.Acts.StartFade, e.Behaviors.Tween.Cnds.OnAnyTweensFinished, e.Plugins.Mouse.Cnds.IsOverObject, e.Plugins.Sprite.Cnds.OnDestroyed, e.Plugins.System.Cnds.EveryTick, e.Plugins.Sprite.Acts.StopAnim, e.Plugins.Browser.Acts.ExecJs,
            e.Plugins.Mouse.Acts.SetCursor, e.Plugins.System.Acts.GoToLayout, e.Plugins.GM_SDK.Cnds.PauseGame, e.Plugins.GM_SDK.Cnds.ResumeGame
        ]
    };
    self.C3_JsPropNameTable = [{
            var: 0
        }, {
            adjust: 0
        }, {
            Physics: 0
        }, {
            Pin: 0
        }, {
            landPhysics: 0
        }, {
            which: 0
        }, {
            first: 0
        }, {
            angular: 0
        }, {
            jump: 0
        }, {
            moreJump: 0
        }, {
            Timer: 0
        }, {
            body: 0
        }, {
            Keyboard: 0
        }, {
            playerLine: 0
        }, {
            head: 0
        }, {
            headLine: 0
        }, {
            Audio: 0
        }, {
            tail: 0
        }, {
            hold: 0
        }, {
            handCollision: 0
        }, {
            who: 0
        }, {
            tin: 0
        }, {
            heavyBall: 0
        }, {
            groundCollision: 0
        }, {
            ballLine: 0
        }, {
            rightShoe: 0
        }, {
            hair: 0
        }, {
            rightShort: 0
        }, {
            tshirt: 0
        }, {
            ballShadow: 0
        },
        {
            playerShadow: 0
        }, {
            snow: 0
        }, {
            Anchor: 0
        }, {
            Tween: 0
        }, {
            pause: 0
        }, {
            groundTile: 0
        }, {
            groundLine: 0
        }, {
            whiteLine: 0
        }, {
            TPG: 0
        }, {
            scoreBG: 0
        }, {
            fontWonder: 0
        }, {
            fenceTile: 0
        }, {
            grassTile: 0
        }, {
            Sine: 0
        }, {
            cloudTile: 0
        }, {
            buildingTile: 0
        }, {
            DrawingCanvas: 0
        }, {
            Array: 0
        }, {
            head3: 0
        }, {
            body3: 0
        }, {
            Mouse: 0
        }, {
            p3Collision: 0
        }, {
            p1Collision: 0
        }, {
            head2: 0
        }, {
            body2: 0
        }, {
            p2Collision: 0
        }, {
            head4: 0
        }, {
            body4: 0
        }, {
            p4Collision: 0
        }, {
            night: 0
        }, {
            starTile: 0
        }, {
            normalBall: 0
        }, {
            kamesBall: 0
        }, {
            snowParticle: 0
        }, {
            Touch: 0
        }, {
            buttonRight: 0
        }, {
            buttonLeft: 0
        }, {
            tutorial: 0
        }, {
            pauseButtons: 0
        },
        {
            Browser: 0
        }, {
            Fade: 0
        }, {
            fadeOut: 0
        }, {
            titleBG: 0
        }, {
            title: 0
        }, {
            cpu: 0
        }, {
            hover: 0
        }, {
            startButton: 0
        }, {
            moreButton: 0
        }, {
            startButton2: 0
        }, {
            hitfx: 0
        }, {
            basketText: 0
        }, {
            game_bg: 0
        }, {
            introtwporg: 0
        }, {
            play_intro_btn: 0
        }, {
            groundTileSnow: 0
        }, {
            buildingTile2: 0
        }, {
            buildingTile3: 0
        }, {
            smallBall: 0
        }, {
            startX: 0
        }, {
            titleChars: 0
        }, {
            groundTilePlaj: 0
        }, {
            seaTile: 0
        }, {
            mountain: 0
        }, {
            seaWhite: 0
        }, {
            have: 0
        }, {
            ready: 0
        }, {
            arm: 0
        }, {
            potaP: 0
        }, {
            potaP2: 0
        }, {
            potaSprite: 0
        }, {
            potaTiled: 0
        }, {
            scoreCollision: 0
        }, {
            arm2: 0
        }, {
            arm3: 0
        }, {
            arm4: 0
        }, {
            handCollision2: 0
        }, {
            handCollision3: 0
        },
        {
            handCollision4: 0
        }, {
            potaCollision: 0
        }, {
            potaBack: 0
        }, {
            potaShadow: 0
        }, {
            potaFile: 0
        }, {
            ballCol: 0
        }, {
            grassLineTile: 0
        }, {
            groundTileIndoor: 0
        }, {
            indoorBGTile: 0
        }, {
            indoorBGTile2: 0
        }, {
            font: 0
        }, {
            indoorBGTile3: 0
        }, {
            landPhysics2: 0
        }, {
            armBiz: 0
        }, {
            indoorTitle: 0
        }, {
            snowTile: 0
        }, {
            Bullet: 0
        }, {
            Wrap: 0
        }, {
            shark: 0
        }, {
            GameMonetizeSDK: 0
        }, {
            player: 0
        }, {
            skin: 0
        }, {
            tiles: 0
        }, {
            line: 0
        }, {
            balls: 0
        }, {
            startButtons: 0
        }, {
            groundPortrait: 0
        }, {
            upArrow: 0
        }, {
            speed: 0
        }, {
            angularMaxRND: 0
        }, {
            angularMinRND: 0
        }, {
            wooble: 0
        }, {
            angularSub: 0
        }, {
            snowSlip: 0
        }, {
            P1Control: 0
        }, {
            P2Control: 0
        },
        {
            p1Score: 0
        }, {
            p2Score: 0
        }, {
            goal: 0
        }, {
            CPU: 0
        }, {
            biz: 0
        }, {
            velX: 0
        }, {
            velAng: 0
        }, {
            ang: 0
        }, {
            team1: 0
        }, {
            team2: 0
        }, {
            screenWidth: 0
        }, {
            screenHeight: 0
        }, {
            rnd: 0
        }, {
            op: 0
        }, {
            i: 0
        }, {
            x0: 0
        }, {
            y0: 0
        }, {
            a0: 0
        }, {
            x1: 0
        }, {
            y1: 0
        }, {
            a1: 0
        }, {
            rndChar: 0
        }, {
            rndBall: 0
        }, {
            rndGoal: 0
        }, {
            rndPlace: 0
        }, {
            rndArm: 0
        }, {
            startText: 0
        }, {
            waitText: 0
        }, {
            meter: 0
        }, {
            menu: 0
        }, {
            adShowed: 0
        }
    ]
} {
    const e = self.C3;
    self.C3_ExpressionFuncs = [() => "P1", () => "head", () => -8, () => 8, () => 0, () => 1, b => {
            const a = b._GetNode(0);
            return () => 2 * a.ExpBehavior()
        }, b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(1)
        }, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar();
            return () => a(d.GetValue(), c.GetValue())
        }, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar();
            return () => -1 * a(d.GetValue(), c.GetValue())
        }, b => {
            const a = b._GetNode(0).GetVar();
            return () =>
                a.GetValue()
        }, b => {
            const a = b._GetNode(0).GetVar();
            return () => -1 * a.GetValue()
        }, b => {
            const a = b._GetNode(0);
            return () => a.ExpInstVar()
        }, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod();
            return () => e.lerp(a.ExpInstVar(), 0, d())
        }, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod();
            return () => e.lerp(a.ExpInstVar(), 0, 2 * d())
        }, () => "Control P1", () => 2, () => 10, b => {
            const a = b._GetNode(0);
            return () => a.ExpObject()
        }, () => 180, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject() + d.GetValue()
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject() - d.GetValue()
        }, () => -1, () => .1, () => "enablePota", b => {
            const a = b._GetNode(0),
                d = b._GetNode(1),
                c = b._GetNode(2).GetBoundMethod();
            return () => (60 - a.ExpObject()) * (d.ExpObject() / 160) * c(.9, 1.1)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1),
                c = b._GetNode(2).GetBoundMethod();
            return () => (-a.ExpObject() - 50) * (d.ExpObject() / 160) * c(.9, 1.1)
        }, () => "wait", () => .3, () => 100, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => -5 * (a.ExpObject() - d.ExpObject(1))
        },
        () => "Skin P1", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject(6)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2),
                f = b._GetNode(3);
            return () => a(d(.2, 1 - (c.ExpObject() - f.ExpObject()) / 150), 1)
        }, () => "Arm P1", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject("arm1")
        }, () => 125, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1),
                c = b._GetNode(2).GetBoundMethod();
            return () => e.lerp(a.ExpObject(), d.ExpObject(1), 10 * c())
        }, () => "P2", () => "Control P2", () => "Skin P2", () => "Arm P2", () => "P3",
        () => 3, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3);
            return () => a(d.GetValue(), c.GetValue()) * f.ExpInstVar()
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3);
            return () => -1 * a(d.GetValue(), c.GetValue()) * f.ExpInstVar()
        }, () => "Control P3", () => 4, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a(d.ExpObject(), 180)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2),
                f = b._GetNode(3).GetBoundMethod();
            return () => (225 - a.ExpObject()) * (d(c.ExpObject(), 0) / 160) * f(.9, 1.1)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2),
                f = b._GetNode(3).GetBoundMethod();
            return () => (-a.ExpObject() - 50) * (d(c.ExpObject(), 0) / 160) * f(.9, 1.1)
        }, () => "Skin P3", () => "Arm P3", () => "P4", () => "Control P4", () => "Skin P4", () => "Arm P4", () => "Ball", b => {
            const a = b._GetNode(0);
            return () => 5 * a.ExpBehavior()
        },
        b => {
            const a = b._GetNode(0);
            return () => e.clamp(a.ExpBehavior(), -200, 200)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1),
                c = b._GetNode(2),
                f = b._GetNode(3);
            return () => a(.2, d.ExpInstVar_Family() - (c.ExpObject() - f.ExpObject()) / 150)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1),
                c = b._GetNode(2);
            return () => a(Math.abs(d.ExpBehavior()), 20) * (c.ExpObject() / 8)
        }, () => 15, () => 275, () => -10, () => "", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 5
        }, () => 144, () => 146, () => -5, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => a.ExpInstVar() * d.ExpBehavior()
        }, () => "Players",
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2).GetVar();
            return () => e.clamp(a.ExpBehavior(), -1 * d.GetValue(), c.GetValue())
        },
        b => {
            const a = b._GetNode(0);
            return () => e.clamp(a.ExpBehavior(), -100, 100)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpBehavior()
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => 3 * a.ExpBehavior() + d.ExpBehavior()
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => 3 * a.ExpBehavior() + d.GetValue()
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpBehavior() / 2
        }, () =>
        "General", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a("BG")
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a("BG") - d("BG") + 100
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1);
            return () => a("BG") - d.ExpObject() + 100
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a("BG") - 50
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a(d(8))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(0, 1, 2)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(149, 237, 244)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(255, 214, 159)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(254, 240, 220)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(89, 89, 198)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(119, 120, 210)
        }, () => "back", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(82, 82, 186)
        }, () => "middle", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(72, 68, 159)
        }, () =>
        "front", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(63, 52, 145)
        }, () => 5, () => 6, () => 7, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2);
            return () => a(d(c.ExpObject()))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod(),
                f = b._GetNode(3).GetBoundMethod();
            return () => a(d(138, 72, 54), c(255, 216, 60), f(39, 39, 39))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod(),
                f = b._GetNode(3).GetBoundMethod(),
                h = b._GetNode(4).GetBoundMethod();
            return () => a(d(255, 225, 188), c(143, 98, 87), f(246, 202, 159), h(214, 169, 124))
        }, () => "Control", b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetBoundMethod();
            return () => a.ExpObject() - d("UI")
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a("UI") - d("UI")
        }, () => "jump1", () => "jump2", () => "Goal", b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetVar();
            return () => a.GetValue() + d.GetValue()
        },
        b => {
            const a = b._GetNode(0);
            return () => 1.2 * a.ExpObject()
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() / 1.2
        }, () => .05, b => {
            const a = b._GetNode(0);
            return () => "rainBow" === a.ExpObject() ? 2 : 1
        }, () => "blink1", () => .2, () => .01, () => "blue", () => "red", b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetBoundMethod();
            return () => e.lerp(a(), d.ExpObject(), c())
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a()
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => e.lerp(a(), 1.5, d())
        },
        () => 1.2, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(255, 200, 37)
        }, () => "blink2", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(255, 255, 255)
        }, () => "End", () => "OPOutOver", () => "OP", b => {
            const a = b._GetNode(0);
            return () => a.ExpBehavior("OPOutOver")
        }, () => 60, () => "menu", () => "music", () => "sound", () => "Op", () => "Top", () => 26, () => 290, () => 27, () => 21, () => 55, () => -160, () => 39, () => "appear", () => 145, () => 85, () => 113, () => 204, () => "CPU", () => "nojump", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => .5 + a(-2, 2) /
                10
        }, () => "jump", () => "attack", () => .5, () => 90, () => 280, () => 360, () => .7, b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 2
        }, () => 355, () => "Trail", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 85
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 1
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(0, 0, 0, 0)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 3
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a() + 1
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(),
                0)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue(), 1)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2),
                f = b._GetNode(3).GetVar(),
                h = b._GetNode(4),
                g = b._GetNode(5).GetVar(),
                k = b._GetNode(6),
                m = b._GetNode(7).GetVar();
            return () => e.toDegrees(e.angleTo(a.ExpObject(d.GetValue() - 1, 0), c.ExpObject(f.GetValue() - 1, 1), h.ExpObject(g.GetValue(), 0), k.ExpObject(m.GetValue(), 1))) + 90
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue() +
                1, 0)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar();
            return () => a.ExpObject(d.GetValue() + 1, 1)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1).GetVar(),
                c = b._GetNode(2),
                f = b._GetNode(3).GetVar(),
                h = b._GetNode(4),
                g = b._GetNode(5).GetVar(),
                k = b._GetNode(6),
                m = b._GetNode(7).GetVar();
            return () => e.toDegrees(e.angleTo(a.ExpObject(d.GetValue(), 0), c.ExpObject(f.GetValue(), 1), h.ExpObject(g.GetValue() + 1, 0), k.ExpObject(m.GetValue() + 1, 1))) + 90
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar();
            return () => a.GetValue() - d.ExpInstVar_Family() * Math.cos(e.toRadians(c.GetValue())) * f.GetValue()
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar();
            return () => a.GetValue() - d.ExpInstVar_Family() * Math.sin(e.toRadians(c.GetValue())) * f.GetValue()
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar();
            return () => a.GetValue() + d.ExpInstVar_Family() * Math.cos(e.toRadians(c.GetValue())) * f.GetValue()
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar();
            return () => a.GetValue() + d.ExpInstVar_Family() * Math.sin(e.toRadians(c.GetValue())) * f.GetValue()
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetVar(),
                f = b._GetNode(3).GetVar();
            return () => a(100, 100, 100, d.ExpInstVar_Family() * c.GetValue() * f.GetValue())
        }, () => "rainBow", () => "7", () => "1", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(247, 237, 0)
        }, () => "2", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(237, 174, 1)
        }, () => "3", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(230, 0, 0)
        }, () => "4", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(133, 31, 228)
        }, () => "5", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(34, 207, 250)
        }, () => "6", b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(17, 138, 217)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(126, 224, 1)
        }, () => "Bonus", () => 95, b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => 2 * (a("Top") -
                d("Top"))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod();
            return () => a(-1, -1, -1, d(c(2, 2, 1, 0)))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod();
            return () => a(-1, d(c(3)))
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod(),
                f = b._GetNode(3).GetBoundMethod(),
                h = b._GetNode(4).GetBoundMethod(),
                g = b._GetNode(5).GetBoundMethod();
            return () =>
                0 === a.GetValue() ? d(-1, -1, c(1, 2)) : f(-1, -1, h(g(3)))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetBoundMethod();
            return () => a(0, d(c(3)))
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(0, 0, 1, 2, 3)
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => a.ExpObject() + (d.ExpInstVar() + 0 ? -3 : 3)
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "SHORT ARM"
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "LONG ARM"
        }, () => 200, () => 150, b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "SNOW"
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(230, 230, 230)
        }, () => -281492157629439, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(255, 228, 228)
        }, () => 400, () => 250, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(229, 229, 229)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(162, 226, 253)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(246, 252, 254)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(195, 148, 89)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(255, 229, 196)
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(100, 100, 100)
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "BIG HEAD"
        }, () => 1.5, b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - .001
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "SMALL HEAD"
        }, () => .6, b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "BUSINESS"
        }, () => "Animation 2", b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "HEAVY BALL"
        }, () => "Game", () => "heavy", b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "LIGHT BALL"
        }, () => "kames", b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "DOUBLE POINT"
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "LONG HOOP"
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 15
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 15
        }, () => 141, b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () => a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "SHORT HOOP"
        },
        b => {
            const a = b._GetNode(0).GetVar(),
                d = b._GetNode(1).GetBoundMethod(),
                c = b._GetNode(2).GetVar();
            return () =>
                a.GetValue() + (0 < d(c.GetValue()) ? " + " : "") + "LARGE HOOP"
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 6
        },
        b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => a.ExpObject() + (0 === d.ExpInstVar() ? 3 : -3)
        },
        b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() - 6
        }, () => "UI", b => {
            const a = b._GetNode(0).GetVar();
            return () => .5 + .3 * a.GetValue()
        }, () => -15, () => "refsoc", () => "show", () => -200, () => "Effect", () => "goal", () => 158, () => 30, () => "move", () => "move2", () => 450, () => "shrink", () => "bup", () => -6, () => "stopSine", b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1),
                c = b._GetNode(2).GetBoundMethod();
            return () => a(d.ExpObject(), 0, 10 * c())
        }, () => -3, () => "https://unblockedgamess.net", () => "NewWindow", () => 70, () => 205, () => "Menu", b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => a.ExpObject() - d.ExpObject()
        }, () => "size", () => -25, b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(60)
        }, () => "disappear", () => "OPOutMenu", b => {
            const a = b._GetNode(0);
            return () => a.ExpInstVar_Family()
        },
        b => {
            const a = b._GetNode(0);
            return () =>
                a.ExpBehavior("OPOutMenu")
        }, () => 1.15, b => {
            const a = b._GetNode(0),
                d = b._GetNode(1);
            return () => a.ExpObject() + d.ExpInstVar()
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod(),
                d = b._GetNode(1).GetBoundMethod();
            return () => a("Top") - d("Top")
        },
        b => {
            const a = b._GetNode(0).GetBoundMethod();
            return () => a(0, 10)
        }, () => "console.log('%cGM Version', 'background: #0098dc; color: #fff');", b => {
            const a = b._GetNode(0);
            return () => a.ExpObject() + 4
        }, () => .4
    ]
}
var module$str$c3runtime = {};
var module$str$__c3root__ = {};